(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('http'), require('https'), require('zlib'), require('stream'), require('util'), require('crypto'), require('url')) :
    typeof define === 'function' && define.amd ? define(['exports', 'http', 'https', 'zlib', 'stream', 'util', 'crypto', 'url'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.bundle = {}, global.require$$0$2, global.require$$1$1, global.require$$2$1, global.require$$0$1, global.require$$5, global.require$$7, global.require$$8));
})(this, (function (exports, require$$0$2, require$$1$1, require$$2$1, require$$0$1, require$$5, require$$7, require$$8) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$2);
    var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1$1);
    var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2$1);
    var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$1);
    var require$$5__default = /*#__PURE__*/_interopDefaultLegacy(require$$5);
    var require$$7__default = /*#__PURE__*/_interopDefaultLegacy(require$$7);
    var require$$8__default = /*#__PURE__*/_interopDefaultLegacy(require$$8);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getAugmentedNamespace(n) {
      var f = n.default;
    	if (typeof f == "function") {
    		var a = function () {
    			return f.apply(this, arguments);
    		};
    		a.prototype = f.prototype;
      } else a = {};
      Object.defineProperty(a, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var elliptic = {};

    var name = "elliptic";
    var version = "6.5.4";
    var description = "EC cryptography";
    var main = "lib/elliptic.js";
    var files = [
    	"lib"
    ];
    var scripts = {
    	lint: "eslint lib test",
    	"lint:fix": "npm run lint -- --fix",
    	unit: "istanbul test _mocha --reporter=spec test/index.js",
    	test: "npm run lint && npm run unit",
    	version: "grunt dist && git add dist/"
    };
    var repository = {
    	type: "git",
    	url: "git@github.com:indutny/elliptic"
    };
    var keywords = [
    	"EC",
    	"Elliptic",
    	"curve",
    	"Cryptography"
    ];
    var author = "Fedor Indutny <fedor@indutny.com>";
    var license = "MIT";
    var bugs = {
    	url: "https://github.com/indutny/elliptic/issues"
    };
    var homepage = "https://github.com/indutny/elliptic";
    var devDependencies = {
    	brfs: "^2.0.2",
    	coveralls: "^3.1.0",
    	eslint: "^7.6.0",
    	grunt: "^1.2.1",
    	"grunt-browserify": "^5.3.0",
    	"grunt-cli": "^1.3.2",
    	"grunt-contrib-connect": "^3.0.0",
    	"grunt-contrib-copy": "^1.0.0",
    	"grunt-contrib-uglify": "^5.0.0",
    	"grunt-mocha-istanbul": "^5.0.2",
    	"grunt-saucelabs": "^9.0.1",
    	istanbul: "^0.4.5",
    	mocha: "^8.0.1"
    };
    var dependencies = {
    	"bn.js": "^4.11.9",
    	brorand: "^1.1.0",
    	"hash.js": "^1.0.0",
    	"hmac-drbg": "^1.0.1",
    	inherits: "^2.0.4",
    	"minimalistic-assert": "^1.0.1",
    	"minimalistic-crypto-utils": "^1.0.1"
    };
    var require$$0 = {
    	name: name,
    	version: version,
    	description: description,
    	main: main,
    	files: files,
    	scripts: scripts,
    	repository: repository,
    	keywords: keywords,
    	author: author,
    	license: license,
    	bugs: bugs,
    	homepage: homepage,
    	devDependencies: devDependencies,
    	dependencies: dependencies
    };

    var utils$n = {};

    var bn = {exports: {}};

    (function (module) {
    	(function (module, exports) {

    	  // Utils
    	  function assert (val, msg) {
    	    if (!val) throw new Error(msg || 'Assertion failed');
    	  }

    	  // Could use `inherits` module, but don't want to move from single file
    	  // architecture yet.
    	  function inherits (ctor, superCtor) {
    	    ctor.super_ = superCtor;
    	    var TempCtor = function () {};
    	    TempCtor.prototype = superCtor.prototype;
    	    ctor.prototype = new TempCtor();
    	    ctor.prototype.constructor = ctor;
    	  }

    	  // BN

    	  function BN (number, base, endian) {
    	    if (BN.isBN(number)) {
    	      return number;
    	    }

    	    this.negative = 0;
    	    this.words = null;
    	    this.length = 0;

    	    // Reduction context
    	    this.red = null;

    	    if (number !== null) {
    	      if (base === 'le' || base === 'be') {
    	        endian = base;
    	        base = 10;
    	      }

    	      this._init(number || 0, base || 10, endian || 'be');
    	    }
    	  }
    	  if (typeof module === 'object') {
    	    module.exports = BN;
    	  } else {
    	    exports.BN = BN;
    	  }

    	  BN.BN = BN;
    	  BN.wordSize = 26;

    	  var Buffer;
    	  try {
    	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
    	      Buffer = window.Buffer;
    	    } else {
    	      Buffer = require('buffer').Buffer;
    	    }
    	  } catch (e) {
    	  }

    	  BN.isBN = function isBN (num) {
    	    if (num instanceof BN) {
    	      return true;
    	    }

    	    return num !== null && typeof num === 'object' &&
    	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    	  };

    	  BN.max = function max (left, right) {
    	    if (left.cmp(right) > 0) return left;
    	    return right;
    	  };

    	  BN.min = function min (left, right) {
    	    if (left.cmp(right) < 0) return left;
    	    return right;
    	  };

    	  BN.prototype._init = function init (number, base, endian) {
    	    if (typeof number === 'number') {
    	      return this._initNumber(number, base, endian);
    	    }

    	    if (typeof number === 'object') {
    	      return this._initArray(number, base, endian);
    	    }

    	    if (base === 'hex') {
    	      base = 16;
    	    }
    	    assert(base === (base | 0) && base >= 2 && base <= 36);

    	    number = number.toString().replace(/\s+/g, '');
    	    var start = 0;
    	    if (number[0] === '-') {
    	      start++;
    	      this.negative = 1;
    	    }

    	    if (start < number.length) {
    	      if (base === 16) {
    	        this._parseHex(number, start, endian);
    	      } else {
    	        this._parseBase(number, base, start);
    	        if (endian === 'le') {
    	          this._initArray(this.toArray(), base, endian);
    	        }
    	      }
    	    }
    	  };

    	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    	    if (number < 0) {
    	      this.negative = 1;
    	      number = -number;
    	    }
    	    if (number < 0x4000000) {
    	      this.words = [ number & 0x3ffffff ];
    	      this.length = 1;
    	    } else if (number < 0x10000000000000) {
    	      this.words = [
    	        number & 0x3ffffff,
    	        (number / 0x4000000) & 0x3ffffff
    	      ];
    	      this.length = 2;
    	    } else {
    	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
    	      this.words = [
    	        number & 0x3ffffff,
    	        (number / 0x4000000) & 0x3ffffff,
    	        1
    	      ];
    	      this.length = 3;
    	    }

    	    if (endian !== 'le') return;

    	    // Reverse the bytes
    	    this._initArray(this.toArray(), base, endian);
    	  };

    	  BN.prototype._initArray = function _initArray (number, base, endian) {
    	    // Perhaps a Uint8Array
    	    assert(typeof number.length === 'number');
    	    if (number.length <= 0) {
    	      this.words = [ 0 ];
    	      this.length = 1;
    	      return this;
    	    }

    	    this.length = Math.ceil(number.length / 3);
    	    this.words = new Array(this.length);
    	    for (var i = 0; i < this.length; i++) {
    	      this.words[i] = 0;
    	    }

    	    var j, w;
    	    var off = 0;
    	    if (endian === 'be') {
    	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
    	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
    	        this.words[j] |= (w << off) & 0x3ffffff;
    	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
    	        off += 24;
    	        if (off >= 26) {
    	          off -= 26;
    	          j++;
    	        }
    	      }
    	    } else if (endian === 'le') {
    	      for (i = 0, j = 0; i < number.length; i += 3) {
    	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
    	        this.words[j] |= (w << off) & 0x3ffffff;
    	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
    	        off += 24;
    	        if (off >= 26) {
    	          off -= 26;
    	          j++;
    	        }
    	      }
    	    }
    	    return this.strip();
    	  };

    	  function parseHex4Bits (string, index) {
    	    var c = string.charCodeAt(index);
    	    // 'A' - 'F'
    	    if (c >= 65 && c <= 70) {
    	      return c - 55;
    	    // 'a' - 'f'
    	    } else if (c >= 97 && c <= 102) {
    	      return c - 87;
    	    // '0' - '9'
    	    } else {
    	      return (c - 48) & 0xf;
    	    }
    	  }

    	  function parseHexByte (string, lowerBound, index) {
    	    var r = parseHex4Bits(string, index);
    	    if (index - 1 >= lowerBound) {
    	      r |= parseHex4Bits(string, index - 1) << 4;
    	    }
    	    return r;
    	  }

    	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    	    // Create possibly bigger array to ensure that it fits the number
    	    this.length = Math.ceil((number.length - start) / 6);
    	    this.words = new Array(this.length);
    	    for (var i = 0; i < this.length; i++) {
    	      this.words[i] = 0;
    	    }

    	    // 24-bits chunks
    	    var off = 0;
    	    var j = 0;

    	    var w;
    	    if (endian === 'be') {
    	      for (i = number.length - 1; i >= start; i -= 2) {
    	        w = parseHexByte(number, start, i) << off;
    	        this.words[j] |= w & 0x3ffffff;
    	        if (off >= 18) {
    	          off -= 18;
    	          j += 1;
    	          this.words[j] |= w >>> 26;
    	        } else {
    	          off += 8;
    	        }
    	      }
    	    } else {
    	      var parseLength = number.length - start;
    	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
    	        w = parseHexByte(number, start, i) << off;
    	        this.words[j] |= w & 0x3ffffff;
    	        if (off >= 18) {
    	          off -= 18;
    	          j += 1;
    	          this.words[j] |= w >>> 26;
    	        } else {
    	          off += 8;
    	        }
    	      }
    	    }

    	    this.strip();
    	  };

    	  function parseBase (str, start, end, mul) {
    	    var r = 0;
    	    var len = Math.min(str.length, end);
    	    for (var i = start; i < len; i++) {
    	      var c = str.charCodeAt(i) - 48;

    	      r *= mul;

    	      // 'a'
    	      if (c >= 49) {
    	        r += c - 49 + 0xa;

    	      // 'A'
    	      } else if (c >= 17) {
    	        r += c - 17 + 0xa;

    	      // '0' - '9'
    	      } else {
    	        r += c;
    	      }
    	    }
    	    return r;
    	  }

    	  BN.prototype._parseBase = function _parseBase (number, base, start) {
    	    // Initialize as zero
    	    this.words = [ 0 ];
    	    this.length = 1;

    	    // Find length of limb in base
    	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
    	      limbLen++;
    	    }
    	    limbLen--;
    	    limbPow = (limbPow / base) | 0;

    	    var total = number.length - start;
    	    var mod = total % limbLen;
    	    var end = Math.min(total, total - mod) + start;

    	    var word = 0;
    	    for (var i = start; i < end; i += limbLen) {
    	      word = parseBase(number, i, i + limbLen, base);

    	      this.imuln(limbPow);
    	      if (this.words[0] + word < 0x4000000) {
    	        this.words[0] += word;
    	      } else {
    	        this._iaddn(word);
    	      }
    	    }

    	    if (mod !== 0) {
    	      var pow = 1;
    	      word = parseBase(number, i, number.length, base);

    	      for (i = 0; i < mod; i++) {
    	        pow *= base;
    	      }

    	      this.imuln(pow);
    	      if (this.words[0] + word < 0x4000000) {
    	        this.words[0] += word;
    	      } else {
    	        this._iaddn(word);
    	      }
    	    }

    	    this.strip();
    	  };

    	  BN.prototype.copy = function copy (dest) {
    	    dest.words = new Array(this.length);
    	    for (var i = 0; i < this.length; i++) {
    	      dest.words[i] = this.words[i];
    	    }
    	    dest.length = this.length;
    	    dest.negative = this.negative;
    	    dest.red = this.red;
    	  };

    	  BN.prototype.clone = function clone () {
    	    var r = new BN(null);
    	    this.copy(r);
    	    return r;
    	  };

    	  BN.prototype._expand = function _expand (size) {
    	    while (this.length < size) {
    	      this.words[this.length++] = 0;
    	    }
    	    return this;
    	  };

    	  // Remove leading `0` from `this`
    	  BN.prototype.strip = function strip () {
    	    while (this.length > 1 && this.words[this.length - 1] === 0) {
    	      this.length--;
    	    }
    	    return this._normSign();
    	  };

    	  BN.prototype._normSign = function _normSign () {
    	    // -0 = 0
    	    if (this.length === 1 && this.words[0] === 0) {
    	      this.negative = 0;
    	    }
    	    return this;
    	  };

    	  BN.prototype.inspect = function inspect () {
    	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    	  };

    	  /*

    	  var zeros = [];
    	  var groupSizes = [];
    	  var groupBases = [];

    	  var s = '';
    	  var i = -1;
    	  while (++i < BN.wordSize) {
    	    zeros[i] = s;
    	    s += '0';
    	  }
    	  groupSizes[0] = 0;
    	  groupSizes[1] = 0;
    	  groupBases[0] = 0;
    	  groupBases[1] = 0;
    	  var base = 2 - 1;
    	  while (++base < 36 + 1) {
    	    var groupSize = 0;
    	    var groupBase = 1;
    	    while (groupBase < (1 << BN.wordSize) / base) {
    	      groupBase *= base;
    	      groupSize += 1;
    	    }
    	    groupSizes[base] = groupSize;
    	    groupBases[base] = groupBase;
    	  }

    	  */

    	  var zeros = [
    	    '',
    	    '0',
    	    '00',
    	    '000',
    	    '0000',
    	    '00000',
    	    '000000',
    	    '0000000',
    	    '00000000',
    	    '000000000',
    	    '0000000000',
    	    '00000000000',
    	    '000000000000',
    	    '0000000000000',
    	    '00000000000000',
    	    '000000000000000',
    	    '0000000000000000',
    	    '00000000000000000',
    	    '000000000000000000',
    	    '0000000000000000000',
    	    '00000000000000000000',
    	    '000000000000000000000',
    	    '0000000000000000000000',
    	    '00000000000000000000000',
    	    '000000000000000000000000',
    	    '0000000000000000000000000'
    	  ];

    	  var groupSizes = [
    	    0, 0,
    	    25, 16, 12, 11, 10, 9, 8,
    	    8, 7, 7, 7, 7, 6, 6,
    	    6, 6, 6, 6, 6, 5, 5,
    	    5, 5, 5, 5, 5, 5, 5,
    	    5, 5, 5, 5, 5, 5, 5
    	  ];

    	  var groupBases = [
    	    0, 0,
    	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
    	  ];

    	  BN.prototype.toString = function toString (base, padding) {
    	    base = base || 10;
    	    padding = padding | 0 || 1;

    	    var out;
    	    if (base === 16 || base === 'hex') {
    	      out = '';
    	      var off = 0;
    	      var carry = 0;
    	      for (var i = 0; i < this.length; i++) {
    	        var w = this.words[i];
    	        var word = (((w << off) | carry) & 0xffffff).toString(16);
    	        carry = (w >>> (24 - off)) & 0xffffff;
    	        if (carry !== 0 || i !== this.length - 1) {
    	          out = zeros[6 - word.length] + word + out;
    	        } else {
    	          out = word + out;
    	        }
    	        off += 2;
    	        if (off >= 26) {
    	          off -= 26;
    	          i--;
    	        }
    	      }
    	      if (carry !== 0) {
    	        out = carry.toString(16) + out;
    	      }
    	      while (out.length % padding !== 0) {
    	        out = '0' + out;
    	      }
    	      if (this.negative !== 0) {
    	        out = '-' + out;
    	      }
    	      return out;
    	    }

    	    if (base === (base | 0) && base >= 2 && base <= 36) {
    	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
    	      var groupSize = groupSizes[base];
    	      // var groupBase = Math.pow(base, groupSize);
    	      var groupBase = groupBases[base];
    	      out = '';
    	      var c = this.clone();
    	      c.negative = 0;
    	      while (!c.isZero()) {
    	        var r = c.modn(groupBase).toString(base);
    	        c = c.idivn(groupBase);

    	        if (!c.isZero()) {
    	          out = zeros[groupSize - r.length] + r + out;
    	        } else {
    	          out = r + out;
    	        }
    	      }
    	      if (this.isZero()) {
    	        out = '0' + out;
    	      }
    	      while (out.length % padding !== 0) {
    	        out = '0' + out;
    	      }
    	      if (this.negative !== 0) {
    	        out = '-' + out;
    	      }
    	      return out;
    	    }

    	    assert(false, 'Base should be between 2 and 36');
    	  };

    	  BN.prototype.toNumber = function toNumber () {
    	    var ret = this.words[0];
    	    if (this.length === 2) {
    	      ret += this.words[1] * 0x4000000;
    	    } else if (this.length === 3 && this.words[2] === 0x01) {
    	      // NOTE: at this stage it is known that the top bit is set
    	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    	    } else if (this.length > 2) {
    	      assert(false, 'Number can only safely store up to 53 bits');
    	    }
    	    return (this.negative !== 0) ? -ret : ret;
    	  };

    	  BN.prototype.toJSON = function toJSON () {
    	    return this.toString(16);
    	  };

    	  BN.prototype.toBuffer = function toBuffer (endian, length) {
    	    assert(typeof Buffer !== 'undefined');
    	    return this.toArrayLike(Buffer, endian, length);
    	  };

    	  BN.prototype.toArray = function toArray (endian, length) {
    	    return this.toArrayLike(Array, endian, length);
    	  };

    	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    	    var byteLength = this.byteLength();
    	    var reqLength = length || Math.max(1, byteLength);
    	    assert(byteLength <= reqLength, 'byte array longer than desired length');
    	    assert(reqLength > 0, 'Requested array length <= 0');

    	    this.strip();
    	    var littleEndian = endian === 'le';
    	    var res = new ArrayType(reqLength);

    	    var b, i;
    	    var q = this.clone();
    	    if (!littleEndian) {
    	      // Assume big-endian
    	      for (i = 0; i < reqLength - byteLength; i++) {
    	        res[i] = 0;
    	      }

    	      for (i = 0; !q.isZero(); i++) {
    	        b = q.andln(0xff);
    	        q.iushrn(8);

    	        res[reqLength - i - 1] = b;
    	      }
    	    } else {
    	      for (i = 0; !q.isZero(); i++) {
    	        b = q.andln(0xff);
    	        q.iushrn(8);

    	        res[i] = b;
    	      }

    	      for (; i < reqLength; i++) {
    	        res[i] = 0;
    	      }
    	    }

    	    return res;
    	  };

    	  if (Math.clz32) {
    	    BN.prototype._countBits = function _countBits (w) {
    	      return 32 - Math.clz32(w);
    	    };
    	  } else {
    	    BN.prototype._countBits = function _countBits (w) {
    	      var t = w;
    	      var r = 0;
    	      if (t >= 0x1000) {
    	        r += 13;
    	        t >>>= 13;
    	      }
    	      if (t >= 0x40) {
    	        r += 7;
    	        t >>>= 7;
    	      }
    	      if (t >= 0x8) {
    	        r += 4;
    	        t >>>= 4;
    	      }
    	      if (t >= 0x02) {
    	        r += 2;
    	        t >>>= 2;
    	      }
    	      return r + t;
    	    };
    	  }

    	  BN.prototype._zeroBits = function _zeroBits (w) {
    	    // Short-cut
    	    if (w === 0) return 26;

    	    var t = w;
    	    var r = 0;
    	    if ((t & 0x1fff) === 0) {
    	      r += 13;
    	      t >>>= 13;
    	    }
    	    if ((t & 0x7f) === 0) {
    	      r += 7;
    	      t >>>= 7;
    	    }
    	    if ((t & 0xf) === 0) {
    	      r += 4;
    	      t >>>= 4;
    	    }
    	    if ((t & 0x3) === 0) {
    	      r += 2;
    	      t >>>= 2;
    	    }
    	    if ((t & 0x1) === 0) {
    	      r++;
    	    }
    	    return r;
    	  };

    	  // Return number of used bits in a BN
    	  BN.prototype.bitLength = function bitLength () {
    	    var w = this.words[this.length - 1];
    	    var hi = this._countBits(w);
    	    return (this.length - 1) * 26 + hi;
    	  };

    	  function toBitArray (num) {
    	    var w = new Array(num.bitLength());

    	    for (var bit = 0; bit < w.length; bit++) {
    	      var off = (bit / 26) | 0;
    	      var wbit = bit % 26;

    	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    	    }

    	    return w;
    	  }

    	  // Number of trailing zero bits
    	  BN.prototype.zeroBits = function zeroBits () {
    	    if (this.isZero()) return 0;

    	    var r = 0;
    	    for (var i = 0; i < this.length; i++) {
    	      var b = this._zeroBits(this.words[i]);
    	      r += b;
    	      if (b !== 26) break;
    	    }
    	    return r;
    	  };

    	  BN.prototype.byteLength = function byteLength () {
    	    return Math.ceil(this.bitLength() / 8);
    	  };

    	  BN.prototype.toTwos = function toTwos (width) {
    	    if (this.negative !== 0) {
    	      return this.abs().inotn(width).iaddn(1);
    	    }
    	    return this.clone();
    	  };

    	  BN.prototype.fromTwos = function fromTwos (width) {
    	    if (this.testn(width - 1)) {
    	      return this.notn(width).iaddn(1).ineg();
    	    }
    	    return this.clone();
    	  };

    	  BN.prototype.isNeg = function isNeg () {
    	    return this.negative !== 0;
    	  };

    	  // Return negative clone of `this`
    	  BN.prototype.neg = function neg () {
    	    return this.clone().ineg();
    	  };

    	  BN.prototype.ineg = function ineg () {
    	    if (!this.isZero()) {
    	      this.negative ^= 1;
    	    }

    	    return this;
    	  };

    	  // Or `num` with `this` in-place
    	  BN.prototype.iuor = function iuor (num) {
    	    while (this.length < num.length) {
    	      this.words[this.length++] = 0;
    	    }

    	    for (var i = 0; i < num.length; i++) {
    	      this.words[i] = this.words[i] | num.words[i];
    	    }

    	    return this.strip();
    	  };

    	  BN.prototype.ior = function ior (num) {
    	    assert((this.negative | num.negative) === 0);
    	    return this.iuor(num);
    	  };

    	  // Or `num` with `this`
    	  BN.prototype.or = function or (num) {
    	    if (this.length > num.length) return this.clone().ior(num);
    	    return num.clone().ior(this);
    	  };

    	  BN.prototype.uor = function uor (num) {
    	    if (this.length > num.length) return this.clone().iuor(num);
    	    return num.clone().iuor(this);
    	  };

    	  // And `num` with `this` in-place
    	  BN.prototype.iuand = function iuand (num) {
    	    // b = min-length(num, this)
    	    var b;
    	    if (this.length > num.length) {
    	      b = num;
    	    } else {
    	      b = this;
    	    }

    	    for (var i = 0; i < b.length; i++) {
    	      this.words[i] = this.words[i] & num.words[i];
    	    }

    	    this.length = b.length;

    	    return this.strip();
    	  };

    	  BN.prototype.iand = function iand (num) {
    	    assert((this.negative | num.negative) === 0);
    	    return this.iuand(num);
    	  };

    	  // And `num` with `this`
    	  BN.prototype.and = function and (num) {
    	    if (this.length > num.length) return this.clone().iand(num);
    	    return num.clone().iand(this);
    	  };

    	  BN.prototype.uand = function uand (num) {
    	    if (this.length > num.length) return this.clone().iuand(num);
    	    return num.clone().iuand(this);
    	  };

    	  // Xor `num` with `this` in-place
    	  BN.prototype.iuxor = function iuxor (num) {
    	    // a.length > b.length
    	    var a;
    	    var b;
    	    if (this.length > num.length) {
    	      a = this;
    	      b = num;
    	    } else {
    	      a = num;
    	      b = this;
    	    }

    	    for (var i = 0; i < b.length; i++) {
    	      this.words[i] = a.words[i] ^ b.words[i];
    	    }

    	    if (this !== a) {
    	      for (; i < a.length; i++) {
    	        this.words[i] = a.words[i];
    	      }
    	    }

    	    this.length = a.length;

    	    return this.strip();
    	  };

    	  BN.prototype.ixor = function ixor (num) {
    	    assert((this.negative | num.negative) === 0);
    	    return this.iuxor(num);
    	  };

    	  // Xor `num` with `this`
    	  BN.prototype.xor = function xor (num) {
    	    if (this.length > num.length) return this.clone().ixor(num);
    	    return num.clone().ixor(this);
    	  };

    	  BN.prototype.uxor = function uxor (num) {
    	    if (this.length > num.length) return this.clone().iuxor(num);
    	    return num.clone().iuxor(this);
    	  };

    	  // Not ``this`` with ``width`` bitwidth
    	  BN.prototype.inotn = function inotn (width) {
    	    assert(typeof width === 'number' && width >= 0);

    	    var bytesNeeded = Math.ceil(width / 26) | 0;
    	    var bitsLeft = width % 26;

    	    // Extend the buffer with leading zeroes
    	    this._expand(bytesNeeded);

    	    if (bitsLeft > 0) {
    	      bytesNeeded--;
    	    }

    	    // Handle complete words
    	    for (var i = 0; i < bytesNeeded; i++) {
    	      this.words[i] = ~this.words[i] & 0x3ffffff;
    	    }

    	    // Handle the residue
    	    if (bitsLeft > 0) {
    	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    	    }

    	    // And remove leading zeroes
    	    return this.strip();
    	  };

    	  BN.prototype.notn = function notn (width) {
    	    return this.clone().inotn(width);
    	  };

    	  // Set `bit` of `this`
    	  BN.prototype.setn = function setn (bit, val) {
    	    assert(typeof bit === 'number' && bit >= 0);

    	    var off = (bit / 26) | 0;
    	    var wbit = bit % 26;

    	    this._expand(off + 1);

    	    if (val) {
    	      this.words[off] = this.words[off] | (1 << wbit);
    	    } else {
    	      this.words[off] = this.words[off] & ~(1 << wbit);
    	    }

    	    return this.strip();
    	  };

    	  // Add `num` to `this` in-place
    	  BN.prototype.iadd = function iadd (num) {
    	    var r;

    	    // negative + positive
    	    if (this.negative !== 0 && num.negative === 0) {
    	      this.negative = 0;
    	      r = this.isub(num);
    	      this.negative ^= 1;
    	      return this._normSign();

    	    // positive + negative
    	    } else if (this.negative === 0 && num.negative !== 0) {
    	      num.negative = 0;
    	      r = this.isub(num);
    	      num.negative = 1;
    	      return r._normSign();
    	    }

    	    // a.length > b.length
    	    var a, b;
    	    if (this.length > num.length) {
    	      a = this;
    	      b = num;
    	    } else {
    	      a = num;
    	      b = this;
    	    }

    	    var carry = 0;
    	    for (var i = 0; i < b.length; i++) {
    	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
    	      this.words[i] = r & 0x3ffffff;
    	      carry = r >>> 26;
    	    }
    	    for (; carry !== 0 && i < a.length; i++) {
    	      r = (a.words[i] | 0) + carry;
    	      this.words[i] = r & 0x3ffffff;
    	      carry = r >>> 26;
    	    }

    	    this.length = a.length;
    	    if (carry !== 0) {
    	      this.words[this.length] = carry;
    	      this.length++;
    	    // Copy the rest of the words
    	    } else if (a !== this) {
    	      for (; i < a.length; i++) {
    	        this.words[i] = a.words[i];
    	      }
    	    }

    	    return this;
    	  };

    	  // Add `num` to `this`
    	  BN.prototype.add = function add (num) {
    	    var res;
    	    if (num.negative !== 0 && this.negative === 0) {
    	      num.negative = 0;
    	      res = this.sub(num);
    	      num.negative ^= 1;
    	      return res;
    	    } else if (num.negative === 0 && this.negative !== 0) {
    	      this.negative = 0;
    	      res = num.sub(this);
    	      this.negative = 1;
    	      return res;
    	    }

    	    if (this.length > num.length) return this.clone().iadd(num);

    	    return num.clone().iadd(this);
    	  };

    	  // Subtract `num` from `this` in-place
    	  BN.prototype.isub = function isub (num) {
    	    // this - (-num) = this + num
    	    if (num.negative !== 0) {
    	      num.negative = 0;
    	      var r = this.iadd(num);
    	      num.negative = 1;
    	      return r._normSign();

    	    // -this - num = -(this + num)
    	    } else if (this.negative !== 0) {
    	      this.negative = 0;
    	      this.iadd(num);
    	      this.negative = 1;
    	      return this._normSign();
    	    }

    	    // At this point both numbers are positive
    	    var cmp = this.cmp(num);

    	    // Optimization - zeroify
    	    if (cmp === 0) {
    	      this.negative = 0;
    	      this.length = 1;
    	      this.words[0] = 0;
    	      return this;
    	    }

    	    // a > b
    	    var a, b;
    	    if (cmp > 0) {
    	      a = this;
    	      b = num;
    	    } else {
    	      a = num;
    	      b = this;
    	    }

    	    var carry = 0;
    	    for (var i = 0; i < b.length; i++) {
    	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
    	      carry = r >> 26;
    	      this.words[i] = r & 0x3ffffff;
    	    }
    	    for (; carry !== 0 && i < a.length; i++) {
    	      r = (a.words[i] | 0) + carry;
    	      carry = r >> 26;
    	      this.words[i] = r & 0x3ffffff;
    	    }

    	    // Copy rest of the words
    	    if (carry === 0 && i < a.length && a !== this) {
    	      for (; i < a.length; i++) {
    	        this.words[i] = a.words[i];
    	      }
    	    }

    	    this.length = Math.max(this.length, i);

    	    if (a !== this) {
    	      this.negative = 1;
    	    }

    	    return this.strip();
    	  };

    	  // Subtract `num` from `this`
    	  BN.prototype.sub = function sub (num) {
    	    return this.clone().isub(num);
    	  };

    	  function smallMulTo (self, num, out) {
    	    out.negative = num.negative ^ self.negative;
    	    var len = (self.length + num.length) | 0;
    	    out.length = len;
    	    len = (len - 1) | 0;

    	    // Peel one iteration (compiler can't do it, because of code complexity)
    	    var a = self.words[0] | 0;
    	    var b = num.words[0] | 0;
    	    var r = a * b;

    	    var lo = r & 0x3ffffff;
    	    var carry = (r / 0x4000000) | 0;
    	    out.words[0] = lo;

    	    for (var k = 1; k < len; k++) {
    	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    	      // note that ncarry could be >= 0x3ffffff
    	      var ncarry = carry >>> 26;
    	      var rword = carry & 0x3ffffff;
    	      var maxJ = Math.min(k, num.length - 1);
    	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
    	        var i = (k - j) | 0;
    	        a = self.words[i] | 0;
    	        b = num.words[j] | 0;
    	        r = a * b + rword;
    	        ncarry += (r / 0x4000000) | 0;
    	        rword = r & 0x3ffffff;
    	      }
    	      out.words[k] = rword | 0;
    	      carry = ncarry | 0;
    	    }
    	    if (carry !== 0) {
    	      out.words[k] = carry | 0;
    	    } else {
    	      out.length--;
    	    }

    	    return out.strip();
    	  }

    	  // TODO(indutny): it may be reasonable to omit it for users who don't need
    	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    	  // multiplication (like elliptic secp256k1).
    	  var comb10MulTo = function comb10MulTo (self, num, out) {
    	    var a = self.words;
    	    var b = num.words;
    	    var o = out.words;
    	    var c = 0;
    	    var lo;
    	    var mid;
    	    var hi;
    	    var a0 = a[0] | 0;
    	    var al0 = a0 & 0x1fff;
    	    var ah0 = a0 >>> 13;
    	    var a1 = a[1] | 0;
    	    var al1 = a1 & 0x1fff;
    	    var ah1 = a1 >>> 13;
    	    var a2 = a[2] | 0;
    	    var al2 = a2 & 0x1fff;
    	    var ah2 = a2 >>> 13;
    	    var a3 = a[3] | 0;
    	    var al3 = a3 & 0x1fff;
    	    var ah3 = a3 >>> 13;
    	    var a4 = a[4] | 0;
    	    var al4 = a4 & 0x1fff;
    	    var ah4 = a4 >>> 13;
    	    var a5 = a[5] | 0;
    	    var al5 = a5 & 0x1fff;
    	    var ah5 = a5 >>> 13;
    	    var a6 = a[6] | 0;
    	    var al6 = a6 & 0x1fff;
    	    var ah6 = a6 >>> 13;
    	    var a7 = a[7] | 0;
    	    var al7 = a7 & 0x1fff;
    	    var ah7 = a7 >>> 13;
    	    var a8 = a[8] | 0;
    	    var al8 = a8 & 0x1fff;
    	    var ah8 = a8 >>> 13;
    	    var a9 = a[9] | 0;
    	    var al9 = a9 & 0x1fff;
    	    var ah9 = a9 >>> 13;
    	    var b0 = b[0] | 0;
    	    var bl0 = b0 & 0x1fff;
    	    var bh0 = b0 >>> 13;
    	    var b1 = b[1] | 0;
    	    var bl1 = b1 & 0x1fff;
    	    var bh1 = b1 >>> 13;
    	    var b2 = b[2] | 0;
    	    var bl2 = b2 & 0x1fff;
    	    var bh2 = b2 >>> 13;
    	    var b3 = b[3] | 0;
    	    var bl3 = b3 & 0x1fff;
    	    var bh3 = b3 >>> 13;
    	    var b4 = b[4] | 0;
    	    var bl4 = b4 & 0x1fff;
    	    var bh4 = b4 >>> 13;
    	    var b5 = b[5] | 0;
    	    var bl5 = b5 & 0x1fff;
    	    var bh5 = b5 >>> 13;
    	    var b6 = b[6] | 0;
    	    var bl6 = b6 & 0x1fff;
    	    var bh6 = b6 >>> 13;
    	    var b7 = b[7] | 0;
    	    var bl7 = b7 & 0x1fff;
    	    var bh7 = b7 >>> 13;
    	    var b8 = b[8] | 0;
    	    var bl8 = b8 & 0x1fff;
    	    var bh8 = b8 >>> 13;
    	    var b9 = b[9] | 0;
    	    var bl9 = b9 & 0x1fff;
    	    var bh9 = b9 >>> 13;

    	    out.negative = self.negative ^ num.negative;
    	    out.length = 19;
    	    /* k = 0 */
    	    lo = Math.imul(al0, bl0);
    	    mid = Math.imul(al0, bh0);
    	    mid = (mid + Math.imul(ah0, bl0)) | 0;
    	    hi = Math.imul(ah0, bh0);
    	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    	    w0 &= 0x3ffffff;
    	    /* k = 1 */
    	    lo = Math.imul(al1, bl0);
    	    mid = Math.imul(al1, bh0);
    	    mid = (mid + Math.imul(ah1, bl0)) | 0;
    	    hi = Math.imul(ah1, bh0);
    	    lo = (lo + Math.imul(al0, bl1)) | 0;
    	    mid = (mid + Math.imul(al0, bh1)) | 0;
    	    mid = (mid + Math.imul(ah0, bl1)) | 0;
    	    hi = (hi + Math.imul(ah0, bh1)) | 0;
    	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    	    w1 &= 0x3ffffff;
    	    /* k = 2 */
    	    lo = Math.imul(al2, bl0);
    	    mid = Math.imul(al2, bh0);
    	    mid = (mid + Math.imul(ah2, bl0)) | 0;
    	    hi = Math.imul(ah2, bh0);
    	    lo = (lo + Math.imul(al1, bl1)) | 0;
    	    mid = (mid + Math.imul(al1, bh1)) | 0;
    	    mid = (mid + Math.imul(ah1, bl1)) | 0;
    	    hi = (hi + Math.imul(ah1, bh1)) | 0;
    	    lo = (lo + Math.imul(al0, bl2)) | 0;
    	    mid = (mid + Math.imul(al0, bh2)) | 0;
    	    mid = (mid + Math.imul(ah0, bl2)) | 0;
    	    hi = (hi + Math.imul(ah0, bh2)) | 0;
    	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    	    w2 &= 0x3ffffff;
    	    /* k = 3 */
    	    lo = Math.imul(al3, bl0);
    	    mid = Math.imul(al3, bh0);
    	    mid = (mid + Math.imul(ah3, bl0)) | 0;
    	    hi = Math.imul(ah3, bh0);
    	    lo = (lo + Math.imul(al2, bl1)) | 0;
    	    mid = (mid + Math.imul(al2, bh1)) | 0;
    	    mid = (mid + Math.imul(ah2, bl1)) | 0;
    	    hi = (hi + Math.imul(ah2, bh1)) | 0;
    	    lo = (lo + Math.imul(al1, bl2)) | 0;
    	    mid = (mid + Math.imul(al1, bh2)) | 0;
    	    mid = (mid + Math.imul(ah1, bl2)) | 0;
    	    hi = (hi + Math.imul(ah1, bh2)) | 0;
    	    lo = (lo + Math.imul(al0, bl3)) | 0;
    	    mid = (mid + Math.imul(al0, bh3)) | 0;
    	    mid = (mid + Math.imul(ah0, bl3)) | 0;
    	    hi = (hi + Math.imul(ah0, bh3)) | 0;
    	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    	    w3 &= 0x3ffffff;
    	    /* k = 4 */
    	    lo = Math.imul(al4, bl0);
    	    mid = Math.imul(al4, bh0);
    	    mid = (mid + Math.imul(ah4, bl0)) | 0;
    	    hi = Math.imul(ah4, bh0);
    	    lo = (lo + Math.imul(al3, bl1)) | 0;
    	    mid = (mid + Math.imul(al3, bh1)) | 0;
    	    mid = (mid + Math.imul(ah3, bl1)) | 0;
    	    hi = (hi + Math.imul(ah3, bh1)) | 0;
    	    lo = (lo + Math.imul(al2, bl2)) | 0;
    	    mid = (mid + Math.imul(al2, bh2)) | 0;
    	    mid = (mid + Math.imul(ah2, bl2)) | 0;
    	    hi = (hi + Math.imul(ah2, bh2)) | 0;
    	    lo = (lo + Math.imul(al1, bl3)) | 0;
    	    mid = (mid + Math.imul(al1, bh3)) | 0;
    	    mid = (mid + Math.imul(ah1, bl3)) | 0;
    	    hi = (hi + Math.imul(ah1, bh3)) | 0;
    	    lo = (lo + Math.imul(al0, bl4)) | 0;
    	    mid = (mid + Math.imul(al0, bh4)) | 0;
    	    mid = (mid + Math.imul(ah0, bl4)) | 0;
    	    hi = (hi + Math.imul(ah0, bh4)) | 0;
    	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    	    w4 &= 0x3ffffff;
    	    /* k = 5 */
    	    lo = Math.imul(al5, bl0);
    	    mid = Math.imul(al5, bh0);
    	    mid = (mid + Math.imul(ah5, bl0)) | 0;
    	    hi = Math.imul(ah5, bh0);
    	    lo = (lo + Math.imul(al4, bl1)) | 0;
    	    mid = (mid + Math.imul(al4, bh1)) | 0;
    	    mid = (mid + Math.imul(ah4, bl1)) | 0;
    	    hi = (hi + Math.imul(ah4, bh1)) | 0;
    	    lo = (lo + Math.imul(al3, bl2)) | 0;
    	    mid = (mid + Math.imul(al3, bh2)) | 0;
    	    mid = (mid + Math.imul(ah3, bl2)) | 0;
    	    hi = (hi + Math.imul(ah3, bh2)) | 0;
    	    lo = (lo + Math.imul(al2, bl3)) | 0;
    	    mid = (mid + Math.imul(al2, bh3)) | 0;
    	    mid = (mid + Math.imul(ah2, bl3)) | 0;
    	    hi = (hi + Math.imul(ah2, bh3)) | 0;
    	    lo = (lo + Math.imul(al1, bl4)) | 0;
    	    mid = (mid + Math.imul(al1, bh4)) | 0;
    	    mid = (mid + Math.imul(ah1, bl4)) | 0;
    	    hi = (hi + Math.imul(ah1, bh4)) | 0;
    	    lo = (lo + Math.imul(al0, bl5)) | 0;
    	    mid = (mid + Math.imul(al0, bh5)) | 0;
    	    mid = (mid + Math.imul(ah0, bl5)) | 0;
    	    hi = (hi + Math.imul(ah0, bh5)) | 0;
    	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    	    w5 &= 0x3ffffff;
    	    /* k = 6 */
    	    lo = Math.imul(al6, bl0);
    	    mid = Math.imul(al6, bh0);
    	    mid = (mid + Math.imul(ah6, bl0)) | 0;
    	    hi = Math.imul(ah6, bh0);
    	    lo = (lo + Math.imul(al5, bl1)) | 0;
    	    mid = (mid + Math.imul(al5, bh1)) | 0;
    	    mid = (mid + Math.imul(ah5, bl1)) | 0;
    	    hi = (hi + Math.imul(ah5, bh1)) | 0;
    	    lo = (lo + Math.imul(al4, bl2)) | 0;
    	    mid = (mid + Math.imul(al4, bh2)) | 0;
    	    mid = (mid + Math.imul(ah4, bl2)) | 0;
    	    hi = (hi + Math.imul(ah4, bh2)) | 0;
    	    lo = (lo + Math.imul(al3, bl3)) | 0;
    	    mid = (mid + Math.imul(al3, bh3)) | 0;
    	    mid = (mid + Math.imul(ah3, bl3)) | 0;
    	    hi = (hi + Math.imul(ah3, bh3)) | 0;
    	    lo = (lo + Math.imul(al2, bl4)) | 0;
    	    mid = (mid + Math.imul(al2, bh4)) | 0;
    	    mid = (mid + Math.imul(ah2, bl4)) | 0;
    	    hi = (hi + Math.imul(ah2, bh4)) | 0;
    	    lo = (lo + Math.imul(al1, bl5)) | 0;
    	    mid = (mid + Math.imul(al1, bh5)) | 0;
    	    mid = (mid + Math.imul(ah1, bl5)) | 0;
    	    hi = (hi + Math.imul(ah1, bh5)) | 0;
    	    lo = (lo + Math.imul(al0, bl6)) | 0;
    	    mid = (mid + Math.imul(al0, bh6)) | 0;
    	    mid = (mid + Math.imul(ah0, bl6)) | 0;
    	    hi = (hi + Math.imul(ah0, bh6)) | 0;
    	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    	    w6 &= 0x3ffffff;
    	    /* k = 7 */
    	    lo = Math.imul(al7, bl0);
    	    mid = Math.imul(al7, bh0);
    	    mid = (mid + Math.imul(ah7, bl0)) | 0;
    	    hi = Math.imul(ah7, bh0);
    	    lo = (lo + Math.imul(al6, bl1)) | 0;
    	    mid = (mid + Math.imul(al6, bh1)) | 0;
    	    mid = (mid + Math.imul(ah6, bl1)) | 0;
    	    hi = (hi + Math.imul(ah6, bh1)) | 0;
    	    lo = (lo + Math.imul(al5, bl2)) | 0;
    	    mid = (mid + Math.imul(al5, bh2)) | 0;
    	    mid = (mid + Math.imul(ah5, bl2)) | 0;
    	    hi = (hi + Math.imul(ah5, bh2)) | 0;
    	    lo = (lo + Math.imul(al4, bl3)) | 0;
    	    mid = (mid + Math.imul(al4, bh3)) | 0;
    	    mid = (mid + Math.imul(ah4, bl3)) | 0;
    	    hi = (hi + Math.imul(ah4, bh3)) | 0;
    	    lo = (lo + Math.imul(al3, bl4)) | 0;
    	    mid = (mid + Math.imul(al3, bh4)) | 0;
    	    mid = (mid + Math.imul(ah3, bl4)) | 0;
    	    hi = (hi + Math.imul(ah3, bh4)) | 0;
    	    lo = (lo + Math.imul(al2, bl5)) | 0;
    	    mid = (mid + Math.imul(al2, bh5)) | 0;
    	    mid = (mid + Math.imul(ah2, bl5)) | 0;
    	    hi = (hi + Math.imul(ah2, bh5)) | 0;
    	    lo = (lo + Math.imul(al1, bl6)) | 0;
    	    mid = (mid + Math.imul(al1, bh6)) | 0;
    	    mid = (mid + Math.imul(ah1, bl6)) | 0;
    	    hi = (hi + Math.imul(ah1, bh6)) | 0;
    	    lo = (lo + Math.imul(al0, bl7)) | 0;
    	    mid = (mid + Math.imul(al0, bh7)) | 0;
    	    mid = (mid + Math.imul(ah0, bl7)) | 0;
    	    hi = (hi + Math.imul(ah0, bh7)) | 0;
    	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    	    w7 &= 0x3ffffff;
    	    /* k = 8 */
    	    lo = Math.imul(al8, bl0);
    	    mid = Math.imul(al8, bh0);
    	    mid = (mid + Math.imul(ah8, bl0)) | 0;
    	    hi = Math.imul(ah8, bh0);
    	    lo = (lo + Math.imul(al7, bl1)) | 0;
    	    mid = (mid + Math.imul(al7, bh1)) | 0;
    	    mid = (mid + Math.imul(ah7, bl1)) | 0;
    	    hi = (hi + Math.imul(ah7, bh1)) | 0;
    	    lo = (lo + Math.imul(al6, bl2)) | 0;
    	    mid = (mid + Math.imul(al6, bh2)) | 0;
    	    mid = (mid + Math.imul(ah6, bl2)) | 0;
    	    hi = (hi + Math.imul(ah6, bh2)) | 0;
    	    lo = (lo + Math.imul(al5, bl3)) | 0;
    	    mid = (mid + Math.imul(al5, bh3)) | 0;
    	    mid = (mid + Math.imul(ah5, bl3)) | 0;
    	    hi = (hi + Math.imul(ah5, bh3)) | 0;
    	    lo = (lo + Math.imul(al4, bl4)) | 0;
    	    mid = (mid + Math.imul(al4, bh4)) | 0;
    	    mid = (mid + Math.imul(ah4, bl4)) | 0;
    	    hi = (hi + Math.imul(ah4, bh4)) | 0;
    	    lo = (lo + Math.imul(al3, bl5)) | 0;
    	    mid = (mid + Math.imul(al3, bh5)) | 0;
    	    mid = (mid + Math.imul(ah3, bl5)) | 0;
    	    hi = (hi + Math.imul(ah3, bh5)) | 0;
    	    lo = (lo + Math.imul(al2, bl6)) | 0;
    	    mid = (mid + Math.imul(al2, bh6)) | 0;
    	    mid = (mid + Math.imul(ah2, bl6)) | 0;
    	    hi = (hi + Math.imul(ah2, bh6)) | 0;
    	    lo = (lo + Math.imul(al1, bl7)) | 0;
    	    mid = (mid + Math.imul(al1, bh7)) | 0;
    	    mid = (mid + Math.imul(ah1, bl7)) | 0;
    	    hi = (hi + Math.imul(ah1, bh7)) | 0;
    	    lo = (lo + Math.imul(al0, bl8)) | 0;
    	    mid = (mid + Math.imul(al0, bh8)) | 0;
    	    mid = (mid + Math.imul(ah0, bl8)) | 0;
    	    hi = (hi + Math.imul(ah0, bh8)) | 0;
    	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    	    w8 &= 0x3ffffff;
    	    /* k = 9 */
    	    lo = Math.imul(al9, bl0);
    	    mid = Math.imul(al9, bh0);
    	    mid = (mid + Math.imul(ah9, bl0)) | 0;
    	    hi = Math.imul(ah9, bh0);
    	    lo = (lo + Math.imul(al8, bl1)) | 0;
    	    mid = (mid + Math.imul(al8, bh1)) | 0;
    	    mid = (mid + Math.imul(ah8, bl1)) | 0;
    	    hi = (hi + Math.imul(ah8, bh1)) | 0;
    	    lo = (lo + Math.imul(al7, bl2)) | 0;
    	    mid = (mid + Math.imul(al7, bh2)) | 0;
    	    mid = (mid + Math.imul(ah7, bl2)) | 0;
    	    hi = (hi + Math.imul(ah7, bh2)) | 0;
    	    lo = (lo + Math.imul(al6, bl3)) | 0;
    	    mid = (mid + Math.imul(al6, bh3)) | 0;
    	    mid = (mid + Math.imul(ah6, bl3)) | 0;
    	    hi = (hi + Math.imul(ah6, bh3)) | 0;
    	    lo = (lo + Math.imul(al5, bl4)) | 0;
    	    mid = (mid + Math.imul(al5, bh4)) | 0;
    	    mid = (mid + Math.imul(ah5, bl4)) | 0;
    	    hi = (hi + Math.imul(ah5, bh4)) | 0;
    	    lo = (lo + Math.imul(al4, bl5)) | 0;
    	    mid = (mid + Math.imul(al4, bh5)) | 0;
    	    mid = (mid + Math.imul(ah4, bl5)) | 0;
    	    hi = (hi + Math.imul(ah4, bh5)) | 0;
    	    lo = (lo + Math.imul(al3, bl6)) | 0;
    	    mid = (mid + Math.imul(al3, bh6)) | 0;
    	    mid = (mid + Math.imul(ah3, bl6)) | 0;
    	    hi = (hi + Math.imul(ah3, bh6)) | 0;
    	    lo = (lo + Math.imul(al2, bl7)) | 0;
    	    mid = (mid + Math.imul(al2, bh7)) | 0;
    	    mid = (mid + Math.imul(ah2, bl7)) | 0;
    	    hi = (hi + Math.imul(ah2, bh7)) | 0;
    	    lo = (lo + Math.imul(al1, bl8)) | 0;
    	    mid = (mid + Math.imul(al1, bh8)) | 0;
    	    mid = (mid + Math.imul(ah1, bl8)) | 0;
    	    hi = (hi + Math.imul(ah1, bh8)) | 0;
    	    lo = (lo + Math.imul(al0, bl9)) | 0;
    	    mid = (mid + Math.imul(al0, bh9)) | 0;
    	    mid = (mid + Math.imul(ah0, bl9)) | 0;
    	    hi = (hi + Math.imul(ah0, bh9)) | 0;
    	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    	    w9 &= 0x3ffffff;
    	    /* k = 10 */
    	    lo = Math.imul(al9, bl1);
    	    mid = Math.imul(al9, bh1);
    	    mid = (mid + Math.imul(ah9, bl1)) | 0;
    	    hi = Math.imul(ah9, bh1);
    	    lo = (lo + Math.imul(al8, bl2)) | 0;
    	    mid = (mid + Math.imul(al8, bh2)) | 0;
    	    mid = (mid + Math.imul(ah8, bl2)) | 0;
    	    hi = (hi + Math.imul(ah8, bh2)) | 0;
    	    lo = (lo + Math.imul(al7, bl3)) | 0;
    	    mid = (mid + Math.imul(al7, bh3)) | 0;
    	    mid = (mid + Math.imul(ah7, bl3)) | 0;
    	    hi = (hi + Math.imul(ah7, bh3)) | 0;
    	    lo = (lo + Math.imul(al6, bl4)) | 0;
    	    mid = (mid + Math.imul(al6, bh4)) | 0;
    	    mid = (mid + Math.imul(ah6, bl4)) | 0;
    	    hi = (hi + Math.imul(ah6, bh4)) | 0;
    	    lo = (lo + Math.imul(al5, bl5)) | 0;
    	    mid = (mid + Math.imul(al5, bh5)) | 0;
    	    mid = (mid + Math.imul(ah5, bl5)) | 0;
    	    hi = (hi + Math.imul(ah5, bh5)) | 0;
    	    lo = (lo + Math.imul(al4, bl6)) | 0;
    	    mid = (mid + Math.imul(al4, bh6)) | 0;
    	    mid = (mid + Math.imul(ah4, bl6)) | 0;
    	    hi = (hi + Math.imul(ah4, bh6)) | 0;
    	    lo = (lo + Math.imul(al3, bl7)) | 0;
    	    mid = (mid + Math.imul(al3, bh7)) | 0;
    	    mid = (mid + Math.imul(ah3, bl7)) | 0;
    	    hi = (hi + Math.imul(ah3, bh7)) | 0;
    	    lo = (lo + Math.imul(al2, bl8)) | 0;
    	    mid = (mid + Math.imul(al2, bh8)) | 0;
    	    mid = (mid + Math.imul(ah2, bl8)) | 0;
    	    hi = (hi + Math.imul(ah2, bh8)) | 0;
    	    lo = (lo + Math.imul(al1, bl9)) | 0;
    	    mid = (mid + Math.imul(al1, bh9)) | 0;
    	    mid = (mid + Math.imul(ah1, bl9)) | 0;
    	    hi = (hi + Math.imul(ah1, bh9)) | 0;
    	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    	    w10 &= 0x3ffffff;
    	    /* k = 11 */
    	    lo = Math.imul(al9, bl2);
    	    mid = Math.imul(al9, bh2);
    	    mid = (mid + Math.imul(ah9, bl2)) | 0;
    	    hi = Math.imul(ah9, bh2);
    	    lo = (lo + Math.imul(al8, bl3)) | 0;
    	    mid = (mid + Math.imul(al8, bh3)) | 0;
    	    mid = (mid + Math.imul(ah8, bl3)) | 0;
    	    hi = (hi + Math.imul(ah8, bh3)) | 0;
    	    lo = (lo + Math.imul(al7, bl4)) | 0;
    	    mid = (mid + Math.imul(al7, bh4)) | 0;
    	    mid = (mid + Math.imul(ah7, bl4)) | 0;
    	    hi = (hi + Math.imul(ah7, bh4)) | 0;
    	    lo = (lo + Math.imul(al6, bl5)) | 0;
    	    mid = (mid + Math.imul(al6, bh5)) | 0;
    	    mid = (mid + Math.imul(ah6, bl5)) | 0;
    	    hi = (hi + Math.imul(ah6, bh5)) | 0;
    	    lo = (lo + Math.imul(al5, bl6)) | 0;
    	    mid = (mid + Math.imul(al5, bh6)) | 0;
    	    mid = (mid + Math.imul(ah5, bl6)) | 0;
    	    hi = (hi + Math.imul(ah5, bh6)) | 0;
    	    lo = (lo + Math.imul(al4, bl7)) | 0;
    	    mid = (mid + Math.imul(al4, bh7)) | 0;
    	    mid = (mid + Math.imul(ah4, bl7)) | 0;
    	    hi = (hi + Math.imul(ah4, bh7)) | 0;
    	    lo = (lo + Math.imul(al3, bl8)) | 0;
    	    mid = (mid + Math.imul(al3, bh8)) | 0;
    	    mid = (mid + Math.imul(ah3, bl8)) | 0;
    	    hi = (hi + Math.imul(ah3, bh8)) | 0;
    	    lo = (lo + Math.imul(al2, bl9)) | 0;
    	    mid = (mid + Math.imul(al2, bh9)) | 0;
    	    mid = (mid + Math.imul(ah2, bl9)) | 0;
    	    hi = (hi + Math.imul(ah2, bh9)) | 0;
    	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    	    w11 &= 0x3ffffff;
    	    /* k = 12 */
    	    lo = Math.imul(al9, bl3);
    	    mid = Math.imul(al9, bh3);
    	    mid = (mid + Math.imul(ah9, bl3)) | 0;
    	    hi = Math.imul(ah9, bh3);
    	    lo = (lo + Math.imul(al8, bl4)) | 0;
    	    mid = (mid + Math.imul(al8, bh4)) | 0;
    	    mid = (mid + Math.imul(ah8, bl4)) | 0;
    	    hi = (hi + Math.imul(ah8, bh4)) | 0;
    	    lo = (lo + Math.imul(al7, bl5)) | 0;
    	    mid = (mid + Math.imul(al7, bh5)) | 0;
    	    mid = (mid + Math.imul(ah7, bl5)) | 0;
    	    hi = (hi + Math.imul(ah7, bh5)) | 0;
    	    lo = (lo + Math.imul(al6, bl6)) | 0;
    	    mid = (mid + Math.imul(al6, bh6)) | 0;
    	    mid = (mid + Math.imul(ah6, bl6)) | 0;
    	    hi = (hi + Math.imul(ah6, bh6)) | 0;
    	    lo = (lo + Math.imul(al5, bl7)) | 0;
    	    mid = (mid + Math.imul(al5, bh7)) | 0;
    	    mid = (mid + Math.imul(ah5, bl7)) | 0;
    	    hi = (hi + Math.imul(ah5, bh7)) | 0;
    	    lo = (lo + Math.imul(al4, bl8)) | 0;
    	    mid = (mid + Math.imul(al4, bh8)) | 0;
    	    mid = (mid + Math.imul(ah4, bl8)) | 0;
    	    hi = (hi + Math.imul(ah4, bh8)) | 0;
    	    lo = (lo + Math.imul(al3, bl9)) | 0;
    	    mid = (mid + Math.imul(al3, bh9)) | 0;
    	    mid = (mid + Math.imul(ah3, bl9)) | 0;
    	    hi = (hi + Math.imul(ah3, bh9)) | 0;
    	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    	    w12 &= 0x3ffffff;
    	    /* k = 13 */
    	    lo = Math.imul(al9, bl4);
    	    mid = Math.imul(al9, bh4);
    	    mid = (mid + Math.imul(ah9, bl4)) | 0;
    	    hi = Math.imul(ah9, bh4);
    	    lo = (lo + Math.imul(al8, bl5)) | 0;
    	    mid = (mid + Math.imul(al8, bh5)) | 0;
    	    mid = (mid + Math.imul(ah8, bl5)) | 0;
    	    hi = (hi + Math.imul(ah8, bh5)) | 0;
    	    lo = (lo + Math.imul(al7, bl6)) | 0;
    	    mid = (mid + Math.imul(al7, bh6)) | 0;
    	    mid = (mid + Math.imul(ah7, bl6)) | 0;
    	    hi = (hi + Math.imul(ah7, bh6)) | 0;
    	    lo = (lo + Math.imul(al6, bl7)) | 0;
    	    mid = (mid + Math.imul(al6, bh7)) | 0;
    	    mid = (mid + Math.imul(ah6, bl7)) | 0;
    	    hi = (hi + Math.imul(ah6, bh7)) | 0;
    	    lo = (lo + Math.imul(al5, bl8)) | 0;
    	    mid = (mid + Math.imul(al5, bh8)) | 0;
    	    mid = (mid + Math.imul(ah5, bl8)) | 0;
    	    hi = (hi + Math.imul(ah5, bh8)) | 0;
    	    lo = (lo + Math.imul(al4, bl9)) | 0;
    	    mid = (mid + Math.imul(al4, bh9)) | 0;
    	    mid = (mid + Math.imul(ah4, bl9)) | 0;
    	    hi = (hi + Math.imul(ah4, bh9)) | 0;
    	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    	    w13 &= 0x3ffffff;
    	    /* k = 14 */
    	    lo = Math.imul(al9, bl5);
    	    mid = Math.imul(al9, bh5);
    	    mid = (mid + Math.imul(ah9, bl5)) | 0;
    	    hi = Math.imul(ah9, bh5);
    	    lo = (lo + Math.imul(al8, bl6)) | 0;
    	    mid = (mid + Math.imul(al8, bh6)) | 0;
    	    mid = (mid + Math.imul(ah8, bl6)) | 0;
    	    hi = (hi + Math.imul(ah8, bh6)) | 0;
    	    lo = (lo + Math.imul(al7, bl7)) | 0;
    	    mid = (mid + Math.imul(al7, bh7)) | 0;
    	    mid = (mid + Math.imul(ah7, bl7)) | 0;
    	    hi = (hi + Math.imul(ah7, bh7)) | 0;
    	    lo = (lo + Math.imul(al6, bl8)) | 0;
    	    mid = (mid + Math.imul(al6, bh8)) | 0;
    	    mid = (mid + Math.imul(ah6, bl8)) | 0;
    	    hi = (hi + Math.imul(ah6, bh8)) | 0;
    	    lo = (lo + Math.imul(al5, bl9)) | 0;
    	    mid = (mid + Math.imul(al5, bh9)) | 0;
    	    mid = (mid + Math.imul(ah5, bl9)) | 0;
    	    hi = (hi + Math.imul(ah5, bh9)) | 0;
    	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    	    w14 &= 0x3ffffff;
    	    /* k = 15 */
    	    lo = Math.imul(al9, bl6);
    	    mid = Math.imul(al9, bh6);
    	    mid = (mid + Math.imul(ah9, bl6)) | 0;
    	    hi = Math.imul(ah9, bh6);
    	    lo = (lo + Math.imul(al8, bl7)) | 0;
    	    mid = (mid + Math.imul(al8, bh7)) | 0;
    	    mid = (mid + Math.imul(ah8, bl7)) | 0;
    	    hi = (hi + Math.imul(ah8, bh7)) | 0;
    	    lo = (lo + Math.imul(al7, bl8)) | 0;
    	    mid = (mid + Math.imul(al7, bh8)) | 0;
    	    mid = (mid + Math.imul(ah7, bl8)) | 0;
    	    hi = (hi + Math.imul(ah7, bh8)) | 0;
    	    lo = (lo + Math.imul(al6, bl9)) | 0;
    	    mid = (mid + Math.imul(al6, bh9)) | 0;
    	    mid = (mid + Math.imul(ah6, bl9)) | 0;
    	    hi = (hi + Math.imul(ah6, bh9)) | 0;
    	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    	    w15 &= 0x3ffffff;
    	    /* k = 16 */
    	    lo = Math.imul(al9, bl7);
    	    mid = Math.imul(al9, bh7);
    	    mid = (mid + Math.imul(ah9, bl7)) | 0;
    	    hi = Math.imul(ah9, bh7);
    	    lo = (lo + Math.imul(al8, bl8)) | 0;
    	    mid = (mid + Math.imul(al8, bh8)) | 0;
    	    mid = (mid + Math.imul(ah8, bl8)) | 0;
    	    hi = (hi + Math.imul(ah8, bh8)) | 0;
    	    lo = (lo + Math.imul(al7, bl9)) | 0;
    	    mid = (mid + Math.imul(al7, bh9)) | 0;
    	    mid = (mid + Math.imul(ah7, bl9)) | 0;
    	    hi = (hi + Math.imul(ah7, bh9)) | 0;
    	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    	    w16 &= 0x3ffffff;
    	    /* k = 17 */
    	    lo = Math.imul(al9, bl8);
    	    mid = Math.imul(al9, bh8);
    	    mid = (mid + Math.imul(ah9, bl8)) | 0;
    	    hi = Math.imul(ah9, bh8);
    	    lo = (lo + Math.imul(al8, bl9)) | 0;
    	    mid = (mid + Math.imul(al8, bh9)) | 0;
    	    mid = (mid + Math.imul(ah8, bl9)) | 0;
    	    hi = (hi + Math.imul(ah8, bh9)) | 0;
    	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    	    w17 &= 0x3ffffff;
    	    /* k = 18 */
    	    lo = Math.imul(al9, bl9);
    	    mid = Math.imul(al9, bh9);
    	    mid = (mid + Math.imul(ah9, bl9)) | 0;
    	    hi = Math.imul(ah9, bh9);
    	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    	    w18 &= 0x3ffffff;
    	    o[0] = w0;
    	    o[1] = w1;
    	    o[2] = w2;
    	    o[3] = w3;
    	    o[4] = w4;
    	    o[5] = w5;
    	    o[6] = w6;
    	    o[7] = w7;
    	    o[8] = w8;
    	    o[9] = w9;
    	    o[10] = w10;
    	    o[11] = w11;
    	    o[12] = w12;
    	    o[13] = w13;
    	    o[14] = w14;
    	    o[15] = w15;
    	    o[16] = w16;
    	    o[17] = w17;
    	    o[18] = w18;
    	    if (c !== 0) {
    	      o[19] = c;
    	      out.length++;
    	    }
    	    return out;
    	  };

    	  // Polyfill comb
    	  if (!Math.imul) {
    	    comb10MulTo = smallMulTo;
    	  }

    	  function bigMulTo (self, num, out) {
    	    out.negative = num.negative ^ self.negative;
    	    out.length = self.length + num.length;

    	    var carry = 0;
    	    var hncarry = 0;
    	    for (var k = 0; k < out.length - 1; k++) {
    	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
    	      // note that ncarry could be >= 0x3ffffff
    	      var ncarry = hncarry;
    	      hncarry = 0;
    	      var rword = carry & 0x3ffffff;
    	      var maxJ = Math.min(k, num.length - 1);
    	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
    	        var i = k - j;
    	        var a = self.words[i] | 0;
    	        var b = num.words[j] | 0;
    	        var r = a * b;

    	        var lo = r & 0x3ffffff;
    	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
    	        lo = (lo + rword) | 0;
    	        rword = lo & 0x3ffffff;
    	        ncarry = (ncarry + (lo >>> 26)) | 0;

    	        hncarry += ncarry >>> 26;
    	        ncarry &= 0x3ffffff;
    	      }
    	      out.words[k] = rword;
    	      carry = ncarry;
    	      ncarry = hncarry;
    	    }
    	    if (carry !== 0) {
    	      out.words[k] = carry;
    	    } else {
    	      out.length--;
    	    }

    	    return out.strip();
    	  }

    	  function jumboMulTo (self, num, out) {
    	    var fftm = new FFTM();
    	    return fftm.mulp(self, num, out);
    	  }

    	  BN.prototype.mulTo = function mulTo (num, out) {
    	    var res;
    	    var len = this.length + num.length;
    	    if (this.length === 10 && num.length === 10) {
    	      res = comb10MulTo(this, num, out);
    	    } else if (len < 63) {
    	      res = smallMulTo(this, num, out);
    	    } else if (len < 1024) {
    	      res = bigMulTo(this, num, out);
    	    } else {
    	      res = jumboMulTo(this, num, out);
    	    }

    	    return res;
    	  };

    	  // Cooley-Tukey algorithm for FFT
    	  // slightly revisited to rely on looping instead of recursion

    	  function FFTM (x, y) {
    	    this.x = x;
    	    this.y = y;
    	  }

    	  FFTM.prototype.makeRBT = function makeRBT (N) {
    	    var t = new Array(N);
    	    var l = BN.prototype._countBits(N) - 1;
    	    for (var i = 0; i < N; i++) {
    	      t[i] = this.revBin(i, l, N);
    	    }

    	    return t;
    	  };

    	  // Returns binary-reversed representation of `x`
    	  FFTM.prototype.revBin = function revBin (x, l, N) {
    	    if (x === 0 || x === N - 1) return x;

    	    var rb = 0;
    	    for (var i = 0; i < l; i++) {
    	      rb |= (x & 1) << (l - i - 1);
    	      x >>= 1;
    	    }

    	    return rb;
    	  };

    	  // Performs "tweedling" phase, therefore 'emulating'
    	  // behaviour of the recursive algorithm
    	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    	    for (var i = 0; i < N; i++) {
    	      rtws[i] = rws[rbt[i]];
    	      itws[i] = iws[rbt[i]];
    	    }
    	  };

    	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    	    this.permute(rbt, rws, iws, rtws, itws, N);

    	    for (var s = 1; s < N; s <<= 1) {
    	      var l = s << 1;

    	      var rtwdf = Math.cos(2 * Math.PI / l);
    	      var itwdf = Math.sin(2 * Math.PI / l);

    	      for (var p = 0; p < N; p += l) {
    	        var rtwdf_ = rtwdf;
    	        var itwdf_ = itwdf;

    	        for (var j = 0; j < s; j++) {
    	          var re = rtws[p + j];
    	          var ie = itws[p + j];

    	          var ro = rtws[p + j + s];
    	          var io = itws[p + j + s];

    	          var rx = rtwdf_ * ro - itwdf_ * io;

    	          io = rtwdf_ * io + itwdf_ * ro;
    	          ro = rx;

    	          rtws[p + j] = re + ro;
    	          itws[p + j] = ie + io;

    	          rtws[p + j + s] = re - ro;
    	          itws[p + j + s] = ie - io;

    	          /* jshint maxdepth : false */
    	          if (j !== l) {
    	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

    	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
    	            rtwdf_ = rx;
    	          }
    	        }
    	      }
    	    }
    	  };

    	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    	    var N = Math.max(m, n) | 1;
    	    var odd = N & 1;
    	    var i = 0;
    	    for (N = N / 2 | 0; N; N = N >>> 1) {
    	      i++;
    	    }

    	    return 1 << i + 1 + odd;
    	  };

    	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    	    if (N <= 1) return;

    	    for (var i = 0; i < N / 2; i++) {
    	      var t = rws[i];

    	      rws[i] = rws[N - i - 1];
    	      rws[N - i - 1] = t;

    	      t = iws[i];

    	      iws[i] = -iws[N - i - 1];
    	      iws[N - i - 1] = -t;
    	    }
    	  };

    	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    	    var carry = 0;
    	    for (var i = 0; i < N / 2; i++) {
    	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
    	        Math.round(ws[2 * i] / N) +
    	        carry;

    	      ws[i] = w & 0x3ffffff;

    	      if (w < 0x4000000) {
    	        carry = 0;
    	      } else {
    	        carry = w / 0x4000000 | 0;
    	      }
    	    }

    	    return ws;
    	  };

    	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    	    var carry = 0;
    	    for (var i = 0; i < len; i++) {
    	      carry = carry + (ws[i] | 0);

    	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
    	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    	    }

    	    // Pad with zeroes
    	    for (i = 2 * len; i < N; ++i) {
    	      rws[i] = 0;
    	    }

    	    assert(carry === 0);
    	    assert((carry & ~0x1fff) === 0);
    	  };

    	  FFTM.prototype.stub = function stub (N) {
    	    var ph = new Array(N);
    	    for (var i = 0; i < N; i++) {
    	      ph[i] = 0;
    	    }

    	    return ph;
    	  };

    	  FFTM.prototype.mulp = function mulp (x, y, out) {
    	    var N = 2 * this.guessLen13b(x.length, y.length);

    	    var rbt = this.makeRBT(N);

    	    var _ = this.stub(N);

    	    var rws = new Array(N);
    	    var rwst = new Array(N);
    	    var iwst = new Array(N);

    	    var nrws = new Array(N);
    	    var nrwst = new Array(N);
    	    var niwst = new Array(N);

    	    var rmws = out.words;
    	    rmws.length = N;

    	    this.convert13b(x.words, x.length, rws, N);
    	    this.convert13b(y.words, y.length, nrws, N);

    	    this.transform(rws, _, rwst, iwst, N, rbt);
    	    this.transform(nrws, _, nrwst, niwst, N, rbt);

    	    for (var i = 0; i < N; i++) {
    	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
    	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
    	      rwst[i] = rx;
    	    }

    	    this.conjugate(rwst, iwst, N);
    	    this.transform(rwst, iwst, rmws, _, N, rbt);
    	    this.conjugate(rmws, _, N);
    	    this.normalize13b(rmws, N);

    	    out.negative = x.negative ^ y.negative;
    	    out.length = x.length + y.length;
    	    return out.strip();
    	  };

    	  // Multiply `this` by `num`
    	  BN.prototype.mul = function mul (num) {
    	    var out = new BN(null);
    	    out.words = new Array(this.length + num.length);
    	    return this.mulTo(num, out);
    	  };

    	  // Multiply employing FFT
    	  BN.prototype.mulf = function mulf (num) {
    	    var out = new BN(null);
    	    out.words = new Array(this.length + num.length);
    	    return jumboMulTo(this, num, out);
    	  };

    	  // In-place Multiplication
    	  BN.prototype.imul = function imul (num) {
    	    return this.clone().mulTo(num, this);
    	  };

    	  BN.prototype.imuln = function imuln (num) {
    	    assert(typeof num === 'number');
    	    assert(num < 0x4000000);

    	    // Carry
    	    var carry = 0;
    	    for (var i = 0; i < this.length; i++) {
    	      var w = (this.words[i] | 0) * num;
    	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
    	      carry >>= 26;
    	      carry += (w / 0x4000000) | 0;
    	      // NOTE: lo is 27bit maximum
    	      carry += lo >>> 26;
    	      this.words[i] = lo & 0x3ffffff;
    	    }

    	    if (carry !== 0) {
    	      this.words[i] = carry;
    	      this.length++;
    	    }

    	    return this;
    	  };

    	  BN.prototype.muln = function muln (num) {
    	    return this.clone().imuln(num);
    	  };

    	  // `this` * `this`
    	  BN.prototype.sqr = function sqr () {
    	    return this.mul(this);
    	  };

    	  // `this` * `this` in-place
    	  BN.prototype.isqr = function isqr () {
    	    return this.imul(this.clone());
    	  };

    	  // Math.pow(`this`, `num`)
    	  BN.prototype.pow = function pow (num) {
    	    var w = toBitArray(num);
    	    if (w.length === 0) return new BN(1);

    	    // Skip leading zeroes
    	    var res = this;
    	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
    	      if (w[i] !== 0) break;
    	    }

    	    if (++i < w.length) {
    	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
    	        if (w[i] === 0) continue;

    	        res = res.mul(q);
    	      }
    	    }

    	    return res;
    	  };

    	  // Shift-left in-place
    	  BN.prototype.iushln = function iushln (bits) {
    	    assert(typeof bits === 'number' && bits >= 0);
    	    var r = bits % 26;
    	    var s = (bits - r) / 26;
    	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    	    var i;

    	    if (r !== 0) {
    	      var carry = 0;

    	      for (i = 0; i < this.length; i++) {
    	        var newCarry = this.words[i] & carryMask;
    	        var c = ((this.words[i] | 0) - newCarry) << r;
    	        this.words[i] = c | carry;
    	        carry = newCarry >>> (26 - r);
    	      }

    	      if (carry) {
    	        this.words[i] = carry;
    	        this.length++;
    	      }
    	    }

    	    if (s !== 0) {
    	      for (i = this.length - 1; i >= 0; i--) {
    	        this.words[i + s] = this.words[i];
    	      }

    	      for (i = 0; i < s; i++) {
    	        this.words[i] = 0;
    	      }

    	      this.length += s;
    	    }

    	    return this.strip();
    	  };

    	  BN.prototype.ishln = function ishln (bits) {
    	    // TODO(indutny): implement me
    	    assert(this.negative === 0);
    	    return this.iushln(bits);
    	  };

    	  // Shift-right in-place
    	  // NOTE: `hint` is a lowest bit before trailing zeroes
    	  // NOTE: if `extended` is present - it will be filled with destroyed bits
    	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    	    assert(typeof bits === 'number' && bits >= 0);
    	    var h;
    	    if (hint) {
    	      h = (hint - (hint % 26)) / 26;
    	    } else {
    	      h = 0;
    	    }

    	    var r = bits % 26;
    	    var s = Math.min((bits - r) / 26, this.length);
    	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    	    var maskedWords = extended;

    	    h -= s;
    	    h = Math.max(0, h);

    	    // Extended mode, copy masked part
    	    if (maskedWords) {
    	      for (var i = 0; i < s; i++) {
    	        maskedWords.words[i] = this.words[i];
    	      }
    	      maskedWords.length = s;
    	    }

    	    if (s === 0) ; else if (this.length > s) {
    	      this.length -= s;
    	      for (i = 0; i < this.length; i++) {
    	        this.words[i] = this.words[i + s];
    	      }
    	    } else {
    	      this.words[0] = 0;
    	      this.length = 1;
    	    }

    	    var carry = 0;
    	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
    	      var word = this.words[i] | 0;
    	      this.words[i] = (carry << (26 - r)) | (word >>> r);
    	      carry = word & mask;
    	    }

    	    // Push carried bits as a mask
    	    if (maskedWords && carry !== 0) {
    	      maskedWords.words[maskedWords.length++] = carry;
    	    }

    	    if (this.length === 0) {
    	      this.words[0] = 0;
    	      this.length = 1;
    	    }

    	    return this.strip();
    	  };

    	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    	    // TODO(indutny): implement me
    	    assert(this.negative === 0);
    	    return this.iushrn(bits, hint, extended);
    	  };

    	  // Shift-left
    	  BN.prototype.shln = function shln (bits) {
    	    return this.clone().ishln(bits);
    	  };

    	  BN.prototype.ushln = function ushln (bits) {
    	    return this.clone().iushln(bits);
    	  };

    	  // Shift-right
    	  BN.prototype.shrn = function shrn (bits) {
    	    return this.clone().ishrn(bits);
    	  };

    	  BN.prototype.ushrn = function ushrn (bits) {
    	    return this.clone().iushrn(bits);
    	  };

    	  // Test if n bit is set
    	  BN.prototype.testn = function testn (bit) {
    	    assert(typeof bit === 'number' && bit >= 0);
    	    var r = bit % 26;
    	    var s = (bit - r) / 26;
    	    var q = 1 << r;

    	    // Fast case: bit is much higher than all existing words
    	    if (this.length <= s) return false;

    	    // Check bit and return
    	    var w = this.words[s];

    	    return !!(w & q);
    	  };

    	  // Return only lowers bits of number (in-place)
    	  BN.prototype.imaskn = function imaskn (bits) {
    	    assert(typeof bits === 'number' && bits >= 0);
    	    var r = bits % 26;
    	    var s = (bits - r) / 26;

    	    assert(this.negative === 0, 'imaskn works only with positive numbers');

    	    if (this.length <= s) {
    	      return this;
    	    }

    	    if (r !== 0) {
    	      s++;
    	    }
    	    this.length = Math.min(s, this.length);

    	    if (r !== 0) {
    	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    	      this.words[this.length - 1] &= mask;
    	    }

    	    return this.strip();
    	  };

    	  // Return only lowers bits of number
    	  BN.prototype.maskn = function maskn (bits) {
    	    return this.clone().imaskn(bits);
    	  };

    	  // Add plain number `num` to `this`
    	  BN.prototype.iaddn = function iaddn (num) {
    	    assert(typeof num === 'number');
    	    assert(num < 0x4000000);
    	    if (num < 0) return this.isubn(-num);

    	    // Possible sign change
    	    if (this.negative !== 0) {
    	      if (this.length === 1 && (this.words[0] | 0) < num) {
    	        this.words[0] = num - (this.words[0] | 0);
    	        this.negative = 0;
    	        return this;
    	      }

    	      this.negative = 0;
    	      this.isubn(num);
    	      this.negative = 1;
    	      return this;
    	    }

    	    // Add without checks
    	    return this._iaddn(num);
    	  };

    	  BN.prototype._iaddn = function _iaddn (num) {
    	    this.words[0] += num;

    	    // Carry
    	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
    	      this.words[i] -= 0x4000000;
    	      if (i === this.length - 1) {
    	        this.words[i + 1] = 1;
    	      } else {
    	        this.words[i + 1]++;
    	      }
    	    }
    	    this.length = Math.max(this.length, i + 1);

    	    return this;
    	  };

    	  // Subtract plain number `num` from `this`
    	  BN.prototype.isubn = function isubn (num) {
    	    assert(typeof num === 'number');
    	    assert(num < 0x4000000);
    	    if (num < 0) return this.iaddn(-num);

    	    if (this.negative !== 0) {
    	      this.negative = 0;
    	      this.iaddn(num);
    	      this.negative = 1;
    	      return this;
    	    }

    	    this.words[0] -= num;

    	    if (this.length === 1 && this.words[0] < 0) {
    	      this.words[0] = -this.words[0];
    	      this.negative = 1;
    	    } else {
    	      // Carry
    	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
    	        this.words[i] += 0x4000000;
    	        this.words[i + 1] -= 1;
    	      }
    	    }

    	    return this.strip();
    	  };

    	  BN.prototype.addn = function addn (num) {
    	    return this.clone().iaddn(num);
    	  };

    	  BN.prototype.subn = function subn (num) {
    	    return this.clone().isubn(num);
    	  };

    	  BN.prototype.iabs = function iabs () {
    	    this.negative = 0;

    	    return this;
    	  };

    	  BN.prototype.abs = function abs () {
    	    return this.clone().iabs();
    	  };

    	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    	    var len = num.length + shift;
    	    var i;

    	    this._expand(len);

    	    var w;
    	    var carry = 0;
    	    for (i = 0; i < num.length; i++) {
    	      w = (this.words[i + shift] | 0) + carry;
    	      var right = (num.words[i] | 0) * mul;
    	      w -= right & 0x3ffffff;
    	      carry = (w >> 26) - ((right / 0x4000000) | 0);
    	      this.words[i + shift] = w & 0x3ffffff;
    	    }
    	    for (; i < this.length - shift; i++) {
    	      w = (this.words[i + shift] | 0) + carry;
    	      carry = w >> 26;
    	      this.words[i + shift] = w & 0x3ffffff;
    	    }

    	    if (carry === 0) return this.strip();

    	    // Subtraction overflow
    	    assert(carry === -1);
    	    carry = 0;
    	    for (i = 0; i < this.length; i++) {
    	      w = -(this.words[i] | 0) + carry;
    	      carry = w >> 26;
    	      this.words[i] = w & 0x3ffffff;
    	    }
    	    this.negative = 1;

    	    return this.strip();
    	  };

    	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    	    var shift = this.length - num.length;

    	    var a = this.clone();
    	    var b = num;

    	    // Normalize
    	    var bhi = b.words[b.length - 1] | 0;
    	    var bhiBits = this._countBits(bhi);
    	    shift = 26 - bhiBits;
    	    if (shift !== 0) {
    	      b = b.ushln(shift);
    	      a.iushln(shift);
    	      bhi = b.words[b.length - 1] | 0;
    	    }

    	    // Initialize quotient
    	    var m = a.length - b.length;
    	    var q;

    	    if (mode !== 'mod') {
    	      q = new BN(null);
    	      q.length = m + 1;
    	      q.words = new Array(q.length);
    	      for (var i = 0; i < q.length; i++) {
    	        q.words[i] = 0;
    	      }
    	    }

    	    var diff = a.clone()._ishlnsubmul(b, 1, m);
    	    if (diff.negative === 0) {
    	      a = diff;
    	      if (q) {
    	        q.words[m] = 1;
    	      }
    	    }

    	    for (var j = m - 1; j >= 0; j--) {
    	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
    	        (a.words[b.length + j - 1] | 0);

    	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
    	      // (0x7ffffff)
    	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

    	      a._ishlnsubmul(b, qj, j);
    	      while (a.negative !== 0) {
    	        qj--;
    	        a.negative = 0;
    	        a._ishlnsubmul(b, 1, j);
    	        if (!a.isZero()) {
    	          a.negative ^= 1;
    	        }
    	      }
    	      if (q) {
    	        q.words[j] = qj;
    	      }
    	    }
    	    if (q) {
    	      q.strip();
    	    }
    	    a.strip();

    	    // Denormalize
    	    if (mode !== 'div' && shift !== 0) {
    	      a.iushrn(shift);
    	    }

    	    return {
    	      div: q || null,
    	      mod: a
    	    };
    	  };

    	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
    	  //       to `div` to request div only, or be absent to
    	  //       request both div & mod
    	  //       2) `positive` is true if unsigned mod is requested
    	  BN.prototype.divmod = function divmod (num, mode, positive) {
    	    assert(!num.isZero());

    	    if (this.isZero()) {
    	      return {
    	        div: new BN(0),
    	        mod: new BN(0)
    	      };
    	    }

    	    var div, mod, res;
    	    if (this.negative !== 0 && num.negative === 0) {
    	      res = this.neg().divmod(num, mode);

    	      if (mode !== 'mod') {
    	        div = res.div.neg();
    	      }

    	      if (mode !== 'div') {
    	        mod = res.mod.neg();
    	        if (positive && mod.negative !== 0) {
    	          mod.iadd(num);
    	        }
    	      }

    	      return {
    	        div: div,
    	        mod: mod
    	      };
    	    }

    	    if (this.negative === 0 && num.negative !== 0) {
    	      res = this.divmod(num.neg(), mode);

    	      if (mode !== 'mod') {
    	        div = res.div.neg();
    	      }

    	      return {
    	        div: div,
    	        mod: res.mod
    	      };
    	    }

    	    if ((this.negative & num.negative) !== 0) {
    	      res = this.neg().divmod(num.neg(), mode);

    	      if (mode !== 'div') {
    	        mod = res.mod.neg();
    	        if (positive && mod.negative !== 0) {
    	          mod.isub(num);
    	        }
    	      }

    	      return {
    	        div: res.div,
    	        mod: mod
    	      };
    	    }

    	    // Both numbers are positive at this point

    	    // Strip both numbers to approximate shift value
    	    if (num.length > this.length || this.cmp(num) < 0) {
    	      return {
    	        div: new BN(0),
    	        mod: this
    	      };
    	    }

    	    // Very short reduction
    	    if (num.length === 1) {
    	      if (mode === 'div') {
    	        return {
    	          div: this.divn(num.words[0]),
    	          mod: null
    	        };
    	      }

    	      if (mode === 'mod') {
    	        return {
    	          div: null,
    	          mod: new BN(this.modn(num.words[0]))
    	        };
    	      }

    	      return {
    	        div: this.divn(num.words[0]),
    	        mod: new BN(this.modn(num.words[0]))
    	      };
    	    }

    	    return this._wordDiv(num, mode);
    	  };

    	  // Find `this` / `num`
    	  BN.prototype.div = function div (num) {
    	    return this.divmod(num, 'div', false).div;
    	  };

    	  // Find `this` % `num`
    	  BN.prototype.mod = function mod (num) {
    	    return this.divmod(num, 'mod', false).mod;
    	  };

    	  BN.prototype.umod = function umod (num) {
    	    return this.divmod(num, 'mod', true).mod;
    	  };

    	  // Find Round(`this` / `num`)
    	  BN.prototype.divRound = function divRound (num) {
    	    var dm = this.divmod(num);

    	    // Fast case - exact division
    	    if (dm.mod.isZero()) return dm.div;

    	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    	    var half = num.ushrn(1);
    	    var r2 = num.andln(1);
    	    var cmp = mod.cmp(half);

    	    // Round down
    	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    	    // Round up
    	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    	  };

    	  BN.prototype.modn = function modn (num) {
    	    assert(num <= 0x3ffffff);
    	    var p = (1 << 26) % num;

    	    var acc = 0;
    	    for (var i = this.length - 1; i >= 0; i--) {
    	      acc = (p * acc + (this.words[i] | 0)) % num;
    	    }

    	    return acc;
    	  };

    	  // In-place division by number
    	  BN.prototype.idivn = function idivn (num) {
    	    assert(num <= 0x3ffffff);

    	    var carry = 0;
    	    for (var i = this.length - 1; i >= 0; i--) {
    	      var w = (this.words[i] | 0) + carry * 0x4000000;
    	      this.words[i] = (w / num) | 0;
    	      carry = w % num;
    	    }

    	    return this.strip();
    	  };

    	  BN.prototype.divn = function divn (num) {
    	    return this.clone().idivn(num);
    	  };

    	  BN.prototype.egcd = function egcd (p) {
    	    assert(p.negative === 0);
    	    assert(!p.isZero());

    	    var x = this;
    	    var y = p.clone();

    	    if (x.negative !== 0) {
    	      x = x.umod(p);
    	    } else {
    	      x = x.clone();
    	    }

    	    // A * x + B * y = x
    	    var A = new BN(1);
    	    var B = new BN(0);

    	    // C * x + D * y = y
    	    var C = new BN(0);
    	    var D = new BN(1);

    	    var g = 0;

    	    while (x.isEven() && y.isEven()) {
    	      x.iushrn(1);
    	      y.iushrn(1);
    	      ++g;
    	    }

    	    var yp = y.clone();
    	    var xp = x.clone();

    	    while (!x.isZero()) {
    	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
    	      if (i > 0) {
    	        x.iushrn(i);
    	        while (i-- > 0) {
    	          if (A.isOdd() || B.isOdd()) {
    	            A.iadd(yp);
    	            B.isub(xp);
    	          }

    	          A.iushrn(1);
    	          B.iushrn(1);
    	        }
    	      }

    	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
    	      if (j > 0) {
    	        y.iushrn(j);
    	        while (j-- > 0) {
    	          if (C.isOdd() || D.isOdd()) {
    	            C.iadd(yp);
    	            D.isub(xp);
    	          }

    	          C.iushrn(1);
    	          D.iushrn(1);
    	        }
    	      }

    	      if (x.cmp(y) >= 0) {
    	        x.isub(y);
    	        A.isub(C);
    	        B.isub(D);
    	      } else {
    	        y.isub(x);
    	        C.isub(A);
    	        D.isub(B);
    	      }
    	    }

    	    return {
    	      a: C,
    	      b: D,
    	      gcd: y.iushln(g)
    	    };
    	  };

    	  // This is reduced incarnation of the binary EEA
    	  // above, designated to invert members of the
    	  // _prime_ fields F(p) at a maximal speed
    	  BN.prototype._invmp = function _invmp (p) {
    	    assert(p.negative === 0);
    	    assert(!p.isZero());

    	    var a = this;
    	    var b = p.clone();

    	    if (a.negative !== 0) {
    	      a = a.umod(p);
    	    } else {
    	      a = a.clone();
    	    }

    	    var x1 = new BN(1);
    	    var x2 = new BN(0);

    	    var delta = b.clone();

    	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
    	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
    	      if (i > 0) {
    	        a.iushrn(i);
    	        while (i-- > 0) {
    	          if (x1.isOdd()) {
    	            x1.iadd(delta);
    	          }

    	          x1.iushrn(1);
    	        }
    	      }

    	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
    	      if (j > 0) {
    	        b.iushrn(j);
    	        while (j-- > 0) {
    	          if (x2.isOdd()) {
    	            x2.iadd(delta);
    	          }

    	          x2.iushrn(1);
    	        }
    	      }

    	      if (a.cmp(b) >= 0) {
    	        a.isub(b);
    	        x1.isub(x2);
    	      } else {
    	        b.isub(a);
    	        x2.isub(x1);
    	      }
    	    }

    	    var res;
    	    if (a.cmpn(1) === 0) {
    	      res = x1;
    	    } else {
    	      res = x2;
    	    }

    	    if (res.cmpn(0) < 0) {
    	      res.iadd(p);
    	    }

    	    return res;
    	  };

    	  BN.prototype.gcd = function gcd (num) {
    	    if (this.isZero()) return num.abs();
    	    if (num.isZero()) return this.abs();

    	    var a = this.clone();
    	    var b = num.clone();
    	    a.negative = 0;
    	    b.negative = 0;

    	    // Remove common factor of two
    	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
    	      a.iushrn(1);
    	      b.iushrn(1);
    	    }

    	    do {
    	      while (a.isEven()) {
    	        a.iushrn(1);
    	      }
    	      while (b.isEven()) {
    	        b.iushrn(1);
    	      }

    	      var r = a.cmp(b);
    	      if (r < 0) {
    	        // Swap `a` and `b` to make `a` always bigger than `b`
    	        var t = a;
    	        a = b;
    	        b = t;
    	      } else if (r === 0 || b.cmpn(1) === 0) {
    	        break;
    	      }

    	      a.isub(b);
    	    } while (true);

    	    return b.iushln(shift);
    	  };

    	  // Invert number in the field F(num)
    	  BN.prototype.invm = function invm (num) {
    	    return this.egcd(num).a.umod(num);
    	  };

    	  BN.prototype.isEven = function isEven () {
    	    return (this.words[0] & 1) === 0;
    	  };

    	  BN.prototype.isOdd = function isOdd () {
    	    return (this.words[0] & 1) === 1;
    	  };

    	  // And first word and num
    	  BN.prototype.andln = function andln (num) {
    	    return this.words[0] & num;
    	  };

    	  // Increment at the bit position in-line
    	  BN.prototype.bincn = function bincn (bit) {
    	    assert(typeof bit === 'number');
    	    var r = bit % 26;
    	    var s = (bit - r) / 26;
    	    var q = 1 << r;

    	    // Fast case: bit is much higher than all existing words
    	    if (this.length <= s) {
    	      this._expand(s + 1);
    	      this.words[s] |= q;
    	      return this;
    	    }

    	    // Add bit and propagate, if needed
    	    var carry = q;
    	    for (var i = s; carry !== 0 && i < this.length; i++) {
    	      var w = this.words[i] | 0;
    	      w += carry;
    	      carry = w >>> 26;
    	      w &= 0x3ffffff;
    	      this.words[i] = w;
    	    }
    	    if (carry !== 0) {
    	      this.words[i] = carry;
    	      this.length++;
    	    }
    	    return this;
    	  };

    	  BN.prototype.isZero = function isZero () {
    	    return this.length === 1 && this.words[0] === 0;
    	  };

    	  BN.prototype.cmpn = function cmpn (num) {
    	    var negative = num < 0;

    	    if (this.negative !== 0 && !negative) return -1;
    	    if (this.negative === 0 && negative) return 1;

    	    this.strip();

    	    var res;
    	    if (this.length > 1) {
    	      res = 1;
    	    } else {
    	      if (negative) {
    	        num = -num;
    	      }

    	      assert(num <= 0x3ffffff, 'Number is too big');

    	      var w = this.words[0] | 0;
    	      res = w === num ? 0 : w < num ? -1 : 1;
    	    }
    	    if (this.negative !== 0) return -res | 0;
    	    return res;
    	  };

    	  // Compare two numbers and return:
    	  // 1 - if `this` > `num`
    	  // 0 - if `this` == `num`
    	  // -1 - if `this` < `num`
    	  BN.prototype.cmp = function cmp (num) {
    	    if (this.negative !== 0 && num.negative === 0) return -1;
    	    if (this.negative === 0 && num.negative !== 0) return 1;

    	    var res = this.ucmp(num);
    	    if (this.negative !== 0) return -res | 0;
    	    return res;
    	  };

    	  // Unsigned comparison
    	  BN.prototype.ucmp = function ucmp (num) {
    	    // At this point both numbers have the same sign
    	    if (this.length > num.length) return 1;
    	    if (this.length < num.length) return -1;

    	    var res = 0;
    	    for (var i = this.length - 1; i >= 0; i--) {
    	      var a = this.words[i] | 0;
    	      var b = num.words[i] | 0;

    	      if (a === b) continue;
    	      if (a < b) {
    	        res = -1;
    	      } else if (a > b) {
    	        res = 1;
    	      }
    	      break;
    	    }
    	    return res;
    	  };

    	  BN.prototype.gtn = function gtn (num) {
    	    return this.cmpn(num) === 1;
    	  };

    	  BN.prototype.gt = function gt (num) {
    	    return this.cmp(num) === 1;
    	  };

    	  BN.prototype.gten = function gten (num) {
    	    return this.cmpn(num) >= 0;
    	  };

    	  BN.prototype.gte = function gte (num) {
    	    return this.cmp(num) >= 0;
    	  };

    	  BN.prototype.ltn = function ltn (num) {
    	    return this.cmpn(num) === -1;
    	  };

    	  BN.prototype.lt = function lt (num) {
    	    return this.cmp(num) === -1;
    	  };

    	  BN.prototype.lten = function lten (num) {
    	    return this.cmpn(num) <= 0;
    	  };

    	  BN.prototype.lte = function lte (num) {
    	    return this.cmp(num) <= 0;
    	  };

    	  BN.prototype.eqn = function eqn (num) {
    	    return this.cmpn(num) === 0;
    	  };

    	  BN.prototype.eq = function eq (num) {
    	    return this.cmp(num) === 0;
    	  };

    	  //
    	  // A reduce context, could be using montgomery or something better, depending
    	  // on the `m` itself.
    	  //
    	  BN.red = function red (num) {
    	    return new Red(num);
    	  };

    	  BN.prototype.toRed = function toRed (ctx) {
    	    assert(!this.red, 'Already a number in reduction context');
    	    assert(this.negative === 0, 'red works only with positives');
    	    return ctx.convertTo(this)._forceRed(ctx);
    	  };

    	  BN.prototype.fromRed = function fromRed () {
    	    assert(this.red, 'fromRed works only with numbers in reduction context');
    	    return this.red.convertFrom(this);
    	  };

    	  BN.prototype._forceRed = function _forceRed (ctx) {
    	    this.red = ctx;
    	    return this;
    	  };

    	  BN.prototype.forceRed = function forceRed (ctx) {
    	    assert(!this.red, 'Already a number in reduction context');
    	    return this._forceRed(ctx);
    	  };

    	  BN.prototype.redAdd = function redAdd (num) {
    	    assert(this.red, 'redAdd works only with red numbers');
    	    return this.red.add(this, num);
    	  };

    	  BN.prototype.redIAdd = function redIAdd (num) {
    	    assert(this.red, 'redIAdd works only with red numbers');
    	    return this.red.iadd(this, num);
    	  };

    	  BN.prototype.redSub = function redSub (num) {
    	    assert(this.red, 'redSub works only with red numbers');
    	    return this.red.sub(this, num);
    	  };

    	  BN.prototype.redISub = function redISub (num) {
    	    assert(this.red, 'redISub works only with red numbers');
    	    return this.red.isub(this, num);
    	  };

    	  BN.prototype.redShl = function redShl (num) {
    	    assert(this.red, 'redShl works only with red numbers');
    	    return this.red.shl(this, num);
    	  };

    	  BN.prototype.redMul = function redMul (num) {
    	    assert(this.red, 'redMul works only with red numbers');
    	    this.red._verify2(this, num);
    	    return this.red.mul(this, num);
    	  };

    	  BN.prototype.redIMul = function redIMul (num) {
    	    assert(this.red, 'redMul works only with red numbers');
    	    this.red._verify2(this, num);
    	    return this.red.imul(this, num);
    	  };

    	  BN.prototype.redSqr = function redSqr () {
    	    assert(this.red, 'redSqr works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.sqr(this);
    	  };

    	  BN.prototype.redISqr = function redISqr () {
    	    assert(this.red, 'redISqr works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.isqr(this);
    	  };

    	  // Square root over p
    	  BN.prototype.redSqrt = function redSqrt () {
    	    assert(this.red, 'redSqrt works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.sqrt(this);
    	  };

    	  BN.prototype.redInvm = function redInvm () {
    	    assert(this.red, 'redInvm works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.invm(this);
    	  };

    	  // Return negative clone of `this` % `red modulo`
    	  BN.prototype.redNeg = function redNeg () {
    	    assert(this.red, 'redNeg works only with red numbers');
    	    this.red._verify1(this);
    	    return this.red.neg(this);
    	  };

    	  BN.prototype.redPow = function redPow (num) {
    	    assert(this.red && !num.red, 'redPow(normalNum)');
    	    this.red._verify1(this);
    	    return this.red.pow(this, num);
    	  };

    	  // Prime numbers with efficient reduction
    	  var primes = {
    	    k256: null,
    	    p224: null,
    	    p192: null,
    	    p25519: null
    	  };

    	  // Pseudo-Mersenne prime
    	  function MPrime (name, p) {
    	    // P = 2 ^ N - K
    	    this.name = name;
    	    this.p = new BN(p, 16);
    	    this.n = this.p.bitLength();
    	    this.k = new BN(1).iushln(this.n).isub(this.p);

    	    this.tmp = this._tmp();
    	  }

    	  MPrime.prototype._tmp = function _tmp () {
    	    var tmp = new BN(null);
    	    tmp.words = new Array(Math.ceil(this.n / 13));
    	    return tmp;
    	  };

    	  MPrime.prototype.ireduce = function ireduce (num) {
    	    // Assumes that `num` is less than `P^2`
    	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    	    var r = num;
    	    var rlen;

    	    do {
    	      this.split(r, this.tmp);
    	      r = this.imulK(r);
    	      r = r.iadd(this.tmp);
    	      rlen = r.bitLength();
    	    } while (rlen > this.n);

    	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    	    if (cmp === 0) {
    	      r.words[0] = 0;
    	      r.length = 1;
    	    } else if (cmp > 0) {
    	      r.isub(this.p);
    	    } else {
    	      if (r.strip !== undefined) {
    	        // r is BN v4 instance
    	        r.strip();
    	      } else {
    	        // r is BN v5 instance
    	        r._strip();
    	      }
    	    }

    	    return r;
    	  };

    	  MPrime.prototype.split = function split (input, out) {
    	    input.iushrn(this.n, 0, out);
    	  };

    	  MPrime.prototype.imulK = function imulK (num) {
    	    return num.imul(this.k);
    	  };

    	  function K256 () {
    	    MPrime.call(
    	      this,
    	      'k256',
    	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    	  }
    	  inherits(K256, MPrime);

    	  K256.prototype.split = function split (input, output) {
    	    // 256 = 9 * 26 + 22
    	    var mask = 0x3fffff;

    	    var outLen = Math.min(input.length, 9);
    	    for (var i = 0; i < outLen; i++) {
    	      output.words[i] = input.words[i];
    	    }
    	    output.length = outLen;

    	    if (input.length <= 9) {
    	      input.words[0] = 0;
    	      input.length = 1;
    	      return;
    	    }

    	    // Shift by 9 limbs
    	    var prev = input.words[9];
    	    output.words[output.length++] = prev & mask;

    	    for (i = 10; i < input.length; i++) {
    	      var next = input.words[i] | 0;
    	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
    	      prev = next;
    	    }
    	    prev >>>= 22;
    	    input.words[i - 10] = prev;
    	    if (prev === 0 && input.length > 10) {
    	      input.length -= 10;
    	    } else {
    	      input.length -= 9;
    	    }
    	  };

    	  K256.prototype.imulK = function imulK (num) {
    	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    	    num.words[num.length] = 0;
    	    num.words[num.length + 1] = 0;
    	    num.length += 2;

    	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    	    var lo = 0;
    	    for (var i = 0; i < num.length; i++) {
    	      var w = num.words[i] | 0;
    	      lo += w * 0x3d1;
    	      num.words[i] = lo & 0x3ffffff;
    	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    	    }

    	    // Fast length reduction
    	    if (num.words[num.length - 1] === 0) {
    	      num.length--;
    	      if (num.words[num.length - 1] === 0) {
    	        num.length--;
    	      }
    	    }
    	    return num;
    	  };

    	  function P224 () {
    	    MPrime.call(
    	      this,
    	      'p224',
    	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    	  }
    	  inherits(P224, MPrime);

    	  function P192 () {
    	    MPrime.call(
    	      this,
    	      'p192',
    	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    	  }
    	  inherits(P192, MPrime);

    	  function P25519 () {
    	    // 2 ^ 255 - 19
    	    MPrime.call(
    	      this,
    	      '25519',
    	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    	  }
    	  inherits(P25519, MPrime);

    	  P25519.prototype.imulK = function imulK (num) {
    	    // K = 0x13
    	    var carry = 0;
    	    for (var i = 0; i < num.length; i++) {
    	      var hi = (num.words[i] | 0) * 0x13 + carry;
    	      var lo = hi & 0x3ffffff;
    	      hi >>>= 26;

    	      num.words[i] = lo;
    	      carry = hi;
    	    }
    	    if (carry !== 0) {
    	      num.words[num.length++] = carry;
    	    }
    	    return num;
    	  };

    	  // Exported mostly for testing purposes, use plain name instead
    	  BN._prime = function prime (name) {
    	    // Cached version of prime
    	    if (primes[name]) return primes[name];

    	    var prime;
    	    if (name === 'k256') {
    	      prime = new K256();
    	    } else if (name === 'p224') {
    	      prime = new P224();
    	    } else if (name === 'p192') {
    	      prime = new P192();
    	    } else if (name === 'p25519') {
    	      prime = new P25519();
    	    } else {
    	      throw new Error('Unknown prime ' + name);
    	    }
    	    primes[name] = prime;

    	    return prime;
    	  };

    	  //
    	  // Base reduction engine
    	  //
    	  function Red (m) {
    	    if (typeof m === 'string') {
    	      var prime = BN._prime(m);
    	      this.m = prime.p;
    	      this.prime = prime;
    	    } else {
    	      assert(m.gtn(1), 'modulus must be greater than 1');
    	      this.m = m;
    	      this.prime = null;
    	    }
    	  }

    	  Red.prototype._verify1 = function _verify1 (a) {
    	    assert(a.negative === 0, 'red works only with positives');
    	    assert(a.red, 'red works only with red numbers');
    	  };

    	  Red.prototype._verify2 = function _verify2 (a, b) {
    	    assert((a.negative | b.negative) === 0, 'red works only with positives');
    	    assert(a.red && a.red === b.red,
    	      'red works only with red numbers');
    	  };

    	  Red.prototype.imod = function imod (a) {
    	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    	    return a.umod(this.m)._forceRed(this);
    	  };

    	  Red.prototype.neg = function neg (a) {
    	    if (a.isZero()) {
    	      return a.clone();
    	    }

    	    return this.m.sub(a)._forceRed(this);
    	  };

    	  Red.prototype.add = function add (a, b) {
    	    this._verify2(a, b);

    	    var res = a.add(b);
    	    if (res.cmp(this.m) >= 0) {
    	      res.isub(this.m);
    	    }
    	    return res._forceRed(this);
    	  };

    	  Red.prototype.iadd = function iadd (a, b) {
    	    this._verify2(a, b);

    	    var res = a.iadd(b);
    	    if (res.cmp(this.m) >= 0) {
    	      res.isub(this.m);
    	    }
    	    return res;
    	  };

    	  Red.prototype.sub = function sub (a, b) {
    	    this._verify2(a, b);

    	    var res = a.sub(b);
    	    if (res.cmpn(0) < 0) {
    	      res.iadd(this.m);
    	    }
    	    return res._forceRed(this);
    	  };

    	  Red.prototype.isub = function isub (a, b) {
    	    this._verify2(a, b);

    	    var res = a.isub(b);
    	    if (res.cmpn(0) < 0) {
    	      res.iadd(this.m);
    	    }
    	    return res;
    	  };

    	  Red.prototype.shl = function shl (a, num) {
    	    this._verify1(a);
    	    return this.imod(a.ushln(num));
    	  };

    	  Red.prototype.imul = function imul (a, b) {
    	    this._verify2(a, b);
    	    return this.imod(a.imul(b));
    	  };

    	  Red.prototype.mul = function mul (a, b) {
    	    this._verify2(a, b);
    	    return this.imod(a.mul(b));
    	  };

    	  Red.prototype.isqr = function isqr (a) {
    	    return this.imul(a, a.clone());
    	  };

    	  Red.prototype.sqr = function sqr (a) {
    	    return this.mul(a, a);
    	  };

    	  Red.prototype.sqrt = function sqrt (a) {
    	    if (a.isZero()) return a.clone();

    	    var mod3 = this.m.andln(3);
    	    assert(mod3 % 2 === 1);

    	    // Fast case
    	    if (mod3 === 3) {
    	      var pow = this.m.add(new BN(1)).iushrn(2);
    	      return this.pow(a, pow);
    	    }

    	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    	    //
    	    // Find Q and S, that Q * 2 ^ S = (P - 1)
    	    var q = this.m.subn(1);
    	    var s = 0;
    	    while (!q.isZero() && q.andln(1) === 0) {
    	      s++;
    	      q.iushrn(1);
    	    }
    	    assert(!q.isZero());

    	    var one = new BN(1).toRed(this);
    	    var nOne = one.redNeg();

    	    // Find quadratic non-residue
    	    // NOTE: Max is such because of generalized Riemann hypothesis.
    	    var lpow = this.m.subn(1).iushrn(1);
    	    var z = this.m.bitLength();
    	    z = new BN(2 * z * z).toRed(this);

    	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
    	      z.redIAdd(nOne);
    	    }

    	    var c = this.pow(z, q);
    	    var r = this.pow(a, q.addn(1).iushrn(1));
    	    var t = this.pow(a, q);
    	    var m = s;
    	    while (t.cmp(one) !== 0) {
    	      var tmp = t;
    	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
    	        tmp = tmp.redSqr();
    	      }
    	      assert(i < m);
    	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

    	      r = r.redMul(b);
    	      c = b.redSqr();
    	      t = t.redMul(c);
    	      m = i;
    	    }

    	    return r;
    	  };

    	  Red.prototype.invm = function invm (a) {
    	    var inv = a._invmp(this.m);
    	    if (inv.negative !== 0) {
    	      inv.negative = 0;
    	      return this.imod(inv).redNeg();
    	    } else {
    	      return this.imod(inv);
    	    }
    	  };

    	  Red.prototype.pow = function pow (a, num) {
    	    if (num.isZero()) return new BN(1).toRed(this);
    	    if (num.cmpn(1) === 0) return a.clone();

    	    var windowSize = 4;
    	    var wnd = new Array(1 << windowSize);
    	    wnd[0] = new BN(1).toRed(this);
    	    wnd[1] = a;
    	    for (var i = 2; i < wnd.length; i++) {
    	      wnd[i] = this.mul(wnd[i - 1], a);
    	    }

    	    var res = wnd[0];
    	    var current = 0;
    	    var currentLen = 0;
    	    var start = num.bitLength() % 26;
    	    if (start === 0) {
    	      start = 26;
    	    }

    	    for (i = num.length - 1; i >= 0; i--) {
    	      var word = num.words[i];
    	      for (var j = start - 1; j >= 0; j--) {
    	        var bit = (word >> j) & 1;
    	        if (res !== wnd[0]) {
    	          res = this.sqr(res);
    	        }

    	        if (bit === 0 && current === 0) {
    	          currentLen = 0;
    	          continue;
    	        }

    	        current <<= 1;
    	        current |= bit;
    	        currentLen++;
    	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

    	        res = this.mul(res, wnd[current]);
    	        currentLen = 0;
    	        current = 0;
    	      }
    	      start = 26;
    	    }

    	    return res;
    	  };

    	  Red.prototype.convertTo = function convertTo (num) {
    	    var r = num.umod(this.m);

    	    return r === num ? r.clone() : r;
    	  };

    	  Red.prototype.convertFrom = function convertFrom (num) {
    	    var res = num.clone();
    	    res.red = null;
    	    return res;
    	  };

    	  //
    	  // Montgomery method engine
    	  //

    	  BN.mont = function mont (num) {
    	    return new Mont(num);
    	  };

    	  function Mont (m) {
    	    Red.call(this, m);

    	    this.shift = this.m.bitLength();
    	    if (this.shift % 26 !== 0) {
    	      this.shift += 26 - (this.shift % 26);
    	    }

    	    this.r = new BN(1).iushln(this.shift);
    	    this.r2 = this.imod(this.r.sqr());
    	    this.rinv = this.r._invmp(this.m);

    	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    	    this.minv = this.minv.umod(this.r);
    	    this.minv = this.r.sub(this.minv);
    	  }
    	  inherits(Mont, Red);

    	  Mont.prototype.convertTo = function convertTo (num) {
    	    return this.imod(num.ushln(this.shift));
    	  };

    	  Mont.prototype.convertFrom = function convertFrom (num) {
    	    var r = this.imod(num.mul(this.rinv));
    	    r.red = null;
    	    return r;
    	  };

    	  Mont.prototype.imul = function imul (a, b) {
    	    if (a.isZero() || b.isZero()) {
    	      a.words[0] = 0;
    	      a.length = 1;
    	      return a;
    	    }

    	    var t = a.imul(b);
    	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    	    var u = t.isub(c).iushrn(this.shift);
    	    var res = u;

    	    if (u.cmp(this.m) >= 0) {
    	      res = u.isub(this.m);
    	    } else if (u.cmpn(0) < 0) {
    	      res = u.iadd(this.m);
    	    }

    	    return res._forceRed(this);
    	  };

    	  Mont.prototype.mul = function mul (a, b) {
    	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    	    var t = a.mul(b);
    	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    	    var u = t.isub(c).iushrn(this.shift);
    	    var res = u;
    	    if (u.cmp(this.m) >= 0) {
    	      res = u.isub(this.m);
    	    } else if (u.cmpn(0) < 0) {
    	      res = u.iadd(this.m);
    	    }

    	    return res._forceRed(this);
    	  };

    	  Mont.prototype.invm = function invm (a) {
    	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    	    var res = this.imod(a._invmp(this.m).mul(this.r2));
    	    return res._forceRed(this);
    	  };
    	})(module, commonjsGlobal);
    } (bn));

    var minimalisticAssert = assert$f;

    function assert$f(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert$f.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var utils$m = {};

    (function (exports) {

    	var utils = exports;

    	function toArray(msg, enc) {
    	  if (Array.isArray(msg))
    	    return msg.slice();
    	  if (!msg)
    	    return [];
    	  var res = [];
    	  if (typeof msg !== 'string') {
    	    for (var i = 0; i < msg.length; i++)
    	      res[i] = msg[i] | 0;
    	    return res;
    	  }
    	  if (enc === 'hex') {
    	    msg = msg.replace(/[^a-z0-9]+/ig, '');
    	    if (msg.length % 2 !== 0)
    	      msg = '0' + msg;
    	    for (var i = 0; i < msg.length; i += 2)
    	      res.push(parseInt(msg[i] + msg[i + 1], 16));
    	  } else {
    	    for (var i = 0; i < msg.length; i++) {
    	      var c = msg.charCodeAt(i);
    	      var hi = c >> 8;
    	      var lo = c & 0xff;
    	      if (hi)
    	        res.push(hi, lo);
    	      else
    	        res.push(lo);
    	    }
    	  }
    	  return res;
    	}
    	utils.toArray = toArray;

    	function zero2(word) {
    	  if (word.length === 1)
    	    return '0' + word;
    	  else
    	    return word;
    	}
    	utils.zero2 = zero2;

    	function toHex(msg) {
    	  var res = '';
    	  for (var i = 0; i < msg.length; i++)
    	    res += zero2(msg[i].toString(16));
    	  return res;
    	}
    	utils.toHex = toHex;

    	utils.encode = function encode(arr, enc) {
    	  if (enc === 'hex')
    	    return toHex(arr);
    	  else
    	    return arr;
    	};
    } (utils$m));

    (function (exports) {

    	var utils = exports;
    	var BN = bn.exports;
    	var minAssert = minimalisticAssert;
    	var minUtils = utils$m;

    	utils.assert = minAssert;
    	utils.toArray = minUtils.toArray;
    	utils.zero2 = minUtils.zero2;
    	utils.toHex = minUtils.toHex;
    	utils.encode = minUtils.encode;

    	// Represent num in a w-NAF form
    	function getNAF(num, w, bits) {
    	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    	  naf.fill(0);

    	  var ws = 1 << (w + 1);
    	  var k = num.clone();

    	  for (var i = 0; i < naf.length; i++) {
    	    var z;
    	    var mod = k.andln(ws - 1);
    	    if (k.isOdd()) {
    	      if (mod > (ws >> 1) - 1)
    	        z = (ws >> 1) - mod;
    	      else
    	        z = mod;
    	      k.isubn(z);
    	    } else {
    	      z = 0;
    	    }

    	    naf[i] = z;
    	    k.iushrn(1);
    	  }

    	  return naf;
    	}
    	utils.getNAF = getNAF;

    	// Represent k1, k2 in a Joint Sparse Form
    	function getJSF(k1, k2) {
    	  var jsf = [
    	    [],
    	    [],
    	  ];

    	  k1 = k1.clone();
    	  k2 = k2.clone();
    	  var d1 = 0;
    	  var d2 = 0;
    	  var m8;
    	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    	    // First phase
    	    var m14 = (k1.andln(3) + d1) & 3;
    	    var m24 = (k2.andln(3) + d2) & 3;
    	    if (m14 === 3)
    	      m14 = -1;
    	    if (m24 === 3)
    	      m24 = -1;
    	    var u1;
    	    if ((m14 & 1) === 0) {
    	      u1 = 0;
    	    } else {
    	      m8 = (k1.andln(7) + d1) & 7;
    	      if ((m8 === 3 || m8 === 5) && m24 === 2)
    	        u1 = -m14;
    	      else
    	        u1 = m14;
    	    }
    	    jsf[0].push(u1);

    	    var u2;
    	    if ((m24 & 1) === 0) {
    	      u2 = 0;
    	    } else {
    	      m8 = (k2.andln(7) + d2) & 7;
    	      if ((m8 === 3 || m8 === 5) && m14 === 2)
    	        u2 = -m24;
    	      else
    	        u2 = m24;
    	    }
    	    jsf[1].push(u2);

    	    // Second phase
    	    if (2 * d1 === u1 + 1)
    	      d1 = 1 - d1;
    	    if (2 * d2 === u2 + 1)
    	      d2 = 1 - d2;
    	    k1.iushrn(1);
    	    k2.iushrn(1);
    	  }

    	  return jsf;
    	}
    	utils.getJSF = getJSF;

    	function cachedProperty(obj, name, computer) {
    	  var key = '_' + name;
    	  obj.prototype[name] = function cachedProperty() {
    	    return this[key] !== undefined ? this[key] :
    	      this[key] = computer.call(this);
    	  };
    	}
    	utils.cachedProperty = cachedProperty;

    	function parseBytes(bytes) {
    	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    	    bytes;
    	}
    	utils.parseBytes = parseBytes;

    	function intFromLE(bytes) {
    	  return new BN(bytes, 'hex', 'le');
    	}
    	utils.intFromLE = intFromLE;
    } (utils$n));

    var brorand = {exports: {}};

    var r$1;

    brorand.exports = function rand(len) {
      if (!r$1)
        r$1 = new Rand(null);

      return r$1.generate(len);
    };

    function Rand(rand) {
      this.rand = rand;
    }
    brorand.exports.Rand = Rand;

    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };

    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);

      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };

    if (typeof self === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };

      // Safari's WebWorkers do not have `crypto`
      } else if (typeof window === 'object') {
        // Old junk
        Rand.prototype._rand = function() {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      // Node.js or Web worker with no crypto support
      try {
        var crypto = require('crypto');
        if (typeof crypto.randomBytes !== 'function')
          throw new Error('Not supported');

        Rand.prototype._rand = function _rand(n) {
          return crypto.randomBytes(n);
        };
      } catch (e) {
      }
    }

    var curve = {};

    var BN$7 = bn.exports;
    var utils$l = utils$n;
    var getNAF = utils$l.getNAF;
    var getJSF = utils$l.getJSF;
    var assert$e = utils$l.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN$7(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? BN$7.red(conf.prime) : BN$7.mont(this.p);

      // Useful for many curves
      this.zero = new BN$7(0).toRed(this.red);
      this.one = new BN$7(1).toRed(this.red);
      this.two = new BN$7(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new BN$7(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      this._bitLength = this.n ? this.n.bitLength() : 0;

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    var base = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$e(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);

        if (i < 0)
          break;
        var z = naf[i];
        assert$e(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
      points,
      coeffs,
      len,
      jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b], /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,  /* 1 1 */
        ];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;

        for (j = 0; j < len; j++) {
          var z = tmp[j];
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();

          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (i = 0; i < len; i++)
        wnd[i] = null;

      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils$l.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert$e(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert$e(bytes[bytes.length - 1] % 2 === 1);

        var res =  this.point(bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

      return [ 0x04 ].concat(x, this.getY().toArray('be', len));
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils$l.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;

      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;

      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles,
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;

      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res,
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };

    var inherits$4 = {exports: {}};

    var inherits_browser = {exports: {}};

    var hasRequiredInherits_browser;

    function requireInherits_browser () {
    	if (hasRequiredInherits_browser) return inherits_browser.exports;
    	hasRequiredInherits_browser = 1;
    	if (typeof Object.create === 'function') {
    	  // implementation from standard node.js 'util' module
    	  inherits_browser.exports = function inherits(ctor, superCtor) {
    	    if (superCtor) {
    	      ctor.super_ = superCtor;
    	      ctor.prototype = Object.create(superCtor.prototype, {
    	        constructor: {
    	          value: ctor,
    	          enumerable: false,
    	          writable: true,
    	          configurable: true
    	        }
    	      });
    	    }
    	  };
    	} else {
    	  // old school shim for old browsers
    	  inherits_browser.exports = function inherits(ctor, superCtor) {
    	    if (superCtor) {
    	      ctor.super_ = superCtor;
    	      var TempCtor = function () {};
    	      TempCtor.prototype = superCtor.prototype;
    	      ctor.prototype = new TempCtor();
    	      ctor.prototype.constructor = ctor;
    	    }
    	  };
    	}
    	return inherits_browser.exports;
    }

    try {
      var util$8 = require('util');
      /* istanbul ignore next */
      if (typeof util$8.inherits !== 'function') throw '';
      inherits$4.exports = util$8.inherits;
    } catch (e) {
      /* istanbul ignore next */
      inherits$4.exports = requireInherits_browser();
    }

    var utils$k = utils$n;
    var BN$6 = bn.exports;
    var inherits$3 = inherits$4.exports;
    var Base$2 = base;

    var assert$d = utils$k.assert;

    function ShortCurve(conf) {
      Base$2.call(this, 'short', conf);

      this.a = new BN$6(conf.a, 16).toRed(this.red);
      this.b = new BN$6(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits$3(ShortCurve, Base$2);
    var short = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN$6(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN$6(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$d(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN$6(vec.a, 16),
            b: new BN$6(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis,
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : BN$6.mont(num);
      var tinv = new BN$6(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new BN$6(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN$6(1);
      var y1 = new BN$6(0);
      var x2 = new BN$6(0);
      var y2 = new BN$6(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN$6(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();

            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }

            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };

    function Point$2(curve, x, y, isRed) {
      Base$2.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN$6(x, 16);
        this.y = new BN$6(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits$3(Point$2, Base$2.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point$2(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point$2.fromJSON(this, obj, red);
    };

    Point$2.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;

      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };

    Point$2.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];

      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1),
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1),
        },
      } ];
    };

    Point$2.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };

    Point$2.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point$2.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point$2.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;

      // P + O = P
      if (p.inf)
        return this;

      // P + P = 2P
      if (this.eq(p))
        return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point$2.prototype.dbl = function dbl() {
      if (this.inf)
        return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point$2.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point$2.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point$2.prototype.mul = function mul(k) {
      k = new BN$6(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };

    Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point$2.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point$2.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };

    Point$2.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      Base$2.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN$6(0);
      } else {
        this.x = new BN$6(x, 16);
        this.y = new BN$6(y, 16);
        this.z = new BN$6(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits$3(JPoint, Base$2.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;

      // P + O = P
      if (p.isInfinity())
        return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();

      // P + O = P
      if (p.isInfinity())
        return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();

      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN$6(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());

      if (this === p)
        return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    var BN$5 = bn.exports;
    var inherits$2 = inherits$4.exports;
    var Base$1 = base;

    var utils$j = utils$n;

    function MontCurve(conf) {
      Base$1.call(this, 'mont', conf);

      this.a = new BN$5(conf.a, 16).toRed(this.red);
      this.b = new BN$5(conf.b, 16).toRed(this.red);
      this.i4 = new BN$5(4).toRed(this.red).redInvm();
      this.two = new BN$5(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits$2(MontCurve, Base$1);
    var mont = MontCurve;

    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();

      return y.redSqr().cmp(rhs) === 0;
    };

    function Point$1(curve, x, z) {
      Base$1.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN$5(x, 16);
        this.z = new BN$5(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits$2(Point$1, Base$1.BasePoint);

    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils$j.toArray(bytes, enc), 1);
    };

    MontCurve.prototype.point = function point(x, z) {
      return new Point$1(this, x, z);
    };

    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point$1.fromJSON(this, obj);
    };

    Point$1.prototype.precompute = function precompute() {
      // No-op
    };

    Point$1.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };

    Point$1.fromJSON = function fromJSON(curve, obj) {
      return new Point$1(curve, obj[0], obj[1] || curve.one);
    };

    Point$1.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point$1.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    Point$1.prototype.dbl = function dbl() {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
      // 2M + 2S + 4A

      // A = X1 + Z1
      var a = this.x.redAdd(this.z);
      // AA = A^2
      var aa = a.redSqr();
      // B = X1 - Z1
      var b = this.x.redSub(this.z);
      // BB = B^2
      var bb = b.redSqr();
      // C = AA - BB
      var c = aa.redSub(bb);
      // X3 = AA * BB
      var nx = aa.redMul(bb);
      // Z3 = C * (BB + A24 * C)
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };

    Point$1.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.diffAdd = function diffAdd(p, diff) {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
      // 4M + 2S + 6A

      // A = X2 + Z2
      var a = this.x.redAdd(this.z);
      // B = X2 - Z2
      var b = this.x.redSub(this.z);
      // C = X3 + Z3
      var c = p.x.redAdd(p.z);
      // D = X3 - Z3
      var d = p.x.redSub(p.z);
      // DA = D * A
      var da = d.redMul(a);
      // CB = C * B
      var cb = c.redMul(b);
      // X5 = Z1 * (DA + CB)^2
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      // Z5 = X1 * (DA - CB)^2
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };

    Point$1.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this; // (N / 2) * Q + Q
      var b = this.curve.point(null, null); // (N / 2) * Q
      var c = this; // Q

      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));

      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
          a = a.diffAdd(b, c);
          // N * Q = 2 * ((N / 2) * Q + Q))
          b = b.dbl();
        } else {
          // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
          b = a.diffAdd(b, c);
          // N * Q + Q = 2 * ((N / 2) * Q + Q)
          a = a.dbl();
        }
      }
      return b;
    };

    Point$1.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point$1.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };

    Point$1.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };

    Point$1.prototype.getX = function getX() {
      // Normalize coordinates
      this.normalize();

      return this.x.fromRed();
    };

    var utils$i = utils$n;
    var BN$4 = bn.exports;
    var inherits$1 = inherits$4.exports;
    var Base = base;

    var assert$c = utils$i.assert;

    function EdwardsCurve(conf) {
      // NOTE: Important as we are creating point in Base.call()
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;

      Base.call(this, 'edwards', conf);

      this.a = new BN$4(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN$4(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN$4(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);

      assert$c(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits$1(EdwardsCurve, Base);
    var edwards = EdwardsCurve;

    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };

    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };

    // Just for compatibility with Short curve
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };

    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN$4(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN$4(y, 16);
      if (!y.red)
        y = y.toRed(this.red);

      // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());

      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error('invalid point');
        else
          return this.point(this.zero, y);
      }

      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;

      // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
      point.normalize();

      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

      return lhs.cmp(rhs) === 0;
    };

    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN$4(x, 16);
        this.y = new BN$4(y, 16);
        this.z = z ? new BN$4(z, 16) : this.curve.one;
        this.t = t && new BN$4(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;

        // Use extended coordinates
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits$1(Point, Base.BasePoint);

    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };

    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };

    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) +
          ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.x.cmpn(0) === 0 &&
        (this.y.cmp(this.z) === 0 ||
        (this.zOne && this.y.cmp(this.curve.c) === 0));
    };

    Point.prototype._extDbl = function _extDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #doubling-dbl-2008-hwcd
      // 4M + 4S

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = 2 * Z1^2
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      // D = a * A
      var d = this.curve._mulA(a);
      // E = (X1 + Y1)^2 - A - B
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      // G = D + B
      var g = d.redAdd(b);
      // F = G - C
      var f = g.redSub(c);
      // H = D - B
      var h = d.redSub(b);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projDbl = function _projDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #doubling-dbl-2008-bbjlp
      //     #doubling-dbl-2007-bl
      // and others
      // Generally 3M + 4S or 2M + 4S

      // B = (X1 + Y1)^2
      var b = this.x.redAdd(this.y).redSqr();
      // C = X1^2
      var c = this.x.redSqr();
      // D = Y1^2
      var d = this.y.redSqr();

      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
          // X3 = (B - C - D) * (F - 2)
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F^2 - 2 * F
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          // H = Z1^2
          h = this.z.redSqr();
          // J = F - 2 * H
          j = f.redSub(h).redISub(h);
          // X3 = (B-C-D)*J
          nx = b.redSub(c).redISub(d).redMul(j);
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F * J
          nz = f.redMul(j);
        }
      } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      // Double in extended coordinates
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };

    Point.prototype._extAdd = function _extAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #addition-add-2008-hwcd-3
      // 8M

      // A = (Y1 - X1) * (Y2 - X2)
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      // B = (Y1 + X1) * (Y2 + X2)
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      // C = T1 * k * T2
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      // D = Z1 * 2 * Z2
      var d = this.z.redMul(p.z.redAdd(p.z));
      // E = B - A
      var e = b.redSub(a);
      // F = D - C
      var f = d.redSub(c);
      // G = D + C
      var g = d.redAdd(c);
      // H = B + A
      var h = b.redAdd(a);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projAdd = function _projAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #addition-add-2008-bbjlp
      //     #addition-add-2007-bl
      // 10M + 1S

      // A = Z1 * Z2
      var a = this.z.redMul(p.z);
      // B = A^2
      var b = a.redSqr();
      // C = X1 * X2
      var c = this.x.redMul(p.x);
      // D = Y1 * Y2
      var d = this.y.redMul(p.y);
      // E = d * C * D
      var e = this.curve.d.redMul(c).redMul(d);
      // F = B - E
      var f = b.redSub(e);
      // G = B + E
      var g = b.redAdd(e);
      // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
      } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;

      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };

    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
    };

    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;

      // Normalize coordinates
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };

    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg());
    };

    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };

    Point.prototype.eq = function eq(other) {
      return this === other ||
             this.getX().cmp(other.getX()) === 0 &&
             this.getY().cmp(other.getY()) === 0;
    };

    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    // Compatibility with BaseCurve
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;

    (function (exports) {

    	var curve = exports;

    	curve.base = base;
    	curve.short = short;
    	curve.mont = mont;
    	curve.edwards = edwards;
    } (curve));

    var curves$2 = {};

    var hash$2 = {};

    var utils$h = {};

    var assert$b = minimalisticAssert;
    var inherits = inherits$4.exports;

    utils$h.inherits = inherits;

    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    utils$h.toArray = toArray;

    function toHex$1(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils$h.toHex = toHex$1;

    function htonl(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    utils$h.htonl = htonl;

    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    utils$h.toHex32 = toHex32;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils$h.zero2 = zero2;

    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    utils$h.zero8 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      assert$b(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    utils$h.join32 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    utils$h.split32 = split32;

    function rotr32$1(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    utils$h.rotr32 = rotr32$1;

    function rotl32$2(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    utils$h.rotl32 = rotl32$2;

    function sum32$3(a, b) {
      return (a + b) >>> 0;
    }
    utils$h.sum32 = sum32$3;

    function sum32_3$1(a, b, c) {
      return (a + b + c) >>> 0;
    }
    utils$h.sum32_3 = sum32_3$1;

    function sum32_4$2(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    utils$h.sum32_4 = sum32_4$2;

    function sum32_5$2(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    utils$h.sum32_5 = sum32_5$2;

    function sum64$1(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    utils$h.sum64 = sum64$1;

    function sum64_hi$1(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    utils$h.sum64_hi = sum64_hi$1;

    function sum64_lo$1(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    utils$h.sum64_lo = sum64_lo$1;

    function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    utils$h.sum64_4_hi = sum64_4_hi$1;

    function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    utils$h.sum64_4_lo = sum64_4_lo$1;

    function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    utils$h.sum64_5_hi = sum64_5_hi$1;

    function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    }
    utils$h.sum64_5_lo = sum64_5_lo$1;

    function rotr64_hi$1(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    utils$h.rotr64_hi = rotr64_hi$1;

    function rotr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    utils$h.rotr64_lo = rotr64_lo$1;

    function shr64_hi$1(ah, al, num) {
      return ah >>> num;
    }
    utils$h.shr64_hi = shr64_hi$1;

    function shr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    utils$h.shr64_lo = shr64_lo$1;

    var common$5 = {};

    var utils$g = utils$h;
    var assert$a = minimalisticAssert;

    function BlockHash$4() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    common$5.BlockHash = BlockHash$4;

    BlockHash$4.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils$g.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;

        msg = utils$g.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash$4.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert$a(this.pending === null);

      return this._digest(enc);
    };

    BlockHash$4.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }

      return res;
    };

    var sha = {};

    var common$4 = {};

    var utils$f = utils$h;
    var rotr32 = utils$f.rotr32;

    function ft_1$1(s, x, y, z) {
      if (s === 0)
        return ch32$1(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32$1(x, y, z);
    }
    common$4.ft_1 = ft_1$1;

    function ch32$1(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    common$4.ch32 = ch32$1;

    function maj32$1(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    common$4.maj32 = maj32$1;

    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    common$4.p32 = p32;

    function s0_256$1(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    common$4.s0_256 = s0_256$1;

    function s1_256$1(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    common$4.s1_256 = s1_256$1;

    function g0_256$1(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    common$4.g0_256 = g0_256$1;

    function g1_256$1(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    common$4.g1_256 = g1_256$1;

    var utils$e = utils$h;
    var common$3 = common$5;
    var shaCommon$1 = common$4;

    var rotl32$1 = utils$e.rotl32;
    var sum32$2 = utils$e.sum32;
    var sum32_5$1 = utils$e.sum32_5;
    var ft_1 = shaCommon$1.ft_1;
    var BlockHash$3 = common$3.BlockHash;

    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];

    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();

      BlockHash$3.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }

    utils$e.inherits(SHA1, BlockHash$3);
    var _1 = SHA1;

    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];

      for(; i < W.length; i++)
        W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32$1(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32$2(this.h[0], a);
      this.h[1] = sum32$2(this.h[1], b);
      this.h[2] = sum32$2(this.h[2], c);
      this.h[3] = sum32$2(this.h[3], d);
      this.h[4] = sum32$2(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$e.toHex32(this.h, 'big');
      else
        return utils$e.split32(this.h, 'big');
    };

    var utils$d = utils$h;
    var common$2 = common$5;
    var shaCommon = common$4;
    var assert$9 = minimalisticAssert;

    var sum32$1 = utils$d.sum32;
    var sum32_4$1 = utils$d.sum32_4;
    var sum32_5 = utils$d.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;

    var BlockHash$2 = common$2.BlockHash;

    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    function SHA256$1() {
      if (!(this instanceof SHA256$1))
        return new SHA256$1();

      BlockHash$2.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils$d.inherits(SHA256$1, BlockHash$2);
    var _256 = SHA256$1;

    SHA256$1.blockSize = 512;
    SHA256$1.outSize = 256;
    SHA256$1.hmacStrength = 192;
    SHA256$1.padLength = 64;

    SHA256$1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      assert$9(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32$1(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32$1(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$1(T1, T2);
      }

      this.h[0] = sum32$1(this.h[0], a);
      this.h[1] = sum32$1(this.h[1], b);
      this.h[2] = sum32$1(this.h[2], c);
      this.h[3] = sum32$1(this.h[3], d);
      this.h[4] = sum32$1(this.h[4], e);
      this.h[5] = sum32$1(this.h[5], f);
      this.h[6] = sum32$1(this.h[6], g);
      this.h[7] = sum32$1(this.h[7], h);
    };

    SHA256$1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$d.toHex32(this.h, 'big');
      else
        return utils$d.split32(this.h, 'big');
    };

    var utils$c = utils$h;
    var SHA256 = _256;

    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();

      SHA256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils$c.inherits(SHA224, SHA256);
    var _224 = SHA224;

    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils$c.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils$c.split32(this.h.slice(0, 7), 'big');
    };

    var utils$b = utils$h;
    var common$1 = common$5;
    var assert$8 = minimalisticAssert;

    var rotr64_hi = utils$b.rotr64_hi;
    var rotr64_lo = utils$b.rotr64_lo;
    var shr64_hi = utils$b.shr64_hi;
    var shr64_lo = utils$b.shr64_lo;
    var sum64 = utils$b.sum64;
    var sum64_hi = utils$b.sum64_hi;
    var sum64_lo = utils$b.sum64_lo;
    var sum64_4_hi = utils$b.sum64_4_hi;
    var sum64_4_lo = utils$b.sum64_4_lo;
    var sum64_5_hi = utils$b.sum64_5_hi;
    var sum64_5_lo = utils$b.sum64_5_lo;

    var BlockHash$1 = common$1.BlockHash;

    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function SHA512$1() {
      if (!(this instanceof SHA512$1))
        return new SHA512$1();

      BlockHash$1.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils$b.inherits(SHA512$1, BlockHash$1);
    var _512 = SHA512$1;

    SHA512$1.blockSize = 1024;
    SHA512$1.outSize = 512;
    SHA512$1.hmacStrength = 192;
    SHA512$1.padLength = 128;

    SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };

    SHA512$1.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      assert$8(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);

        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };

    SHA512$1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$b.toHex32(this.h, 'big');
      else
        return utils$b.split32(this.h, 'big');
    };

    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi(xl, xh, 7);  // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo(xl, xh, 7);  // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);  // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);  // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);  // 61
      var c2_hi = shr64_hi(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);  // 61
      var c2_lo = shr64_lo(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    var utils$a = utils$h;

    var SHA512 = _512;

    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();

      SHA512.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils$a.inherits(SHA384, SHA512);
    var _384 = SHA384;

    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$a.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils$a.split32(this.h.slice(0, 12), 'big');
    };

    sha.sha1 = _1;
    sha.sha224 = _224;
    sha.sha256 = _256;
    sha.sha384 = _384;
    sha.sha512 = _512;

    var ripemd = {};

    var utils$9 = utils$h;
    var common = common$5;

    var rotl32 = utils$9.rotl32;
    var sum32 = utils$9.sum32;
    var sum32_3 = utils$9.sum32_3;
    var sum32_4 = utils$9.sum32_4;
    var BlockHash = common.BlockHash;

    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();

      BlockHash.call(this);

      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils$9.inherits(RIPEMD160, BlockHash);
    ripemd.ripemd160 = RIPEMD160;

    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;

    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]),
          E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$9.toHex32(this.h, 'little');
      else
        return utils$9.split32(this.h, 'little');
    };

    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }

    function K(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }

    var r = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var s = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var utils$8 = utils$h;
    var assert$7 = minimalisticAssert;

    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils$8.toArray(key, enc));
    }
    var hmac = Hmac;

    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert$7(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);

      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };

    (function (exports) {
    	var hash = exports;

    	hash.utils = utils$h;
    	hash.common = common$5;
    	hash.sha = sha;
    	hash.ripemd = ripemd;
    	hash.hmac = hmac;

    	// Proxy hash functions to the main object
    	hash.sha1 = hash.sha.sha1;
    	hash.sha256 = hash.sha.sha256;
    	hash.sha224 = hash.sha.sha224;
    	hash.sha384 = hash.sha.sha384;
    	hash.sha512 = hash.sha.sha512;
    	hash.ripemd160 = hash.ripemd.ripemd160;
    } (hash$2));

    var secp256k1;
    var hasRequiredSecp256k1;

    function requireSecp256k1 () {
    	if (hasRequiredSecp256k1) return secp256k1;
    	hasRequiredSecp256k1 = 1;
    	secp256k1 = {
    	  doubles: {
    	    step: 4,
    	    points: [
    	      [
    	        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
    	        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
    	      ],
    	      [
    	        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
    	        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
    	      ],
    	      [
    	        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
    	        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
    	      ],
    	      [
    	        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
    	        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
    	      ],
    	      [
    	        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
    	        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
    	      ],
    	      [
    	        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
    	        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
    	      ],
    	      [
    	        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
    	        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
    	      ],
    	      [
    	        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
    	        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
    	      ],
    	      [
    	        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
    	        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
    	      ],
    	      [
    	        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
    	        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
    	      ],
    	      [
    	        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
    	        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
    	      ],
    	      [
    	        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
    	        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
    	      ],
    	      [
    	        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
    	        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
    	      ],
    	      [
    	        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
    	        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
    	      ],
    	      [
    	        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
    	        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
    	      ],
    	      [
    	        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
    	        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
    	      ],
    	      [
    	        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
    	        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
    	      ],
    	      [
    	        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
    	        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
    	      ],
    	      [
    	        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
    	        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
    	      ],
    	      [
    	        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
    	        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
    	      ],
    	      [
    	        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
    	        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
    	      ],
    	      [
    	        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
    	        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
    	      ],
    	      [
    	        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
    	        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
    	      ],
    	      [
    	        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
    	        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
    	      ],
    	      [
    	        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
    	        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
    	      ],
    	      [
    	        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
    	        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
    	      ],
    	      [
    	        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
    	        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
    	      ],
    	      [
    	        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
    	        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
    	      ],
    	      [
    	        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
    	        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
    	      ],
    	      [
    	        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
    	        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
    	      ],
    	      [
    	        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
    	        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
    	      ],
    	      [
    	        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
    	        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
    	      ],
    	      [
    	        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
    	        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
    	      ],
    	      [
    	        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
    	        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
    	      ],
    	      [
    	        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
    	        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
    	      ],
    	      [
    	        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
    	        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
    	      ],
    	      [
    	        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
    	        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
    	      ],
    	      [
    	        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
    	        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
    	      ],
    	      [
    	        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
    	        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
    	      ],
    	      [
    	        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
    	        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
    	      ],
    	      [
    	        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
    	        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
    	      ],
    	      [
    	        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
    	        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
    	      ],
    	      [
    	        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
    	        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
    	      ],
    	      [
    	        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
    	        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
    	      ],
    	      [
    	        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
    	        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
    	      ],
    	      [
    	        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
    	        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
    	      ],
    	      [
    	        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
    	        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
    	      ],
    	      [
    	        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
    	        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
    	      ],
    	      [
    	        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
    	        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
    	      ],
    	      [
    	        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
    	        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
    	      ],
    	      [
    	        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
    	        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
    	      ],
    	      [
    	        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
    	        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
    	      ],
    	      [
    	        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
    	        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
    	      ],
    	      [
    	        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
    	        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
    	      ],
    	      [
    	        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
    	        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
    	      ],
    	      [
    	        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
    	        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
    	      ],
    	      [
    	        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
    	        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
    	      ],
    	      [
    	        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
    	        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
    	      ],
    	      [
    	        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
    	        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
    	      ],
    	      [
    	        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
    	        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
    	      ],
    	      [
    	        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
    	        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
    	      ],
    	      [
    	        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
    	        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
    	      ],
    	      [
    	        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
    	        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
    	      ],
    	      [
    	        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
    	        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
    	      ],
    	      [
    	        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
    	        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
    	      ],
    	    ],
    	  },
    	  naf: {
    	    wnd: 7,
    	    points: [
    	      [
    	        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
    	        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
    	      ],
    	      [
    	        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
    	        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
    	      ],
    	      [
    	        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
    	        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
    	      ],
    	      [
    	        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
    	        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
    	      ],
    	      [
    	        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
    	        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
    	      ],
    	      [
    	        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
    	        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
    	      ],
    	      [
    	        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
    	        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
    	      ],
    	      [
    	        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
    	        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
    	      ],
    	      [
    	        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
    	        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
    	      ],
    	      [
    	        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
    	        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
    	      ],
    	      [
    	        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
    	        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
    	      ],
    	      [
    	        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
    	        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
    	      ],
    	      [
    	        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
    	        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
    	      ],
    	      [
    	        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
    	        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
    	      ],
    	      [
    	        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
    	        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
    	      ],
    	      [
    	        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
    	        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
    	      ],
    	      [
    	        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
    	        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
    	      ],
    	      [
    	        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
    	        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
    	      ],
    	      [
    	        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
    	        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
    	      ],
    	      [
    	        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
    	        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
    	      ],
    	      [
    	        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
    	        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
    	      ],
    	      [
    	        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
    	        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
    	      ],
    	      [
    	        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
    	        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
    	      ],
    	      [
    	        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
    	        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
    	      ],
    	      [
    	        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
    	        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
    	      ],
    	      [
    	        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
    	        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
    	      ],
    	      [
    	        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
    	        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
    	      ],
    	      [
    	        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
    	        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
    	      ],
    	      [
    	        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
    	        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
    	      ],
    	      [
    	        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
    	        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
    	      ],
    	      [
    	        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
    	        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
    	      ],
    	      [
    	        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
    	        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
    	      ],
    	      [
    	        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
    	        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
    	      ],
    	      [
    	        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
    	        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
    	      ],
    	      [
    	        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
    	        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
    	      ],
    	      [
    	        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
    	        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
    	      ],
    	      [
    	        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
    	        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
    	      ],
    	      [
    	        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
    	        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
    	      ],
    	      [
    	        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
    	        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
    	      ],
    	      [
    	        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
    	        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
    	      ],
    	      [
    	        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
    	        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
    	      ],
    	      [
    	        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
    	        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
    	      ],
    	      [
    	        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
    	        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
    	      ],
    	      [
    	        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
    	        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
    	      ],
    	      [
    	        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
    	        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
    	      ],
    	      [
    	        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
    	        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
    	      ],
    	      [
    	        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
    	        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
    	      ],
    	      [
    	        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
    	        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
    	      ],
    	      [
    	        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
    	        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
    	      ],
    	      [
    	        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
    	        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
    	      ],
    	      [
    	        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
    	        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
    	      ],
    	      [
    	        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
    	        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
    	      ],
    	      [
    	        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
    	        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
    	      ],
    	      [
    	        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
    	        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
    	      ],
    	      [
    	        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
    	        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
    	      ],
    	      [
    	        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
    	        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
    	      ],
    	      [
    	        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
    	        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
    	      ],
    	      [
    	        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
    	        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
    	      ],
    	      [
    	        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
    	        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
    	      ],
    	      [
    	        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
    	        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
    	      ],
    	      [
    	        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
    	        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
    	      ],
    	      [
    	        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
    	        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
    	      ],
    	      [
    	        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
    	        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
    	      ],
    	      [
    	        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
    	        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
    	      ],
    	      [
    	        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
    	        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
    	      ],
    	      [
    	        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
    	        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
    	      ],
    	      [
    	        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
    	        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
    	      ],
    	      [
    	        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
    	        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
    	      ],
    	      [
    	        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
    	        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
    	      ],
    	      [
    	        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
    	        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
    	      ],
    	      [
    	        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
    	        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
    	      ],
    	      [
    	        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
    	        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
    	      ],
    	      [
    	        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
    	        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
    	      ],
    	      [
    	        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
    	        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
    	      ],
    	      [
    	        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
    	        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
    	      ],
    	      [
    	        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
    	        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
    	      ],
    	      [
    	        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
    	        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
    	      ],
    	      [
    	        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
    	        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
    	      ],
    	      [
    	        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
    	        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
    	      ],
    	      [
    	        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
    	        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
    	      ],
    	      [
    	        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
    	        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
    	      ],
    	      [
    	        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
    	        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
    	      ],
    	      [
    	        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
    	        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
    	      ],
    	      [
    	        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
    	        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
    	      ],
    	      [
    	        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
    	        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
    	      ],
    	      [
    	        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
    	        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
    	      ],
    	      [
    	        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
    	        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
    	      ],
    	      [
    	        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
    	        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
    	      ],
    	      [
    	        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
    	        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
    	      ],
    	      [
    	        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
    	        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
    	      ],
    	      [
    	        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
    	        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
    	      ],
    	      [
    	        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
    	        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
    	      ],
    	      [
    	        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
    	        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
    	      ],
    	      [
    	        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
    	        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
    	      ],
    	      [
    	        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
    	        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
    	      ],
    	      [
    	        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
    	        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
    	      ],
    	      [
    	        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
    	        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
    	      ],
    	      [
    	        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
    	        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
    	      ],
    	      [
    	        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
    	        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
    	      ],
    	      [
    	        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
    	        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
    	      ],
    	      [
    	        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
    	        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
    	      ],
    	      [
    	        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
    	        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
    	      ],
    	      [
    	        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
    	        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
    	      ],
    	      [
    	        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
    	        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
    	      ],
    	      [
    	        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
    	        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
    	      ],
    	      [
    	        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
    	        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
    	      ],
    	      [
    	        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
    	        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
    	      ],
    	      [
    	        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
    	        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
    	      ],
    	      [
    	        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
    	        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
    	      ],
    	      [
    	        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
    	        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
    	      ],
    	      [
    	        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
    	        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
    	      ],
    	      [
    	        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
    	        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
    	      ],
    	      [
    	        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
    	        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
    	      ],
    	      [
    	        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
    	        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
    	      ],
    	      [
    	        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
    	        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
    	      ],
    	      [
    	        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
    	        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
    	      ],
    	      [
    	        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
    	        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
    	      ],
    	      [
    	        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
    	        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
    	      ],
    	      [
    	        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
    	        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
    	      ],
    	      [
    	        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
    	        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
    	      ],
    	      [
    	        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
    	        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
    	      ],
    	      [
    	        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
    	        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
    	      ],
    	      [
    	        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
    	        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
    	      ],
    	      [
    	        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
    	        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
    	      ],
    	      [
    	        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
    	        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
    	      ],
    	      [
    	        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
    	        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
    	      ],
    	      [
    	        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
    	        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
    	      ],
    	    ],
    	  },
    	};
    	return secp256k1;
    }

    (function (exports) {

    	var curves = exports;

    	var hash = hash$2;
    	var curve$1 = curve;
    	var utils = utils$n;

    	var assert = utils.assert;

    	function PresetCurve(options) {
    	  if (options.type === 'short')
    	    this.curve = new curve$1.short(options);
    	  else if (options.type === 'edwards')
    	    this.curve = new curve$1.edwards(options);
    	  else
    	    this.curve = new curve$1.mont(options);
    	  this.g = this.curve.g;
    	  this.n = this.curve.n;
    	  this.hash = options.hash;

    	  assert(this.g.validate(), 'Invalid curve');
    	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    	}
    	curves.PresetCurve = PresetCurve;

    	function defineCurve(name, options) {
    	  Object.defineProperty(curves, name, {
    	    configurable: true,
    	    enumerable: true,
    	    get: function() {
    	      var curve = new PresetCurve(options);
    	      Object.defineProperty(curves, name, {
    	        configurable: true,
    	        enumerable: true,
    	        value: curve,
    	      });
    	      return curve;
    	    },
    	  });
    	}

    	defineCurve('p192', {
    	  type: 'short',
    	  prime: 'p192',
    	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    	  hash: hash.sha256,
    	  gRed: false,
    	  g: [
    	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
    	  ],
    	});

    	defineCurve('p224', {
    	  type: 'short',
    	  prime: 'p224',
    	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    	  hash: hash.sha256,
    	  gRed: false,
    	  g: [
    	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
    	  ],
    	});

    	defineCurve('p256', {
    	  type: 'short',
    	  prime: null,
    	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    	  hash: hash.sha256,
    	  gRed: false,
    	  g: [
    	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
    	  ],
    	});

    	defineCurve('p384', {
    	  type: 'short',
    	  prime: null,
    	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'fffffffe ffffffff 00000000 00000000 ffffffff',
    	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'fffffffe ffffffff 00000000 00000000 fffffffc',
    	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
    	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
    	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    	  hash: hash.sha384,
    	  gRed: false,
    	  g: [
    	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    	    '5502f25d bf55296c 3a545e38 72760ab7',
    	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
    	  ],
    	});

    	defineCurve('p521', {
    	  type: 'short',
    	  prime: null,
    	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
    	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
    	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
    	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
    	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
    	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
    	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    	  hash: hash.sha512,
    	  gRed: false,
    	  g: [
    	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    	    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
    	  ],
    	});

    	defineCurve('curve25519', {
    	  type: 'mont',
    	  prime: 'p25519',
    	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    	  a: '76d06',
    	  b: '1',
    	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    	  hash: hash.sha256,
    	  gRed: false,
    	  g: [
    	    '9',
    	  ],
    	});

    	defineCurve('ed25519', {
    	  type: 'edwards',
    	  prime: 'p25519',
    	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    	  a: '-1',
    	  c: '1',
    	  // -121665 * (121666^(-1)) (mod P)
    	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    	  hash: hash.sha256,
    	  gRed: false,
    	  g: [
    	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    	    // 4/5
    	    '6666666666666666666666666666666666666666666666666666666666666658',
    	  ],
    	});

    	var pre;
    	try {
    	  pre = requireSecp256k1();
    	} catch (e) {
    	  pre = undefined;
    	}

    	defineCurve('secp256k1', {
    	  type: 'short',
    	  prime: 'k256',
    	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    	  a: '0',
    	  b: '7',
    	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    	  h: '1',
    	  hash: hash.sha256,

    	  // Precomputed endomorphism
    	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    	  basis: [
    	    {
    	      a: '3086d221a7d46bcde86c90e49284eb15',
    	      b: '-e4437ed6010e88286f547fa90abfe4c3',
    	    },
    	    {
    	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
    	      b: '3086d221a7d46bcde86c90e49284eb15',
    	    },
    	  ],

    	  gRed: false,
    	  g: [
    	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    	    pre,
    	  ],
    	});
    } (curves$2));

    var hash$1 = hash$2;
    var utils$7 = utils$m;
    var assert$6 = minimalisticAssert;

    function HmacDRBG$1(options) {
      if (!(this instanceof HmacDRBG$1))
        return new HmacDRBG$1(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils$7.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils$7.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils$7.toArray(options.pers, options.persEnc || 'hex');
      assert$6(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    var hmacDrbg = HmacDRBG$1;

    HmacDRBG$1.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };

    HmacDRBG$1.prototype._hmac = function hmac() {
      return new hash$1.hmac(this.hash, this.K);
    };

    HmacDRBG$1.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;

      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils$7.toArray(entropy, entropyEnc);
      add = utils$7.toArray(add, addEnc);

      assert$6(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };

    HmacDRBG$1.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils$7.toArray(add, addEnc || 'hex');
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils$7.encode(res, enc);
    };

    var BN$3 = bn.exports;
    var utils$6 = utils$n;
    var assert$5 = utils$6.assert;

    function KeyPair$3(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    var key$1 = KeyPair$3;

    KeyPair$3.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair$3)
        return pub;

      return new KeyPair$3(ec, {
        pub: pub,
        pubEnc: enc,
      });
    };

    KeyPair$3.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair$3)
        return priv;

      return new KeyPair$3(ec, {
        priv: priv,
        privEnc: enc,
      });
    };

    KeyPair$3.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);

      if (!enc)
        return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };

    KeyPair$3.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN$3(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair$3.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert$5(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert$5(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair$3.prototype.derive = function derive(pub) {
      if(!pub.validate()) {
        assert$5(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair$3.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair$3.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair$3.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };

    var BN$2 = bn.exports;

    var utils$5 = utils$n;
    var assert$4 = utils$5.assert;

    function Signature$3(options, enc) {
      if (options instanceof Signature$3)
        return options;

      if (this._importDER(options, enc))
        return;

      assert$4(options.r && options.s, 'Signature without r or s');
      this.r = new BN$2(options.r, 16);
      this.s = new BN$2(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    var signature$1 = Signature$3;

    function Position() {
      this.place = 0;
    }

    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;

      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }

      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature$3.prototype._importDER = function _importDER(data, enc) {
      data = utils$5.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new BN$2(r);
      this.s = new BN$2(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }

    Signature$3.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);

      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils$5.encode(res, enc);
    };

    var BN$1 = bn.exports;
    var HmacDRBG = hmacDrbg;
    var utils$4 = utils$n;
    var curves$1 = curves$2;
    var rand = brorand.exports;
    var assert$3 = utils$4.assert;

    var KeyPair$2 = key$1;
    var Signature$2 = signature$1;

    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert$3(Object.prototype.hasOwnProperty.call(curves$1, options),
          'Unknown curve ' + options);

        options = curves$1[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves$1.PresetCurve)
        options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    var ec = EC;

    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair$2(this, options);
    };

    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair$2.fromPrivate(this, priv, enc);
    };

    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair$2.fromPublic(this, pub, enc);
    };

    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};

      // Instantiate Hmac_DRBG
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray(),
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN$1(2));
      for (;;) {
        var priv = new BN$1(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };

    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };

    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN$1(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new BN$1(1));

      for (var iter = 0; ; iter++) {
        var k = options.k ?
          options.k(iter) :
          new BN$1(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new Signature$2({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN$1(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature$2(signature, 'hex');

      // Perform primitive values validation
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;

      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
      assert$3((3 & j) === j, 'The recovery param is more than two bits');
      signature = new Signature$2(signature, enc);

      var n = this.n;
      var e = new BN$1(msg);
      var r = signature.r;
      var s = signature.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
      signature = new Signature$2(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };

    var utils$3 = utils$n;
    var assert$2 = utils$3.assert;
    var parseBytes$2 = utils$3.parseBytes;
    var cachedProperty$1 = utils$3.cachedProperty;

    /**
    * @param {EDDSA} eddsa - instance
    * @param {Object} params - public/private key parameters
    *
    * @param {Array<Byte>} [params.secret] - secret seed bytes
    * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
    * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
    *
    */
    function KeyPair$1(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes$2(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes$2(params.pub);
    }

    KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair$1)
        return pub;
      return new KeyPair$1(eddsa, { pub: pub });
    };

    KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair$1)
        return secret;
      return new KeyPair$1(eddsa, { secret: secret });
    };

    KeyPair$1.prototype.secret = function secret() {
      return this._secret;
    };

    cachedProperty$1(KeyPair$1, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });

    cachedProperty$1(KeyPair$1, 'pub', function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });

    cachedProperty$1(KeyPair$1, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;

      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;

      return a;
    });

    cachedProperty$1(KeyPair$1, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });

    cachedProperty$1(KeyPair$1, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });

    cachedProperty$1(KeyPair$1, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });

    KeyPair$1.prototype.sign = function sign(message) {
      assert$2(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };

    KeyPair$1.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };

    KeyPair$1.prototype.getSecret = function getSecret(enc) {
      assert$2(this._secret, 'KeyPair is public only');
      return utils$3.encode(this.secret(), enc);
    };

    KeyPair$1.prototype.getPublic = function getPublic(enc) {
      return utils$3.encode(this.pubBytes(), enc);
    };

    var key = KeyPair$1;

    var BN = bn.exports;
    var utils$2 = utils$n;
    var assert$1 = utils$2.assert;
    var cachedProperty = utils$2.cachedProperty;
    var parseBytes$1 = utils$2.parseBytes;

    /**
    * @param {EDDSA} eddsa - eddsa instance
    * @param {Array<Bytes>|Object} sig -
    * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
    * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
    * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
    * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
    */
    function Signature$1(eddsa, sig) {
      this.eddsa = eddsa;

      if (typeof sig !== 'object')
        sig = parseBytes$1(sig);

      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength),
        };
      }

      assert$1(sig.R && sig.S, 'Signature without R or S');

      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN)
        this._S = sig.S;

      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }

    cachedProperty(Signature$1, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });

    cachedProperty(Signature$1, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });

    cachedProperty(Signature$1, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });

    cachedProperty(Signature$1, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });

    Signature$1.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };

    Signature$1.prototype.toHex = function toHex() {
      return utils$2.encode(this.toBytes(), 'hex').toUpperCase();
    };

    var signature = Signature$1;

    var hash = hash$2;
    var curves = curves$2;
    var utils$1 = utils$n;
    var assert = utils$1.assert;
    var parseBytes = utils$1.parseBytes;
    var KeyPair = key;
    var Signature = signature;

    function EDDSA(curve) {
      assert(curve === 'ed25519', 'only tested with ed25519 so far');

      if (!(this instanceof EDDSA))
        return new EDDSA(curve);

      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);

      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }

    var eddsa = EDDSA;

    /**
    * @param {Array|String} message - message bytes
    * @param {Array|String|KeyPair} secret - secret bytes or a keypair
    * @returns {Signature} - signature
    */
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
        .mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
    };

    /**
    * @param {Array} message - message bytes
    * @param {Array|String|Signature} sig - sig bytes
    * @param {Array|String|Point|KeyPair} pub - public key
    * @returns {Boolean} - true if public key matches sig of message
    */
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };

    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash.update(arguments[i]);
      return utils$1.intFromLE(hash.digest()).umod(this.curve.n);
    };

    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };

    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };

    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };

    /**
    * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
    *
    * EDDSA defines methods for encoding and decoding points and integers. These are
    * helper convenience methods, that pass along to utility functions implied
    * parameters.
    *
    */
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
      return enc;
    };

    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils$1.parseBytes(bytes);

      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

      var y = utils$1.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };

    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };

    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils$1.intFromLE(bytes);
    };

    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };

    (function (exports) {

    	var elliptic = exports;

    	elliptic.version = require$$0.version;
    	elliptic.utils = utils$n;
    	elliptic.rand = brorand.exports;
    	elliptic.curve = curve;
    	elliptic.curves = curves$2;

    	// Protocols
    	elliptic.ec = ec;
    	elliptic.eddsa = eddsa;
    } (elliptic));

    var indexMinimal = {};

    var minimal$1 = {};

    var aspromise;
    var hasRequiredAspromise;

    function requireAspromise () {
    	if (hasRequiredAspromise) return aspromise;
    	hasRequiredAspromise = 1;
    	aspromise = asPromise;

    	/**
    	 * Callback as used by {@link util.asPromise}.
    	 * @typedef asPromiseCallback
    	 * @type {function}
    	 * @param {Error|null} error Error, if any
    	 * @param {...*} params Additional arguments
    	 * @returns {undefined}
    	 */

    	/**
    	 * Returns a promise from a node-style callback function.
    	 * @memberof util
    	 * @param {asPromiseCallback} fn Function to call
    	 * @param {*} ctx Function context
    	 * @param {...*} params Function arguments
    	 * @returns {Promise<*>} Promisified function
    	 */
    	function asPromise(fn, ctx/*, varargs */) {
    	    var params  = new Array(arguments.length - 1),
    	        offset  = 0,
    	        index   = 2,
    	        pending = true;
    	    while (index < arguments.length)
    	        params[offset++] = arguments[index++];
    	    return new Promise(function executor(resolve, reject) {
    	        params[offset] = function callback(err/*, varargs */) {
    	            if (pending) {
    	                pending = false;
    	                if (err)
    	                    reject(err);
    	                else {
    	                    var params = new Array(arguments.length - 1),
    	                        offset = 0;
    	                    while (offset < params.length)
    	                        params[offset++] = arguments[offset];
    	                    resolve.apply(null, params);
    	                }
    	            }
    	        };
    	        try {
    	            fn.apply(ctx || null, params);
    	        } catch (err) {
    	            if (pending) {
    	                pending = false;
    	                reject(err);
    	            }
    	        }
    	    });
    	}
    	return aspromise;
    }

    var base64$1 = {};

    var hasRequiredBase64;

    function requireBase64 () {
    	if (hasRequiredBase64) return base64$1;
    	hasRequiredBase64 = 1;
    	(function (exports) {

    		/**
    		 * A minimal base64 implementation for number arrays.
    		 * @memberof util
    		 * @namespace
    		 */
    		var base64 = exports;

    		/**
    		 * Calculates the byte length of a base64 encoded string.
    		 * @param {string} string Base64 encoded string
    		 * @returns {number} Byte length
    		 */
    		base64.length = function length(string) {
    		    var p = string.length;
    		    if (!p)
    		        return 0;
    		    var n = 0;
    		    while (--p % 4 > 1 && string.charAt(p) === "=")
    		        ++n;
    		    return Math.ceil(string.length * 3) / 4 - n;
    		};

    		// Base64 encoding table
    		var b64 = new Array(64);

    		// Base64 decoding table
    		var s64 = new Array(123);

    		// 65..90, 97..122, 48..57, 43, 47
    		for (var i = 0; i < 64;)
    		    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

    		/**
    		 * Encodes a buffer to a base64 encoded string.
    		 * @param {Uint8Array} buffer Source buffer
    		 * @param {number} start Source start
    		 * @param {number} end Source end
    		 * @returns {string} Base64 encoded string
    		 */
    		base64.encode = function encode(buffer, start, end) {
    		    var parts = null,
    		        chunk = [];
    		    var i = 0, // output index
    		        j = 0, // goto index
    		        t;     // temporary
    		    while (start < end) {
    		        var b = buffer[start++];
    		        switch (j) {
    		            case 0:
    		                chunk[i++] = b64[b >> 2];
    		                t = (b & 3) << 4;
    		                j = 1;
    		                break;
    		            case 1:
    		                chunk[i++] = b64[t | b >> 4];
    		                t = (b & 15) << 2;
    		                j = 2;
    		                break;
    		            case 2:
    		                chunk[i++] = b64[t | b >> 6];
    		                chunk[i++] = b64[b & 63];
    		                j = 0;
    		                break;
    		        }
    		        if (i > 8191) {
    		            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
    		            i = 0;
    		        }
    		    }
    		    if (j) {
    		        chunk[i++] = b64[t];
    		        chunk[i++] = 61;
    		        if (j === 1)
    		            chunk[i++] = 61;
    		    }
    		    if (parts) {
    		        if (i)
    		            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
    		        return parts.join("");
    		    }
    		    return String.fromCharCode.apply(String, chunk.slice(0, i));
    		};

    		var invalidEncoding = "invalid encoding";

    		/**
    		 * Decodes a base64 encoded string to a buffer.
    		 * @param {string} string Source string
    		 * @param {Uint8Array} buffer Destination buffer
    		 * @param {number} offset Destination offset
    		 * @returns {number} Number of bytes written
    		 * @throws {Error} If encoding is invalid
    		 */
    		base64.decode = function decode(string, buffer, offset) {
    		    var start = offset;
    		    var j = 0, // goto index
    		        t;     // temporary
    		    for (var i = 0; i < string.length;) {
    		        var c = string.charCodeAt(i++);
    		        if (c === 61 && j > 1)
    		            break;
    		        if ((c = s64[c]) === undefined)
    		            throw Error(invalidEncoding);
    		        switch (j) {
    		            case 0:
    		                t = c;
    		                j = 1;
    		                break;
    		            case 1:
    		                buffer[offset++] = t << 2 | (c & 48) >> 4;
    		                t = c;
    		                j = 2;
    		                break;
    		            case 2:
    		                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
    		                t = c;
    		                j = 3;
    		                break;
    		            case 3:
    		                buffer[offset++] = (t & 3) << 6 | c;
    		                j = 0;
    		                break;
    		        }
    		    }
    		    if (j === 1)
    		        throw Error(invalidEncoding);
    		    return offset - start;
    		};

    		/**
    		 * Tests if the specified string appears to be base64 encoded.
    		 * @param {string} string String to test
    		 * @returns {boolean} `true` if probably base64 encoded, otherwise false
    		 */
    		base64.test = function test(string) {
    		    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    		};
    } (base64$1));
    	return base64$1;
    }

    var eventemitter;
    var hasRequiredEventemitter;

    function requireEventemitter () {
    	if (hasRequiredEventemitter) return eventemitter;
    	hasRequiredEventemitter = 1;
    	eventemitter = EventEmitter;

    	/**
    	 * Constructs a new event emitter instance.
    	 * @classdesc A minimal event emitter.
    	 * @memberof util
    	 * @constructor
    	 */
    	function EventEmitter() {

    	    /**
    	     * Registered listeners.
    	     * @type {Object.<string,*>}
    	     * @private
    	     */
    	    this._listeners = {};
    	}

    	/**
    	 * Registers an event listener.
    	 * @param {string} evt Event name
    	 * @param {function} fn Listener
    	 * @param {*} [ctx] Listener context
    	 * @returns {util.EventEmitter} `this`
    	 */
    	EventEmitter.prototype.on = function on(evt, fn, ctx) {
    	    (this._listeners[evt] || (this._listeners[evt] = [])).push({
    	        fn  : fn,
    	        ctx : ctx || this
    	    });
    	    return this;
    	};

    	/**
    	 * Removes an event listener or any matching listeners if arguments are omitted.
    	 * @param {string} [evt] Event name. Removes all listeners if omitted.
    	 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
    	 * @returns {util.EventEmitter} `this`
    	 */
    	EventEmitter.prototype.off = function off(evt, fn) {
    	    if (evt === undefined)
    	        this._listeners = {};
    	    else {
    	        if (fn === undefined)
    	            this._listeners[evt] = [];
    	        else {
    	            var listeners = this._listeners[evt];
    	            for (var i = 0; i < listeners.length;)
    	                if (listeners[i].fn === fn)
    	                    listeners.splice(i, 1);
    	                else
    	                    ++i;
    	        }
    	    }
    	    return this;
    	};

    	/**
    	 * Emits an event by calling its listeners with the specified arguments.
    	 * @param {string} evt Event name
    	 * @param {...*} args Arguments
    	 * @returns {util.EventEmitter} `this`
    	 */
    	EventEmitter.prototype.emit = function emit(evt) {
    	    var listeners = this._listeners[evt];
    	    if (listeners) {
    	        var args = [],
    	            i = 1;
    	        for (; i < arguments.length;)
    	            args.push(arguments[i++]);
    	        for (i = 0; i < listeners.length;)
    	            listeners[i].fn.apply(listeners[i++].ctx, args);
    	    }
    	    return this;
    	};
    	return eventemitter;
    }

    var float;
    var hasRequiredFloat;

    function requireFloat () {
    	if (hasRequiredFloat) return float;
    	hasRequiredFloat = 1;

    	float = factory(factory);

    	/**
    	 * Reads / writes floats / doubles from / to buffers.
    	 * @name util.float
    	 * @namespace
    	 */

    	/**
    	 * Writes a 32 bit float to a buffer using little endian byte order.
    	 * @name util.float.writeFloatLE
    	 * @function
    	 * @param {number} val Value to write
    	 * @param {Uint8Array} buf Target buffer
    	 * @param {number} pos Target buffer offset
    	 * @returns {undefined}
    	 */

    	/**
    	 * Writes a 32 bit float to a buffer using big endian byte order.
    	 * @name util.float.writeFloatBE
    	 * @function
    	 * @param {number} val Value to write
    	 * @param {Uint8Array} buf Target buffer
    	 * @param {number} pos Target buffer offset
    	 * @returns {undefined}
    	 */

    	/**
    	 * Reads a 32 bit float from a buffer using little endian byte order.
    	 * @name util.float.readFloatLE
    	 * @function
    	 * @param {Uint8Array} buf Source buffer
    	 * @param {number} pos Source buffer offset
    	 * @returns {number} Value read
    	 */

    	/**
    	 * Reads a 32 bit float from a buffer using big endian byte order.
    	 * @name util.float.readFloatBE
    	 * @function
    	 * @param {Uint8Array} buf Source buffer
    	 * @param {number} pos Source buffer offset
    	 * @returns {number} Value read
    	 */

    	/**
    	 * Writes a 64 bit double to a buffer using little endian byte order.
    	 * @name util.float.writeDoubleLE
    	 * @function
    	 * @param {number} val Value to write
    	 * @param {Uint8Array} buf Target buffer
    	 * @param {number} pos Target buffer offset
    	 * @returns {undefined}
    	 */

    	/**
    	 * Writes a 64 bit double to a buffer using big endian byte order.
    	 * @name util.float.writeDoubleBE
    	 * @function
    	 * @param {number} val Value to write
    	 * @param {Uint8Array} buf Target buffer
    	 * @param {number} pos Target buffer offset
    	 * @returns {undefined}
    	 */

    	/**
    	 * Reads a 64 bit double from a buffer using little endian byte order.
    	 * @name util.float.readDoubleLE
    	 * @function
    	 * @param {Uint8Array} buf Source buffer
    	 * @param {number} pos Source buffer offset
    	 * @returns {number} Value read
    	 */

    	/**
    	 * Reads a 64 bit double from a buffer using big endian byte order.
    	 * @name util.float.readDoubleBE
    	 * @function
    	 * @param {Uint8Array} buf Source buffer
    	 * @param {number} pos Source buffer offset
    	 * @returns {number} Value read
    	 */

    	// Factory function for the purpose of node-based testing in modified global environments
    	function factory(exports) {

    	    // float: typed array
    	    if (typeof Float32Array !== "undefined") (function() {

    	        var f32 = new Float32Array([ -0 ]),
    	            f8b = new Uint8Array(f32.buffer),
    	            le  = f8b[3] === 128;

    	        function writeFloat_f32_cpy(val, buf, pos) {
    	            f32[0] = val;
    	            buf[pos    ] = f8b[0];
    	            buf[pos + 1] = f8b[1];
    	            buf[pos + 2] = f8b[2];
    	            buf[pos + 3] = f8b[3];
    	        }

    	        function writeFloat_f32_rev(val, buf, pos) {
    	            f32[0] = val;
    	            buf[pos    ] = f8b[3];
    	            buf[pos + 1] = f8b[2];
    	            buf[pos + 2] = f8b[1];
    	            buf[pos + 3] = f8b[0];
    	        }

    	        /* istanbul ignore next */
    	        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
    	        /* istanbul ignore next */
    	        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

    	        function readFloat_f32_cpy(buf, pos) {
    	            f8b[0] = buf[pos    ];
    	            f8b[1] = buf[pos + 1];
    	            f8b[2] = buf[pos + 2];
    	            f8b[3] = buf[pos + 3];
    	            return f32[0];
    	        }

    	        function readFloat_f32_rev(buf, pos) {
    	            f8b[3] = buf[pos    ];
    	            f8b[2] = buf[pos + 1];
    	            f8b[1] = buf[pos + 2];
    	            f8b[0] = buf[pos + 3];
    	            return f32[0];
    	        }

    	        /* istanbul ignore next */
    	        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
    	        /* istanbul ignore next */
    	        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    	    // float: ieee754
    	    })(); else (function() {

    	        function writeFloat_ieee754(writeUint, val, buf, pos) {
    	            var sign = val < 0 ? 1 : 0;
    	            if (sign)
    	                val = -val;
    	            if (val === 0)
    	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
    	            else if (isNaN(val))
    	                writeUint(2143289344, buf, pos);
    	            else if (val > 3.4028234663852886e+38) // +-Infinity
    	                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
    	            else if (val < 1.1754943508222875e-38) // denormal
    	                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
    	            else {
    	                var exponent = Math.floor(Math.log(val) / Math.LN2),
    	                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
    	                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
    	            }
    	        }

    	        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
    	        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

    	        function readFloat_ieee754(readUint, buf, pos) {
    	            var uint = readUint(buf, pos),
    	                sign = (uint >> 31) * 2 + 1,
    	                exponent = uint >>> 23 & 255,
    	                mantissa = uint & 8388607;
    	            return exponent === 255
    	                ? mantissa
    	                ? NaN
    	                : sign * Infinity
    	                : exponent === 0 // denormal
    	                ? sign * 1.401298464324817e-45 * mantissa
    	                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
    	        }

    	        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
    	        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    	    })();

    	    // double: typed array
    	    if (typeof Float64Array !== "undefined") (function() {

    	        var f64 = new Float64Array([-0]),
    	            f8b = new Uint8Array(f64.buffer),
    	            le  = f8b[7] === 128;

    	        function writeDouble_f64_cpy(val, buf, pos) {
    	            f64[0] = val;
    	            buf[pos    ] = f8b[0];
    	            buf[pos + 1] = f8b[1];
    	            buf[pos + 2] = f8b[2];
    	            buf[pos + 3] = f8b[3];
    	            buf[pos + 4] = f8b[4];
    	            buf[pos + 5] = f8b[5];
    	            buf[pos + 6] = f8b[6];
    	            buf[pos + 7] = f8b[7];
    	        }

    	        function writeDouble_f64_rev(val, buf, pos) {
    	            f64[0] = val;
    	            buf[pos    ] = f8b[7];
    	            buf[pos + 1] = f8b[6];
    	            buf[pos + 2] = f8b[5];
    	            buf[pos + 3] = f8b[4];
    	            buf[pos + 4] = f8b[3];
    	            buf[pos + 5] = f8b[2];
    	            buf[pos + 6] = f8b[1];
    	            buf[pos + 7] = f8b[0];
    	        }

    	        /* istanbul ignore next */
    	        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
    	        /* istanbul ignore next */
    	        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

    	        function readDouble_f64_cpy(buf, pos) {
    	            f8b[0] = buf[pos    ];
    	            f8b[1] = buf[pos + 1];
    	            f8b[2] = buf[pos + 2];
    	            f8b[3] = buf[pos + 3];
    	            f8b[4] = buf[pos + 4];
    	            f8b[5] = buf[pos + 5];
    	            f8b[6] = buf[pos + 6];
    	            f8b[7] = buf[pos + 7];
    	            return f64[0];
    	        }

    	        function readDouble_f64_rev(buf, pos) {
    	            f8b[7] = buf[pos    ];
    	            f8b[6] = buf[pos + 1];
    	            f8b[5] = buf[pos + 2];
    	            f8b[4] = buf[pos + 3];
    	            f8b[3] = buf[pos + 4];
    	            f8b[2] = buf[pos + 5];
    	            f8b[1] = buf[pos + 6];
    	            f8b[0] = buf[pos + 7];
    	            return f64[0];
    	        }

    	        /* istanbul ignore next */
    	        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
    	        /* istanbul ignore next */
    	        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    	    // double: ieee754
    	    })(); else (function() {

    	        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
    	            var sign = val < 0 ? 1 : 0;
    	            if (sign)
    	                val = -val;
    	            if (val === 0) {
    	                writeUint(0, buf, pos + off0);
    	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
    	            } else if (isNaN(val)) {
    	                writeUint(0, buf, pos + off0);
    	                writeUint(2146959360, buf, pos + off1);
    	            } else if (val > 1.7976931348623157e+308) { // +-Infinity
    	                writeUint(0, buf, pos + off0);
    	                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
    	            } else {
    	                var mantissa;
    	                if (val < 2.2250738585072014e-308) { // denormal
    	                    mantissa = val / 5e-324;
    	                    writeUint(mantissa >>> 0, buf, pos + off0);
    	                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
    	                } else {
    	                    var exponent = Math.floor(Math.log(val) / Math.LN2);
    	                    if (exponent === 1024)
    	                        exponent = 1023;
    	                    mantissa = val * Math.pow(2, -exponent);
    	                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
    	                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
    	                }
    	            }
    	        }

    	        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
    	        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

    	        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
    	            var lo = readUint(buf, pos + off0),
    	                hi = readUint(buf, pos + off1);
    	            var sign = (hi >> 31) * 2 + 1,
    	                exponent = hi >>> 20 & 2047,
    	                mantissa = 4294967296 * (hi & 1048575) + lo;
    	            return exponent === 2047
    	                ? mantissa
    	                ? NaN
    	                : sign * Infinity
    	                : exponent === 0 // denormal
    	                ? sign * 5e-324 * mantissa
    	                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
    	        }

    	        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
    	        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    	    })();

    	    return exports;
    	}

    	// uint helpers

    	function writeUintLE(val, buf, pos) {
    	    buf[pos    ] =  val        & 255;
    	    buf[pos + 1] =  val >>> 8  & 255;
    	    buf[pos + 2] =  val >>> 16 & 255;
    	    buf[pos + 3] =  val >>> 24;
    	}

    	function writeUintBE(val, buf, pos) {
    	    buf[pos    ] =  val >>> 24;
    	    buf[pos + 1] =  val >>> 16 & 255;
    	    buf[pos + 2] =  val >>> 8  & 255;
    	    buf[pos + 3] =  val        & 255;
    	}

    	function readUintLE(buf, pos) {
    	    return (buf[pos    ]
    	          | buf[pos + 1] << 8
    	          | buf[pos + 2] << 16
    	          | buf[pos + 3] << 24) >>> 0;
    	}

    	function readUintBE(buf, pos) {
    	    return (buf[pos    ] << 24
    	          | buf[pos + 1] << 16
    	          | buf[pos + 2] << 8
    	          | buf[pos + 3]) >>> 0;
    	}
    	return float;
    }

    var inquire_1;
    var hasRequiredInquire;

    function requireInquire () {
    	if (hasRequiredInquire) return inquire_1;
    	hasRequiredInquire = 1;
    	inquire_1 = inquire;

    	/**
    	 * Requires a module only if available.
    	 * @memberof util
    	 * @param {string} moduleName Module to require
    	 * @returns {?Object} Required module if available and not empty, otherwise `null`
    	 */
    	function inquire(moduleName) {
    	    try {
    	        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
    	        if (mod && (mod.length || Object.keys(mod).length))
    	            return mod;
    	    } catch (e) {} // eslint-disable-line no-empty
    	    return null;
    	}
    	return inquire_1;
    }

    var utf8$2 = {};

    var hasRequiredUtf8;

    function requireUtf8 () {
    	if (hasRequiredUtf8) return utf8$2;
    	hasRequiredUtf8 = 1;
    	(function (exports) {

    		/**
    		 * A minimal UTF8 implementation for number arrays.
    		 * @memberof util
    		 * @namespace
    		 */
    		var utf8 = exports;

    		/**
    		 * Calculates the UTF8 byte length of a string.
    		 * @param {string} string String
    		 * @returns {number} Byte length
    		 */
    		utf8.length = function utf8_length(string) {
    		    var len = 0,
    		        c = 0;
    		    for (var i = 0; i < string.length; ++i) {
    		        c = string.charCodeAt(i);
    		        if (c < 128)
    		            len += 1;
    		        else if (c < 2048)
    		            len += 2;
    		        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
    		            ++i;
    		            len += 4;
    		        } else
    		            len += 3;
    		    }
    		    return len;
    		};

    		/**
    		 * Reads UTF8 bytes as a string.
    		 * @param {Uint8Array} buffer Source buffer
    		 * @param {number} start Source start
    		 * @param {number} end Source end
    		 * @returns {string} String read
    		 */
    		utf8.read = function utf8_read(buffer, start, end) {
    		    var len = end - start;
    		    if (len < 1)
    		        return "";
    		    var parts = null,
    		        chunk = [],
    		        i = 0, // char offset
    		        t;     // temporary
    		    while (start < end) {
    		        t = buffer[start++];
    		        if (t < 128)
    		            chunk[i++] = t;
    		        else if (t > 191 && t < 224)
    		            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
    		        else if (t > 239 && t < 365) {
    		            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
    		            chunk[i++] = 0xD800 + (t >> 10);
    		            chunk[i++] = 0xDC00 + (t & 1023);
    		        } else
    		            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
    		        if (i > 8191) {
    		            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
    		            i = 0;
    		        }
    		    }
    		    if (parts) {
    		        if (i)
    		            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
    		        return parts.join("");
    		    }
    		    return String.fromCharCode.apply(String, chunk.slice(0, i));
    		};

    		/**
    		 * Writes a string as UTF8 bytes.
    		 * @param {string} string Source string
    		 * @param {Uint8Array} buffer Destination buffer
    		 * @param {number} offset Destination offset
    		 * @returns {number} Bytes written
    		 */
    		utf8.write = function utf8_write(string, buffer, offset) {
    		    var start = offset,
    		        c1, // character 1
    		        c2; // character 2
    		    for (var i = 0; i < string.length; ++i) {
    		        c1 = string.charCodeAt(i);
    		        if (c1 < 128) {
    		            buffer[offset++] = c1;
    		        } else if (c1 < 2048) {
    		            buffer[offset++] = c1 >> 6       | 192;
    		            buffer[offset++] = c1       & 63 | 128;
    		        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
    		            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
    		            ++i;
    		            buffer[offset++] = c1 >> 18      | 240;
    		            buffer[offset++] = c1 >> 12 & 63 | 128;
    		            buffer[offset++] = c1 >> 6  & 63 | 128;
    		            buffer[offset++] = c1       & 63 | 128;
    		        } else {
    		            buffer[offset++] = c1 >> 12      | 224;
    		            buffer[offset++] = c1 >> 6  & 63 | 128;
    		            buffer[offset++] = c1       & 63 | 128;
    		        }
    		    }
    		    return offset - start;
    		};
    } (utf8$2));
    	return utf8$2;
    }

    var pool_1;
    var hasRequiredPool;

    function requirePool () {
    	if (hasRequiredPool) return pool_1;
    	hasRequiredPool = 1;
    	pool_1 = pool;

    	/**
    	 * An allocator as used by {@link util.pool}.
    	 * @typedef PoolAllocator
    	 * @type {function}
    	 * @param {number} size Buffer size
    	 * @returns {Uint8Array} Buffer
    	 */

    	/**
    	 * A slicer as used by {@link util.pool}.
    	 * @typedef PoolSlicer
    	 * @type {function}
    	 * @param {number} start Start offset
    	 * @param {number} end End offset
    	 * @returns {Uint8Array} Buffer slice
    	 * @this {Uint8Array}
    	 */

    	/**
    	 * A general purpose buffer pool.
    	 * @memberof util
    	 * @function
    	 * @param {PoolAllocator} alloc Allocator
    	 * @param {PoolSlicer} slice Slicer
    	 * @param {number} [size=8192] Slab size
    	 * @returns {PoolAllocator} Pooled allocator
    	 */
    	function pool(alloc, slice, size) {
    	    var SIZE   = size || 8192;
    	    var MAX    = SIZE >>> 1;
    	    var slab   = null;
    	    var offset = SIZE;
    	    return function pool_alloc(size) {
    	        if (size < 1 || size > MAX)
    	            return alloc(size);
    	        if (offset + size > SIZE) {
    	            slab = alloc(SIZE);
    	            offset = 0;
    	        }
    	        var buf = slice.call(slab, offset, offset += size);
    	        if (offset & 7) // align to 32 bit
    	            offset = (offset | 7) + 1;
    	        return buf;
    	    };
    	}
    	return pool_1;
    }

    var longbits;
    var hasRequiredLongbits;

    function requireLongbits () {
    	if (hasRequiredLongbits) return longbits;
    	hasRequiredLongbits = 1;
    	longbits = LongBits;

    	var util = requireMinimal();

    	/**
    	 * Constructs new long bits.
    	 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
    	 * @memberof util
    	 * @constructor
    	 * @param {number} lo Low 32 bits, unsigned
    	 * @param {number} hi High 32 bits, unsigned
    	 */
    	function LongBits(lo, hi) {

    	    // note that the casts below are theoretically unnecessary as of today, but older statically
    	    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    	    /**
    	     * Low bits.
    	     * @type {number}
    	     */
    	    this.lo = lo >>> 0;

    	    /**
    	     * High bits.
    	     * @type {number}
    	     */
    	    this.hi = hi >>> 0;
    	}

    	/**
    	 * Zero bits.
    	 * @memberof util.LongBits
    	 * @type {util.LongBits}
    	 */
    	var zero = LongBits.zero = new LongBits(0, 0);

    	zero.toNumber = function() { return 0; };
    	zero.zzEncode = zero.zzDecode = function() { return this; };
    	zero.length = function() { return 1; };

    	/**
    	 * Zero hash.
    	 * @memberof util.LongBits
    	 * @type {string}
    	 */
    	var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

    	/**
    	 * Constructs new long bits from the specified number.
    	 * @param {number} value Value
    	 * @returns {util.LongBits} Instance
    	 */
    	LongBits.fromNumber = function fromNumber(value) {
    	    if (value === 0)
    	        return zero;
    	    var sign = value < 0;
    	    if (sign)
    	        value = -value;
    	    var lo = value >>> 0,
    	        hi = (value - lo) / 4294967296 >>> 0;
    	    if (sign) {
    	        hi = ~hi >>> 0;
    	        lo = ~lo >>> 0;
    	        if (++lo > 4294967295) {
    	            lo = 0;
    	            if (++hi > 4294967295)
    	                hi = 0;
    	        }
    	    }
    	    return new LongBits(lo, hi);
    	};

    	/**
    	 * Constructs new long bits from a number, long or string.
    	 * @param {Long|number|string} value Value
    	 * @returns {util.LongBits} Instance
    	 */
    	LongBits.from = function from(value) {
    	    if (typeof value === "number")
    	        return LongBits.fromNumber(value);
    	    if (util.isString(value)) {
    	        /* istanbul ignore else */
    	        if (util.Long)
    	            value = util.Long.fromString(value);
    	        else
    	            return LongBits.fromNumber(parseInt(value, 10));
    	    }
    	    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    	};

    	/**
    	 * Converts this long bits to a possibly unsafe JavaScript number.
    	 * @param {boolean} [unsigned=false] Whether unsigned or not
    	 * @returns {number} Possibly unsafe number
    	 */
    	LongBits.prototype.toNumber = function toNumber(unsigned) {
    	    if (!unsigned && this.hi >>> 31) {
    	        var lo = ~this.lo + 1 >>> 0,
    	            hi = ~this.hi     >>> 0;
    	        if (!lo)
    	            hi = hi + 1 >>> 0;
    	        return -(lo + hi * 4294967296);
    	    }
    	    return this.lo + this.hi * 4294967296;
    	};

    	/**
    	 * Converts this long bits to a long.
    	 * @param {boolean} [unsigned=false] Whether unsigned or not
    	 * @returns {Long} Long
    	 */
    	LongBits.prototype.toLong = function toLong(unsigned) {
    	    return util.Long
    	        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
    	        /* istanbul ignore next */
    	        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    	};

    	var charCodeAt = String.prototype.charCodeAt;

    	/**
    	 * Constructs new long bits from the specified 8 characters long hash.
    	 * @param {string} hash Hash
    	 * @returns {util.LongBits} Bits
    	 */
    	LongBits.fromHash = function fromHash(hash) {
    	    if (hash === zeroHash)
    	        return zero;
    	    return new LongBits(
    	        ( charCodeAt.call(hash, 0)
    	        | charCodeAt.call(hash, 1) << 8
    	        | charCodeAt.call(hash, 2) << 16
    	        | charCodeAt.call(hash, 3) << 24) >>> 0
    	    ,
    	        ( charCodeAt.call(hash, 4)
    	        | charCodeAt.call(hash, 5) << 8
    	        | charCodeAt.call(hash, 6) << 16
    	        | charCodeAt.call(hash, 7) << 24) >>> 0
    	    );
    	};

    	/**
    	 * Converts this long bits to a 8 characters long hash.
    	 * @returns {string} Hash
    	 */
    	LongBits.prototype.toHash = function toHash() {
    	    return String.fromCharCode(
    	        this.lo        & 255,
    	        this.lo >>> 8  & 255,
    	        this.lo >>> 16 & 255,
    	        this.lo >>> 24      ,
    	        this.hi        & 255,
    	        this.hi >>> 8  & 255,
    	        this.hi >>> 16 & 255,
    	        this.hi >>> 24
    	    );
    	};

    	/**
    	 * Zig-zag encodes this long bits.
    	 * @returns {util.LongBits} `this`
    	 */
    	LongBits.prototype.zzEncode = function zzEncode() {
    	    var mask =   this.hi >> 31;
    	    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    	    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    	    return this;
    	};

    	/**
    	 * Zig-zag decodes this long bits.
    	 * @returns {util.LongBits} `this`
    	 */
    	LongBits.prototype.zzDecode = function zzDecode() {
    	    var mask = -(this.lo & 1);
    	    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    	    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    	    return this;
    	};

    	/**
    	 * Calculates the length of this longbits when encoded as a varint.
    	 * @returns {number} Length
    	 */
    	LongBits.prototype.length = function length() {
    	    var part0 =  this.lo,
    	        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
    	        part2 =  this.hi >>> 24;
    	    return part2 === 0
    	         ? part1 === 0
    	           ? part0 < 16384
    	             ? part0 < 128 ? 1 : 2
    	             : part0 < 2097152 ? 3 : 4
    	           : part1 < 16384
    	             ? part1 < 128 ? 5 : 6
    	             : part1 < 2097152 ? 7 : 8
    	         : part2 < 128 ? 9 : 10;
    	};
    	return longbits;
    }

    var hasRequiredMinimal;

    function requireMinimal () {
    	if (hasRequiredMinimal) return minimal$1;
    	hasRequiredMinimal = 1;
    	(function (exports) {
    		var util = exports;

    		// used to return a Promise where callback is omitted
    		util.asPromise = requireAspromise();

    		// converts to / from base64 encoded strings
    		util.base64 = requireBase64();

    		// base class of rpc.Service
    		util.EventEmitter = requireEventemitter();

    		// float handling accross browsers
    		util.float = requireFloat();

    		// requires modules optionally and hides the call from bundlers
    		util.inquire = requireInquire();

    		// converts to / from utf8 encoded strings
    		util.utf8 = requireUtf8();

    		// provides a node-like buffer pool in the browser
    		util.pool = requirePool();

    		// utility to work with the low and high bits of a 64 bit value
    		util.LongBits = requireLongbits();

    		/**
    		 * Whether running within node or not.
    		 * @memberof util
    		 * @type {boolean}
    		 */
    		util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
    		                   && commonjsGlobal
    		                   && commonjsGlobal.process
    		                   && commonjsGlobal.process.versions
    		                   && commonjsGlobal.process.versions.node);

    		/**
    		 * Global object reference.
    		 * @memberof util
    		 * @type {Object}
    		 */
    		util.global = util.isNode && commonjsGlobal
    		           || typeof window !== "undefined" && window
    		           || typeof self   !== "undefined" && self
    		           || commonjsGlobal; // eslint-disable-line no-invalid-this

    		/**
    		 * An immuable empty array.
    		 * @memberof util
    		 * @type {Array.<*>}
    		 * @const
    		 */
    		util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

    		/**
    		 * An immutable empty object.
    		 * @type {Object}
    		 * @const
    		 */
    		util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

    		/**
    		 * Tests if the specified value is an integer.
    		 * @function
    		 * @param {*} value Value to test
    		 * @returns {boolean} `true` if the value is an integer
    		 */
    		util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    		    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    		};

    		/**
    		 * Tests if the specified value is a string.
    		 * @param {*} value Value to test
    		 * @returns {boolean} `true` if the value is a string
    		 */
    		util.isString = function isString(value) {
    		    return typeof value === "string" || value instanceof String;
    		};

    		/**
    		 * Tests if the specified value is a non-null object.
    		 * @param {*} value Value to test
    		 * @returns {boolean} `true` if the value is a non-null object
    		 */
    		util.isObject = function isObject(value) {
    		    return value && typeof value === "object";
    		};

    		/**
    		 * Checks if a property on a message is considered to be present.
    		 * This is an alias of {@link util.isSet}.
    		 * @function
    		 * @param {Object} obj Plain object or message instance
    		 * @param {string} prop Property name
    		 * @returns {boolean} `true` if considered to be present, otherwise `false`
    		 */
    		util.isset =

    		/**
    		 * Checks if a property on a message is considered to be present.
    		 * @param {Object} obj Plain object or message instance
    		 * @param {string} prop Property name
    		 * @returns {boolean} `true` if considered to be present, otherwise `false`
    		 */
    		util.isSet = function isSet(obj, prop) {
    		    var value = obj[prop];
    		    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
    		        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    		    return false;
    		};

    		/**
    		 * Any compatible Buffer instance.
    		 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
    		 * @interface Buffer
    		 * @extends Uint8Array
    		 */

    		/**
    		 * Node's Buffer class if available.
    		 * @type {Constructor<Buffer>}
    		 */
    		util.Buffer = (function() {
    		    try {
    		        var Buffer = util.inquire("buffer").Buffer;
    		        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
    		        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    		    } catch (e) {
    		        /* istanbul ignore next */
    		        return null;
    		    }
    		})();

    		// Internal alias of or polyfull for Buffer.from.
    		util._Buffer_from = null;

    		// Internal alias of or polyfill for Buffer.allocUnsafe.
    		util._Buffer_allocUnsafe = null;

    		/**
    		 * Creates a new buffer of whatever type supported by the environment.
    		 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
    		 * @returns {Uint8Array|Buffer} Buffer
    		 */
    		util.newBuffer = function newBuffer(sizeOrArray) {
    		    /* istanbul ignore next */
    		    return typeof sizeOrArray === "number"
    		        ? util.Buffer
    		            ? util._Buffer_allocUnsafe(sizeOrArray)
    		            : new util.Array(sizeOrArray)
    		        : util.Buffer
    		            ? util._Buffer_from(sizeOrArray)
    		            : typeof Uint8Array === "undefined"
    		                ? sizeOrArray
    		                : new Uint8Array(sizeOrArray);
    		};

    		/**
    		 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
    		 * @type {Constructor<Uint8Array>}
    		 */
    		util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

    		/**
    		 * Any compatible Long instance.
    		 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
    		 * @interface Long
    		 * @property {number} low Low bits
    		 * @property {number} high High bits
    		 * @property {boolean} unsigned Whether unsigned or not
    		 */

    		/**
    		 * Long.js's Long class if available.
    		 * @type {Constructor<Long>}
    		 */
    		util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
    		         || /* istanbul ignore next */ util.global.Long
    		         || util.inquire("long");

    		/**
    		 * Regular expression used to verify 2 bit (`bool`) map keys.
    		 * @type {RegExp}
    		 * @const
    		 */
    		util.key2Re = /^true|false|0|1$/;

    		/**
    		 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
    		 * @type {RegExp}
    		 * @const
    		 */
    		util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

    		/**
    		 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
    		 * @type {RegExp}
    		 * @const
    		 */
    		util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

    		/**
    		 * Converts a number or long to an 8 characters long hash string.
    		 * @param {Long|number} value Value to convert
    		 * @returns {string} Hash
    		 */
    		util.longToHash = function longToHash(value) {
    		    return value
    		        ? util.LongBits.from(value).toHash()
    		        : util.LongBits.zeroHash;
    		};

    		/**
    		 * Converts an 8 characters long hash string to a long or number.
    		 * @param {string} hash Hash
    		 * @param {boolean} [unsigned=false] Whether unsigned or not
    		 * @returns {Long|number} Original value
    		 */
    		util.longFromHash = function longFromHash(hash, unsigned) {
    		    var bits = util.LongBits.fromHash(hash);
    		    if (util.Long)
    		        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    		    return bits.toNumber(Boolean(unsigned));
    		};

    		/**
    		 * Merges the properties of the source object into the destination object.
    		 * @memberof util
    		 * @param {Object.<string,*>} dst Destination object
    		 * @param {Object.<string,*>} src Source object
    		 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
    		 * @returns {Object.<string,*>} Destination object
    		 */
    		function merge(dst, src, ifNotSet) { // used by converters
    		    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
    		        if (dst[keys[i]] === undefined || !ifNotSet)
    		            dst[keys[i]] = src[keys[i]];
    		    return dst;
    		}

    		util.merge = merge;

    		/**
    		 * Converts the first character of a string to lower case.
    		 * @param {string} str String to convert
    		 * @returns {string} Converted string
    		 */
    		util.lcFirst = function lcFirst(str) {
    		    return str.charAt(0).toLowerCase() + str.substring(1);
    		};

    		/**
    		 * Creates a custom error constructor.
    		 * @memberof util
    		 * @param {string} name Error name
    		 * @returns {Constructor<Error>} Custom error constructor
    		 */
    		function newError(name) {

    		    function CustomError(message, properties) {

    		        if (!(this instanceof CustomError))
    		            return new CustomError(message, properties);

    		        // Error.call(this, message);
    		        // ^ just returns a new error instance because the ctor can be called as a function

    		        Object.defineProperty(this, "message", { get: function() { return message; } });

    		        /* istanbul ignore next */
    		        if (Error.captureStackTrace) // node
    		            Error.captureStackTrace(this, CustomError);
    		        else
    		            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

    		        if (properties)
    		            merge(this, properties);
    		    }

    		    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    		    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    		    CustomError.prototype.toString = function toString() {
    		        return this.name + ": " + this.message;
    		    };

    		    return CustomError;
    		}

    		util.newError = newError;

    		/**
    		 * Constructs a new protocol error.
    		 * @classdesc Error subclass indicating a protocol specifc error.
    		 * @memberof util
    		 * @extends Error
    		 * @template T extends Message<T>
    		 * @constructor
    		 * @param {string} message Error message
    		 * @param {Object.<string,*>} [properties] Additional properties
    		 * @example
    		 * try {
    		 *     MyMessage.decode(someBuffer); // throws if required fields are missing
    		 * } catch (e) {
    		 *     if (e instanceof ProtocolError && e.instance)
    		 *         console.log("decoded so far: " + JSON.stringify(e.instance));
    		 * }
    		 */
    		util.ProtocolError = newError("ProtocolError");

    		/**
    		 * So far decoded message instance.
    		 * @name util.ProtocolError#instance
    		 * @type {Message<T>}
    		 */

    		/**
    		 * A OneOf getter as returned by {@link util.oneOfGetter}.
    		 * @typedef OneOfGetter
    		 * @type {function}
    		 * @returns {string|undefined} Set field name, if any
    		 */

    		/**
    		 * Builds a getter for a oneof's present field name.
    		 * @param {string[]} fieldNames Field names
    		 * @returns {OneOfGetter} Unbound getter
    		 */
    		util.oneOfGetter = function getOneOf(fieldNames) {
    		    var fieldMap = {};
    		    for (var i = 0; i < fieldNames.length; ++i)
    		        fieldMap[fieldNames[i]] = 1;

    		    /**
    		     * @returns {string|undefined} Set field name, if any
    		     * @this Object
    		     * @ignore
    		     */
    		    return function() { // eslint-disable-line consistent-return
    		        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
    		            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
    		                return keys[i];
    		    };
    		};

    		/**
    		 * A OneOf setter as returned by {@link util.oneOfSetter}.
    		 * @typedef OneOfSetter
    		 * @type {function}
    		 * @param {string|undefined} value Field name
    		 * @returns {undefined}
    		 */

    		/**
    		 * Builds a setter for a oneof's present field name.
    		 * @param {string[]} fieldNames Field names
    		 * @returns {OneOfSetter} Unbound setter
    		 */
    		util.oneOfSetter = function setOneOf(fieldNames) {

    		    /**
    		     * @param {string} name Field name
    		     * @returns {undefined}
    		     * @this Object
    		     * @ignore
    		     */
    		    return function(name) {
    		        for (var i = 0; i < fieldNames.length; ++i)
    		            if (fieldNames[i] !== name)
    		                delete this[fieldNames[i]];
    		    };
    		};

    		/**
    		 * Default conversion options used for {@link Message#toJSON} implementations.
    		 *
    		 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
    		 *
    		 * - Longs become strings
    		 * - Enums become string keys
    		 * - Bytes become base64 encoded strings
    		 * - (Sub-)Messages become plain objects
    		 * - Maps become plain objects with all string keys
    		 * - Repeated fields become arrays
    		 * - NaN and Infinity for float and double fields become strings
    		 *
    		 * @type {IConversionOptions}
    		 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
    		 */
    		util.toJSONOptions = {
    		    longs: String,
    		    enums: String,
    		    bytes: String,
    		    json: true
    		};

    		// Sets up buffer utility according to the environment (called in index-minimal)
    		util._configure = function() {
    		    var Buffer = util.Buffer;
    		    /* istanbul ignore if */
    		    if (!Buffer) {
    		        util._Buffer_from = util._Buffer_allocUnsafe = null;
    		        return;
    		    }
    		    // because node 4.x buffers are incompatible & immutable
    		    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    		    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
    		        /* istanbul ignore next */
    		        function Buffer_from(value, encoding) {
    		            return new Buffer(value, encoding);
    		        };
    		    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
    		        /* istanbul ignore next */
    		        function Buffer_allocUnsafe(size) {
    		            return new Buffer(size);
    		        };
    		};
    } (minimal$1));
    	return minimal$1;
    }

    var writer = Writer$1;

    var util$7      = requireMinimal();

    var BufferWriter$1; // cyclic

    var LongBits$1  = util$7.LongBits,
        base64    = util$7.base64,
        utf8$1      = util$7.utf8;

    /**
     * Constructs a new writer operation instance.
     * @classdesc Scheduled writer operation.
     * @constructor
     * @param {function(*, Uint8Array, number)} fn Function to call
     * @param {number} len Value byte length
     * @param {*} val Value to write
     * @ignore
     */
    function Op(fn, len, val) {

        /**
         * Function to call.
         * @type {function(Uint8Array, number, *)}
         */
        this.fn = fn;

        /**
         * Value byte length.
         * @type {number}
         */
        this.len = len;

        /**
         * Next operation.
         * @type {Writer.Op|undefined}
         */
        this.next = undefined;

        /**
         * Value to write.
         * @type {*}
         */
        this.val = val; // type varies
    }

    /* istanbul ignore next */
    function noop$1() {} // eslint-disable-line no-empty-function

    /**
     * Constructs a new writer state instance.
     * @classdesc Copied writer state.
     * @memberof Writer
     * @constructor
     * @param {Writer} writer Writer to copy state from
     * @ignore
     */
    function State(writer) {

        /**
         * Current head.
         * @type {Writer.Op}
         */
        this.head = writer.head;

        /**
         * Current tail.
         * @type {Writer.Op}
         */
        this.tail = writer.tail;

        /**
         * Current buffer length.
         * @type {number}
         */
        this.len = writer.len;

        /**
         * Next state.
         * @type {State|null}
         */
        this.next = writer.states;
    }

    /**
     * Constructs a new writer instance.
     * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
     * @constructor
     */
    function Writer$1() {

        /**
         * Current length.
         * @type {number}
         */
        this.len = 0;

        /**
         * Operations head.
         * @type {Object}
         */
        this.head = new Op(noop$1, 0, 0);

        /**
         * Operations tail
         * @type {Object}
         */
        this.tail = this.head;

        /**
         * Linked forked states.
         * @type {Object|null}
         */
        this.states = null;

        // When a value is written, the writer calculates its byte length and puts it into a linked
        // list of operations to perform when finish() is called. This both allows us to allocate
        // buffers of the exact required size and reduces the amount of work we have to do compared
        // to first calculating over objects and then encoding over objects. In our case, the encoding
        // part is just a linked list walk calling operations with already prepared values.
    }

    var create$1 = function create() {
        return util$7.Buffer
            ? function create_buffer_setup() {
                return (Writer$1.create = function create_buffer() {
                    return new BufferWriter$1();
                })();
            }
            /* istanbul ignore next */
            : function create_array() {
                return new Writer$1();
            };
    };

    /**
     * Creates a new writer.
     * @function
     * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
     */
    Writer$1.create = create$1();

    /**
     * Allocates a buffer of the specified size.
     * @param {number} size Buffer size
     * @returns {Uint8Array} Buffer
     */
    Writer$1.alloc = function alloc(size) {
        return new util$7.Array(size);
    };

    // Use Uint8Array buffer pool in the browser, just like node does with buffers
    /* istanbul ignore else */
    if (util$7.Array !== Array)
        Writer$1.alloc = util$7.pool(Writer$1.alloc, util$7.Array.prototype.subarray);

    /**
     * Pushes a new operation to the queue.
     * @param {function(Uint8Array, number, *)} fn Function to call
     * @param {number} len Value byte length
     * @param {number} val Value to write
     * @returns {Writer} `this`
     * @private
     */
    Writer$1.prototype._push = function push(fn, len, val) {
        this.tail = this.tail.next = new Op(fn, len, val);
        this.len += len;
        return this;
    };

    function writeByte(val, buf, pos) {
        buf[pos] = val & 255;
    }

    function writeVarint32(val, buf, pos) {
        while (val > 127) {
            buf[pos++] = val & 127 | 128;
            val >>>= 7;
        }
        buf[pos] = val;
    }

    /**
     * Constructs a new varint writer operation instance.
     * @classdesc Scheduled varint writer operation.
     * @extends Op
     * @constructor
     * @param {number} len Value byte length
     * @param {number} val Value to write
     * @ignore
     */
    function VarintOp(len, val) {
        this.len = len;
        this.next = undefined;
        this.val = val;
    }

    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;

    /**
     * Writes an unsigned 32 bit value as a varint.
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer$1.prototype.uint32 = function write_uint32(value) {
        // here, the call to this.push has been inlined and a varint specific Op subclass is used.
        // uint32 is by far the most frequently used operation and benefits significantly from this.
        this.len += (this.tail = this.tail.next = new VarintOp(
            (value = value >>> 0)
                    < 128       ? 1
            : value < 16384     ? 2
            : value < 2097152   ? 3
            : value < 268435456 ? 4
            :                     5,
        value)).len;
        return this;
    };

    /**
     * Writes a signed 32 bit value as a varint.
     * @function
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer$1.prototype.int32 = function write_int32(value) {
        return value < 0
            ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) // 10 bytes per spec
            : this.uint32(value);
    };

    /**
     * Writes a 32 bit value as a varint, zig-zag encoded.
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer$1.prototype.sint32 = function write_sint32(value) {
        return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };

    function writeVarint64(val, buf, pos) {
        while (val.hi) {
            buf[pos++] = val.lo & 127 | 128;
            val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
            val.hi >>>= 7;
        }
        while (val.lo > 127) {
            buf[pos++] = val.lo & 127 | 128;
            val.lo = val.lo >>> 7;
        }
        buf[pos++] = val.lo;
    }

    /**
     * Writes an unsigned 64 bit value as a varint.
     * @param {Long|number|string} value Value to write
     * @returns {Writer} `this`
     * @throws {TypeError} If `value` is a string and no long library is present.
     */
    Writer$1.prototype.uint64 = function write_uint64(value) {
        var bits = LongBits$1.from(value);
        return this._push(writeVarint64, bits.length(), bits);
    };

    /**
     * Writes a signed 64 bit value as a varint.
     * @function
     * @param {Long|number|string} value Value to write
     * @returns {Writer} `this`
     * @throws {TypeError} If `value` is a string and no long library is present.
     */
    Writer$1.prototype.int64 = Writer$1.prototype.uint64;

    /**
     * Writes a signed 64 bit value as a varint, zig-zag encoded.
     * @param {Long|number|string} value Value to write
     * @returns {Writer} `this`
     * @throws {TypeError} If `value` is a string and no long library is present.
     */
    Writer$1.prototype.sint64 = function write_sint64(value) {
        var bits = LongBits$1.from(value).zzEncode();
        return this._push(writeVarint64, bits.length(), bits);
    };

    /**
     * Writes a boolish value as a varint.
     * @param {boolean} value Value to write
     * @returns {Writer} `this`
     */
    Writer$1.prototype.bool = function write_bool(value) {
        return this._push(writeByte, 1, value ? 1 : 0);
    };

    function writeFixed32(val, buf, pos) {
        buf[pos    ] =  val         & 255;
        buf[pos + 1] =  val >>> 8   & 255;
        buf[pos + 2] =  val >>> 16  & 255;
        buf[pos + 3] =  val >>> 24;
    }

    /**
     * Writes an unsigned 32 bit value as fixed 32 bits.
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer$1.prototype.fixed32 = function write_fixed32(value) {
        return this._push(writeFixed32, 4, value >>> 0);
    };

    /**
     * Writes a signed 32 bit value as fixed 32 bits.
     * @function
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer$1.prototype.sfixed32 = Writer$1.prototype.fixed32;

    /**
     * Writes an unsigned 64 bit value as fixed 64 bits.
     * @param {Long|number|string} value Value to write
     * @returns {Writer} `this`
     * @throws {TypeError} If `value` is a string and no long library is present.
     */
    Writer$1.prototype.fixed64 = function write_fixed64(value) {
        var bits = LongBits$1.from(value);
        return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };

    /**
     * Writes a signed 64 bit value as fixed 64 bits.
     * @function
     * @param {Long|number|string} value Value to write
     * @returns {Writer} `this`
     * @throws {TypeError} If `value` is a string and no long library is present.
     */
    Writer$1.prototype.sfixed64 = Writer$1.prototype.fixed64;

    /**
     * Writes a float (32 bit).
     * @function
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer$1.prototype.float = function write_float(value) {
        return this._push(util$7.float.writeFloatLE, 4, value);
    };

    /**
     * Writes a double (64 bit float).
     * @function
     * @param {number} value Value to write
     * @returns {Writer} `this`
     */
    Writer$1.prototype.double = function write_double(value) {
        return this._push(util$7.float.writeDoubleLE, 8, value);
    };

    var writeBytes = util$7.Array.prototype.set
        ? function writeBytes_set(val, buf, pos) {
            buf.set(val, pos); // also works for plain array values
        }
        /* istanbul ignore next */
        : function writeBytes_for(val, buf, pos) {
            for (var i = 0; i < val.length; ++i)
                buf[pos + i] = val[i];
        };

    /**
     * Writes a sequence of bytes.
     * @param {Uint8Array|string} value Buffer or base64 encoded string to write
     * @returns {Writer} `this`
     */
    Writer$1.prototype.bytes = function write_bytes(value) {
        var len = value.length >>> 0;
        if (!len)
            return this._push(writeByte, 1, 0);
        if (util$7.isString(value)) {
            var buf = Writer$1.alloc(len = base64.length(value));
            base64.decode(value, buf, 0);
            value = buf;
        }
        return this.uint32(len)._push(writeBytes, len, value);
    };

    /**
     * Writes a string.
     * @param {string} value Value to write
     * @returns {Writer} `this`
     */
    Writer$1.prototype.string = function write_string(value) {
        var len = utf8$1.length(value);
        return len
            ? this.uint32(len)._push(utf8$1.write, len, value)
            : this._push(writeByte, 1, 0);
    };

    /**
     * Forks this writer's state by pushing it to a stack.
     * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
     * @returns {Writer} `this`
     */
    Writer$1.prototype.fork = function fork() {
        this.states = new State(this);
        this.head = this.tail = new Op(noop$1, 0, 0);
        this.len = 0;
        return this;
    };

    /**
     * Resets this instance to the last state.
     * @returns {Writer} `this`
     */
    Writer$1.prototype.reset = function reset() {
        if (this.states) {
            this.head   = this.states.head;
            this.tail   = this.states.tail;
            this.len    = this.states.len;
            this.states = this.states.next;
        } else {
            this.head = this.tail = new Op(noop$1, 0, 0);
            this.len  = 0;
        }
        return this;
    };

    /**
     * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
     * @returns {Writer} `this`
     */
    Writer$1.prototype.ldelim = function ldelim() {
        var head = this.head,
            tail = this.tail,
            len  = this.len;
        this.reset().uint32(len);
        if (len) {
            this.tail.next = head.next; // skip noop
            this.tail = tail;
            this.len += len;
        }
        return this;
    };

    /**
     * Finishes the write operation.
     * @returns {Uint8Array} Finished buffer
     */
    Writer$1.prototype.finish = function finish() {
        var head = this.head.next, // skip noop
            buf  = this.constructor.alloc(this.len),
            pos  = 0;
        while (head) {
            head.fn(head.val, buf, pos);
            pos += head.len;
            head = head.next;
        }
        // this.head = this.tail = null;
        return buf;
    };

    Writer$1._configure = function(BufferWriter_) {
        BufferWriter$1 = BufferWriter_;
        Writer$1.create = create$1();
        BufferWriter$1._configure();
    };

    var writer_buffer = BufferWriter;

    // extends Writer
    var Writer = writer;
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

    var util$6 = requireMinimal();

    /**
     * Constructs a new buffer writer instance.
     * @classdesc Wire format writer using node buffers.
     * @extends Writer
     * @constructor
     */
    function BufferWriter() {
        Writer.call(this);
    }

    BufferWriter._configure = function () {
        /**
         * Allocates a buffer of the specified size.
         * @function
         * @param {number} size Buffer size
         * @returns {Buffer} Buffer
         */
        BufferWriter.alloc = util$6._Buffer_allocUnsafe;

        BufferWriter.writeBytesBuffer = util$6.Buffer && util$6.Buffer.prototype instanceof Uint8Array && util$6.Buffer.prototype.set.name === "set"
            ? function writeBytesBuffer_set(val, buf, pos) {
              buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
              // also works for plain array values
            }
            /* istanbul ignore next */
            : function writeBytesBuffer_copy(val, buf, pos) {
              if (val.copy) // Buffer values
                val.copy(buf, pos, 0, val.length);
              else for (var i = 0; i < val.length;) // plain array values
                buf[pos++] = val[i++];
            };
    };


    /**
     * @override
     */
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
        if (util$6.isString(value))
            value = util$6._Buffer_from(value, "base64");
        var len = value.length >>> 0;
        this.uint32(len);
        if (len)
            this._push(BufferWriter.writeBytesBuffer, len, value);
        return this;
    };

    function writeStringBuffer(val, buf, pos) {
        if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
            util$6.utf8.write(val, buf, pos);
        else if (buf.utf8Write)
            buf.utf8Write(val, pos);
        else
            buf.write(val, pos);
    }

    /**
     * @override
     */
    BufferWriter.prototype.string = function write_string_buffer(value) {
        var len = util$6.Buffer.byteLength(value);
        this.uint32(len);
        if (len)
            this._push(writeStringBuffer, len, value);
        return this;
    };


    /**
     * Finishes the write operation.
     * @name BufferWriter#finish
     * @function
     * @returns {Buffer} Finished buffer
     */

    BufferWriter._configure();

    var reader = Reader$1;

    var util$5      = requireMinimal();

    var BufferReader$1; // cyclic

    var LongBits  = util$5.LongBits,
        utf8      = util$5.utf8;

    /* istanbul ignore next */
    function indexOutOfRange(reader, writeLength) {
        return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }

    /**
     * Constructs a new reader instance using the specified buffer.
     * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
     * @constructor
     * @param {Uint8Array} buffer Buffer to read from
     */
    function Reader$1(buffer) {

        /**
         * Read buffer.
         * @type {Uint8Array}
         */
        this.buf = buffer;

        /**
         * Read buffer position.
         * @type {number}
         */
        this.pos = 0;

        /**
         * Read buffer length.
         * @type {number}
         */
        this.len = buffer.length;
    }

    var create_array = typeof Uint8Array !== "undefined"
        ? function create_typed_array(buffer) {
            if (buffer instanceof Uint8Array || Array.isArray(buffer))
                return new Reader$1(buffer);
            throw Error("illegal buffer");
        }
        /* istanbul ignore next */
        : function create_array(buffer) {
            if (Array.isArray(buffer))
                return new Reader$1(buffer);
            throw Error("illegal buffer");
        };

    var create = function create() {
        return util$5.Buffer
            ? function create_buffer_setup(buffer) {
                return (Reader$1.create = function create_buffer(buffer) {
                    return util$5.Buffer.isBuffer(buffer)
                        ? new BufferReader$1(buffer)
                        /* istanbul ignore next */
                        : create_array(buffer);
                })(buffer);
            }
            /* istanbul ignore next */
            : create_array;
    };

    /**
     * Creates a new reader using the specified buffer.
     * @function
     * @param {Uint8Array|Buffer} buffer Buffer to read from
     * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
     * @throws {Error} If `buffer` is not a valid buffer
     */
    Reader$1.create = create();

    Reader$1.prototype._slice = util$5.Array.prototype.subarray || /* istanbul ignore next */ util$5.Array.prototype.slice;

    /**
     * Reads a varint as an unsigned 32 bit value.
     * @function
     * @returns {number} Value read
     */
    Reader$1.prototype.uint32 = (function read_uint32_setup() {
        var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
        return function read_uint32() {
            value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
            value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
            value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
            value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
            value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

            /* istanbul ignore if */
            if ((this.pos += 5) > this.len) {
                this.pos = this.len;
                throw indexOutOfRange(this, 10);
            }
            return value;
        };
    })();

    /**
     * Reads a varint as a signed 32 bit value.
     * @returns {number} Value read
     */
    Reader$1.prototype.int32 = function read_int32() {
        return this.uint32() | 0;
    };

    /**
     * Reads a zig-zag encoded varint as a signed 32 bit value.
     * @returns {number} Value read
     */
    Reader$1.prototype.sint32 = function read_sint32() {
        var value = this.uint32();
        return value >>> 1 ^ -(value & 1) | 0;
    };

    /* eslint-disable no-invalid-this */

    function readLongVarint() {
        // tends to deopt with local vars for octet etc.
        var bits = new LongBits(0, 0);
        var i = 0;
        if (this.len - this.pos > 4) { // fast route (lo)
            for (; i < 4; ++i) {
                // 1st..4th
                bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
                if (this.buf[this.pos++] < 128)
                    return bits;
            }
            // 5th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
            i = 0;
        } else {
            for (; i < 3; ++i) {
                /* istanbul ignore if */
                if (this.pos >= this.len)
                    throw indexOutOfRange(this);
                // 1st..3th
                bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
                if (this.buf[this.pos++] < 128)
                    return bits;
            }
            // 4th
            bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
            return bits;
        }
        if (this.len - this.pos > 4) { // fast route (hi)
            for (; i < 5; ++i) {
                // 6th..10th
                bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
                if (this.buf[this.pos++] < 128)
                    return bits;
            }
        } else {
            for (; i < 5; ++i) {
                /* istanbul ignore if */
                if (this.pos >= this.len)
                    throw indexOutOfRange(this);
                // 6th..10th
                bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
                if (this.buf[this.pos++] < 128)
                    return bits;
            }
        }
        /* istanbul ignore next */
        throw Error("invalid varint encoding");
    }

    /* eslint-enable no-invalid-this */

    /**
     * Reads a varint as a signed 64 bit value.
     * @name Reader#int64
     * @function
     * @returns {Long} Value read
     */

    /**
     * Reads a varint as an unsigned 64 bit value.
     * @name Reader#uint64
     * @function
     * @returns {Long} Value read
     */

    /**
     * Reads a zig-zag encoded varint as a signed 64 bit value.
     * @name Reader#sint64
     * @function
     * @returns {Long} Value read
     */

    /**
     * Reads a varint as a boolean.
     * @returns {boolean} Value read
     */
    Reader$1.prototype.bool = function read_bool() {
        return this.uint32() !== 0;
    };

    function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
        return (buf[end - 4]
              | buf[end - 3] << 8
              | buf[end - 2] << 16
              | buf[end - 1] << 24) >>> 0;
    }

    /**
     * Reads fixed 32 bits as an unsigned 32 bit integer.
     * @returns {number} Value read
     */
    Reader$1.prototype.fixed32 = function read_fixed32() {

        /* istanbul ignore if */
        if (this.pos + 4 > this.len)
            throw indexOutOfRange(this, 4);

        return readFixed32_end(this.buf, this.pos += 4);
    };

    /**
     * Reads fixed 32 bits as a signed 32 bit integer.
     * @returns {number} Value read
     */
    Reader$1.prototype.sfixed32 = function read_sfixed32() {

        /* istanbul ignore if */
        if (this.pos + 4 > this.len)
            throw indexOutOfRange(this, 4);

        return readFixed32_end(this.buf, this.pos += 4) | 0;
    };

    /* eslint-disable no-invalid-this */

    function readFixed64(/* this: Reader */) {

        /* istanbul ignore if */
        if (this.pos + 8 > this.len)
            throw indexOutOfRange(this, 8);

        return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }

    /* eslint-enable no-invalid-this */

    /**
     * Reads fixed 64 bits.
     * @name Reader#fixed64
     * @function
     * @returns {Long} Value read
     */

    /**
     * Reads zig-zag encoded fixed 64 bits.
     * @name Reader#sfixed64
     * @function
     * @returns {Long} Value read
     */

    /**
     * Reads a float (32 bit) as a number.
     * @function
     * @returns {number} Value read
     */
    Reader$1.prototype.float = function read_float() {

        /* istanbul ignore if */
        if (this.pos + 4 > this.len)
            throw indexOutOfRange(this, 4);

        var value = util$5.float.readFloatLE(this.buf, this.pos);
        this.pos += 4;
        return value;
    };

    /**
     * Reads a double (64 bit float) as a number.
     * @function
     * @returns {number} Value read
     */
    Reader$1.prototype.double = function read_double() {

        /* istanbul ignore if */
        if (this.pos + 8 > this.len)
            throw indexOutOfRange(this, 4);

        var value = util$5.float.readDoubleLE(this.buf, this.pos);
        this.pos += 8;
        return value;
    };

    /**
     * Reads a sequence of bytes preceeded by its length as a varint.
     * @returns {Uint8Array} Value read
     */
    Reader$1.prototype.bytes = function read_bytes() {
        var length = this.uint32(),
            start  = this.pos,
            end    = this.pos + length;

        /* istanbul ignore if */
        if (end > this.len)
            throw indexOutOfRange(this, length);

        this.pos += length;
        if (Array.isArray(this.buf)) // plain array
            return this.buf.slice(start, end);
        return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
            ? new this.buf.constructor(0)
            : this._slice.call(this.buf, start, end);
    };

    /**
     * Reads a string preceeded by its byte length as a varint.
     * @returns {string} Value read
     */
    Reader$1.prototype.string = function read_string() {
        var bytes = this.bytes();
        return utf8.read(bytes, 0, bytes.length);
    };

    /**
     * Skips the specified number of bytes if specified, otherwise skips a varint.
     * @param {number} [length] Length if known, otherwise a varint is assumed
     * @returns {Reader} `this`
     */
    Reader$1.prototype.skip = function skip(length) {
        if (typeof length === "number") {
            /* istanbul ignore if */
            if (this.pos + length > this.len)
                throw indexOutOfRange(this, length);
            this.pos += length;
        } else {
            do {
                /* istanbul ignore if */
                if (this.pos >= this.len)
                    throw indexOutOfRange(this);
            } while (this.buf[this.pos++] & 128);
        }
        return this;
    };

    /**
     * Skips the next element of the specified wire type.
     * @param {number} wireType Wire type received
     * @returns {Reader} `this`
     */
    Reader$1.prototype.skipType = function(wireType) {
        switch (wireType) {
            case 0:
                this.skip();
                break;
            case 1:
                this.skip(8);
                break;
            case 2:
                this.skip(this.uint32());
                break;
            case 3:
                while ((wireType = this.uint32() & 7) !== 4) {
                    this.skipType(wireType);
                }
                break;
            case 5:
                this.skip(4);
                break;

            /* istanbul ignore next */
            default:
                throw Error("invalid wire type " + wireType + " at offset " + this.pos);
        }
        return this;
    };

    Reader$1._configure = function(BufferReader_) {
        BufferReader$1 = BufferReader_;
        Reader$1.create = create();
        BufferReader$1._configure();

        var fn = util$5.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
        util$5.merge(Reader$1.prototype, {

            int64: function read_int64() {
                return readLongVarint.call(this)[fn](false);
            },

            uint64: function read_uint64() {
                return readLongVarint.call(this)[fn](true);
            },

            sint64: function read_sint64() {
                return readLongVarint.call(this).zzDecode()[fn](false);
            },

            fixed64: function read_fixed64() {
                return readFixed64.call(this)[fn](true);
            },

            sfixed64: function read_sfixed64() {
                return readFixed64.call(this)[fn](false);
            }

        });
    };

    var reader_buffer = BufferReader;

    // extends Reader
    var Reader = reader;
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

    var util$4 = requireMinimal();

    /**
     * Constructs a new buffer reader instance.
     * @classdesc Wire format reader using node buffers.
     * @extends Reader
     * @constructor
     * @param {Buffer} buffer Buffer to read from
     */
    function BufferReader(buffer) {
        Reader.call(this, buffer);

        /**
         * Read buffer.
         * @name BufferReader#buf
         * @type {Buffer}
         */
    }

    BufferReader._configure = function () {
        /* istanbul ignore else */
        if (util$4.Buffer)
            BufferReader.prototype._slice = util$4.Buffer.prototype.slice;
    };


    /**
     * @override
     */
    BufferReader.prototype.string = function read_string_buffer() {
        var len = this.uint32(); // modifies pos
        return this.buf.utf8Slice
            ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
            : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };

    /**
     * Reads a sequence of bytes preceeded by its length as a varint.
     * @name BufferReader#bytes
     * @function
     * @returns {Buffer} Value read
     */

    BufferReader._configure();

    var rpc = {};

    var service = Service;

    var util$3 = requireMinimal();

    // Extends EventEmitter
    (Service.prototype = Object.create(util$3.EventEmitter.prototype)).constructor = Service;

    /**
     * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
     *
     * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
     * @typedef rpc.ServiceMethodCallback
     * @template TRes extends Message<TRes>
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {TRes} [response] Response message
     * @returns {undefined}
     */

    /**
     * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
     * @typedef rpc.ServiceMethod
     * @template TReq extends Message<TReq>
     * @template TRes extends Message<TRes>
     * @type {function}
     * @param {TReq|Properties<TReq>} request Request message or plain object
     * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
     * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
     */

    /**
     * Constructs a new RPC service instance.
     * @classdesc An RPC service as returned by {@link Service#create}.
     * @exports rpc.Service
     * @extends util.EventEmitter
     * @constructor
     * @param {RPCImpl} rpcImpl RPC implementation
     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
     */
    function Service(rpcImpl, requestDelimited, responseDelimited) {

        if (typeof rpcImpl !== "function")
            throw TypeError("rpcImpl must be a function");

        util$3.EventEmitter.call(this);

        /**
         * RPC implementation. Becomes `null` once the service is ended.
         * @type {RPCImpl|null}
         */
        this.rpcImpl = rpcImpl;

        /**
         * Whether requests are length-delimited.
         * @type {boolean}
         */
        this.requestDelimited = Boolean(requestDelimited);

        /**
         * Whether responses are length-delimited.
         * @type {boolean}
         */
        this.responseDelimited = Boolean(responseDelimited);
    }

    /**
     * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
     * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
     * @param {Constructor<TReq>} requestCtor Request constructor
     * @param {Constructor<TRes>} responseCtor Response constructor
     * @param {TReq|Properties<TReq>} request Request message or plain object
     * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
     * @returns {undefined}
     * @template TReq extends Message<TReq>
     * @template TRes extends Message<TRes>
     */
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

        if (!request)
            throw TypeError("request must be specified");

        var self = this;
        if (!callback)
            return util$3.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

        if (!self.rpcImpl) {
            setTimeout(function() { callback(Error("already ended")); }, 0);
            return undefined;
        }

        try {
            return self.rpcImpl(
                method,
                requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
                function rpcCallback(err, response) {

                    if (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }

                    if (response === null) {
                        self.end(/* endedByRPC */ true);
                        return undefined;
                    }

                    if (!(response instanceof responseCtor)) {
                        try {
                            response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                        } catch (err) {
                            self.emit("error", err, method);
                            return callback(err);
                        }
                    }

                    self.emit("data", response, method);
                    return callback(null, response);
                }
            );
        } catch (err) {
            self.emit("error", err, method);
            setTimeout(function() { callback(err); }, 0);
            return undefined;
        }
    };

    /**
     * Ends this service and emits the `end` event.
     * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
     * @returns {rpc.Service} `this`
     */
    Service.prototype.end = function end(endedByRPC) {
        if (this.rpcImpl) {
            if (!endedByRPC) // signal end to rpcImpl
                this.rpcImpl(null, null, null);
            this.rpcImpl = null;
            this.emit("end").off();
        }
        return this;
    };

    (function (exports) {

    	/**
    	 * Streaming RPC helpers.
    	 * @namespace
    	 */
    	var rpc = exports;

    	/**
    	 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
    	 * @typedef RPCImpl
    	 * @type {function}
    	 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
    	 * @param {Uint8Array} requestData Request data
    	 * @param {RPCImplCallback} callback Callback function
    	 * @returns {undefined}
    	 * @example
    	 * function rpcImpl(method, requestData, callback) {
    	 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
    	 *         throw Error("no such method");
    	 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
    	 *         callback(err, responseData);
    	 *     });
    	 * }
    	 */

    	/**
    	 * Node-style callback as used by {@link RPCImpl}.
    	 * @typedef RPCImplCallback
    	 * @type {function}
    	 * @param {Error|null} error Error, if any, otherwise `null`
    	 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
    	 * @returns {undefined}
    	 */

    	rpc.Service = service;
    } (rpc));

    var roots = {};

    (function (exports) {
    	var protobuf = exports;

    	/**
    	 * Build type, one of `"full"`, `"light"` or `"minimal"`.
    	 * @name build
    	 * @type {string}
    	 * @const
    	 */
    	protobuf.build = "minimal";

    	// Serialization
    	protobuf.Writer       = writer;
    	protobuf.BufferWriter = writer_buffer;
    	protobuf.Reader       = reader;
    	protobuf.BufferReader = reader_buffer;

    	// Utility
    	protobuf.util         = requireMinimal();
    	protobuf.rpc          = rpc;
    	protobuf.roots        = roots;
    	protobuf.configure    = configure;

    	/* istanbul ignore next */
    	/**
    	 * Reconfigures the library according to the environment.
    	 * @returns {undefined}
    	 */
    	function configure() {
    	    protobuf.util._configure();
    	    protobuf.Writer._configure(protobuf.BufferWriter);
    	    protobuf.Reader._configure(protobuf.BufferReader);
    	}

    	// Set up buffer utility according to the environment
    	configure();
    } (indexMinimal));

    var minimal = indexMinimal;

    /*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/

    var $protobuf = minimal;

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

    $root.casper = (function() {

        /**
         * Namespace casper.
         * @exports casper
         * @namespace
         */
        var casper = {};

        casper.HasBlockRequestProto = (function() {

            /**
             * Properties of a HasBlockRequestProto.
             * @memberof casper
             * @interface IHasBlockRequestProto
             * @property {Uint8Array|null} [hash] HasBlockRequestProto hash
             */

            /**
             * Constructs a new HasBlockRequestProto.
             * @memberof casper
             * @classdesc Represents a HasBlockRequestProto.
             * @implements IHasBlockRequestProto
             * @constructor
             * @param {casper.IHasBlockRequestProto=} [properties] Properties to set
             */
            function HasBlockRequestProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HasBlockRequestProto hash.
             * @member {Uint8Array} hash
             * @memberof casper.HasBlockRequestProto
             * @instance
             */
            HasBlockRequestProto.prototype.hash = $util.newBuffer([]);

            /**
             * Creates a new HasBlockRequestProto instance using the specified properties.
             * @function create
             * @memberof casper.HasBlockRequestProto
             * @static
             * @param {casper.IHasBlockRequestProto=} [properties] Properties to set
             * @returns {casper.HasBlockRequestProto} HasBlockRequestProto instance
             */
            HasBlockRequestProto.create = function create(properties) {
                return new HasBlockRequestProto(properties);
            };

            /**
             * Encodes the specified HasBlockRequestProto message. Does not implicitly {@link casper.HasBlockRequestProto.verify|verify} messages.
             * @function encode
             * @memberof casper.HasBlockRequestProto
             * @static
             * @param {casper.IHasBlockRequestProto} message HasBlockRequestProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HasBlockRequestProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && message.hasOwnProperty("hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                return writer;
            };

            /**
             * Encodes the specified HasBlockRequestProto message, length delimited. Does not implicitly {@link casper.HasBlockRequestProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.HasBlockRequestProto
             * @static
             * @param {casper.IHasBlockRequestProto} message HasBlockRequestProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HasBlockRequestProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HasBlockRequestProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.HasBlockRequestProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.HasBlockRequestProto} HasBlockRequestProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HasBlockRequestProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.HasBlockRequestProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HasBlockRequestProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.HasBlockRequestProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.HasBlockRequestProto} HasBlockRequestProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HasBlockRequestProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HasBlockRequestProto message.
             * @function verify
             * @memberof casper.HasBlockRequestProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HasBlockRequestProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                return null;
            };

            /**
             * Creates a HasBlockRequestProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.HasBlockRequestProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.HasBlockRequestProto} HasBlockRequestProto
             */
            HasBlockRequestProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.HasBlockRequestProto)
                    return object;
                var message = new $root.casper.HasBlockRequestProto();
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                return message;
            };

            /**
             * Creates a plain object from a HasBlockRequestProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.HasBlockRequestProto
             * @static
             * @param {casper.HasBlockRequestProto} message HasBlockRequestProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HasBlockRequestProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                return object;
            };

            /**
             * Converts this HasBlockRequestProto to JSON.
             * @function toJSON
             * @memberof casper.HasBlockRequestProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HasBlockRequestProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HasBlockRequestProto;
        })();

        casper.HasBlockProto = (function() {

            /**
             * Properties of a HasBlockProto.
             * @memberof casper
             * @interface IHasBlockProto
             * @property {Uint8Array|null} [hash] HasBlockProto hash
             */

            /**
             * Constructs a new HasBlockProto.
             * @memberof casper
             * @classdesc Represents a HasBlockProto.
             * @implements IHasBlockProto
             * @constructor
             * @param {casper.IHasBlockProto=} [properties] Properties to set
             */
            function HasBlockProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HasBlockProto hash.
             * @member {Uint8Array} hash
             * @memberof casper.HasBlockProto
             * @instance
             */
            HasBlockProto.prototype.hash = $util.newBuffer([]);

            /**
             * Creates a new HasBlockProto instance using the specified properties.
             * @function create
             * @memberof casper.HasBlockProto
             * @static
             * @param {casper.IHasBlockProto=} [properties] Properties to set
             * @returns {casper.HasBlockProto} HasBlockProto instance
             */
            HasBlockProto.create = function create(properties) {
                return new HasBlockProto(properties);
            };

            /**
             * Encodes the specified HasBlockProto message. Does not implicitly {@link casper.HasBlockProto.verify|verify} messages.
             * @function encode
             * @memberof casper.HasBlockProto
             * @static
             * @param {casper.IHasBlockProto} message HasBlockProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HasBlockProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && message.hasOwnProperty("hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                return writer;
            };

            /**
             * Encodes the specified HasBlockProto message, length delimited. Does not implicitly {@link casper.HasBlockProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.HasBlockProto
             * @static
             * @param {casper.IHasBlockProto} message HasBlockProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HasBlockProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HasBlockProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.HasBlockProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.HasBlockProto} HasBlockProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HasBlockProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.HasBlockProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HasBlockProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.HasBlockProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.HasBlockProto} HasBlockProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HasBlockProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HasBlockProto message.
             * @function verify
             * @memberof casper.HasBlockProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HasBlockProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                return null;
            };

            /**
             * Creates a HasBlockProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.HasBlockProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.HasBlockProto} HasBlockProto
             */
            HasBlockProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.HasBlockProto)
                    return object;
                var message = new $root.casper.HasBlockProto();
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                return message;
            };

            /**
             * Creates a plain object from a HasBlockProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.HasBlockProto
             * @static
             * @param {casper.HasBlockProto} message HasBlockProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HasBlockProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                return object;
            };

            /**
             * Converts this HasBlockProto to JSON.
             * @function toJSON
             * @memberof casper.HasBlockProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HasBlockProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HasBlockProto;
        })();

        casper.BlockRequestProto = (function() {

            /**
             * Properties of a BlockRequestProto.
             * @memberof casper
             * @interface IBlockRequestProto
             * @property {Uint8Array|null} [hash] BlockRequestProto hash
             */

            /**
             * Constructs a new BlockRequestProto.
             * @memberof casper
             * @classdesc Represents a BlockRequestProto.
             * @implements IBlockRequestProto
             * @constructor
             * @param {casper.IBlockRequestProto=} [properties] Properties to set
             */
            function BlockRequestProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockRequestProto hash.
             * @member {Uint8Array} hash
             * @memberof casper.BlockRequestProto
             * @instance
             */
            BlockRequestProto.prototype.hash = $util.newBuffer([]);

            /**
             * Creates a new BlockRequestProto instance using the specified properties.
             * @function create
             * @memberof casper.BlockRequestProto
             * @static
             * @param {casper.IBlockRequestProto=} [properties] Properties to set
             * @returns {casper.BlockRequestProto} BlockRequestProto instance
             */
            BlockRequestProto.create = function create(properties) {
                return new BlockRequestProto(properties);
            };

            /**
             * Encodes the specified BlockRequestProto message. Does not implicitly {@link casper.BlockRequestProto.verify|verify} messages.
             * @function encode
             * @memberof casper.BlockRequestProto
             * @static
             * @param {casper.IBlockRequestProto} message BlockRequestProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockRequestProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && message.hasOwnProperty("hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                return writer;
            };

            /**
             * Encodes the specified BlockRequestProto message, length delimited. Does not implicitly {@link casper.BlockRequestProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BlockRequestProto
             * @static
             * @param {casper.IBlockRequestProto} message BlockRequestProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockRequestProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockRequestProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BlockRequestProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BlockRequestProto} BlockRequestProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockRequestProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockRequestProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockRequestProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BlockRequestProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BlockRequestProto} BlockRequestProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockRequestProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockRequestProto message.
             * @function verify
             * @memberof casper.BlockRequestProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockRequestProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                return null;
            };

            /**
             * Creates a BlockRequestProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BlockRequestProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BlockRequestProto} BlockRequestProto
             */
            BlockRequestProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BlockRequestProto)
                    return object;
                var message = new $root.casper.BlockRequestProto();
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                return message;
            };

            /**
             * Creates a plain object from a BlockRequestProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BlockRequestProto
             * @static
             * @param {casper.BlockRequestProto} message BlockRequestProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockRequestProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                return object;
            };

            /**
             * Converts this BlockRequestProto to JSON.
             * @function toJSON
             * @memberof casper.BlockRequestProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockRequestProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockRequestProto;
        })();

        casper.ForkChoiceTipRequestProto = (function() {

            /**
             * Properties of a ForkChoiceTipRequestProto.
             * @memberof casper
             * @interface IForkChoiceTipRequestProto
             */

            /**
             * Constructs a new ForkChoiceTipRequestProto.
             * @memberof casper
             * @classdesc Represents a ForkChoiceTipRequestProto.
             * @implements IForkChoiceTipRequestProto
             * @constructor
             * @param {casper.IForkChoiceTipRequestProto=} [properties] Properties to set
             */
            function ForkChoiceTipRequestProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new ForkChoiceTipRequestProto instance using the specified properties.
             * @function create
             * @memberof casper.ForkChoiceTipRequestProto
             * @static
             * @param {casper.IForkChoiceTipRequestProto=} [properties] Properties to set
             * @returns {casper.ForkChoiceTipRequestProto} ForkChoiceTipRequestProto instance
             */
            ForkChoiceTipRequestProto.create = function create(properties) {
                return new ForkChoiceTipRequestProto(properties);
            };

            /**
             * Encodes the specified ForkChoiceTipRequestProto message. Does not implicitly {@link casper.ForkChoiceTipRequestProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ForkChoiceTipRequestProto
             * @static
             * @param {casper.IForkChoiceTipRequestProto} message ForkChoiceTipRequestProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ForkChoiceTipRequestProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified ForkChoiceTipRequestProto message, length delimited. Does not implicitly {@link casper.ForkChoiceTipRequestProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ForkChoiceTipRequestProto
             * @static
             * @param {casper.IForkChoiceTipRequestProto} message ForkChoiceTipRequestProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ForkChoiceTipRequestProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ForkChoiceTipRequestProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ForkChoiceTipRequestProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ForkChoiceTipRequestProto} ForkChoiceTipRequestProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ForkChoiceTipRequestProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ForkChoiceTipRequestProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ForkChoiceTipRequestProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ForkChoiceTipRequestProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ForkChoiceTipRequestProto} ForkChoiceTipRequestProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ForkChoiceTipRequestProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ForkChoiceTipRequestProto message.
             * @function verify
             * @memberof casper.ForkChoiceTipRequestProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ForkChoiceTipRequestProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a ForkChoiceTipRequestProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ForkChoiceTipRequestProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ForkChoiceTipRequestProto} ForkChoiceTipRequestProto
             */
            ForkChoiceTipRequestProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ForkChoiceTipRequestProto)
                    return object;
                return new $root.casper.ForkChoiceTipRequestProto();
            };

            /**
             * Creates a plain object from a ForkChoiceTipRequestProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ForkChoiceTipRequestProto
             * @static
             * @param {casper.ForkChoiceTipRequestProto} message ForkChoiceTipRequestProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ForkChoiceTipRequestProto.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this ForkChoiceTipRequestProto to JSON.
             * @function toJSON
             * @memberof casper.ForkChoiceTipRequestProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ForkChoiceTipRequestProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ForkChoiceTipRequestProto;
        })();

        casper.ApprovedBlockCandidateProto = (function() {

            /**
             * Properties of an ApprovedBlockCandidateProto.
             * @memberof casper
             * @interface IApprovedBlockCandidateProto
             * @property {casper.IBlockMessageProto|null} [block] ApprovedBlockCandidateProto block
             * @property {number|null} [requiredSigs] ApprovedBlockCandidateProto requiredSigs
             */

            /**
             * Constructs a new ApprovedBlockCandidateProto.
             * @memberof casper
             * @classdesc Represents an ApprovedBlockCandidateProto.
             * @implements IApprovedBlockCandidateProto
             * @constructor
             * @param {casper.IApprovedBlockCandidateProto=} [properties] Properties to set
             */
            function ApprovedBlockCandidateProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ApprovedBlockCandidateProto block.
             * @member {casper.IBlockMessageProto|null|undefined} block
             * @memberof casper.ApprovedBlockCandidateProto
             * @instance
             */
            ApprovedBlockCandidateProto.prototype.block = null;

            /**
             * ApprovedBlockCandidateProto requiredSigs.
             * @member {number} requiredSigs
             * @memberof casper.ApprovedBlockCandidateProto
             * @instance
             */
            ApprovedBlockCandidateProto.prototype.requiredSigs = 0;

            /**
             * Creates a new ApprovedBlockCandidateProto instance using the specified properties.
             * @function create
             * @memberof casper.ApprovedBlockCandidateProto
             * @static
             * @param {casper.IApprovedBlockCandidateProto=} [properties] Properties to set
             * @returns {casper.ApprovedBlockCandidateProto} ApprovedBlockCandidateProto instance
             */
            ApprovedBlockCandidateProto.create = function create(properties) {
                return new ApprovedBlockCandidateProto(properties);
            };

            /**
             * Encodes the specified ApprovedBlockCandidateProto message. Does not implicitly {@link casper.ApprovedBlockCandidateProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ApprovedBlockCandidateProto
             * @static
             * @param {casper.IApprovedBlockCandidateProto} message ApprovedBlockCandidateProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApprovedBlockCandidateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block != null && message.hasOwnProperty("block"))
                    $root.casper.BlockMessageProto.encode(message.block, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.requiredSigs != null && message.hasOwnProperty("requiredSigs"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.requiredSigs);
                return writer;
            };

            /**
             * Encodes the specified ApprovedBlockCandidateProto message, length delimited. Does not implicitly {@link casper.ApprovedBlockCandidateProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ApprovedBlockCandidateProto
             * @static
             * @param {casper.IApprovedBlockCandidateProto} message ApprovedBlockCandidateProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApprovedBlockCandidateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ApprovedBlockCandidateProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ApprovedBlockCandidateProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ApprovedBlockCandidateProto} ApprovedBlockCandidateProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApprovedBlockCandidateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ApprovedBlockCandidateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block = $root.casper.BlockMessageProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.requiredSigs = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ApprovedBlockCandidateProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ApprovedBlockCandidateProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ApprovedBlockCandidateProto} ApprovedBlockCandidateProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApprovedBlockCandidateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ApprovedBlockCandidateProto message.
             * @function verify
             * @memberof casper.ApprovedBlockCandidateProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ApprovedBlockCandidateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block != null && message.hasOwnProperty("block")) {
                    var error = $root.casper.BlockMessageProto.verify(message.block);
                    if (error)
                        return "block." + error;
                }
                if (message.requiredSigs != null && message.hasOwnProperty("requiredSigs"))
                    if (!$util.isInteger(message.requiredSigs))
                        return "requiredSigs: integer expected";
                return null;
            };

            /**
             * Creates an ApprovedBlockCandidateProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ApprovedBlockCandidateProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ApprovedBlockCandidateProto} ApprovedBlockCandidateProto
             */
            ApprovedBlockCandidateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ApprovedBlockCandidateProto)
                    return object;
                var message = new $root.casper.ApprovedBlockCandidateProto();
                if (object.block != null) {
                    if (typeof object.block !== "object")
                        throw TypeError(".casper.ApprovedBlockCandidateProto.block: object expected");
                    message.block = $root.casper.BlockMessageProto.fromObject(object.block);
                }
                if (object.requiredSigs != null)
                    message.requiredSigs = object.requiredSigs | 0;
                return message;
            };

            /**
             * Creates a plain object from an ApprovedBlockCandidateProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ApprovedBlockCandidateProto
             * @static
             * @param {casper.ApprovedBlockCandidateProto} message ApprovedBlockCandidateProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ApprovedBlockCandidateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.block = null;
                    object.requiredSigs = 0;
                }
                if (message.block != null && message.hasOwnProperty("block"))
                    object.block = $root.casper.BlockMessageProto.toObject(message.block, options);
                if (message.requiredSigs != null && message.hasOwnProperty("requiredSigs"))
                    object.requiredSigs = message.requiredSigs;
                return object;
            };

            /**
             * Converts this ApprovedBlockCandidateProto to JSON.
             * @function toJSON
             * @memberof casper.ApprovedBlockCandidateProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ApprovedBlockCandidateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ApprovedBlockCandidateProto;
        })();

        casper.UnapprovedBlockProto = (function() {

            /**
             * Properties of an UnapprovedBlockProto.
             * @memberof casper
             * @interface IUnapprovedBlockProto
             * @property {casper.IApprovedBlockCandidateProto|null} [candidate] UnapprovedBlockProto candidate
             * @property {number|Long|null} [timestamp] UnapprovedBlockProto timestamp
             * @property {number|Long|null} [duration] UnapprovedBlockProto duration
             */

            /**
             * Constructs a new UnapprovedBlockProto.
             * @memberof casper
             * @classdesc Represents an UnapprovedBlockProto.
             * @implements IUnapprovedBlockProto
             * @constructor
             * @param {casper.IUnapprovedBlockProto=} [properties] Properties to set
             */
            function UnapprovedBlockProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UnapprovedBlockProto candidate.
             * @member {casper.IApprovedBlockCandidateProto|null|undefined} candidate
             * @memberof casper.UnapprovedBlockProto
             * @instance
             */
            UnapprovedBlockProto.prototype.candidate = null;

            /**
             * UnapprovedBlockProto timestamp.
             * @member {number|Long} timestamp
             * @memberof casper.UnapprovedBlockProto
             * @instance
             */
            UnapprovedBlockProto.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UnapprovedBlockProto duration.
             * @member {number|Long} duration
             * @memberof casper.UnapprovedBlockProto
             * @instance
             */
            UnapprovedBlockProto.prototype.duration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new UnapprovedBlockProto instance using the specified properties.
             * @function create
             * @memberof casper.UnapprovedBlockProto
             * @static
             * @param {casper.IUnapprovedBlockProto=} [properties] Properties to set
             * @returns {casper.UnapprovedBlockProto} UnapprovedBlockProto instance
             */
            UnapprovedBlockProto.create = function create(properties) {
                return new UnapprovedBlockProto(properties);
            };

            /**
             * Encodes the specified UnapprovedBlockProto message. Does not implicitly {@link casper.UnapprovedBlockProto.verify|verify} messages.
             * @function encode
             * @memberof casper.UnapprovedBlockProto
             * @static
             * @param {casper.IUnapprovedBlockProto} message UnapprovedBlockProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UnapprovedBlockProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.candidate != null && message.hasOwnProperty("candidate"))
                    $root.casper.ApprovedBlockCandidateProto.encode(message.candidate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timestamp);
                if (message.duration != null && message.hasOwnProperty("duration"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.duration);
                return writer;
            };

            /**
             * Encodes the specified UnapprovedBlockProto message, length delimited. Does not implicitly {@link casper.UnapprovedBlockProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.UnapprovedBlockProto
             * @static
             * @param {casper.IUnapprovedBlockProto} message UnapprovedBlockProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UnapprovedBlockProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UnapprovedBlockProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.UnapprovedBlockProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.UnapprovedBlockProto} UnapprovedBlockProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UnapprovedBlockProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.UnapprovedBlockProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.candidate = $root.casper.ApprovedBlockCandidateProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.timestamp = reader.int64();
                        break;
                    case 3:
                        message.duration = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UnapprovedBlockProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.UnapprovedBlockProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.UnapprovedBlockProto} UnapprovedBlockProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UnapprovedBlockProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UnapprovedBlockProto message.
             * @function verify
             * @memberof casper.UnapprovedBlockProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UnapprovedBlockProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.candidate != null && message.hasOwnProperty("candidate")) {
                    var error = $root.casper.ApprovedBlockCandidateProto.verify(message.candidate);
                    if (error)
                        return "candidate." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                        return "timestamp: integer|Long expected";
                if (message.duration != null && message.hasOwnProperty("duration"))
                    if (!$util.isInteger(message.duration) && !(message.duration && $util.isInteger(message.duration.low) && $util.isInteger(message.duration.high)))
                        return "duration: integer|Long expected";
                return null;
            };

            /**
             * Creates an UnapprovedBlockProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.UnapprovedBlockProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.UnapprovedBlockProto} UnapprovedBlockProto
             */
            UnapprovedBlockProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.UnapprovedBlockProto)
                    return object;
                var message = new $root.casper.UnapprovedBlockProto();
                if (object.candidate != null) {
                    if (typeof object.candidate !== "object")
                        throw TypeError(".casper.UnapprovedBlockProto.candidate: object expected");
                    message.candidate = $root.casper.ApprovedBlockCandidateProto.fromObject(object.candidate);
                }
                if (object.timestamp != null)
                    if ($util.Long)
                        (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                    else if (typeof object.timestamp === "string")
                        message.timestamp = parseInt(object.timestamp, 10);
                    else if (typeof object.timestamp === "number")
                        message.timestamp = object.timestamp;
                    else if (typeof object.timestamp === "object")
                        message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                if (object.duration != null)
                    if ($util.Long)
                        (message.duration = $util.Long.fromValue(object.duration)).unsigned = false;
                    else if (typeof object.duration === "string")
                        message.duration = parseInt(object.duration, 10);
                    else if (typeof object.duration === "number")
                        message.duration = object.duration;
                    else if (typeof object.duration === "object")
                        message.duration = new $util.LongBits(object.duration.low >>> 0, object.duration.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an UnapprovedBlockProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.UnapprovedBlockProto
             * @static
             * @param {casper.UnapprovedBlockProto} message UnapprovedBlockProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UnapprovedBlockProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.candidate = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestamp = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.duration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.duration = options.longs === String ? "0" : 0;
                }
                if (message.candidate != null && message.hasOwnProperty("candidate"))
                    object.candidate = $root.casper.ApprovedBlockCandidateProto.toObject(message.candidate, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (typeof message.timestamp === "number")
                        object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                    else
                        object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                if (message.duration != null && message.hasOwnProperty("duration"))
                    if (typeof message.duration === "number")
                        object.duration = options.longs === String ? String(message.duration) : message.duration;
                    else
                        object.duration = options.longs === String ? $util.Long.prototype.toString.call(message.duration) : options.longs === Number ? new $util.LongBits(message.duration.low >>> 0, message.duration.high >>> 0).toNumber() : message.duration;
                return object;
            };

            /**
             * Converts this UnapprovedBlockProto to JSON.
             * @function toJSON
             * @memberof casper.UnapprovedBlockProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UnapprovedBlockProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UnapprovedBlockProto;
        })();

        casper.Signature = (function() {

            /**
             * Properties of a Signature.
             * @memberof casper
             * @interface ISignature
             * @property {Uint8Array|null} [publicKey] Signature publicKey
             * @property {string|null} [algorithm] Signature algorithm
             * @property {Uint8Array|null} [sig] Signature sig
             */

            /**
             * Constructs a new Signature.
             * @memberof casper
             * @classdesc Represents a Signature.
             * @implements ISignature
             * @constructor
             * @param {casper.ISignature=} [properties] Properties to set
             */
            function Signature(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Signature publicKey.
             * @member {Uint8Array} publicKey
             * @memberof casper.Signature
             * @instance
             */
            Signature.prototype.publicKey = $util.newBuffer([]);

            /**
             * Signature algorithm.
             * @member {string} algorithm
             * @memberof casper.Signature
             * @instance
             */
            Signature.prototype.algorithm = "";

            /**
             * Signature sig.
             * @member {Uint8Array} sig
             * @memberof casper.Signature
             * @instance
             */
            Signature.prototype.sig = $util.newBuffer([]);

            /**
             * Creates a new Signature instance using the specified properties.
             * @function create
             * @memberof casper.Signature
             * @static
             * @param {casper.ISignature=} [properties] Properties to set
             * @returns {casper.Signature} Signature instance
             */
            Signature.create = function create(properties) {
                return new Signature(properties);
            };

            /**
             * Encodes the specified Signature message. Does not implicitly {@link casper.Signature.verify|verify} messages.
             * @function encode
             * @memberof casper.Signature
             * @static
             * @param {casper.ISignature} message Signature message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Signature.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.publicKey);
                if (message.algorithm != null && message.hasOwnProperty("algorithm"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.algorithm);
                if (message.sig != null && message.hasOwnProperty("sig"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.sig);
                return writer;
            };

            /**
             * Encodes the specified Signature message, length delimited. Does not implicitly {@link casper.Signature.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.Signature
             * @static
             * @param {casper.ISignature} message Signature message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Signature.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Signature message from the specified reader or buffer.
             * @function decode
             * @memberof casper.Signature
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.Signature} Signature
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Signature.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.Signature();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.publicKey = reader.bytes();
                        break;
                    case 2:
                        message.algorithm = reader.string();
                        break;
                    case 3:
                        message.sig = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Signature message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.Signature
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.Signature} Signature
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Signature.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Signature message.
             * @function verify
             * @memberof casper.Signature
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Signature.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                    if (!(message.publicKey && typeof message.publicKey.length === "number" || $util.isString(message.publicKey)))
                        return "publicKey: buffer expected";
                if (message.algorithm != null && message.hasOwnProperty("algorithm"))
                    if (!$util.isString(message.algorithm))
                        return "algorithm: string expected";
                if (message.sig != null && message.hasOwnProperty("sig"))
                    if (!(message.sig && typeof message.sig.length === "number" || $util.isString(message.sig)))
                        return "sig: buffer expected";
                return null;
            };

            /**
             * Creates a Signature message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.Signature
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.Signature} Signature
             */
            Signature.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.Signature)
                    return object;
                var message = new $root.casper.Signature();
                if (object.publicKey != null)
                    if (typeof object.publicKey === "string")
                        $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);
                    else if (object.publicKey.length)
                        message.publicKey = object.publicKey;
                if (object.algorithm != null)
                    message.algorithm = String(object.algorithm);
                if (object.sig != null)
                    if (typeof object.sig === "string")
                        $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);
                    else if (object.sig.length)
                        message.sig = object.sig;
                return message;
            };

            /**
             * Creates a plain object from a Signature message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.Signature
             * @static
             * @param {casper.Signature} message Signature
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Signature.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.publicKey = "";
                    else {
                        object.publicKey = [];
                        if (options.bytes !== Array)
                            object.publicKey = $util.newBuffer(object.publicKey);
                    }
                    object.algorithm = "";
                    if (options.bytes === String)
                        object.sig = "";
                    else {
                        object.sig = [];
                        if (options.bytes !== Array)
                            object.sig = $util.newBuffer(object.sig);
                    }
                }
                if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                    object.publicKey = options.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;
                if (message.algorithm != null && message.hasOwnProperty("algorithm"))
                    object.algorithm = message.algorithm;
                if (message.sig != null && message.hasOwnProperty("sig"))
                    object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;
                return object;
            };

            /**
             * Converts this Signature to JSON.
             * @function toJSON
             * @memberof casper.Signature
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Signature.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Signature;
        })();

        casper.BlockApprovalProto = (function() {

            /**
             * Properties of a BlockApprovalProto.
             * @memberof casper
             * @interface IBlockApprovalProto
             * @property {casper.IApprovedBlockCandidateProto|null} [candidate] BlockApprovalProto candidate
             * @property {casper.ISignature|null} [sig] BlockApprovalProto sig
             */

            /**
             * Constructs a new BlockApprovalProto.
             * @memberof casper
             * @classdesc Represents a BlockApprovalProto.
             * @implements IBlockApprovalProto
             * @constructor
             * @param {casper.IBlockApprovalProto=} [properties] Properties to set
             */
            function BlockApprovalProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockApprovalProto candidate.
             * @member {casper.IApprovedBlockCandidateProto|null|undefined} candidate
             * @memberof casper.BlockApprovalProto
             * @instance
             */
            BlockApprovalProto.prototype.candidate = null;

            /**
             * BlockApprovalProto sig.
             * @member {casper.ISignature|null|undefined} sig
             * @memberof casper.BlockApprovalProto
             * @instance
             */
            BlockApprovalProto.prototype.sig = null;

            /**
             * Creates a new BlockApprovalProto instance using the specified properties.
             * @function create
             * @memberof casper.BlockApprovalProto
             * @static
             * @param {casper.IBlockApprovalProto=} [properties] Properties to set
             * @returns {casper.BlockApprovalProto} BlockApprovalProto instance
             */
            BlockApprovalProto.create = function create(properties) {
                return new BlockApprovalProto(properties);
            };

            /**
             * Encodes the specified BlockApprovalProto message. Does not implicitly {@link casper.BlockApprovalProto.verify|verify} messages.
             * @function encode
             * @memberof casper.BlockApprovalProto
             * @static
             * @param {casper.IBlockApprovalProto} message BlockApprovalProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockApprovalProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.candidate != null && message.hasOwnProperty("candidate"))
                    $root.casper.ApprovedBlockCandidateProto.encode(message.candidate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.sig != null && message.hasOwnProperty("sig"))
                    $root.casper.Signature.encode(message.sig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BlockApprovalProto message, length delimited. Does not implicitly {@link casper.BlockApprovalProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BlockApprovalProto
             * @static
             * @param {casper.IBlockApprovalProto} message BlockApprovalProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockApprovalProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockApprovalProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BlockApprovalProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BlockApprovalProto} BlockApprovalProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockApprovalProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockApprovalProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.candidate = $root.casper.ApprovedBlockCandidateProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.sig = $root.casper.Signature.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockApprovalProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BlockApprovalProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BlockApprovalProto} BlockApprovalProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockApprovalProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockApprovalProto message.
             * @function verify
             * @memberof casper.BlockApprovalProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockApprovalProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.candidate != null && message.hasOwnProperty("candidate")) {
                    var error = $root.casper.ApprovedBlockCandidateProto.verify(message.candidate);
                    if (error)
                        return "candidate." + error;
                }
                if (message.sig != null && message.hasOwnProperty("sig")) {
                    var error = $root.casper.Signature.verify(message.sig);
                    if (error)
                        return "sig." + error;
                }
                return null;
            };

            /**
             * Creates a BlockApprovalProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BlockApprovalProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BlockApprovalProto} BlockApprovalProto
             */
            BlockApprovalProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BlockApprovalProto)
                    return object;
                var message = new $root.casper.BlockApprovalProto();
                if (object.candidate != null) {
                    if (typeof object.candidate !== "object")
                        throw TypeError(".casper.BlockApprovalProto.candidate: object expected");
                    message.candidate = $root.casper.ApprovedBlockCandidateProto.fromObject(object.candidate);
                }
                if (object.sig != null) {
                    if (typeof object.sig !== "object")
                        throw TypeError(".casper.BlockApprovalProto.sig: object expected");
                    message.sig = $root.casper.Signature.fromObject(object.sig);
                }
                return message;
            };

            /**
             * Creates a plain object from a BlockApprovalProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BlockApprovalProto
             * @static
             * @param {casper.BlockApprovalProto} message BlockApprovalProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockApprovalProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.candidate = null;
                    object.sig = null;
                }
                if (message.candidate != null && message.hasOwnProperty("candidate"))
                    object.candidate = $root.casper.ApprovedBlockCandidateProto.toObject(message.candidate, options);
                if (message.sig != null && message.hasOwnProperty("sig"))
                    object.sig = $root.casper.Signature.toObject(message.sig, options);
                return object;
            };

            /**
             * Converts this BlockApprovalProto to JSON.
             * @function toJSON
             * @memberof casper.BlockApprovalProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockApprovalProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockApprovalProto;
        })();

        casper.ApprovedBlockProto = (function() {

            /**
             * Properties of an ApprovedBlockProto.
             * @memberof casper
             * @interface IApprovedBlockProto
             * @property {casper.IApprovedBlockCandidateProto|null} [candidate] ApprovedBlockProto candidate
             * @property {Array.<casper.ISignature>|null} [sigs] ApprovedBlockProto sigs
             */

            /**
             * Constructs a new ApprovedBlockProto.
             * @memberof casper
             * @classdesc Represents an ApprovedBlockProto.
             * @implements IApprovedBlockProto
             * @constructor
             * @param {casper.IApprovedBlockProto=} [properties] Properties to set
             */
            function ApprovedBlockProto(properties) {
                this.sigs = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ApprovedBlockProto candidate.
             * @member {casper.IApprovedBlockCandidateProto|null|undefined} candidate
             * @memberof casper.ApprovedBlockProto
             * @instance
             */
            ApprovedBlockProto.prototype.candidate = null;

            /**
             * ApprovedBlockProto sigs.
             * @member {Array.<casper.ISignature>} sigs
             * @memberof casper.ApprovedBlockProto
             * @instance
             */
            ApprovedBlockProto.prototype.sigs = $util.emptyArray;

            /**
             * Creates a new ApprovedBlockProto instance using the specified properties.
             * @function create
             * @memberof casper.ApprovedBlockProto
             * @static
             * @param {casper.IApprovedBlockProto=} [properties] Properties to set
             * @returns {casper.ApprovedBlockProto} ApprovedBlockProto instance
             */
            ApprovedBlockProto.create = function create(properties) {
                return new ApprovedBlockProto(properties);
            };

            /**
             * Encodes the specified ApprovedBlockProto message. Does not implicitly {@link casper.ApprovedBlockProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ApprovedBlockProto
             * @static
             * @param {casper.IApprovedBlockProto} message ApprovedBlockProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApprovedBlockProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.candidate != null && message.hasOwnProperty("candidate"))
                    $root.casper.ApprovedBlockCandidateProto.encode(message.candidate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.sigs != null && message.sigs.length)
                    for (var i = 0; i < message.sigs.length; ++i)
                        $root.casper.Signature.encode(message.sigs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ApprovedBlockProto message, length delimited. Does not implicitly {@link casper.ApprovedBlockProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ApprovedBlockProto
             * @static
             * @param {casper.IApprovedBlockProto} message ApprovedBlockProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApprovedBlockProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ApprovedBlockProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ApprovedBlockProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ApprovedBlockProto} ApprovedBlockProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApprovedBlockProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ApprovedBlockProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.candidate = $root.casper.ApprovedBlockCandidateProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.sigs && message.sigs.length))
                            message.sigs = [];
                        message.sigs.push($root.casper.Signature.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ApprovedBlockProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ApprovedBlockProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ApprovedBlockProto} ApprovedBlockProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApprovedBlockProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ApprovedBlockProto message.
             * @function verify
             * @memberof casper.ApprovedBlockProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ApprovedBlockProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.candidate != null && message.hasOwnProperty("candidate")) {
                    var error = $root.casper.ApprovedBlockCandidateProto.verify(message.candidate);
                    if (error)
                        return "candidate." + error;
                }
                if (message.sigs != null && message.hasOwnProperty("sigs")) {
                    if (!Array.isArray(message.sigs))
                        return "sigs: array expected";
                    for (var i = 0; i < message.sigs.length; ++i) {
                        var error = $root.casper.Signature.verify(message.sigs[i]);
                        if (error)
                            return "sigs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an ApprovedBlockProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ApprovedBlockProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ApprovedBlockProto} ApprovedBlockProto
             */
            ApprovedBlockProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ApprovedBlockProto)
                    return object;
                var message = new $root.casper.ApprovedBlockProto();
                if (object.candidate != null) {
                    if (typeof object.candidate !== "object")
                        throw TypeError(".casper.ApprovedBlockProto.candidate: object expected");
                    message.candidate = $root.casper.ApprovedBlockCandidateProto.fromObject(object.candidate);
                }
                if (object.sigs) {
                    if (!Array.isArray(object.sigs))
                        throw TypeError(".casper.ApprovedBlockProto.sigs: array expected");
                    message.sigs = [];
                    for (var i = 0; i < object.sigs.length; ++i) {
                        if (typeof object.sigs[i] !== "object")
                            throw TypeError(".casper.ApprovedBlockProto.sigs: object expected");
                        message.sigs[i] = $root.casper.Signature.fromObject(object.sigs[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an ApprovedBlockProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ApprovedBlockProto
             * @static
             * @param {casper.ApprovedBlockProto} message ApprovedBlockProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ApprovedBlockProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.sigs = [];
                if (options.defaults)
                    object.candidate = null;
                if (message.candidate != null && message.hasOwnProperty("candidate"))
                    object.candidate = $root.casper.ApprovedBlockCandidateProto.toObject(message.candidate, options);
                if (message.sigs && message.sigs.length) {
                    object.sigs = [];
                    for (var j = 0; j < message.sigs.length; ++j)
                        object.sigs[j] = $root.casper.Signature.toObject(message.sigs[j], options);
                }
                return object;
            };

            /**
             * Converts this ApprovedBlockProto to JSON.
             * @function toJSON
             * @memberof casper.ApprovedBlockProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ApprovedBlockProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ApprovedBlockProto;
        })();

        casper.ApprovedBlockRequestProto = (function() {

            /**
             * Properties of an ApprovedBlockRequestProto.
             * @memberof casper
             * @interface IApprovedBlockRequestProto
             * @property {string|null} [identifier] ApprovedBlockRequestProto identifier
             */

            /**
             * Constructs a new ApprovedBlockRequestProto.
             * @memberof casper
             * @classdesc Represents an ApprovedBlockRequestProto.
             * @implements IApprovedBlockRequestProto
             * @constructor
             * @param {casper.IApprovedBlockRequestProto=} [properties] Properties to set
             */
            function ApprovedBlockRequestProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ApprovedBlockRequestProto identifier.
             * @member {string} identifier
             * @memberof casper.ApprovedBlockRequestProto
             * @instance
             */
            ApprovedBlockRequestProto.prototype.identifier = "";

            /**
             * Creates a new ApprovedBlockRequestProto instance using the specified properties.
             * @function create
             * @memberof casper.ApprovedBlockRequestProto
             * @static
             * @param {casper.IApprovedBlockRequestProto=} [properties] Properties to set
             * @returns {casper.ApprovedBlockRequestProto} ApprovedBlockRequestProto instance
             */
            ApprovedBlockRequestProto.create = function create(properties) {
                return new ApprovedBlockRequestProto(properties);
            };

            /**
             * Encodes the specified ApprovedBlockRequestProto message. Does not implicitly {@link casper.ApprovedBlockRequestProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ApprovedBlockRequestProto
             * @static
             * @param {casper.IApprovedBlockRequestProto} message ApprovedBlockRequestProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApprovedBlockRequestProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.identifier != null && message.hasOwnProperty("identifier"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.identifier);
                return writer;
            };

            /**
             * Encodes the specified ApprovedBlockRequestProto message, length delimited. Does not implicitly {@link casper.ApprovedBlockRequestProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ApprovedBlockRequestProto
             * @static
             * @param {casper.IApprovedBlockRequestProto} message ApprovedBlockRequestProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ApprovedBlockRequestProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ApprovedBlockRequestProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ApprovedBlockRequestProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ApprovedBlockRequestProto} ApprovedBlockRequestProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApprovedBlockRequestProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ApprovedBlockRequestProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.identifier = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ApprovedBlockRequestProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ApprovedBlockRequestProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ApprovedBlockRequestProto} ApprovedBlockRequestProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ApprovedBlockRequestProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ApprovedBlockRequestProto message.
             * @function verify
             * @memberof casper.ApprovedBlockRequestProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ApprovedBlockRequestProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.identifier != null && message.hasOwnProperty("identifier"))
                    if (!$util.isString(message.identifier))
                        return "identifier: string expected";
                return null;
            };

            /**
             * Creates an ApprovedBlockRequestProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ApprovedBlockRequestProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ApprovedBlockRequestProto} ApprovedBlockRequestProto
             */
            ApprovedBlockRequestProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ApprovedBlockRequestProto)
                    return object;
                var message = new $root.casper.ApprovedBlockRequestProto();
                if (object.identifier != null)
                    message.identifier = String(object.identifier);
                return message;
            };

            /**
             * Creates a plain object from an ApprovedBlockRequestProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ApprovedBlockRequestProto
             * @static
             * @param {casper.ApprovedBlockRequestProto} message ApprovedBlockRequestProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ApprovedBlockRequestProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.identifier = "";
                if (message.identifier != null && message.hasOwnProperty("identifier"))
                    object.identifier = message.identifier;
                return object;
            };

            /**
             * Converts this ApprovedBlockRequestProto to JSON.
             * @function toJSON
             * @memberof casper.ApprovedBlockRequestProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ApprovedBlockRequestProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ApprovedBlockRequestProto;
        })();

        casper.NoApprovedBlockAvailableProto = (function() {

            /**
             * Properties of a NoApprovedBlockAvailableProto.
             * @memberof casper
             * @interface INoApprovedBlockAvailableProto
             * @property {string|null} [identifier] NoApprovedBlockAvailableProto identifier
             * @property {string|null} [nodeIdentifer] NoApprovedBlockAvailableProto nodeIdentifer
             */

            /**
             * Constructs a new NoApprovedBlockAvailableProto.
             * @memberof casper
             * @classdesc Represents a NoApprovedBlockAvailableProto.
             * @implements INoApprovedBlockAvailableProto
             * @constructor
             * @param {casper.INoApprovedBlockAvailableProto=} [properties] Properties to set
             */
            function NoApprovedBlockAvailableProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * NoApprovedBlockAvailableProto identifier.
             * @member {string} identifier
             * @memberof casper.NoApprovedBlockAvailableProto
             * @instance
             */
            NoApprovedBlockAvailableProto.prototype.identifier = "";

            /**
             * NoApprovedBlockAvailableProto nodeIdentifer.
             * @member {string} nodeIdentifer
             * @memberof casper.NoApprovedBlockAvailableProto
             * @instance
             */
            NoApprovedBlockAvailableProto.prototype.nodeIdentifer = "";

            /**
             * Creates a new NoApprovedBlockAvailableProto instance using the specified properties.
             * @function create
             * @memberof casper.NoApprovedBlockAvailableProto
             * @static
             * @param {casper.INoApprovedBlockAvailableProto=} [properties] Properties to set
             * @returns {casper.NoApprovedBlockAvailableProto} NoApprovedBlockAvailableProto instance
             */
            NoApprovedBlockAvailableProto.create = function create(properties) {
                return new NoApprovedBlockAvailableProto(properties);
            };

            /**
             * Encodes the specified NoApprovedBlockAvailableProto message. Does not implicitly {@link casper.NoApprovedBlockAvailableProto.verify|verify} messages.
             * @function encode
             * @memberof casper.NoApprovedBlockAvailableProto
             * @static
             * @param {casper.INoApprovedBlockAvailableProto} message NoApprovedBlockAvailableProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NoApprovedBlockAvailableProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.identifier != null && message.hasOwnProperty("identifier"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.identifier);
                if (message.nodeIdentifer != null && message.hasOwnProperty("nodeIdentifer"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.nodeIdentifer);
                return writer;
            };

            /**
             * Encodes the specified NoApprovedBlockAvailableProto message, length delimited. Does not implicitly {@link casper.NoApprovedBlockAvailableProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.NoApprovedBlockAvailableProto
             * @static
             * @param {casper.INoApprovedBlockAvailableProto} message NoApprovedBlockAvailableProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            NoApprovedBlockAvailableProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a NoApprovedBlockAvailableProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.NoApprovedBlockAvailableProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.NoApprovedBlockAvailableProto} NoApprovedBlockAvailableProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NoApprovedBlockAvailableProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.NoApprovedBlockAvailableProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.identifier = reader.string();
                        break;
                    case 2:
                        message.nodeIdentifer = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a NoApprovedBlockAvailableProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.NoApprovedBlockAvailableProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.NoApprovedBlockAvailableProto} NoApprovedBlockAvailableProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            NoApprovedBlockAvailableProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a NoApprovedBlockAvailableProto message.
             * @function verify
             * @memberof casper.NoApprovedBlockAvailableProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            NoApprovedBlockAvailableProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.identifier != null && message.hasOwnProperty("identifier"))
                    if (!$util.isString(message.identifier))
                        return "identifier: string expected";
                if (message.nodeIdentifer != null && message.hasOwnProperty("nodeIdentifer"))
                    if (!$util.isString(message.nodeIdentifer))
                        return "nodeIdentifer: string expected";
                return null;
            };

            /**
             * Creates a NoApprovedBlockAvailableProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.NoApprovedBlockAvailableProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.NoApprovedBlockAvailableProto} NoApprovedBlockAvailableProto
             */
            NoApprovedBlockAvailableProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.NoApprovedBlockAvailableProto)
                    return object;
                var message = new $root.casper.NoApprovedBlockAvailableProto();
                if (object.identifier != null)
                    message.identifier = String(object.identifier);
                if (object.nodeIdentifer != null)
                    message.nodeIdentifer = String(object.nodeIdentifer);
                return message;
            };

            /**
             * Creates a plain object from a NoApprovedBlockAvailableProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.NoApprovedBlockAvailableProto
             * @static
             * @param {casper.NoApprovedBlockAvailableProto} message NoApprovedBlockAvailableProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            NoApprovedBlockAvailableProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.identifier = "";
                    object.nodeIdentifer = "";
                }
                if (message.identifier != null && message.hasOwnProperty("identifier"))
                    object.identifier = message.identifier;
                if (message.nodeIdentifer != null && message.hasOwnProperty("nodeIdentifer"))
                    object.nodeIdentifer = message.nodeIdentifer;
                return object;
            };

            /**
             * Converts this NoApprovedBlockAvailableProto to JSON.
             * @function toJSON
             * @memberof casper.NoApprovedBlockAvailableProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            NoApprovedBlockAvailableProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return NoApprovedBlockAvailableProto;
        })();

        casper.BlockMessageProto = (function() {

            /**
             * Properties of a BlockMessageProto.
             * @memberof casper
             * @interface IBlockMessageProto
             * @property {Uint8Array|null} [blockHash] BlockMessageProto blockHash
             * @property {casper.IHeaderProto|null} [header] BlockMessageProto header
             * @property {casper.IBodyProto|null} [body] BlockMessageProto body
             * @property {Array.<casper.IJustificationProto>|null} [justifications] BlockMessageProto justifications
             * @property {Uint8Array|null} [sender] BlockMessageProto sender
             * @property {number|null} [seqNum] BlockMessageProto seqNum
             * @property {Uint8Array|null} [sig] BlockMessageProto sig
             * @property {string|null} [sigAlgorithm] BlockMessageProto sigAlgorithm
             * @property {string|null} [shardId] BlockMessageProto shardId
             * @property {Uint8Array|null} [extraBytes] BlockMessageProto extraBytes
             */

            /**
             * Constructs a new BlockMessageProto.
             * @memberof casper
             * @classdesc Represents a BlockMessageProto.
             * @implements IBlockMessageProto
             * @constructor
             * @param {casper.IBlockMessageProto=} [properties] Properties to set
             */
            function BlockMessageProto(properties) {
                this.justifications = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockMessageProto blockHash.
             * @member {Uint8Array} blockHash
             * @memberof casper.BlockMessageProto
             * @instance
             */
            BlockMessageProto.prototype.blockHash = $util.newBuffer([]);

            /**
             * BlockMessageProto header.
             * @member {casper.IHeaderProto|null|undefined} header
             * @memberof casper.BlockMessageProto
             * @instance
             */
            BlockMessageProto.prototype.header = null;

            /**
             * BlockMessageProto body.
             * @member {casper.IBodyProto|null|undefined} body
             * @memberof casper.BlockMessageProto
             * @instance
             */
            BlockMessageProto.prototype.body = null;

            /**
             * BlockMessageProto justifications.
             * @member {Array.<casper.IJustificationProto>} justifications
             * @memberof casper.BlockMessageProto
             * @instance
             */
            BlockMessageProto.prototype.justifications = $util.emptyArray;

            /**
             * BlockMessageProto sender.
             * @member {Uint8Array} sender
             * @memberof casper.BlockMessageProto
             * @instance
             */
            BlockMessageProto.prototype.sender = $util.newBuffer([]);

            /**
             * BlockMessageProto seqNum.
             * @member {number} seqNum
             * @memberof casper.BlockMessageProto
             * @instance
             */
            BlockMessageProto.prototype.seqNum = 0;

            /**
             * BlockMessageProto sig.
             * @member {Uint8Array} sig
             * @memberof casper.BlockMessageProto
             * @instance
             */
            BlockMessageProto.prototype.sig = $util.newBuffer([]);

            /**
             * BlockMessageProto sigAlgorithm.
             * @member {string} sigAlgorithm
             * @memberof casper.BlockMessageProto
             * @instance
             */
            BlockMessageProto.prototype.sigAlgorithm = "";

            /**
             * BlockMessageProto shardId.
             * @member {string} shardId
             * @memberof casper.BlockMessageProto
             * @instance
             */
            BlockMessageProto.prototype.shardId = "";

            /**
             * BlockMessageProto extraBytes.
             * @member {Uint8Array} extraBytes
             * @memberof casper.BlockMessageProto
             * @instance
             */
            BlockMessageProto.prototype.extraBytes = $util.newBuffer([]);

            /**
             * Creates a new BlockMessageProto instance using the specified properties.
             * @function create
             * @memberof casper.BlockMessageProto
             * @static
             * @param {casper.IBlockMessageProto=} [properties] Properties to set
             * @returns {casper.BlockMessageProto} BlockMessageProto instance
             */
            BlockMessageProto.create = function create(properties) {
                return new BlockMessageProto(properties);
            };

            /**
             * Encodes the specified BlockMessageProto message. Does not implicitly {@link casper.BlockMessageProto.verify|verify} messages.
             * @function encode
             * @memberof casper.BlockMessageProto
             * @static
             * @param {casper.IBlockMessageProto} message BlockMessageProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMessageProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.blockHash);
                if (message.header != null && message.hasOwnProperty("header"))
                    $root.casper.HeaderProto.encode(message.header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.body != null && message.hasOwnProperty("body"))
                    $root.casper.BodyProto.encode(message.body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.justifications != null && message.justifications.length)
                    for (var i = 0; i < message.justifications.length; ++i)
                        $root.casper.JustificationProto.encode(message.justifications[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.sender != null && message.hasOwnProperty("sender"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.sender);
                if (message.seqNum != null && message.hasOwnProperty("seqNum"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.seqNum);
                if (message.sig != null && message.hasOwnProperty("sig"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.sig);
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.sigAlgorithm);
                if (message.shardId != null && message.hasOwnProperty("shardId"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.shardId);
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.extraBytes);
                return writer;
            };

            /**
             * Encodes the specified BlockMessageProto message, length delimited. Does not implicitly {@link casper.BlockMessageProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BlockMessageProto
             * @static
             * @param {casper.IBlockMessageProto} message BlockMessageProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMessageProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockMessageProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BlockMessageProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BlockMessageProto} BlockMessageProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMessageProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockMessageProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.blockHash = reader.bytes();
                        break;
                    case 2:
                        message.header = $root.casper.HeaderProto.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.body = $root.casper.BodyProto.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.justifications && message.justifications.length))
                            message.justifications = [];
                        message.justifications.push($root.casper.JustificationProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.sender = reader.bytes();
                        break;
                    case 6:
                        message.seqNum = reader.int32();
                        break;
                    case 7:
                        message.sig = reader.bytes();
                        break;
                    case 8:
                        message.sigAlgorithm = reader.string();
                        break;
                    case 9:
                        message.shardId = reader.string();
                        break;
                    case 10:
                        message.extraBytes = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockMessageProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BlockMessageProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BlockMessageProto} BlockMessageProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMessageProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockMessageProto message.
             * @function verify
             * @memberof casper.BlockMessageProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockMessageProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    if (!(message.blockHash && typeof message.blockHash.length === "number" || $util.isString(message.blockHash)))
                        return "blockHash: buffer expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    var error = $root.casper.HeaderProto.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.body != null && message.hasOwnProperty("body")) {
                    var error = $root.casper.BodyProto.verify(message.body);
                    if (error)
                        return "body." + error;
                }
                if (message.justifications != null && message.hasOwnProperty("justifications")) {
                    if (!Array.isArray(message.justifications))
                        return "justifications: array expected";
                    for (var i = 0; i < message.justifications.length; ++i) {
                        var error = $root.casper.JustificationProto.verify(message.justifications[i]);
                        if (error)
                            return "justifications." + error;
                    }
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!(message.sender && typeof message.sender.length === "number" || $util.isString(message.sender)))
                        return "sender: buffer expected";
                if (message.seqNum != null && message.hasOwnProperty("seqNum"))
                    if (!$util.isInteger(message.seqNum))
                        return "seqNum: integer expected";
                if (message.sig != null && message.hasOwnProperty("sig"))
                    if (!(message.sig && typeof message.sig.length === "number" || $util.isString(message.sig)))
                        return "sig: buffer expected";
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    if (!$util.isString(message.sigAlgorithm))
                        return "sigAlgorithm: string expected";
                if (message.shardId != null && message.hasOwnProperty("shardId"))
                    if (!$util.isString(message.shardId))
                        return "shardId: string expected";
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    if (!(message.extraBytes && typeof message.extraBytes.length === "number" || $util.isString(message.extraBytes)))
                        return "extraBytes: buffer expected";
                return null;
            };

            /**
             * Creates a BlockMessageProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BlockMessageProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BlockMessageProto} BlockMessageProto
             */
            BlockMessageProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BlockMessageProto)
                    return object;
                var message = new $root.casper.BlockMessageProto();
                if (object.blockHash != null)
                    if (typeof object.blockHash === "string")
                        $util.base64.decode(object.blockHash, message.blockHash = $util.newBuffer($util.base64.length(object.blockHash)), 0);
                    else if (object.blockHash.length)
                        message.blockHash = object.blockHash;
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".casper.BlockMessageProto.header: object expected");
                    message.header = $root.casper.HeaderProto.fromObject(object.header);
                }
                if (object.body != null) {
                    if (typeof object.body !== "object")
                        throw TypeError(".casper.BlockMessageProto.body: object expected");
                    message.body = $root.casper.BodyProto.fromObject(object.body);
                }
                if (object.justifications) {
                    if (!Array.isArray(object.justifications))
                        throw TypeError(".casper.BlockMessageProto.justifications: array expected");
                    message.justifications = [];
                    for (var i = 0; i < object.justifications.length; ++i) {
                        if (typeof object.justifications[i] !== "object")
                            throw TypeError(".casper.BlockMessageProto.justifications: object expected");
                        message.justifications[i] = $root.casper.JustificationProto.fromObject(object.justifications[i]);
                    }
                }
                if (object.sender != null)
                    if (typeof object.sender === "string")
                        $util.base64.decode(object.sender, message.sender = $util.newBuffer($util.base64.length(object.sender)), 0);
                    else if (object.sender.length)
                        message.sender = object.sender;
                if (object.seqNum != null)
                    message.seqNum = object.seqNum | 0;
                if (object.sig != null)
                    if (typeof object.sig === "string")
                        $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);
                    else if (object.sig.length)
                        message.sig = object.sig;
                if (object.sigAlgorithm != null)
                    message.sigAlgorithm = String(object.sigAlgorithm);
                if (object.shardId != null)
                    message.shardId = String(object.shardId);
                if (object.extraBytes != null)
                    if (typeof object.extraBytes === "string")
                        $util.base64.decode(object.extraBytes, message.extraBytes = $util.newBuffer($util.base64.length(object.extraBytes)), 0);
                    else if (object.extraBytes.length)
                        message.extraBytes = object.extraBytes;
                return message;
            };

            /**
             * Creates a plain object from a BlockMessageProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BlockMessageProto
             * @static
             * @param {casper.BlockMessageProto} message BlockMessageProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockMessageProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.justifications = [];
                if (options.defaults) {
                    if (options.bytes === String)
                        object.blockHash = "";
                    else {
                        object.blockHash = [];
                        if (options.bytes !== Array)
                            object.blockHash = $util.newBuffer(object.blockHash);
                    }
                    object.header = null;
                    object.body = null;
                    if (options.bytes === String)
                        object.sender = "";
                    else {
                        object.sender = [];
                        if (options.bytes !== Array)
                            object.sender = $util.newBuffer(object.sender);
                    }
                    object.seqNum = 0;
                    if (options.bytes === String)
                        object.sig = "";
                    else {
                        object.sig = [];
                        if (options.bytes !== Array)
                            object.sig = $util.newBuffer(object.sig);
                    }
                    object.sigAlgorithm = "";
                    object.shardId = "";
                    if (options.bytes === String)
                        object.extraBytes = "";
                    else {
                        object.extraBytes = [];
                        if (options.bytes !== Array)
                            object.extraBytes = $util.newBuffer(object.extraBytes);
                    }
                }
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    object.blockHash = options.bytes === String ? $util.base64.encode(message.blockHash, 0, message.blockHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.blockHash) : message.blockHash;
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.casper.HeaderProto.toObject(message.header, options);
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = $root.casper.BodyProto.toObject(message.body, options);
                if (message.justifications && message.justifications.length) {
                    object.justifications = [];
                    for (var j = 0; j < message.justifications.length; ++j)
                        object.justifications[j] = $root.casper.JustificationProto.toObject(message.justifications[j], options);
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = options.bytes === String ? $util.base64.encode(message.sender, 0, message.sender.length) : options.bytes === Array ? Array.prototype.slice.call(message.sender) : message.sender;
                if (message.seqNum != null && message.hasOwnProperty("seqNum"))
                    object.seqNum = message.seqNum;
                if (message.sig != null && message.hasOwnProperty("sig"))
                    object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    object.sigAlgorithm = message.sigAlgorithm;
                if (message.shardId != null && message.hasOwnProperty("shardId"))
                    object.shardId = message.shardId;
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    object.extraBytes = options.bytes === String ? $util.base64.encode(message.extraBytes, 0, message.extraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.extraBytes) : message.extraBytes;
                return object;
            };

            /**
             * Converts this BlockMessageProto to JSON.
             * @function toJSON
             * @memberof casper.BlockMessageProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockMessageProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockMessageProto;
        })();

        casper.BlockHashMessageProto = (function() {

            /**
             * Properties of a BlockHashMessageProto.
             * @memberof casper
             * @interface IBlockHashMessageProto
             * @property {Uint8Array|null} [hash] BlockHashMessageProto hash
             * @property {Uint8Array|null} [blockCreator] BlockHashMessageProto blockCreator
             */

            /**
             * Constructs a new BlockHashMessageProto.
             * @memberof casper
             * @classdesc Represents a BlockHashMessageProto.
             * @implements IBlockHashMessageProto
             * @constructor
             * @param {casper.IBlockHashMessageProto=} [properties] Properties to set
             */
            function BlockHashMessageProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockHashMessageProto hash.
             * @member {Uint8Array} hash
             * @memberof casper.BlockHashMessageProto
             * @instance
             */
            BlockHashMessageProto.prototype.hash = $util.newBuffer([]);

            /**
             * BlockHashMessageProto blockCreator.
             * @member {Uint8Array} blockCreator
             * @memberof casper.BlockHashMessageProto
             * @instance
             */
            BlockHashMessageProto.prototype.blockCreator = $util.newBuffer([]);

            /**
             * Creates a new BlockHashMessageProto instance using the specified properties.
             * @function create
             * @memberof casper.BlockHashMessageProto
             * @static
             * @param {casper.IBlockHashMessageProto=} [properties] Properties to set
             * @returns {casper.BlockHashMessageProto} BlockHashMessageProto instance
             */
            BlockHashMessageProto.create = function create(properties) {
                return new BlockHashMessageProto(properties);
            };

            /**
             * Encodes the specified BlockHashMessageProto message. Does not implicitly {@link casper.BlockHashMessageProto.verify|verify} messages.
             * @function encode
             * @memberof casper.BlockHashMessageProto
             * @static
             * @param {casper.IBlockHashMessageProto} message BlockHashMessageProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockHashMessageProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && message.hasOwnProperty("hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                if (message.blockCreator != null && message.hasOwnProperty("blockCreator"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.blockCreator);
                return writer;
            };

            /**
             * Encodes the specified BlockHashMessageProto message, length delimited. Does not implicitly {@link casper.BlockHashMessageProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BlockHashMessageProto
             * @static
             * @param {casper.IBlockHashMessageProto} message BlockHashMessageProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockHashMessageProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockHashMessageProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BlockHashMessageProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BlockHashMessageProto} BlockHashMessageProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockHashMessageProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockHashMessageProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.bytes();
                        break;
                    case 2:
                        message.blockCreator = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockHashMessageProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BlockHashMessageProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BlockHashMessageProto} BlockHashMessageProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockHashMessageProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockHashMessageProto message.
             * @function verify
             * @memberof casper.BlockHashMessageProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockHashMessageProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.blockCreator != null && message.hasOwnProperty("blockCreator"))
                    if (!(message.blockCreator && typeof message.blockCreator.length === "number" || $util.isString(message.blockCreator)))
                        return "blockCreator: buffer expected";
                return null;
            };

            /**
             * Creates a BlockHashMessageProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BlockHashMessageProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BlockHashMessageProto} BlockHashMessageProto
             */
            BlockHashMessageProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BlockHashMessageProto)
                    return object;
                var message = new $root.casper.BlockHashMessageProto();
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.blockCreator != null)
                    if (typeof object.blockCreator === "string")
                        $util.base64.decode(object.blockCreator, message.blockCreator = $util.newBuffer($util.base64.length(object.blockCreator)), 0);
                    else if (object.blockCreator.length)
                        message.blockCreator = object.blockCreator;
                return message;
            };

            /**
             * Creates a plain object from a BlockHashMessageProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BlockHashMessageProto
             * @static
             * @param {casper.BlockHashMessageProto} message BlockHashMessageProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockHashMessageProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    if (options.bytes === String)
                        object.blockCreator = "";
                    else {
                        object.blockCreator = [];
                        if (options.bytes !== Array)
                            object.blockCreator = $util.newBuffer(object.blockCreator);
                    }
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.blockCreator != null && message.hasOwnProperty("blockCreator"))
                    object.blockCreator = options.bytes === String ? $util.base64.encode(message.blockCreator, 0, message.blockCreator.length) : options.bytes === Array ? Array.prototype.slice.call(message.blockCreator) : message.blockCreator;
                return object;
            };

            /**
             * Converts this BlockHashMessageProto to JSON.
             * @function toJSON
             * @memberof casper.BlockHashMessageProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockHashMessageProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockHashMessageProto;
        })();

        casper.BlockMetadataInternal = (function() {

            /**
             * Properties of a BlockMetadataInternal.
             * @memberof casper
             * @interface IBlockMetadataInternal
             * @property {Uint8Array|null} [blockHash] BlockMetadataInternal blockHash
             * @property {Array.<Uint8Array>|null} [parents] BlockMetadataInternal parents
             * @property {Uint8Array|null} [sender] BlockMetadataInternal sender
             * @property {Array.<casper.IJustificationProto>|null} [justifications] BlockMetadataInternal justifications
             * @property {Array.<casper.IBondProto>|null} [bonds] BlockMetadataInternal bonds
             * @property {number|Long|null} [blockNum] BlockMetadataInternal blockNum
             * @property {number|null} [seqNum] BlockMetadataInternal seqNum
             * @property {boolean|null} [invalid] BlockMetadataInternal invalid
             */

            /**
             * Constructs a new BlockMetadataInternal.
             * @memberof casper
             * @classdesc Represents a BlockMetadataInternal.
             * @implements IBlockMetadataInternal
             * @constructor
             * @param {casper.IBlockMetadataInternal=} [properties] Properties to set
             */
            function BlockMetadataInternal(properties) {
                this.parents = [];
                this.justifications = [];
                this.bonds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockMetadataInternal blockHash.
             * @member {Uint8Array} blockHash
             * @memberof casper.BlockMetadataInternal
             * @instance
             */
            BlockMetadataInternal.prototype.blockHash = $util.newBuffer([]);

            /**
             * BlockMetadataInternal parents.
             * @member {Array.<Uint8Array>} parents
             * @memberof casper.BlockMetadataInternal
             * @instance
             */
            BlockMetadataInternal.prototype.parents = $util.emptyArray;

            /**
             * BlockMetadataInternal sender.
             * @member {Uint8Array} sender
             * @memberof casper.BlockMetadataInternal
             * @instance
             */
            BlockMetadataInternal.prototype.sender = $util.newBuffer([]);

            /**
             * BlockMetadataInternal justifications.
             * @member {Array.<casper.IJustificationProto>} justifications
             * @memberof casper.BlockMetadataInternal
             * @instance
             */
            BlockMetadataInternal.prototype.justifications = $util.emptyArray;

            /**
             * BlockMetadataInternal bonds.
             * @member {Array.<casper.IBondProto>} bonds
             * @memberof casper.BlockMetadataInternal
             * @instance
             */
            BlockMetadataInternal.prototype.bonds = $util.emptyArray;

            /**
             * BlockMetadataInternal blockNum.
             * @member {number|Long} blockNum
             * @memberof casper.BlockMetadataInternal
             * @instance
             */
            BlockMetadataInternal.prototype.blockNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockMetadataInternal seqNum.
             * @member {number} seqNum
             * @memberof casper.BlockMetadataInternal
             * @instance
             */
            BlockMetadataInternal.prototype.seqNum = 0;

            /**
             * BlockMetadataInternal invalid.
             * @member {boolean} invalid
             * @memberof casper.BlockMetadataInternal
             * @instance
             */
            BlockMetadataInternal.prototype.invalid = false;

            /**
             * Creates a new BlockMetadataInternal instance using the specified properties.
             * @function create
             * @memberof casper.BlockMetadataInternal
             * @static
             * @param {casper.IBlockMetadataInternal=} [properties] Properties to set
             * @returns {casper.BlockMetadataInternal} BlockMetadataInternal instance
             */
            BlockMetadataInternal.create = function create(properties) {
                return new BlockMetadataInternal(properties);
            };

            /**
             * Encodes the specified BlockMetadataInternal message. Does not implicitly {@link casper.BlockMetadataInternal.verify|verify} messages.
             * @function encode
             * @memberof casper.BlockMetadataInternal
             * @static
             * @param {casper.IBlockMetadataInternal} message BlockMetadataInternal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMetadataInternal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.blockHash);
                if (message.parents != null && message.parents.length)
                    for (var i = 0; i < message.parents.length; ++i)
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.parents[i]);
                if (message.sender != null && message.hasOwnProperty("sender"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.sender);
                if (message.justifications != null && message.justifications.length)
                    for (var i = 0; i < message.justifications.length; ++i)
                        $root.casper.JustificationProto.encode(message.justifications[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.bonds != null && message.bonds.length)
                    for (var i = 0; i < message.bonds.length; ++i)
                        $root.casper.BondProto.encode(message.bonds[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.blockNum != null && message.hasOwnProperty("blockNum"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.blockNum);
                if (message.seqNum != null && message.hasOwnProperty("seqNum"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.seqNum);
                if (message.invalid != null && message.hasOwnProperty("invalid"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.invalid);
                return writer;
            };

            /**
             * Encodes the specified BlockMetadataInternal message, length delimited. Does not implicitly {@link casper.BlockMetadataInternal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BlockMetadataInternal
             * @static
             * @param {casper.IBlockMetadataInternal} message BlockMetadataInternal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMetadataInternal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockMetadataInternal message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BlockMetadataInternal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BlockMetadataInternal} BlockMetadataInternal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMetadataInternal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockMetadataInternal();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.blockHash = reader.bytes();
                        break;
                    case 2:
                        if (!(message.parents && message.parents.length))
                            message.parents = [];
                        message.parents.push(reader.bytes());
                        break;
                    case 3:
                        message.sender = reader.bytes();
                        break;
                    case 4:
                        if (!(message.justifications && message.justifications.length))
                            message.justifications = [];
                        message.justifications.push($root.casper.JustificationProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.bonds && message.bonds.length))
                            message.bonds = [];
                        message.bonds.push($root.casper.BondProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        message.blockNum = reader.int64();
                        break;
                    case 7:
                        message.seqNum = reader.int32();
                        break;
                    case 8:
                        message.invalid = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockMetadataInternal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BlockMetadataInternal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BlockMetadataInternal} BlockMetadataInternal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMetadataInternal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockMetadataInternal message.
             * @function verify
             * @memberof casper.BlockMetadataInternal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockMetadataInternal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    if (!(message.blockHash && typeof message.blockHash.length === "number" || $util.isString(message.blockHash)))
                        return "blockHash: buffer expected";
                if (message.parents != null && message.hasOwnProperty("parents")) {
                    if (!Array.isArray(message.parents))
                        return "parents: array expected";
                    for (var i = 0; i < message.parents.length; ++i)
                        if (!(message.parents[i] && typeof message.parents[i].length === "number" || $util.isString(message.parents[i])))
                            return "parents: buffer[] expected";
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!(message.sender && typeof message.sender.length === "number" || $util.isString(message.sender)))
                        return "sender: buffer expected";
                if (message.justifications != null && message.hasOwnProperty("justifications")) {
                    if (!Array.isArray(message.justifications))
                        return "justifications: array expected";
                    for (var i = 0; i < message.justifications.length; ++i) {
                        var error = $root.casper.JustificationProto.verify(message.justifications[i]);
                        if (error)
                            return "justifications." + error;
                    }
                }
                if (message.bonds != null && message.hasOwnProperty("bonds")) {
                    if (!Array.isArray(message.bonds))
                        return "bonds: array expected";
                    for (var i = 0; i < message.bonds.length; ++i) {
                        var error = $root.casper.BondProto.verify(message.bonds[i]);
                        if (error)
                            return "bonds." + error;
                    }
                }
                if (message.blockNum != null && message.hasOwnProperty("blockNum"))
                    if (!$util.isInteger(message.blockNum) && !(message.blockNum && $util.isInteger(message.blockNum.low) && $util.isInteger(message.blockNum.high)))
                        return "blockNum: integer|Long expected";
                if (message.seqNum != null && message.hasOwnProperty("seqNum"))
                    if (!$util.isInteger(message.seqNum))
                        return "seqNum: integer expected";
                if (message.invalid != null && message.hasOwnProperty("invalid"))
                    if (typeof message.invalid !== "boolean")
                        return "invalid: boolean expected";
                return null;
            };

            /**
             * Creates a BlockMetadataInternal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BlockMetadataInternal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BlockMetadataInternal} BlockMetadataInternal
             */
            BlockMetadataInternal.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BlockMetadataInternal)
                    return object;
                var message = new $root.casper.BlockMetadataInternal();
                if (object.blockHash != null)
                    if (typeof object.blockHash === "string")
                        $util.base64.decode(object.blockHash, message.blockHash = $util.newBuffer($util.base64.length(object.blockHash)), 0);
                    else if (object.blockHash.length)
                        message.blockHash = object.blockHash;
                if (object.parents) {
                    if (!Array.isArray(object.parents))
                        throw TypeError(".casper.BlockMetadataInternal.parents: array expected");
                    message.parents = [];
                    for (var i = 0; i < object.parents.length; ++i)
                        if (typeof object.parents[i] === "string")
                            $util.base64.decode(object.parents[i], message.parents[i] = $util.newBuffer($util.base64.length(object.parents[i])), 0);
                        else if (object.parents[i].length)
                            message.parents[i] = object.parents[i];
                }
                if (object.sender != null)
                    if (typeof object.sender === "string")
                        $util.base64.decode(object.sender, message.sender = $util.newBuffer($util.base64.length(object.sender)), 0);
                    else if (object.sender.length)
                        message.sender = object.sender;
                if (object.justifications) {
                    if (!Array.isArray(object.justifications))
                        throw TypeError(".casper.BlockMetadataInternal.justifications: array expected");
                    message.justifications = [];
                    for (var i = 0; i < object.justifications.length; ++i) {
                        if (typeof object.justifications[i] !== "object")
                            throw TypeError(".casper.BlockMetadataInternal.justifications: object expected");
                        message.justifications[i] = $root.casper.JustificationProto.fromObject(object.justifications[i]);
                    }
                }
                if (object.bonds) {
                    if (!Array.isArray(object.bonds))
                        throw TypeError(".casper.BlockMetadataInternal.bonds: array expected");
                    message.bonds = [];
                    for (var i = 0; i < object.bonds.length; ++i) {
                        if (typeof object.bonds[i] !== "object")
                            throw TypeError(".casper.BlockMetadataInternal.bonds: object expected");
                        message.bonds[i] = $root.casper.BondProto.fromObject(object.bonds[i]);
                    }
                }
                if (object.blockNum != null)
                    if ($util.Long)
                        (message.blockNum = $util.Long.fromValue(object.blockNum)).unsigned = false;
                    else if (typeof object.blockNum === "string")
                        message.blockNum = parseInt(object.blockNum, 10);
                    else if (typeof object.blockNum === "number")
                        message.blockNum = object.blockNum;
                    else if (typeof object.blockNum === "object")
                        message.blockNum = new $util.LongBits(object.blockNum.low >>> 0, object.blockNum.high >>> 0).toNumber();
                if (object.seqNum != null)
                    message.seqNum = object.seqNum | 0;
                if (object.invalid != null)
                    message.invalid = Boolean(object.invalid);
                return message;
            };

            /**
             * Creates a plain object from a BlockMetadataInternal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BlockMetadataInternal
             * @static
             * @param {casper.BlockMetadataInternal} message BlockMetadataInternal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockMetadataInternal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.parents = [];
                    object.justifications = [];
                    object.bonds = [];
                }
                if (options.defaults) {
                    if (options.bytes === String)
                        object.blockHash = "";
                    else {
                        object.blockHash = [];
                        if (options.bytes !== Array)
                            object.blockHash = $util.newBuffer(object.blockHash);
                    }
                    if (options.bytes === String)
                        object.sender = "";
                    else {
                        object.sender = [];
                        if (options.bytes !== Array)
                            object.sender = $util.newBuffer(object.sender);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.blockNum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.blockNum = options.longs === String ? "0" : 0;
                    object.seqNum = 0;
                    object.invalid = false;
                }
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    object.blockHash = options.bytes === String ? $util.base64.encode(message.blockHash, 0, message.blockHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.blockHash) : message.blockHash;
                if (message.parents && message.parents.length) {
                    object.parents = [];
                    for (var j = 0; j < message.parents.length; ++j)
                        object.parents[j] = options.bytes === String ? $util.base64.encode(message.parents[j], 0, message.parents[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.parents[j]) : message.parents[j];
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = options.bytes === String ? $util.base64.encode(message.sender, 0, message.sender.length) : options.bytes === Array ? Array.prototype.slice.call(message.sender) : message.sender;
                if (message.justifications && message.justifications.length) {
                    object.justifications = [];
                    for (var j = 0; j < message.justifications.length; ++j)
                        object.justifications[j] = $root.casper.JustificationProto.toObject(message.justifications[j], options);
                }
                if (message.bonds && message.bonds.length) {
                    object.bonds = [];
                    for (var j = 0; j < message.bonds.length; ++j)
                        object.bonds[j] = $root.casper.BondProto.toObject(message.bonds[j], options);
                }
                if (message.blockNum != null && message.hasOwnProperty("blockNum"))
                    if (typeof message.blockNum === "number")
                        object.blockNum = options.longs === String ? String(message.blockNum) : message.blockNum;
                    else
                        object.blockNum = options.longs === String ? $util.Long.prototype.toString.call(message.blockNum) : options.longs === Number ? new $util.LongBits(message.blockNum.low >>> 0, message.blockNum.high >>> 0).toNumber() : message.blockNum;
                if (message.seqNum != null && message.hasOwnProperty("seqNum"))
                    object.seqNum = message.seqNum;
                if (message.invalid != null && message.hasOwnProperty("invalid"))
                    object.invalid = message.invalid;
                return object;
            };

            /**
             * Converts this BlockMetadataInternal to JSON.
             * @function toJSON
             * @memberof casper.BlockMetadataInternal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockMetadataInternal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockMetadataInternal;
        })();

        casper.HeaderProto = (function() {

            /**
             * Properties of a HeaderProto.
             * @memberof casper
             * @interface IHeaderProto
             * @property {Array.<Uint8Array>|null} [parentsHashList] HeaderProto parentsHashList
             * @property {number|Long|null} [timestamp] HeaderProto timestamp
             * @property {number|Long|null} [version] HeaderProto version
             * @property {Uint8Array|null} [extraBytes] HeaderProto extraBytes
             */

            /**
             * Constructs a new HeaderProto.
             * @memberof casper
             * @classdesc Represents a HeaderProto.
             * @implements IHeaderProto
             * @constructor
             * @param {casper.IHeaderProto=} [properties] Properties to set
             */
            function HeaderProto(properties) {
                this.parentsHashList = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HeaderProto parentsHashList.
             * @member {Array.<Uint8Array>} parentsHashList
             * @memberof casper.HeaderProto
             * @instance
             */
            HeaderProto.prototype.parentsHashList = $util.emptyArray;

            /**
             * HeaderProto timestamp.
             * @member {number|Long} timestamp
             * @memberof casper.HeaderProto
             * @instance
             */
            HeaderProto.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * HeaderProto version.
             * @member {number|Long} version
             * @memberof casper.HeaderProto
             * @instance
             */
            HeaderProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * HeaderProto extraBytes.
             * @member {Uint8Array} extraBytes
             * @memberof casper.HeaderProto
             * @instance
             */
            HeaderProto.prototype.extraBytes = $util.newBuffer([]);

            /**
             * Creates a new HeaderProto instance using the specified properties.
             * @function create
             * @memberof casper.HeaderProto
             * @static
             * @param {casper.IHeaderProto=} [properties] Properties to set
             * @returns {casper.HeaderProto} HeaderProto instance
             */
            HeaderProto.create = function create(properties) {
                return new HeaderProto(properties);
            };

            /**
             * Encodes the specified HeaderProto message. Does not implicitly {@link casper.HeaderProto.verify|verify} messages.
             * @function encode
             * @memberof casper.HeaderProto
             * @static
             * @param {casper.IHeaderProto} message HeaderProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HeaderProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.parentsHashList != null && message.parentsHashList.length)
                    for (var i = 0; i < message.parentsHashList.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.parentsHashList[i]);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.timestamp);
                if (message.version != null && message.hasOwnProperty("version"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.version);
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.extraBytes);
                return writer;
            };

            /**
             * Encodes the specified HeaderProto message, length delimited. Does not implicitly {@link casper.HeaderProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.HeaderProto
             * @static
             * @param {casper.IHeaderProto} message HeaderProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HeaderProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HeaderProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.HeaderProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.HeaderProto} HeaderProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HeaderProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.HeaderProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.parentsHashList && message.parentsHashList.length))
                            message.parentsHashList = [];
                        message.parentsHashList.push(reader.bytes());
                        break;
                    case 5:
                        message.timestamp = reader.int64();
                        break;
                    case 6:
                        message.version = reader.int64();
                        break;
                    case 7:
                        message.extraBytes = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HeaderProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.HeaderProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.HeaderProto} HeaderProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HeaderProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HeaderProto message.
             * @function verify
             * @memberof casper.HeaderProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HeaderProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.parentsHashList != null && message.hasOwnProperty("parentsHashList")) {
                    if (!Array.isArray(message.parentsHashList))
                        return "parentsHashList: array expected";
                    for (var i = 0; i < message.parentsHashList.length; ++i)
                        if (!(message.parentsHashList[i] && typeof message.parentsHashList[i].length === "number" || $util.isString(message.parentsHashList[i])))
                            return "parentsHashList: buffer[] expected";
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                        return "timestamp: integer|Long expected";
                if (message.version != null && message.hasOwnProperty("version"))
                    if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))
                        return "version: integer|Long expected";
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    if (!(message.extraBytes && typeof message.extraBytes.length === "number" || $util.isString(message.extraBytes)))
                        return "extraBytes: buffer expected";
                return null;
            };

            /**
             * Creates a HeaderProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.HeaderProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.HeaderProto} HeaderProto
             */
            HeaderProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.HeaderProto)
                    return object;
                var message = new $root.casper.HeaderProto();
                if (object.parentsHashList) {
                    if (!Array.isArray(object.parentsHashList))
                        throw TypeError(".casper.HeaderProto.parentsHashList: array expected");
                    message.parentsHashList = [];
                    for (var i = 0; i < object.parentsHashList.length; ++i)
                        if (typeof object.parentsHashList[i] === "string")
                            $util.base64.decode(object.parentsHashList[i], message.parentsHashList[i] = $util.newBuffer($util.base64.length(object.parentsHashList[i])), 0);
                        else if (object.parentsHashList[i].length)
                            message.parentsHashList[i] = object.parentsHashList[i];
                }
                if (object.timestamp != null)
                    if ($util.Long)
                        (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                    else if (typeof object.timestamp === "string")
                        message.timestamp = parseInt(object.timestamp, 10);
                    else if (typeof object.timestamp === "number")
                        message.timestamp = object.timestamp;
                    else if (typeof object.timestamp === "object")
                        message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                if (object.version != null)
                    if ($util.Long)
                        (message.version = $util.Long.fromValue(object.version)).unsigned = false;
                    else if (typeof object.version === "string")
                        message.version = parseInt(object.version, 10);
                    else if (typeof object.version === "number")
                        message.version = object.version;
                    else if (typeof object.version === "object")
                        message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();
                if (object.extraBytes != null)
                    if (typeof object.extraBytes === "string")
                        $util.base64.decode(object.extraBytes, message.extraBytes = $util.newBuffer($util.base64.length(object.extraBytes)), 0);
                    else if (object.extraBytes.length)
                        message.extraBytes = object.extraBytes;
                return message;
            };

            /**
             * Creates a plain object from a HeaderProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.HeaderProto
             * @static
             * @param {casper.HeaderProto} message HeaderProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HeaderProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.parentsHashList = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestamp = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.version = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.extraBytes = "";
                    else {
                        object.extraBytes = [];
                        if (options.bytes !== Array)
                            object.extraBytes = $util.newBuffer(object.extraBytes);
                    }
                }
                if (message.parentsHashList && message.parentsHashList.length) {
                    object.parentsHashList = [];
                    for (var j = 0; j < message.parentsHashList.length; ++j)
                        object.parentsHashList[j] = options.bytes === String ? $util.base64.encode(message.parentsHashList[j], 0, message.parentsHashList[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.parentsHashList[j]) : message.parentsHashList[j];
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (typeof message.timestamp === "number")
                        object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                    else
                        object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                if (message.version != null && message.hasOwnProperty("version"))
                    if (typeof message.version === "number")
                        object.version = options.longs === String ? String(message.version) : message.version;
                    else
                        object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    object.extraBytes = options.bytes === String ? $util.base64.encode(message.extraBytes, 0, message.extraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.extraBytes) : message.extraBytes;
                return object;
            };

            /**
             * Converts this HeaderProto to JSON.
             * @function toJSON
             * @memberof casper.HeaderProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HeaderProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HeaderProto;
        })();

        casper.DeployDataProto = (function() {

            /**
             * Properties of a DeployDataProto.
             * @memberof casper
             * @interface IDeployDataProto
             * @property {Uint8Array|null} [deployer] DeployDataProto deployer
             * @property {string|null} [term] DeployDataProto term
             * @property {number|Long|null} [timestamp] DeployDataProto timestamp
             * @property {Uint8Array|null} [sig] DeployDataProto sig
             * @property {string|null} [sigAlgorithm] DeployDataProto sigAlgorithm
             * @property {number|Long|null} [phloPrice] DeployDataProto phloPrice
             * @property {number|Long|null} [phloLimit] DeployDataProto phloLimit
             * @property {number|Long|null} [validAfterBlockNumber] DeployDataProto validAfterBlockNumber
             */

            /**
             * Constructs a new DeployDataProto.
             * @memberof casper
             * @classdesc Note: deploys are uniquely keyed by `user`, `timestamp`.
             * 
             * **TODO**: details of signatures and payment. See RHOL-781
             * @implements IDeployDataProto
             * @constructor
             * @param {casper.IDeployDataProto=} [properties] Properties to set
             */
            function DeployDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DeployDataProto deployer.
             * @member {Uint8Array} deployer
             * @memberof casper.DeployDataProto
             * @instance
             */
            DeployDataProto.prototype.deployer = $util.newBuffer([]);

            /**
             * DeployDataProto term.
             * @member {string} term
             * @memberof casper.DeployDataProto
             * @instance
             */
            DeployDataProto.prototype.term = "";

            /**
             * DeployDataProto timestamp.
             * @member {number|Long} timestamp
             * @memberof casper.DeployDataProto
             * @instance
             */
            DeployDataProto.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DeployDataProto sig.
             * @member {Uint8Array} sig
             * @memberof casper.DeployDataProto
             * @instance
             */
            DeployDataProto.prototype.sig = $util.newBuffer([]);

            /**
             * DeployDataProto sigAlgorithm.
             * @member {string} sigAlgorithm
             * @memberof casper.DeployDataProto
             * @instance
             */
            DeployDataProto.prototype.sigAlgorithm = "";

            /**
             * DeployDataProto phloPrice.
             * @member {number|Long} phloPrice
             * @memberof casper.DeployDataProto
             * @instance
             */
            DeployDataProto.prototype.phloPrice = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DeployDataProto phloLimit.
             * @member {number|Long} phloLimit
             * @memberof casper.DeployDataProto
             * @instance
             */
            DeployDataProto.prototype.phloLimit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DeployDataProto validAfterBlockNumber.
             * @member {number|Long} validAfterBlockNumber
             * @memberof casper.DeployDataProto
             * @instance
             */
            DeployDataProto.prototype.validAfterBlockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new DeployDataProto instance using the specified properties.
             * @function create
             * @memberof casper.DeployDataProto
             * @static
             * @param {casper.IDeployDataProto=} [properties] Properties to set
             * @returns {casper.DeployDataProto} DeployDataProto instance
             */
            DeployDataProto.create = function create(properties) {
                return new DeployDataProto(properties);
            };

            /**
             * Encodes the specified DeployDataProto message. Does not implicitly {@link casper.DeployDataProto.verify|verify} messages.
             * @function encode
             * @memberof casper.DeployDataProto
             * @static
             * @param {casper.IDeployDataProto} message DeployDataProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeployDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deployer != null && message.hasOwnProperty("deployer"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.deployer);
                if (message.term != null && message.hasOwnProperty("term"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.term);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);
                if (message.sig != null && message.hasOwnProperty("sig"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.sig);
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.sigAlgorithm);
                if (message.phloPrice != null && message.hasOwnProperty("phloPrice"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.phloPrice);
                if (message.phloLimit != null && message.hasOwnProperty("phloLimit"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.phloLimit);
                if (message.validAfterBlockNumber != null && message.hasOwnProperty("validAfterBlockNumber"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int64(message.validAfterBlockNumber);
                return writer;
            };

            /**
             * Encodes the specified DeployDataProto message, length delimited. Does not implicitly {@link casper.DeployDataProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.DeployDataProto
             * @static
             * @param {casper.IDeployDataProto} message DeployDataProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeployDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DeployDataProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.DeployDataProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.DeployDataProto} DeployDataProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeployDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.DeployDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deployer = reader.bytes();
                        break;
                    case 2:
                        message.term = reader.string();
                        break;
                    case 3:
                        message.timestamp = reader.int64();
                        break;
                    case 4:
                        message.sig = reader.bytes();
                        break;
                    case 5:
                        message.sigAlgorithm = reader.string();
                        break;
                    case 7:
                        message.phloPrice = reader.int64();
                        break;
                    case 8:
                        message.phloLimit = reader.int64();
                        break;
                    case 10:
                        message.validAfterBlockNumber = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DeployDataProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.DeployDataProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.DeployDataProto} DeployDataProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeployDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DeployDataProto message.
             * @function verify
             * @memberof casper.DeployDataProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DeployDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deployer != null && message.hasOwnProperty("deployer"))
                    if (!(message.deployer && typeof message.deployer.length === "number" || $util.isString(message.deployer)))
                        return "deployer: buffer expected";
                if (message.term != null && message.hasOwnProperty("term"))
                    if (!$util.isString(message.term))
                        return "term: string expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                        return "timestamp: integer|Long expected";
                if (message.sig != null && message.hasOwnProperty("sig"))
                    if (!(message.sig && typeof message.sig.length === "number" || $util.isString(message.sig)))
                        return "sig: buffer expected";
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    if (!$util.isString(message.sigAlgorithm))
                        return "sigAlgorithm: string expected";
                if (message.phloPrice != null && message.hasOwnProperty("phloPrice"))
                    if (!$util.isInteger(message.phloPrice) && !(message.phloPrice && $util.isInteger(message.phloPrice.low) && $util.isInteger(message.phloPrice.high)))
                        return "phloPrice: integer|Long expected";
                if (message.phloLimit != null && message.hasOwnProperty("phloLimit"))
                    if (!$util.isInteger(message.phloLimit) && !(message.phloLimit && $util.isInteger(message.phloLimit.low) && $util.isInteger(message.phloLimit.high)))
                        return "phloLimit: integer|Long expected";
                if (message.validAfterBlockNumber != null && message.hasOwnProperty("validAfterBlockNumber"))
                    if (!$util.isInteger(message.validAfterBlockNumber) && !(message.validAfterBlockNumber && $util.isInteger(message.validAfterBlockNumber.low) && $util.isInteger(message.validAfterBlockNumber.high)))
                        return "validAfterBlockNumber: integer|Long expected";
                return null;
            };

            /**
             * Creates a DeployDataProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.DeployDataProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.DeployDataProto} DeployDataProto
             */
            DeployDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.DeployDataProto)
                    return object;
                var message = new $root.casper.DeployDataProto();
                if (object.deployer != null)
                    if (typeof object.deployer === "string")
                        $util.base64.decode(object.deployer, message.deployer = $util.newBuffer($util.base64.length(object.deployer)), 0);
                    else if (object.deployer.length)
                        message.deployer = object.deployer;
                if (object.term != null)
                    message.term = String(object.term);
                if (object.timestamp != null)
                    if ($util.Long)
                        (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                    else if (typeof object.timestamp === "string")
                        message.timestamp = parseInt(object.timestamp, 10);
                    else if (typeof object.timestamp === "number")
                        message.timestamp = object.timestamp;
                    else if (typeof object.timestamp === "object")
                        message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                if (object.sig != null)
                    if (typeof object.sig === "string")
                        $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);
                    else if (object.sig.length)
                        message.sig = object.sig;
                if (object.sigAlgorithm != null)
                    message.sigAlgorithm = String(object.sigAlgorithm);
                if (object.phloPrice != null)
                    if ($util.Long)
                        (message.phloPrice = $util.Long.fromValue(object.phloPrice)).unsigned = false;
                    else if (typeof object.phloPrice === "string")
                        message.phloPrice = parseInt(object.phloPrice, 10);
                    else if (typeof object.phloPrice === "number")
                        message.phloPrice = object.phloPrice;
                    else if (typeof object.phloPrice === "object")
                        message.phloPrice = new $util.LongBits(object.phloPrice.low >>> 0, object.phloPrice.high >>> 0).toNumber();
                if (object.phloLimit != null)
                    if ($util.Long)
                        (message.phloLimit = $util.Long.fromValue(object.phloLimit)).unsigned = false;
                    else if (typeof object.phloLimit === "string")
                        message.phloLimit = parseInt(object.phloLimit, 10);
                    else if (typeof object.phloLimit === "number")
                        message.phloLimit = object.phloLimit;
                    else if (typeof object.phloLimit === "object")
                        message.phloLimit = new $util.LongBits(object.phloLimit.low >>> 0, object.phloLimit.high >>> 0).toNumber();
                if (object.validAfterBlockNumber != null)
                    if ($util.Long)
                        (message.validAfterBlockNumber = $util.Long.fromValue(object.validAfterBlockNumber)).unsigned = false;
                    else if (typeof object.validAfterBlockNumber === "string")
                        message.validAfterBlockNumber = parseInt(object.validAfterBlockNumber, 10);
                    else if (typeof object.validAfterBlockNumber === "number")
                        message.validAfterBlockNumber = object.validAfterBlockNumber;
                    else if (typeof object.validAfterBlockNumber === "object")
                        message.validAfterBlockNumber = new $util.LongBits(object.validAfterBlockNumber.low >>> 0, object.validAfterBlockNumber.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a DeployDataProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.DeployDataProto
             * @static
             * @param {casper.DeployDataProto} message DeployDataProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DeployDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.deployer = "";
                    else {
                        object.deployer = [];
                        if (options.bytes !== Array)
                            object.deployer = $util.newBuffer(object.deployer);
                    }
                    object.term = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestamp = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.sig = "";
                    else {
                        object.sig = [];
                        if (options.bytes !== Array)
                            object.sig = $util.newBuffer(object.sig);
                    }
                    object.sigAlgorithm = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.phloPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.phloPrice = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.phloLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.phloLimit = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.validAfterBlockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.validAfterBlockNumber = options.longs === String ? "0" : 0;
                }
                if (message.deployer != null && message.hasOwnProperty("deployer"))
                    object.deployer = options.bytes === String ? $util.base64.encode(message.deployer, 0, message.deployer.length) : options.bytes === Array ? Array.prototype.slice.call(message.deployer) : message.deployer;
                if (message.term != null && message.hasOwnProperty("term"))
                    object.term = message.term;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (typeof message.timestamp === "number")
                        object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                    else
                        object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                if (message.sig != null && message.hasOwnProperty("sig"))
                    object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    object.sigAlgorithm = message.sigAlgorithm;
                if (message.phloPrice != null && message.hasOwnProperty("phloPrice"))
                    if (typeof message.phloPrice === "number")
                        object.phloPrice = options.longs === String ? String(message.phloPrice) : message.phloPrice;
                    else
                        object.phloPrice = options.longs === String ? $util.Long.prototype.toString.call(message.phloPrice) : options.longs === Number ? new $util.LongBits(message.phloPrice.low >>> 0, message.phloPrice.high >>> 0).toNumber() : message.phloPrice;
                if (message.phloLimit != null && message.hasOwnProperty("phloLimit"))
                    if (typeof message.phloLimit === "number")
                        object.phloLimit = options.longs === String ? String(message.phloLimit) : message.phloLimit;
                    else
                        object.phloLimit = options.longs === String ? $util.Long.prototype.toString.call(message.phloLimit) : options.longs === Number ? new $util.LongBits(message.phloLimit.low >>> 0, message.phloLimit.high >>> 0).toNumber() : message.phloLimit;
                if (message.validAfterBlockNumber != null && message.hasOwnProperty("validAfterBlockNumber"))
                    if (typeof message.validAfterBlockNumber === "number")
                        object.validAfterBlockNumber = options.longs === String ? String(message.validAfterBlockNumber) : message.validAfterBlockNumber;
                    else
                        object.validAfterBlockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.validAfterBlockNumber) : options.longs === Number ? new $util.LongBits(message.validAfterBlockNumber.low >>> 0, message.validAfterBlockNumber.high >>> 0).toNumber() : message.validAfterBlockNumber;
                return object;
            };

            /**
             * Converts this DeployDataProto to JSON.
             * @function toJSON
             * @memberof casper.DeployDataProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DeployDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DeployDataProto;
        })();

        casper.ProcessedDeployProto = (function() {

            /**
             * Properties of a ProcessedDeployProto.
             * @memberof casper
             * @interface IProcessedDeployProto
             * @property {casper.IDeployDataProto|null} [deploy] ProcessedDeployProto deploy
             * @property {IPCost|null} [cost] ProcessedDeployProto cost
             * @property {Array.<casper.IEventProto>|null} [deployLog] ProcessedDeployProto deployLog
             * @property {boolean|null} [errored] ProcessedDeployProto errored
             * @property {string|null} [systemDeployError] ProcessedDeployProto systemDeployError
             */

            /**
             * Constructs a new ProcessedDeployProto.
             * @memberof casper
             * @classdesc Represents a ProcessedDeployProto.
             * @implements IProcessedDeployProto
             * @constructor
             * @param {casper.IProcessedDeployProto=} [properties] Properties to set
             */
            function ProcessedDeployProto(properties) {
                this.deployLog = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProcessedDeployProto deploy.
             * @member {casper.IDeployDataProto|null|undefined} deploy
             * @memberof casper.ProcessedDeployProto
             * @instance
             */
            ProcessedDeployProto.prototype.deploy = null;

            /**
             * ProcessedDeployProto cost.
             * @member {IPCost|null|undefined} cost
             * @memberof casper.ProcessedDeployProto
             * @instance
             */
            ProcessedDeployProto.prototype.cost = null;

            /**
             * ProcessedDeployProto deployLog.
             * @member {Array.<casper.IEventProto>} deployLog
             * @memberof casper.ProcessedDeployProto
             * @instance
             */
            ProcessedDeployProto.prototype.deployLog = $util.emptyArray;

            /**
             * ProcessedDeployProto errored.
             * @member {boolean} errored
             * @memberof casper.ProcessedDeployProto
             * @instance
             */
            ProcessedDeployProto.prototype.errored = false;

            /**
             * ProcessedDeployProto systemDeployError.
             * @member {string} systemDeployError
             * @memberof casper.ProcessedDeployProto
             * @instance
             */
            ProcessedDeployProto.prototype.systemDeployError = "";

            /**
             * Creates a new ProcessedDeployProto instance using the specified properties.
             * @function create
             * @memberof casper.ProcessedDeployProto
             * @static
             * @param {casper.IProcessedDeployProto=} [properties] Properties to set
             * @returns {casper.ProcessedDeployProto} ProcessedDeployProto instance
             */
            ProcessedDeployProto.create = function create(properties) {
                return new ProcessedDeployProto(properties);
            };

            /**
             * Encodes the specified ProcessedDeployProto message. Does not implicitly {@link casper.ProcessedDeployProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ProcessedDeployProto
             * @static
             * @param {casper.IProcessedDeployProto} message ProcessedDeployProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProcessedDeployProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deploy != null && message.hasOwnProperty("deploy"))
                    $root.casper.DeployDataProto.encode(message.deploy, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.cost != null && message.hasOwnProperty("cost"))
                    $root.PCost.encode(message.cost, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.deployLog != null && message.deployLog.length)
                    for (var i = 0; i < message.deployLog.length; ++i)
                        $root.casper.EventProto.encode(message.deployLog[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.errored != null && message.hasOwnProperty("errored"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.errored);
                if (message.systemDeployError != null && message.hasOwnProperty("systemDeployError"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.systemDeployError);
                return writer;
            };

            /**
             * Encodes the specified ProcessedDeployProto message, length delimited. Does not implicitly {@link casper.ProcessedDeployProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ProcessedDeployProto
             * @static
             * @param {casper.IProcessedDeployProto} message ProcessedDeployProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProcessedDeployProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProcessedDeployProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ProcessedDeployProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ProcessedDeployProto} ProcessedDeployProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProcessedDeployProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ProcessedDeployProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deploy = $root.casper.DeployDataProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.cost = $root.PCost.decode(reader, reader.uint32());
                        break;
                    case 3:
                        if (!(message.deployLog && message.deployLog.length))
                            message.deployLog = [];
                        message.deployLog.push($root.casper.EventProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.errored = reader.bool();
                        break;
                    case 6:
                        message.systemDeployError = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProcessedDeployProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ProcessedDeployProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ProcessedDeployProto} ProcessedDeployProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProcessedDeployProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProcessedDeployProto message.
             * @function verify
             * @memberof casper.ProcessedDeployProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProcessedDeployProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deploy != null && message.hasOwnProperty("deploy")) {
                    var error = $root.casper.DeployDataProto.verify(message.deploy);
                    if (error)
                        return "deploy." + error;
                }
                if (message.cost != null && message.hasOwnProperty("cost")) {
                    var error = $root.PCost.verify(message.cost);
                    if (error)
                        return "cost." + error;
                }
                if (message.deployLog != null && message.hasOwnProperty("deployLog")) {
                    if (!Array.isArray(message.deployLog))
                        return "deployLog: array expected";
                    for (var i = 0; i < message.deployLog.length; ++i) {
                        var error = $root.casper.EventProto.verify(message.deployLog[i]);
                        if (error)
                            return "deployLog." + error;
                    }
                }
                if (message.errored != null && message.hasOwnProperty("errored"))
                    if (typeof message.errored !== "boolean")
                        return "errored: boolean expected";
                if (message.systemDeployError != null && message.hasOwnProperty("systemDeployError"))
                    if (!$util.isString(message.systemDeployError))
                        return "systemDeployError: string expected";
                return null;
            };

            /**
             * Creates a ProcessedDeployProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ProcessedDeployProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ProcessedDeployProto} ProcessedDeployProto
             */
            ProcessedDeployProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ProcessedDeployProto)
                    return object;
                var message = new $root.casper.ProcessedDeployProto();
                if (object.deploy != null) {
                    if (typeof object.deploy !== "object")
                        throw TypeError(".casper.ProcessedDeployProto.deploy: object expected");
                    message.deploy = $root.casper.DeployDataProto.fromObject(object.deploy);
                }
                if (object.cost != null) {
                    if (typeof object.cost !== "object")
                        throw TypeError(".casper.ProcessedDeployProto.cost: object expected");
                    message.cost = $root.PCost.fromObject(object.cost);
                }
                if (object.deployLog) {
                    if (!Array.isArray(object.deployLog))
                        throw TypeError(".casper.ProcessedDeployProto.deployLog: array expected");
                    message.deployLog = [];
                    for (var i = 0; i < object.deployLog.length; ++i) {
                        if (typeof object.deployLog[i] !== "object")
                            throw TypeError(".casper.ProcessedDeployProto.deployLog: object expected");
                        message.deployLog[i] = $root.casper.EventProto.fromObject(object.deployLog[i]);
                    }
                }
                if (object.errored != null)
                    message.errored = Boolean(object.errored);
                if (object.systemDeployError != null)
                    message.systemDeployError = String(object.systemDeployError);
                return message;
            };

            /**
             * Creates a plain object from a ProcessedDeployProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ProcessedDeployProto
             * @static
             * @param {casper.ProcessedDeployProto} message ProcessedDeployProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProcessedDeployProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.deployLog = [];
                if (options.defaults) {
                    object.deploy = null;
                    object.cost = null;
                    object.errored = false;
                    object.systemDeployError = "";
                }
                if (message.deploy != null && message.hasOwnProperty("deploy"))
                    object.deploy = $root.casper.DeployDataProto.toObject(message.deploy, options);
                if (message.cost != null && message.hasOwnProperty("cost"))
                    object.cost = $root.PCost.toObject(message.cost, options);
                if (message.deployLog && message.deployLog.length) {
                    object.deployLog = [];
                    for (var j = 0; j < message.deployLog.length; ++j)
                        object.deployLog[j] = $root.casper.EventProto.toObject(message.deployLog[j], options);
                }
                if (message.errored != null && message.hasOwnProperty("errored"))
                    object.errored = message.errored;
                if (message.systemDeployError != null && message.hasOwnProperty("systemDeployError"))
                    object.systemDeployError = message.systemDeployError;
                return object;
            };

            /**
             * Converts this ProcessedDeployProto to JSON.
             * @function toJSON
             * @memberof casper.ProcessedDeployProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProcessedDeployProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProcessedDeployProto;
        })();

        casper.SlashSystemDeployDataProto = (function() {

            /**
             * Properties of a SlashSystemDeployDataProto.
             * @memberof casper
             * @interface ISlashSystemDeployDataProto
             * @property {Uint8Array|null} [invalidBlockHash] SlashSystemDeployDataProto invalidBlockHash
             * @property {Uint8Array|null} [issuerPublicKey] SlashSystemDeployDataProto issuerPublicKey
             */

            /**
             * Constructs a new SlashSystemDeployDataProto.
             * @memberof casper
             * @classdesc Represents a SlashSystemDeployDataProto.
             * @implements ISlashSystemDeployDataProto
             * @constructor
             * @param {casper.ISlashSystemDeployDataProto=} [properties] Properties to set
             */
            function SlashSystemDeployDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SlashSystemDeployDataProto invalidBlockHash.
             * @member {Uint8Array} invalidBlockHash
             * @memberof casper.SlashSystemDeployDataProto
             * @instance
             */
            SlashSystemDeployDataProto.prototype.invalidBlockHash = $util.newBuffer([]);

            /**
             * SlashSystemDeployDataProto issuerPublicKey.
             * @member {Uint8Array} issuerPublicKey
             * @memberof casper.SlashSystemDeployDataProto
             * @instance
             */
            SlashSystemDeployDataProto.prototype.issuerPublicKey = $util.newBuffer([]);

            /**
             * Creates a new SlashSystemDeployDataProto instance using the specified properties.
             * @function create
             * @memberof casper.SlashSystemDeployDataProto
             * @static
             * @param {casper.ISlashSystemDeployDataProto=} [properties] Properties to set
             * @returns {casper.SlashSystemDeployDataProto} SlashSystemDeployDataProto instance
             */
            SlashSystemDeployDataProto.create = function create(properties) {
                return new SlashSystemDeployDataProto(properties);
            };

            /**
             * Encodes the specified SlashSystemDeployDataProto message. Does not implicitly {@link casper.SlashSystemDeployDataProto.verify|verify} messages.
             * @function encode
             * @memberof casper.SlashSystemDeployDataProto
             * @static
             * @param {casper.ISlashSystemDeployDataProto} message SlashSystemDeployDataProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SlashSystemDeployDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.invalidBlockHash != null && message.hasOwnProperty("invalidBlockHash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.invalidBlockHash);
                if (message.issuerPublicKey != null && message.hasOwnProperty("issuerPublicKey"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.issuerPublicKey);
                return writer;
            };

            /**
             * Encodes the specified SlashSystemDeployDataProto message, length delimited. Does not implicitly {@link casper.SlashSystemDeployDataProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.SlashSystemDeployDataProto
             * @static
             * @param {casper.ISlashSystemDeployDataProto} message SlashSystemDeployDataProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SlashSystemDeployDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SlashSystemDeployDataProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.SlashSystemDeployDataProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.SlashSystemDeployDataProto} SlashSystemDeployDataProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SlashSystemDeployDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.SlashSystemDeployDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.invalidBlockHash = reader.bytes();
                        break;
                    case 2:
                        message.issuerPublicKey = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SlashSystemDeployDataProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.SlashSystemDeployDataProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.SlashSystemDeployDataProto} SlashSystemDeployDataProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SlashSystemDeployDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SlashSystemDeployDataProto message.
             * @function verify
             * @memberof casper.SlashSystemDeployDataProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SlashSystemDeployDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.invalidBlockHash != null && message.hasOwnProperty("invalidBlockHash"))
                    if (!(message.invalidBlockHash && typeof message.invalidBlockHash.length === "number" || $util.isString(message.invalidBlockHash)))
                        return "invalidBlockHash: buffer expected";
                if (message.issuerPublicKey != null && message.hasOwnProperty("issuerPublicKey"))
                    if (!(message.issuerPublicKey && typeof message.issuerPublicKey.length === "number" || $util.isString(message.issuerPublicKey)))
                        return "issuerPublicKey: buffer expected";
                return null;
            };

            /**
             * Creates a SlashSystemDeployDataProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.SlashSystemDeployDataProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.SlashSystemDeployDataProto} SlashSystemDeployDataProto
             */
            SlashSystemDeployDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.SlashSystemDeployDataProto)
                    return object;
                var message = new $root.casper.SlashSystemDeployDataProto();
                if (object.invalidBlockHash != null)
                    if (typeof object.invalidBlockHash === "string")
                        $util.base64.decode(object.invalidBlockHash, message.invalidBlockHash = $util.newBuffer($util.base64.length(object.invalidBlockHash)), 0);
                    else if (object.invalidBlockHash.length)
                        message.invalidBlockHash = object.invalidBlockHash;
                if (object.issuerPublicKey != null)
                    if (typeof object.issuerPublicKey === "string")
                        $util.base64.decode(object.issuerPublicKey, message.issuerPublicKey = $util.newBuffer($util.base64.length(object.issuerPublicKey)), 0);
                    else if (object.issuerPublicKey.length)
                        message.issuerPublicKey = object.issuerPublicKey;
                return message;
            };

            /**
             * Creates a plain object from a SlashSystemDeployDataProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.SlashSystemDeployDataProto
             * @static
             * @param {casper.SlashSystemDeployDataProto} message SlashSystemDeployDataProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SlashSystemDeployDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.invalidBlockHash = "";
                    else {
                        object.invalidBlockHash = [];
                        if (options.bytes !== Array)
                            object.invalidBlockHash = $util.newBuffer(object.invalidBlockHash);
                    }
                    if (options.bytes === String)
                        object.issuerPublicKey = "";
                    else {
                        object.issuerPublicKey = [];
                        if (options.bytes !== Array)
                            object.issuerPublicKey = $util.newBuffer(object.issuerPublicKey);
                    }
                }
                if (message.invalidBlockHash != null && message.hasOwnProperty("invalidBlockHash"))
                    object.invalidBlockHash = options.bytes === String ? $util.base64.encode(message.invalidBlockHash, 0, message.invalidBlockHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.invalidBlockHash) : message.invalidBlockHash;
                if (message.issuerPublicKey != null && message.hasOwnProperty("issuerPublicKey"))
                    object.issuerPublicKey = options.bytes === String ? $util.base64.encode(message.issuerPublicKey, 0, message.issuerPublicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.issuerPublicKey) : message.issuerPublicKey;
                return object;
            };

            /**
             * Converts this SlashSystemDeployDataProto to JSON.
             * @function toJSON
             * @memberof casper.SlashSystemDeployDataProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SlashSystemDeployDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SlashSystemDeployDataProto;
        })();

        casper.CloseBlockSystemDeployDataProto = (function() {

            /**
             * Properties of a CloseBlockSystemDeployDataProto.
             * @memberof casper
             * @interface ICloseBlockSystemDeployDataProto
             */

            /**
             * Constructs a new CloseBlockSystemDeployDataProto.
             * @memberof casper
             * @classdesc Represents a CloseBlockSystemDeployDataProto.
             * @implements ICloseBlockSystemDeployDataProto
             * @constructor
             * @param {casper.ICloseBlockSystemDeployDataProto=} [properties] Properties to set
             */
            function CloseBlockSystemDeployDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new CloseBlockSystemDeployDataProto instance using the specified properties.
             * @function create
             * @memberof casper.CloseBlockSystemDeployDataProto
             * @static
             * @param {casper.ICloseBlockSystemDeployDataProto=} [properties] Properties to set
             * @returns {casper.CloseBlockSystemDeployDataProto} CloseBlockSystemDeployDataProto instance
             */
            CloseBlockSystemDeployDataProto.create = function create(properties) {
                return new CloseBlockSystemDeployDataProto(properties);
            };

            /**
             * Encodes the specified CloseBlockSystemDeployDataProto message. Does not implicitly {@link casper.CloseBlockSystemDeployDataProto.verify|verify} messages.
             * @function encode
             * @memberof casper.CloseBlockSystemDeployDataProto
             * @static
             * @param {casper.ICloseBlockSystemDeployDataProto} message CloseBlockSystemDeployDataProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CloseBlockSystemDeployDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified CloseBlockSystemDeployDataProto message, length delimited. Does not implicitly {@link casper.CloseBlockSystemDeployDataProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.CloseBlockSystemDeployDataProto
             * @static
             * @param {casper.ICloseBlockSystemDeployDataProto} message CloseBlockSystemDeployDataProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CloseBlockSystemDeployDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CloseBlockSystemDeployDataProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.CloseBlockSystemDeployDataProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.CloseBlockSystemDeployDataProto} CloseBlockSystemDeployDataProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CloseBlockSystemDeployDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.CloseBlockSystemDeployDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CloseBlockSystemDeployDataProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.CloseBlockSystemDeployDataProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.CloseBlockSystemDeployDataProto} CloseBlockSystemDeployDataProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CloseBlockSystemDeployDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CloseBlockSystemDeployDataProto message.
             * @function verify
             * @memberof casper.CloseBlockSystemDeployDataProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CloseBlockSystemDeployDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a CloseBlockSystemDeployDataProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.CloseBlockSystemDeployDataProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.CloseBlockSystemDeployDataProto} CloseBlockSystemDeployDataProto
             */
            CloseBlockSystemDeployDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.CloseBlockSystemDeployDataProto)
                    return object;
                return new $root.casper.CloseBlockSystemDeployDataProto();
            };

            /**
             * Creates a plain object from a CloseBlockSystemDeployDataProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.CloseBlockSystemDeployDataProto
             * @static
             * @param {casper.CloseBlockSystemDeployDataProto} message CloseBlockSystemDeployDataProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CloseBlockSystemDeployDataProto.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this CloseBlockSystemDeployDataProto to JSON.
             * @function toJSON
             * @memberof casper.CloseBlockSystemDeployDataProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CloseBlockSystemDeployDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CloseBlockSystemDeployDataProto;
        })();

        casper.SystemDeployDataProto = (function() {

            /**
             * Properties of a SystemDeployDataProto.
             * @memberof casper
             * @interface ISystemDeployDataProto
             * @property {casper.ISlashSystemDeployDataProto|null} [slashSystemDeploy] SystemDeployDataProto slashSystemDeploy
             * @property {casper.ICloseBlockSystemDeployDataProto|null} [closeBlockSystemDeploy] SystemDeployDataProto closeBlockSystemDeploy
             */

            /**
             * Constructs a new SystemDeployDataProto.
             * @memberof casper
             * @classdesc Represents a SystemDeployDataProto.
             * @implements ISystemDeployDataProto
             * @constructor
             * @param {casper.ISystemDeployDataProto=} [properties] Properties to set
             */
            function SystemDeployDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SystemDeployDataProto slashSystemDeploy.
             * @member {casper.ISlashSystemDeployDataProto|null|undefined} slashSystemDeploy
             * @memberof casper.SystemDeployDataProto
             * @instance
             */
            SystemDeployDataProto.prototype.slashSystemDeploy = null;

            /**
             * SystemDeployDataProto closeBlockSystemDeploy.
             * @member {casper.ICloseBlockSystemDeployDataProto|null|undefined} closeBlockSystemDeploy
             * @memberof casper.SystemDeployDataProto
             * @instance
             */
            SystemDeployDataProto.prototype.closeBlockSystemDeploy = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * SystemDeployDataProto systemDeploy.
             * @member {"slashSystemDeploy"|"closeBlockSystemDeploy"|undefined} systemDeploy
             * @memberof casper.SystemDeployDataProto
             * @instance
             */
            Object.defineProperty(SystemDeployDataProto.prototype, "systemDeploy", {
                get: $util.oneOfGetter($oneOfFields = ["slashSystemDeploy", "closeBlockSystemDeploy"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new SystemDeployDataProto instance using the specified properties.
             * @function create
             * @memberof casper.SystemDeployDataProto
             * @static
             * @param {casper.ISystemDeployDataProto=} [properties] Properties to set
             * @returns {casper.SystemDeployDataProto} SystemDeployDataProto instance
             */
            SystemDeployDataProto.create = function create(properties) {
                return new SystemDeployDataProto(properties);
            };

            /**
             * Encodes the specified SystemDeployDataProto message. Does not implicitly {@link casper.SystemDeployDataProto.verify|verify} messages.
             * @function encode
             * @memberof casper.SystemDeployDataProto
             * @static
             * @param {casper.ISystemDeployDataProto} message SystemDeployDataProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SystemDeployDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.slashSystemDeploy != null && message.hasOwnProperty("slashSystemDeploy"))
                    $root.casper.SlashSystemDeployDataProto.encode(message.slashSystemDeploy, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.closeBlockSystemDeploy != null && message.hasOwnProperty("closeBlockSystemDeploy"))
                    $root.casper.CloseBlockSystemDeployDataProto.encode(message.closeBlockSystemDeploy, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SystemDeployDataProto message, length delimited. Does not implicitly {@link casper.SystemDeployDataProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.SystemDeployDataProto
             * @static
             * @param {casper.ISystemDeployDataProto} message SystemDeployDataProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SystemDeployDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SystemDeployDataProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.SystemDeployDataProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.SystemDeployDataProto} SystemDeployDataProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SystemDeployDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.SystemDeployDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.slashSystemDeploy = $root.casper.SlashSystemDeployDataProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.closeBlockSystemDeploy = $root.casper.CloseBlockSystemDeployDataProto.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SystemDeployDataProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.SystemDeployDataProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.SystemDeployDataProto} SystemDeployDataProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SystemDeployDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SystemDeployDataProto message.
             * @function verify
             * @memberof casper.SystemDeployDataProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SystemDeployDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.slashSystemDeploy != null && message.hasOwnProperty("slashSystemDeploy")) {
                    properties.systemDeploy = 1;
                    {
                        var error = $root.casper.SlashSystemDeployDataProto.verify(message.slashSystemDeploy);
                        if (error)
                            return "slashSystemDeploy." + error;
                    }
                }
                if (message.closeBlockSystemDeploy != null && message.hasOwnProperty("closeBlockSystemDeploy")) {
                    if (properties.systemDeploy === 1)
                        return "systemDeploy: multiple values";
                    properties.systemDeploy = 1;
                    {
                        var error = $root.casper.CloseBlockSystemDeployDataProto.verify(message.closeBlockSystemDeploy);
                        if (error)
                            return "closeBlockSystemDeploy." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SystemDeployDataProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.SystemDeployDataProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.SystemDeployDataProto} SystemDeployDataProto
             */
            SystemDeployDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.SystemDeployDataProto)
                    return object;
                var message = new $root.casper.SystemDeployDataProto();
                if (object.slashSystemDeploy != null) {
                    if (typeof object.slashSystemDeploy !== "object")
                        throw TypeError(".casper.SystemDeployDataProto.slashSystemDeploy: object expected");
                    message.slashSystemDeploy = $root.casper.SlashSystemDeployDataProto.fromObject(object.slashSystemDeploy);
                }
                if (object.closeBlockSystemDeploy != null) {
                    if (typeof object.closeBlockSystemDeploy !== "object")
                        throw TypeError(".casper.SystemDeployDataProto.closeBlockSystemDeploy: object expected");
                    message.closeBlockSystemDeploy = $root.casper.CloseBlockSystemDeployDataProto.fromObject(object.closeBlockSystemDeploy);
                }
                return message;
            };

            /**
             * Creates a plain object from a SystemDeployDataProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.SystemDeployDataProto
             * @static
             * @param {casper.SystemDeployDataProto} message SystemDeployDataProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SystemDeployDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.slashSystemDeploy != null && message.hasOwnProperty("slashSystemDeploy")) {
                    object.slashSystemDeploy = $root.casper.SlashSystemDeployDataProto.toObject(message.slashSystemDeploy, options);
                    if (options.oneofs)
                        object.systemDeploy = "slashSystemDeploy";
                }
                if (message.closeBlockSystemDeploy != null && message.hasOwnProperty("closeBlockSystemDeploy")) {
                    object.closeBlockSystemDeploy = $root.casper.CloseBlockSystemDeployDataProto.toObject(message.closeBlockSystemDeploy, options);
                    if (options.oneofs)
                        object.systemDeploy = "closeBlockSystemDeploy";
                }
                return object;
            };

            /**
             * Converts this SystemDeployDataProto to JSON.
             * @function toJSON
             * @memberof casper.SystemDeployDataProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SystemDeployDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SystemDeployDataProto;
        })();

        casper.ProcessedSystemDeployProto = (function() {

            /**
             * Properties of a ProcessedSystemDeployProto.
             * @memberof casper
             * @interface IProcessedSystemDeployProto
             * @property {casper.ISystemDeployDataProto|null} [systemDeploy] ProcessedSystemDeployProto systemDeploy
             * @property {Array.<casper.IEventProto>|null} [deployLog] ProcessedSystemDeployProto deployLog
             * @property {string|null} [errorMsg] ProcessedSystemDeployProto errorMsg
             */

            /**
             * Constructs a new ProcessedSystemDeployProto.
             * @memberof casper
             * @classdesc Represents a ProcessedSystemDeployProto.
             * @implements IProcessedSystemDeployProto
             * @constructor
             * @param {casper.IProcessedSystemDeployProto=} [properties] Properties to set
             */
            function ProcessedSystemDeployProto(properties) {
                this.deployLog = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProcessedSystemDeployProto systemDeploy.
             * @member {casper.ISystemDeployDataProto|null|undefined} systemDeploy
             * @memberof casper.ProcessedSystemDeployProto
             * @instance
             */
            ProcessedSystemDeployProto.prototype.systemDeploy = null;

            /**
             * ProcessedSystemDeployProto deployLog.
             * @member {Array.<casper.IEventProto>} deployLog
             * @memberof casper.ProcessedSystemDeployProto
             * @instance
             */
            ProcessedSystemDeployProto.prototype.deployLog = $util.emptyArray;

            /**
             * ProcessedSystemDeployProto errorMsg.
             * @member {string} errorMsg
             * @memberof casper.ProcessedSystemDeployProto
             * @instance
             */
            ProcessedSystemDeployProto.prototype.errorMsg = "";

            /**
             * Creates a new ProcessedSystemDeployProto instance using the specified properties.
             * @function create
             * @memberof casper.ProcessedSystemDeployProto
             * @static
             * @param {casper.IProcessedSystemDeployProto=} [properties] Properties to set
             * @returns {casper.ProcessedSystemDeployProto} ProcessedSystemDeployProto instance
             */
            ProcessedSystemDeployProto.create = function create(properties) {
                return new ProcessedSystemDeployProto(properties);
            };

            /**
             * Encodes the specified ProcessedSystemDeployProto message. Does not implicitly {@link casper.ProcessedSystemDeployProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ProcessedSystemDeployProto
             * @static
             * @param {casper.IProcessedSystemDeployProto} message ProcessedSystemDeployProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProcessedSystemDeployProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.systemDeploy != null && message.hasOwnProperty("systemDeploy"))
                    $root.casper.SystemDeployDataProto.encode(message.systemDeploy, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.deployLog != null && message.deployLog.length)
                    for (var i = 0; i < message.deployLog.length; ++i)
                        $root.casper.EventProto.encode(message.deployLog[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.errorMsg);
                return writer;
            };

            /**
             * Encodes the specified ProcessedSystemDeployProto message, length delimited. Does not implicitly {@link casper.ProcessedSystemDeployProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ProcessedSystemDeployProto
             * @static
             * @param {casper.IProcessedSystemDeployProto} message ProcessedSystemDeployProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProcessedSystemDeployProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProcessedSystemDeployProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ProcessedSystemDeployProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ProcessedSystemDeployProto} ProcessedSystemDeployProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProcessedSystemDeployProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ProcessedSystemDeployProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.systemDeploy = $root.casper.SystemDeployDataProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.deployLog && message.deployLog.length))
                            message.deployLog = [];
                        message.deployLog.push($root.casper.EventProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.errorMsg = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProcessedSystemDeployProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ProcessedSystemDeployProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ProcessedSystemDeployProto} ProcessedSystemDeployProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProcessedSystemDeployProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProcessedSystemDeployProto message.
             * @function verify
             * @memberof casper.ProcessedSystemDeployProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProcessedSystemDeployProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.systemDeploy != null && message.hasOwnProperty("systemDeploy")) {
                    var error = $root.casper.SystemDeployDataProto.verify(message.systemDeploy);
                    if (error)
                        return "systemDeploy." + error;
                }
                if (message.deployLog != null && message.hasOwnProperty("deployLog")) {
                    if (!Array.isArray(message.deployLog))
                        return "deployLog: array expected";
                    for (var i = 0; i < message.deployLog.length; ++i) {
                        var error = $root.casper.EventProto.verify(message.deployLog[i]);
                        if (error)
                            return "deployLog." + error;
                    }
                }
                if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                    if (!$util.isString(message.errorMsg))
                        return "errorMsg: string expected";
                return null;
            };

            /**
             * Creates a ProcessedSystemDeployProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ProcessedSystemDeployProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ProcessedSystemDeployProto} ProcessedSystemDeployProto
             */
            ProcessedSystemDeployProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ProcessedSystemDeployProto)
                    return object;
                var message = new $root.casper.ProcessedSystemDeployProto();
                if (object.systemDeploy != null) {
                    if (typeof object.systemDeploy !== "object")
                        throw TypeError(".casper.ProcessedSystemDeployProto.systemDeploy: object expected");
                    message.systemDeploy = $root.casper.SystemDeployDataProto.fromObject(object.systemDeploy);
                }
                if (object.deployLog) {
                    if (!Array.isArray(object.deployLog))
                        throw TypeError(".casper.ProcessedSystemDeployProto.deployLog: array expected");
                    message.deployLog = [];
                    for (var i = 0; i < object.deployLog.length; ++i) {
                        if (typeof object.deployLog[i] !== "object")
                            throw TypeError(".casper.ProcessedSystemDeployProto.deployLog: object expected");
                        message.deployLog[i] = $root.casper.EventProto.fromObject(object.deployLog[i]);
                    }
                }
                if (object.errorMsg != null)
                    message.errorMsg = String(object.errorMsg);
                return message;
            };

            /**
             * Creates a plain object from a ProcessedSystemDeployProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ProcessedSystemDeployProto
             * @static
             * @param {casper.ProcessedSystemDeployProto} message ProcessedSystemDeployProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProcessedSystemDeployProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.deployLog = [];
                if (options.defaults) {
                    object.systemDeploy = null;
                    object.errorMsg = "";
                }
                if (message.systemDeploy != null && message.hasOwnProperty("systemDeploy"))
                    object.systemDeploy = $root.casper.SystemDeployDataProto.toObject(message.systemDeploy, options);
                if (message.deployLog && message.deployLog.length) {
                    object.deployLog = [];
                    for (var j = 0; j < message.deployLog.length; ++j)
                        object.deployLog[j] = $root.casper.EventProto.toObject(message.deployLog[j], options);
                }
                if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                    object.errorMsg = message.errorMsg;
                return object;
            };

            /**
             * Converts this ProcessedSystemDeployProto to JSON.
             * @function toJSON
             * @memberof casper.ProcessedSystemDeployProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProcessedSystemDeployProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProcessedSystemDeployProto;
        })();

        casper.BodyProto = (function() {

            /**
             * Properties of a BodyProto.
             * @memberof casper
             * @interface IBodyProto
             * @property {casper.IRChainStateProto|null} [state] BodyProto state
             * @property {Array.<casper.IProcessedDeployProto>|null} [deploys] BodyProto deploys
             * @property {Array.<casper.IProcessedSystemDeployProto>|null} [systemDeploys] BodyProto systemDeploys
             * @property {Uint8Array|null} [extraBytes] BodyProto extraBytes
             */

            /**
             * Constructs a new BodyProto.
             * @memberof casper
             * @classdesc Represents a BodyProto.
             * @implements IBodyProto
             * @constructor
             * @param {casper.IBodyProto=} [properties] Properties to set
             */
            function BodyProto(properties) {
                this.deploys = [];
                this.systemDeploys = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BodyProto state.
             * @member {casper.IRChainStateProto|null|undefined} state
             * @memberof casper.BodyProto
             * @instance
             */
            BodyProto.prototype.state = null;

            /**
             * BodyProto deploys.
             * @member {Array.<casper.IProcessedDeployProto>} deploys
             * @memberof casper.BodyProto
             * @instance
             */
            BodyProto.prototype.deploys = $util.emptyArray;

            /**
             * BodyProto systemDeploys.
             * @member {Array.<casper.IProcessedSystemDeployProto>} systemDeploys
             * @memberof casper.BodyProto
             * @instance
             */
            BodyProto.prototype.systemDeploys = $util.emptyArray;

            /**
             * BodyProto extraBytes.
             * @member {Uint8Array} extraBytes
             * @memberof casper.BodyProto
             * @instance
             */
            BodyProto.prototype.extraBytes = $util.newBuffer([]);

            /**
             * Creates a new BodyProto instance using the specified properties.
             * @function create
             * @memberof casper.BodyProto
             * @static
             * @param {casper.IBodyProto=} [properties] Properties to set
             * @returns {casper.BodyProto} BodyProto instance
             */
            BodyProto.create = function create(properties) {
                return new BodyProto(properties);
            };

            /**
             * Encodes the specified BodyProto message. Does not implicitly {@link casper.BodyProto.verify|verify} messages.
             * @function encode
             * @memberof casper.BodyProto
             * @static
             * @param {casper.IBodyProto} message BodyProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BodyProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.state != null && message.hasOwnProperty("state"))
                    $root.casper.RChainStateProto.encode(message.state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.deploys != null && message.deploys.length)
                    for (var i = 0; i < message.deploys.length; ++i)
                        $root.casper.ProcessedDeployProto.encode(message.deploys[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.systemDeploys != null && message.systemDeploys.length)
                    for (var i = 0; i < message.systemDeploys.length; ++i)
                        $root.casper.ProcessedSystemDeployProto.encode(message.systemDeploys[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.extraBytes);
                return writer;
            };

            /**
             * Encodes the specified BodyProto message, length delimited. Does not implicitly {@link casper.BodyProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BodyProto
             * @static
             * @param {casper.IBodyProto} message BodyProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BodyProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BodyProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BodyProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BodyProto} BodyProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BodyProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BodyProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.state = $root.casper.RChainStateProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.deploys && message.deploys.length))
                            message.deploys = [];
                        message.deploys.push($root.casper.ProcessedDeployProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.systemDeploys && message.systemDeploys.length))
                            message.systemDeploys = [];
                        message.systemDeploys.push($root.casper.ProcessedSystemDeployProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.extraBytes = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BodyProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BodyProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BodyProto} BodyProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BodyProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BodyProto message.
             * @function verify
             * @memberof casper.BodyProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BodyProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.state != null && message.hasOwnProperty("state")) {
                    var error = $root.casper.RChainStateProto.verify(message.state);
                    if (error)
                        return "state." + error;
                }
                if (message.deploys != null && message.hasOwnProperty("deploys")) {
                    if (!Array.isArray(message.deploys))
                        return "deploys: array expected";
                    for (var i = 0; i < message.deploys.length; ++i) {
                        var error = $root.casper.ProcessedDeployProto.verify(message.deploys[i]);
                        if (error)
                            return "deploys." + error;
                    }
                }
                if (message.systemDeploys != null && message.hasOwnProperty("systemDeploys")) {
                    if (!Array.isArray(message.systemDeploys))
                        return "systemDeploys: array expected";
                    for (var i = 0; i < message.systemDeploys.length; ++i) {
                        var error = $root.casper.ProcessedSystemDeployProto.verify(message.systemDeploys[i]);
                        if (error)
                            return "systemDeploys." + error;
                    }
                }
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    if (!(message.extraBytes && typeof message.extraBytes.length === "number" || $util.isString(message.extraBytes)))
                        return "extraBytes: buffer expected";
                return null;
            };

            /**
             * Creates a BodyProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BodyProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BodyProto} BodyProto
             */
            BodyProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BodyProto)
                    return object;
                var message = new $root.casper.BodyProto();
                if (object.state != null) {
                    if (typeof object.state !== "object")
                        throw TypeError(".casper.BodyProto.state: object expected");
                    message.state = $root.casper.RChainStateProto.fromObject(object.state);
                }
                if (object.deploys) {
                    if (!Array.isArray(object.deploys))
                        throw TypeError(".casper.BodyProto.deploys: array expected");
                    message.deploys = [];
                    for (var i = 0; i < object.deploys.length; ++i) {
                        if (typeof object.deploys[i] !== "object")
                            throw TypeError(".casper.BodyProto.deploys: object expected");
                        message.deploys[i] = $root.casper.ProcessedDeployProto.fromObject(object.deploys[i]);
                    }
                }
                if (object.systemDeploys) {
                    if (!Array.isArray(object.systemDeploys))
                        throw TypeError(".casper.BodyProto.systemDeploys: array expected");
                    message.systemDeploys = [];
                    for (var i = 0; i < object.systemDeploys.length; ++i) {
                        if (typeof object.systemDeploys[i] !== "object")
                            throw TypeError(".casper.BodyProto.systemDeploys: object expected");
                        message.systemDeploys[i] = $root.casper.ProcessedSystemDeployProto.fromObject(object.systemDeploys[i]);
                    }
                }
                if (object.extraBytes != null)
                    if (typeof object.extraBytes === "string")
                        $util.base64.decode(object.extraBytes, message.extraBytes = $util.newBuffer($util.base64.length(object.extraBytes)), 0);
                    else if (object.extraBytes.length)
                        message.extraBytes = object.extraBytes;
                return message;
            };

            /**
             * Creates a plain object from a BodyProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BodyProto
             * @static
             * @param {casper.BodyProto} message BodyProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BodyProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.deploys = [];
                    object.systemDeploys = [];
                }
                if (options.defaults) {
                    object.state = null;
                    if (options.bytes === String)
                        object.extraBytes = "";
                    else {
                        object.extraBytes = [];
                        if (options.bytes !== Array)
                            object.extraBytes = $util.newBuffer(object.extraBytes);
                    }
                }
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = $root.casper.RChainStateProto.toObject(message.state, options);
                if (message.deploys && message.deploys.length) {
                    object.deploys = [];
                    for (var j = 0; j < message.deploys.length; ++j)
                        object.deploys[j] = $root.casper.ProcessedDeployProto.toObject(message.deploys[j], options);
                }
                if (message.systemDeploys && message.systemDeploys.length) {
                    object.systemDeploys = [];
                    for (var j = 0; j < message.systemDeploys.length; ++j)
                        object.systemDeploys[j] = $root.casper.ProcessedSystemDeployProto.toObject(message.systemDeploys[j], options);
                }
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    object.extraBytes = options.bytes === String ? $util.base64.encode(message.extraBytes, 0, message.extraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.extraBytes) : message.extraBytes;
                return object;
            };

            /**
             * Converts this BodyProto to JSON.
             * @function toJSON
             * @memberof casper.BodyProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BodyProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BodyProto;
        })();

        casper.JustificationProto = (function() {

            /**
             * Properties of a JustificationProto.
             * @memberof casper
             * @interface IJustificationProto
             * @property {Uint8Array|null} [validator] JustificationProto validator
             * @property {Uint8Array|null} [latestBlockHash] JustificationProto latestBlockHash
             */

            /**
             * Constructs a new JustificationProto.
             * @memberof casper
             * @classdesc Represents a JustificationProto.
             * @implements IJustificationProto
             * @constructor
             * @param {casper.IJustificationProto=} [properties] Properties to set
             */
            function JustificationProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * JustificationProto validator.
             * @member {Uint8Array} validator
             * @memberof casper.JustificationProto
             * @instance
             */
            JustificationProto.prototype.validator = $util.newBuffer([]);

            /**
             * JustificationProto latestBlockHash.
             * @member {Uint8Array} latestBlockHash
             * @memberof casper.JustificationProto
             * @instance
             */
            JustificationProto.prototype.latestBlockHash = $util.newBuffer([]);

            /**
             * Creates a new JustificationProto instance using the specified properties.
             * @function create
             * @memberof casper.JustificationProto
             * @static
             * @param {casper.IJustificationProto=} [properties] Properties to set
             * @returns {casper.JustificationProto} JustificationProto instance
             */
            JustificationProto.create = function create(properties) {
                return new JustificationProto(properties);
            };

            /**
             * Encodes the specified JustificationProto message. Does not implicitly {@link casper.JustificationProto.verify|verify} messages.
             * @function encode
             * @memberof casper.JustificationProto
             * @static
             * @param {casper.IJustificationProto} message JustificationProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JustificationProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator != null && message.hasOwnProperty("validator"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.validator);
                if (message.latestBlockHash != null && message.hasOwnProperty("latestBlockHash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.latestBlockHash);
                return writer;
            };

            /**
             * Encodes the specified JustificationProto message, length delimited. Does not implicitly {@link casper.JustificationProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.JustificationProto
             * @static
             * @param {casper.IJustificationProto} message JustificationProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JustificationProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a JustificationProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.JustificationProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.JustificationProto} JustificationProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JustificationProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.JustificationProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator = reader.bytes();
                        break;
                    case 2:
                        message.latestBlockHash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a JustificationProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.JustificationProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.JustificationProto} JustificationProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JustificationProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a JustificationProto message.
             * @function verify
             * @memberof casper.JustificationProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JustificationProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator != null && message.hasOwnProperty("validator"))
                    if (!(message.validator && typeof message.validator.length === "number" || $util.isString(message.validator)))
                        return "validator: buffer expected";
                if (message.latestBlockHash != null && message.hasOwnProperty("latestBlockHash"))
                    if (!(message.latestBlockHash && typeof message.latestBlockHash.length === "number" || $util.isString(message.latestBlockHash)))
                        return "latestBlockHash: buffer expected";
                return null;
            };

            /**
             * Creates a JustificationProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.JustificationProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.JustificationProto} JustificationProto
             */
            JustificationProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.JustificationProto)
                    return object;
                var message = new $root.casper.JustificationProto();
                if (object.validator != null)
                    if (typeof object.validator === "string")
                        $util.base64.decode(object.validator, message.validator = $util.newBuffer($util.base64.length(object.validator)), 0);
                    else if (object.validator.length)
                        message.validator = object.validator;
                if (object.latestBlockHash != null)
                    if (typeof object.latestBlockHash === "string")
                        $util.base64.decode(object.latestBlockHash, message.latestBlockHash = $util.newBuffer($util.base64.length(object.latestBlockHash)), 0);
                    else if (object.latestBlockHash.length)
                        message.latestBlockHash = object.latestBlockHash;
                return message;
            };

            /**
             * Creates a plain object from a JustificationProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.JustificationProto
             * @static
             * @param {casper.JustificationProto} message JustificationProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JustificationProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.validator = "";
                    else {
                        object.validator = [];
                        if (options.bytes !== Array)
                            object.validator = $util.newBuffer(object.validator);
                    }
                    if (options.bytes === String)
                        object.latestBlockHash = "";
                    else {
                        object.latestBlockHash = [];
                        if (options.bytes !== Array)
                            object.latestBlockHash = $util.newBuffer(object.latestBlockHash);
                    }
                }
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = options.bytes === String ? $util.base64.encode(message.validator, 0, message.validator.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator) : message.validator;
                if (message.latestBlockHash != null && message.hasOwnProperty("latestBlockHash"))
                    object.latestBlockHash = options.bytes === String ? $util.base64.encode(message.latestBlockHash, 0, message.latestBlockHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.latestBlockHash) : message.latestBlockHash;
                return object;
            };

            /**
             * Converts this JustificationProto to JSON.
             * @function toJSON
             * @memberof casper.JustificationProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JustificationProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return JustificationProto;
        })();

        casper.RChainStateProto = (function() {

            /**
             * Properties of a RChainStateProto.
             * @memberof casper
             * @interface IRChainStateProto
             * @property {Uint8Array|null} [preStateHash] RChainStateProto preStateHash
             * @property {Uint8Array|null} [postStateHash] RChainStateProto postStateHash
             * @property {Array.<casper.IBondProto>|null} [bonds] RChainStateProto bonds
             * @property {number|Long|null} [blockNumber] RChainStateProto blockNumber
             */

            /**
             * Constructs a new RChainStateProto.
             * @memberof casper
             * @classdesc Represents a RChainStateProto.
             * @implements IRChainStateProto
             * @constructor
             * @param {casper.IRChainStateProto=} [properties] Properties to set
             */
            function RChainStateProto(properties) {
                this.bonds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RChainStateProto preStateHash.
             * @member {Uint8Array} preStateHash
             * @memberof casper.RChainStateProto
             * @instance
             */
            RChainStateProto.prototype.preStateHash = $util.newBuffer([]);

            /**
             * RChainStateProto postStateHash.
             * @member {Uint8Array} postStateHash
             * @memberof casper.RChainStateProto
             * @instance
             */
            RChainStateProto.prototype.postStateHash = $util.newBuffer([]);

            /**
             * RChainStateProto bonds.
             * @member {Array.<casper.IBondProto>} bonds
             * @memberof casper.RChainStateProto
             * @instance
             */
            RChainStateProto.prototype.bonds = $util.emptyArray;

            /**
             * RChainStateProto blockNumber.
             * @member {number|Long} blockNumber
             * @memberof casper.RChainStateProto
             * @instance
             */
            RChainStateProto.prototype.blockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new RChainStateProto instance using the specified properties.
             * @function create
             * @memberof casper.RChainStateProto
             * @static
             * @param {casper.IRChainStateProto=} [properties] Properties to set
             * @returns {casper.RChainStateProto} RChainStateProto instance
             */
            RChainStateProto.create = function create(properties) {
                return new RChainStateProto(properties);
            };

            /**
             * Encodes the specified RChainStateProto message. Does not implicitly {@link casper.RChainStateProto.verify|verify} messages.
             * @function encode
             * @memberof casper.RChainStateProto
             * @static
             * @param {casper.IRChainStateProto} message RChainStateProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RChainStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.preStateHash != null && message.hasOwnProperty("preStateHash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.preStateHash);
                if (message.postStateHash != null && message.hasOwnProperty("postStateHash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.postStateHash);
                if (message.bonds != null && message.bonds.length)
                    for (var i = 0; i < message.bonds.length; ++i)
                        $root.casper.BondProto.encode(message.bonds[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.blockNumber != null && message.hasOwnProperty("blockNumber"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.blockNumber);
                return writer;
            };

            /**
             * Encodes the specified RChainStateProto message, length delimited. Does not implicitly {@link casper.RChainStateProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.RChainStateProto
             * @static
             * @param {casper.IRChainStateProto} message RChainStateProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RChainStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RChainStateProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.RChainStateProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.RChainStateProto} RChainStateProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RChainStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.RChainStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.preStateHash = reader.bytes();
                        break;
                    case 2:
                        message.postStateHash = reader.bytes();
                        break;
                    case 3:
                        if (!(message.bonds && message.bonds.length))
                            message.bonds = [];
                        message.bonds.push($root.casper.BondProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.blockNumber = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RChainStateProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.RChainStateProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.RChainStateProto} RChainStateProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RChainStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RChainStateProto message.
             * @function verify
             * @memberof casper.RChainStateProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RChainStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.preStateHash != null && message.hasOwnProperty("preStateHash"))
                    if (!(message.preStateHash && typeof message.preStateHash.length === "number" || $util.isString(message.preStateHash)))
                        return "preStateHash: buffer expected";
                if (message.postStateHash != null && message.hasOwnProperty("postStateHash"))
                    if (!(message.postStateHash && typeof message.postStateHash.length === "number" || $util.isString(message.postStateHash)))
                        return "postStateHash: buffer expected";
                if (message.bonds != null && message.hasOwnProperty("bonds")) {
                    if (!Array.isArray(message.bonds))
                        return "bonds: array expected";
                    for (var i = 0; i < message.bonds.length; ++i) {
                        var error = $root.casper.BondProto.verify(message.bonds[i]);
                        if (error)
                            return "bonds." + error;
                    }
                }
                if (message.blockNumber != null && message.hasOwnProperty("blockNumber"))
                    if (!$util.isInteger(message.blockNumber) && !(message.blockNumber && $util.isInteger(message.blockNumber.low) && $util.isInteger(message.blockNumber.high)))
                        return "blockNumber: integer|Long expected";
                return null;
            };

            /**
             * Creates a RChainStateProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.RChainStateProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.RChainStateProto} RChainStateProto
             */
            RChainStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.RChainStateProto)
                    return object;
                var message = new $root.casper.RChainStateProto();
                if (object.preStateHash != null)
                    if (typeof object.preStateHash === "string")
                        $util.base64.decode(object.preStateHash, message.preStateHash = $util.newBuffer($util.base64.length(object.preStateHash)), 0);
                    else if (object.preStateHash.length)
                        message.preStateHash = object.preStateHash;
                if (object.postStateHash != null)
                    if (typeof object.postStateHash === "string")
                        $util.base64.decode(object.postStateHash, message.postStateHash = $util.newBuffer($util.base64.length(object.postStateHash)), 0);
                    else if (object.postStateHash.length)
                        message.postStateHash = object.postStateHash;
                if (object.bonds) {
                    if (!Array.isArray(object.bonds))
                        throw TypeError(".casper.RChainStateProto.bonds: array expected");
                    message.bonds = [];
                    for (var i = 0; i < object.bonds.length; ++i) {
                        if (typeof object.bonds[i] !== "object")
                            throw TypeError(".casper.RChainStateProto.bonds: object expected");
                        message.bonds[i] = $root.casper.BondProto.fromObject(object.bonds[i]);
                    }
                }
                if (object.blockNumber != null)
                    if ($util.Long)
                        (message.blockNumber = $util.Long.fromValue(object.blockNumber)).unsigned = false;
                    else if (typeof object.blockNumber === "string")
                        message.blockNumber = parseInt(object.blockNumber, 10);
                    else if (typeof object.blockNumber === "number")
                        message.blockNumber = object.blockNumber;
                    else if (typeof object.blockNumber === "object")
                        message.blockNumber = new $util.LongBits(object.blockNumber.low >>> 0, object.blockNumber.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a RChainStateProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.RChainStateProto
             * @static
             * @param {casper.RChainStateProto} message RChainStateProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RChainStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.bonds = [];
                if (options.defaults) {
                    if (options.bytes === String)
                        object.preStateHash = "";
                    else {
                        object.preStateHash = [];
                        if (options.bytes !== Array)
                            object.preStateHash = $util.newBuffer(object.preStateHash);
                    }
                    if (options.bytes === String)
                        object.postStateHash = "";
                    else {
                        object.postStateHash = [];
                        if (options.bytes !== Array)
                            object.postStateHash = $util.newBuffer(object.postStateHash);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.blockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.blockNumber = options.longs === String ? "0" : 0;
                }
                if (message.preStateHash != null && message.hasOwnProperty("preStateHash"))
                    object.preStateHash = options.bytes === String ? $util.base64.encode(message.preStateHash, 0, message.preStateHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.preStateHash) : message.preStateHash;
                if (message.postStateHash != null && message.hasOwnProperty("postStateHash"))
                    object.postStateHash = options.bytes === String ? $util.base64.encode(message.postStateHash, 0, message.postStateHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.postStateHash) : message.postStateHash;
                if (message.bonds && message.bonds.length) {
                    object.bonds = [];
                    for (var j = 0; j < message.bonds.length; ++j)
                        object.bonds[j] = $root.casper.BondProto.toObject(message.bonds[j], options);
                }
                if (message.blockNumber != null && message.hasOwnProperty("blockNumber"))
                    if (typeof message.blockNumber === "number")
                        object.blockNumber = options.longs === String ? String(message.blockNumber) : message.blockNumber;
                    else
                        object.blockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.blockNumber) : options.longs === Number ? new $util.LongBits(message.blockNumber.low >>> 0, message.blockNumber.high >>> 0).toNumber() : message.blockNumber;
                return object;
            };

            /**
             * Converts this RChainStateProto to JSON.
             * @function toJSON
             * @memberof casper.RChainStateProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RChainStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RChainStateProto;
        })();

        casper.EventProto = (function() {

            /**
             * Properties of an EventProto.
             * @memberof casper
             * @interface IEventProto
             * @property {casper.IProduceEventProto|null} [produce] EventProto produce
             * @property {casper.IConsumeEventProto|null} [consume] EventProto consume
             * @property {casper.ICommEventProto|null} [comm] EventProto comm
             */

            /**
             * Constructs a new EventProto.
             * @memberof casper
             * @classdesc Represents an EventProto.
             * @implements IEventProto
             * @constructor
             * @param {casper.IEventProto=} [properties] Properties to set
             */
            function EventProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventProto produce.
             * @member {casper.IProduceEventProto|null|undefined} produce
             * @memberof casper.EventProto
             * @instance
             */
            EventProto.prototype.produce = null;

            /**
             * EventProto consume.
             * @member {casper.IConsumeEventProto|null|undefined} consume
             * @memberof casper.EventProto
             * @instance
             */
            EventProto.prototype.consume = null;

            /**
             * EventProto comm.
             * @member {casper.ICommEventProto|null|undefined} comm
             * @memberof casper.EventProto
             * @instance
             */
            EventProto.prototype.comm = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * EventProto event_instance.
             * @member {"produce"|"consume"|"comm"|undefined} event_instance
             * @memberof casper.EventProto
             * @instance
             */
            Object.defineProperty(EventProto.prototype, "event_instance", {
                get: $util.oneOfGetter($oneOfFields = ["produce", "consume", "comm"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new EventProto instance using the specified properties.
             * @function create
             * @memberof casper.EventProto
             * @static
             * @param {casper.IEventProto=} [properties] Properties to set
             * @returns {casper.EventProto} EventProto instance
             */
            EventProto.create = function create(properties) {
                return new EventProto(properties);
            };

            /**
             * Encodes the specified EventProto message. Does not implicitly {@link casper.EventProto.verify|verify} messages.
             * @function encode
             * @memberof casper.EventProto
             * @static
             * @param {casper.IEventProto} message EventProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.produce != null && message.hasOwnProperty("produce"))
                    $root.casper.ProduceEventProto.encode(message.produce, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.consume != null && message.hasOwnProperty("consume"))
                    $root.casper.ConsumeEventProto.encode(message.consume, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.comm != null && message.hasOwnProperty("comm"))
                    $root.casper.CommEventProto.encode(message.comm, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EventProto message, length delimited. Does not implicitly {@link casper.EventProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.EventProto
             * @static
             * @param {casper.IEventProto} message EventProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.EventProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.EventProto} EventProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.EventProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.produce = $root.casper.ProduceEventProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.consume = $root.casper.ConsumeEventProto.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.comm = $root.casper.CommEventProto.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.EventProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.EventProto} EventProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventProto message.
             * @function verify
             * @memberof casper.EventProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.produce != null && message.hasOwnProperty("produce")) {
                    properties.event_instance = 1;
                    {
                        var error = $root.casper.ProduceEventProto.verify(message.produce);
                        if (error)
                            return "produce." + error;
                    }
                }
                if (message.consume != null && message.hasOwnProperty("consume")) {
                    if (properties.event_instance === 1)
                        return "event_instance: multiple values";
                    properties.event_instance = 1;
                    {
                        var error = $root.casper.ConsumeEventProto.verify(message.consume);
                        if (error)
                            return "consume." + error;
                    }
                }
                if (message.comm != null && message.hasOwnProperty("comm")) {
                    if (properties.event_instance === 1)
                        return "event_instance: multiple values";
                    properties.event_instance = 1;
                    {
                        var error = $root.casper.CommEventProto.verify(message.comm);
                        if (error)
                            return "comm." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EventProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.EventProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.EventProto} EventProto
             */
            EventProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.EventProto)
                    return object;
                var message = new $root.casper.EventProto();
                if (object.produce != null) {
                    if (typeof object.produce !== "object")
                        throw TypeError(".casper.EventProto.produce: object expected");
                    message.produce = $root.casper.ProduceEventProto.fromObject(object.produce);
                }
                if (object.consume != null) {
                    if (typeof object.consume !== "object")
                        throw TypeError(".casper.EventProto.consume: object expected");
                    message.consume = $root.casper.ConsumeEventProto.fromObject(object.consume);
                }
                if (object.comm != null) {
                    if (typeof object.comm !== "object")
                        throw TypeError(".casper.EventProto.comm: object expected");
                    message.comm = $root.casper.CommEventProto.fromObject(object.comm);
                }
                return message;
            };

            /**
             * Creates a plain object from an EventProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.EventProto
             * @static
             * @param {casper.EventProto} message EventProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.produce != null && message.hasOwnProperty("produce")) {
                    object.produce = $root.casper.ProduceEventProto.toObject(message.produce, options);
                    if (options.oneofs)
                        object.event_instance = "produce";
                }
                if (message.consume != null && message.hasOwnProperty("consume")) {
                    object.consume = $root.casper.ConsumeEventProto.toObject(message.consume, options);
                    if (options.oneofs)
                        object.event_instance = "consume";
                }
                if (message.comm != null && message.hasOwnProperty("comm")) {
                    object.comm = $root.casper.CommEventProto.toObject(message.comm, options);
                    if (options.oneofs)
                        object.event_instance = "comm";
                }
                return object;
            };

            /**
             * Converts this EventProto to JSON.
             * @function toJSON
             * @memberof casper.EventProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventProto;
        })();

        casper.ProduceEventProto = (function() {

            /**
             * Properties of a ProduceEventProto.
             * @memberof casper
             * @interface IProduceEventProto
             * @property {Uint8Array|null} [channelsHash] ProduceEventProto channelsHash
             * @property {Uint8Array|null} [hash] ProduceEventProto hash
             * @property {boolean|null} [persistent] ProduceEventProto persistent
             * @property {number|null} [timesRepeated] ProduceEventProto timesRepeated
             */

            /**
             * Constructs a new ProduceEventProto.
             * @memberof casper
             * @classdesc Represents a ProduceEventProto.
             * @implements IProduceEventProto
             * @constructor
             * @param {casper.IProduceEventProto=} [properties] Properties to set
             */
            function ProduceEventProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProduceEventProto channelsHash.
             * @member {Uint8Array} channelsHash
             * @memberof casper.ProduceEventProto
             * @instance
             */
            ProduceEventProto.prototype.channelsHash = $util.newBuffer([]);

            /**
             * ProduceEventProto hash.
             * @member {Uint8Array} hash
             * @memberof casper.ProduceEventProto
             * @instance
             */
            ProduceEventProto.prototype.hash = $util.newBuffer([]);

            /**
             * ProduceEventProto persistent.
             * @member {boolean} persistent
             * @memberof casper.ProduceEventProto
             * @instance
             */
            ProduceEventProto.prototype.persistent = false;

            /**
             * ProduceEventProto timesRepeated.
             * @member {number} timesRepeated
             * @memberof casper.ProduceEventProto
             * @instance
             */
            ProduceEventProto.prototype.timesRepeated = 0;

            /**
             * Creates a new ProduceEventProto instance using the specified properties.
             * @function create
             * @memberof casper.ProduceEventProto
             * @static
             * @param {casper.IProduceEventProto=} [properties] Properties to set
             * @returns {casper.ProduceEventProto} ProduceEventProto instance
             */
            ProduceEventProto.create = function create(properties) {
                return new ProduceEventProto(properties);
            };

            /**
             * Encodes the specified ProduceEventProto message. Does not implicitly {@link casper.ProduceEventProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ProduceEventProto
             * @static
             * @param {casper.IProduceEventProto} message ProduceEventProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProduceEventProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.channelsHash != null && message.hasOwnProperty("channelsHash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.channelsHash);
                if (message.hash != null && message.hasOwnProperty("hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);
                if (message.persistent != null && message.hasOwnProperty("persistent"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.persistent);
                if (message.timesRepeated != null && message.hasOwnProperty("timesRepeated"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.timesRepeated);
                return writer;
            };

            /**
             * Encodes the specified ProduceEventProto message, length delimited. Does not implicitly {@link casper.ProduceEventProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ProduceEventProto
             * @static
             * @param {casper.IProduceEventProto} message ProduceEventProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProduceEventProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProduceEventProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ProduceEventProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ProduceEventProto} ProduceEventProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProduceEventProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ProduceEventProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.channelsHash = reader.bytes();
                        break;
                    case 2:
                        message.hash = reader.bytes();
                        break;
                    case 3:
                        message.persistent = reader.bool();
                        break;
                    case 4:
                        message.timesRepeated = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProduceEventProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ProduceEventProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ProduceEventProto} ProduceEventProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProduceEventProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProduceEventProto message.
             * @function verify
             * @memberof casper.ProduceEventProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProduceEventProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.channelsHash != null && message.hasOwnProperty("channelsHash"))
                    if (!(message.channelsHash && typeof message.channelsHash.length === "number" || $util.isString(message.channelsHash)))
                        return "channelsHash: buffer expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.persistent != null && message.hasOwnProperty("persistent"))
                    if (typeof message.persistent !== "boolean")
                        return "persistent: boolean expected";
                if (message.timesRepeated != null && message.hasOwnProperty("timesRepeated"))
                    if (!$util.isInteger(message.timesRepeated))
                        return "timesRepeated: integer expected";
                return null;
            };

            /**
             * Creates a ProduceEventProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ProduceEventProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ProduceEventProto} ProduceEventProto
             */
            ProduceEventProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ProduceEventProto)
                    return object;
                var message = new $root.casper.ProduceEventProto();
                if (object.channelsHash != null)
                    if (typeof object.channelsHash === "string")
                        $util.base64.decode(object.channelsHash, message.channelsHash = $util.newBuffer($util.base64.length(object.channelsHash)), 0);
                    else if (object.channelsHash.length)
                        message.channelsHash = object.channelsHash;
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.persistent != null)
                    message.persistent = Boolean(object.persistent);
                if (object.timesRepeated != null)
                    message.timesRepeated = object.timesRepeated | 0;
                return message;
            };

            /**
             * Creates a plain object from a ProduceEventProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ProduceEventProto
             * @static
             * @param {casper.ProduceEventProto} message ProduceEventProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProduceEventProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.channelsHash = "";
                    else {
                        object.channelsHash = [];
                        if (options.bytes !== Array)
                            object.channelsHash = $util.newBuffer(object.channelsHash);
                    }
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    object.persistent = false;
                    object.timesRepeated = 0;
                }
                if (message.channelsHash != null && message.hasOwnProperty("channelsHash"))
                    object.channelsHash = options.bytes === String ? $util.base64.encode(message.channelsHash, 0, message.channelsHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.channelsHash) : message.channelsHash;
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.persistent != null && message.hasOwnProperty("persistent"))
                    object.persistent = message.persistent;
                if (message.timesRepeated != null && message.hasOwnProperty("timesRepeated"))
                    object.timesRepeated = message.timesRepeated;
                return object;
            };

            /**
             * Converts this ProduceEventProto to JSON.
             * @function toJSON
             * @memberof casper.ProduceEventProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProduceEventProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProduceEventProto;
        })();

        casper.ConsumeEventProto = (function() {

            /**
             * Properties of a ConsumeEventProto.
             * @memberof casper
             * @interface IConsumeEventProto
             * @property {Array.<Uint8Array>|null} [channelsHashes] ConsumeEventProto channelsHashes
             * @property {Uint8Array|null} [hash] ConsumeEventProto hash
             * @property {boolean|null} [persistent] ConsumeEventProto persistent
             */

            /**
             * Constructs a new ConsumeEventProto.
             * @memberof casper
             * @classdesc Represents a ConsumeEventProto.
             * @implements IConsumeEventProto
             * @constructor
             * @param {casper.IConsumeEventProto=} [properties] Properties to set
             */
            function ConsumeEventProto(properties) {
                this.channelsHashes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConsumeEventProto channelsHashes.
             * @member {Array.<Uint8Array>} channelsHashes
             * @memberof casper.ConsumeEventProto
             * @instance
             */
            ConsumeEventProto.prototype.channelsHashes = $util.emptyArray;

            /**
             * ConsumeEventProto hash.
             * @member {Uint8Array} hash
             * @memberof casper.ConsumeEventProto
             * @instance
             */
            ConsumeEventProto.prototype.hash = $util.newBuffer([]);

            /**
             * ConsumeEventProto persistent.
             * @member {boolean} persistent
             * @memberof casper.ConsumeEventProto
             * @instance
             */
            ConsumeEventProto.prototype.persistent = false;

            /**
             * Creates a new ConsumeEventProto instance using the specified properties.
             * @function create
             * @memberof casper.ConsumeEventProto
             * @static
             * @param {casper.IConsumeEventProto=} [properties] Properties to set
             * @returns {casper.ConsumeEventProto} ConsumeEventProto instance
             */
            ConsumeEventProto.create = function create(properties) {
                return new ConsumeEventProto(properties);
            };

            /**
             * Encodes the specified ConsumeEventProto message. Does not implicitly {@link casper.ConsumeEventProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ConsumeEventProto
             * @static
             * @param {casper.IConsumeEventProto} message ConsumeEventProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsumeEventProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.channelsHashes != null && message.channelsHashes.length)
                    for (var i = 0; i < message.channelsHashes.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.channelsHashes[i]);
                if (message.hash != null && message.hasOwnProperty("hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);
                if (message.persistent != null && message.hasOwnProperty("persistent"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.persistent);
                return writer;
            };

            /**
             * Encodes the specified ConsumeEventProto message, length delimited. Does not implicitly {@link casper.ConsumeEventProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ConsumeEventProto
             * @static
             * @param {casper.IConsumeEventProto} message ConsumeEventProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsumeEventProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConsumeEventProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ConsumeEventProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ConsumeEventProto} ConsumeEventProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsumeEventProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ConsumeEventProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.channelsHashes && message.channelsHashes.length))
                            message.channelsHashes = [];
                        message.channelsHashes.push(reader.bytes());
                        break;
                    case 2:
                        message.hash = reader.bytes();
                        break;
                    case 3:
                        message.persistent = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConsumeEventProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ConsumeEventProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ConsumeEventProto} ConsumeEventProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsumeEventProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConsumeEventProto message.
             * @function verify
             * @memberof casper.ConsumeEventProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConsumeEventProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.channelsHashes != null && message.hasOwnProperty("channelsHashes")) {
                    if (!Array.isArray(message.channelsHashes))
                        return "channelsHashes: array expected";
                    for (var i = 0; i < message.channelsHashes.length; ++i)
                        if (!(message.channelsHashes[i] && typeof message.channelsHashes[i].length === "number" || $util.isString(message.channelsHashes[i])))
                            return "channelsHashes: buffer[] expected";
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.persistent != null && message.hasOwnProperty("persistent"))
                    if (typeof message.persistent !== "boolean")
                        return "persistent: boolean expected";
                return null;
            };

            /**
             * Creates a ConsumeEventProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ConsumeEventProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ConsumeEventProto} ConsumeEventProto
             */
            ConsumeEventProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ConsumeEventProto)
                    return object;
                var message = new $root.casper.ConsumeEventProto();
                if (object.channelsHashes) {
                    if (!Array.isArray(object.channelsHashes))
                        throw TypeError(".casper.ConsumeEventProto.channelsHashes: array expected");
                    message.channelsHashes = [];
                    for (var i = 0; i < object.channelsHashes.length; ++i)
                        if (typeof object.channelsHashes[i] === "string")
                            $util.base64.decode(object.channelsHashes[i], message.channelsHashes[i] = $util.newBuffer($util.base64.length(object.channelsHashes[i])), 0);
                        else if (object.channelsHashes[i].length)
                            message.channelsHashes[i] = object.channelsHashes[i];
                }
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.persistent != null)
                    message.persistent = Boolean(object.persistent);
                return message;
            };

            /**
             * Creates a plain object from a ConsumeEventProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ConsumeEventProto
             * @static
             * @param {casper.ConsumeEventProto} message ConsumeEventProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConsumeEventProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.channelsHashes = [];
                if (options.defaults) {
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    object.persistent = false;
                }
                if (message.channelsHashes && message.channelsHashes.length) {
                    object.channelsHashes = [];
                    for (var j = 0; j < message.channelsHashes.length; ++j)
                        object.channelsHashes[j] = options.bytes === String ? $util.base64.encode(message.channelsHashes[j], 0, message.channelsHashes[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.channelsHashes[j]) : message.channelsHashes[j];
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.persistent != null && message.hasOwnProperty("persistent"))
                    object.persistent = message.persistent;
                return object;
            };

            /**
             * Converts this ConsumeEventProto to JSON.
             * @function toJSON
             * @memberof casper.ConsumeEventProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConsumeEventProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConsumeEventProto;
        })();

        casper.CommEventProto = (function() {

            /**
             * Properties of a CommEventProto.
             * @memberof casper
             * @interface ICommEventProto
             * @property {casper.IConsumeEventProto|null} [consume] CommEventProto consume
             * @property {Array.<casper.IProduceEventProto>|null} [produces] CommEventProto produces
             * @property {Array.<casper.IPeekProto>|null} [peeks] CommEventProto peeks
             */

            /**
             * Constructs a new CommEventProto.
             * @memberof casper
             * @classdesc Represents a CommEventProto.
             * @implements ICommEventProto
             * @constructor
             * @param {casper.ICommEventProto=} [properties] Properties to set
             */
            function CommEventProto(properties) {
                this.produces = [];
                this.peeks = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CommEventProto consume.
             * @member {casper.IConsumeEventProto|null|undefined} consume
             * @memberof casper.CommEventProto
             * @instance
             */
            CommEventProto.prototype.consume = null;

            /**
             * CommEventProto produces.
             * @member {Array.<casper.IProduceEventProto>} produces
             * @memberof casper.CommEventProto
             * @instance
             */
            CommEventProto.prototype.produces = $util.emptyArray;

            /**
             * CommEventProto peeks.
             * @member {Array.<casper.IPeekProto>} peeks
             * @memberof casper.CommEventProto
             * @instance
             */
            CommEventProto.prototype.peeks = $util.emptyArray;

            /**
             * Creates a new CommEventProto instance using the specified properties.
             * @function create
             * @memberof casper.CommEventProto
             * @static
             * @param {casper.ICommEventProto=} [properties] Properties to set
             * @returns {casper.CommEventProto} CommEventProto instance
             */
            CommEventProto.create = function create(properties) {
                return new CommEventProto(properties);
            };

            /**
             * Encodes the specified CommEventProto message. Does not implicitly {@link casper.CommEventProto.verify|verify} messages.
             * @function encode
             * @memberof casper.CommEventProto
             * @static
             * @param {casper.ICommEventProto} message CommEventProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommEventProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.consume != null && message.hasOwnProperty("consume"))
                    $root.casper.ConsumeEventProto.encode(message.consume, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.produces != null && message.produces.length)
                    for (var i = 0; i < message.produces.length; ++i)
                        $root.casper.ProduceEventProto.encode(message.produces[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.peeks != null && message.peeks.length)
                    for (var i = 0; i < message.peeks.length; ++i)
                        $root.casper.PeekProto.encode(message.peeks[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CommEventProto message, length delimited. Does not implicitly {@link casper.CommEventProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.CommEventProto
             * @static
             * @param {casper.ICommEventProto} message CommEventProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommEventProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CommEventProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.CommEventProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.CommEventProto} CommEventProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommEventProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.CommEventProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.consume = $root.casper.ConsumeEventProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.produces && message.produces.length))
                            message.produces = [];
                        message.produces.push($root.casper.ProduceEventProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.peeks && message.peeks.length))
                            message.peeks = [];
                        message.peeks.push($root.casper.PeekProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CommEventProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.CommEventProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.CommEventProto} CommEventProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommEventProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CommEventProto message.
             * @function verify
             * @memberof casper.CommEventProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CommEventProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.consume != null && message.hasOwnProperty("consume")) {
                    var error = $root.casper.ConsumeEventProto.verify(message.consume);
                    if (error)
                        return "consume." + error;
                }
                if (message.produces != null && message.hasOwnProperty("produces")) {
                    if (!Array.isArray(message.produces))
                        return "produces: array expected";
                    for (var i = 0; i < message.produces.length; ++i) {
                        var error = $root.casper.ProduceEventProto.verify(message.produces[i]);
                        if (error)
                            return "produces." + error;
                    }
                }
                if (message.peeks != null && message.hasOwnProperty("peeks")) {
                    if (!Array.isArray(message.peeks))
                        return "peeks: array expected";
                    for (var i = 0; i < message.peeks.length; ++i) {
                        var error = $root.casper.PeekProto.verify(message.peeks[i]);
                        if (error)
                            return "peeks." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CommEventProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.CommEventProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.CommEventProto} CommEventProto
             */
            CommEventProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.CommEventProto)
                    return object;
                var message = new $root.casper.CommEventProto();
                if (object.consume != null) {
                    if (typeof object.consume !== "object")
                        throw TypeError(".casper.CommEventProto.consume: object expected");
                    message.consume = $root.casper.ConsumeEventProto.fromObject(object.consume);
                }
                if (object.produces) {
                    if (!Array.isArray(object.produces))
                        throw TypeError(".casper.CommEventProto.produces: array expected");
                    message.produces = [];
                    for (var i = 0; i < object.produces.length; ++i) {
                        if (typeof object.produces[i] !== "object")
                            throw TypeError(".casper.CommEventProto.produces: object expected");
                        message.produces[i] = $root.casper.ProduceEventProto.fromObject(object.produces[i]);
                    }
                }
                if (object.peeks) {
                    if (!Array.isArray(object.peeks))
                        throw TypeError(".casper.CommEventProto.peeks: array expected");
                    message.peeks = [];
                    for (var i = 0; i < object.peeks.length; ++i) {
                        if (typeof object.peeks[i] !== "object")
                            throw TypeError(".casper.CommEventProto.peeks: object expected");
                        message.peeks[i] = $root.casper.PeekProto.fromObject(object.peeks[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a CommEventProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.CommEventProto
             * @static
             * @param {casper.CommEventProto} message CommEventProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CommEventProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.produces = [];
                    object.peeks = [];
                }
                if (options.defaults)
                    object.consume = null;
                if (message.consume != null && message.hasOwnProperty("consume"))
                    object.consume = $root.casper.ConsumeEventProto.toObject(message.consume, options);
                if (message.produces && message.produces.length) {
                    object.produces = [];
                    for (var j = 0; j < message.produces.length; ++j)
                        object.produces[j] = $root.casper.ProduceEventProto.toObject(message.produces[j], options);
                }
                if (message.peeks && message.peeks.length) {
                    object.peeks = [];
                    for (var j = 0; j < message.peeks.length; ++j)
                        object.peeks[j] = $root.casper.PeekProto.toObject(message.peeks[j], options);
                }
                return object;
            };

            /**
             * Converts this CommEventProto to JSON.
             * @function toJSON
             * @memberof casper.CommEventProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CommEventProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CommEventProto;
        })();

        casper.PeekProto = (function() {

            /**
             * Properties of a PeekProto.
             * @memberof casper
             * @interface IPeekProto
             * @property {number|null} [channelIndex] PeekProto channelIndex
             */

            /**
             * Constructs a new PeekProto.
             * @memberof casper
             * @classdesc Represents a PeekProto.
             * @implements IPeekProto
             * @constructor
             * @param {casper.IPeekProto=} [properties] Properties to set
             */
            function PeekProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PeekProto channelIndex.
             * @member {number} channelIndex
             * @memberof casper.PeekProto
             * @instance
             */
            PeekProto.prototype.channelIndex = 0;

            /**
             * Creates a new PeekProto instance using the specified properties.
             * @function create
             * @memberof casper.PeekProto
             * @static
             * @param {casper.IPeekProto=} [properties] Properties to set
             * @returns {casper.PeekProto} PeekProto instance
             */
            PeekProto.create = function create(properties) {
                return new PeekProto(properties);
            };

            /**
             * Encodes the specified PeekProto message. Does not implicitly {@link casper.PeekProto.verify|verify} messages.
             * @function encode
             * @memberof casper.PeekProto
             * @static
             * @param {casper.IPeekProto} message PeekProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PeekProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.channelIndex != null && message.hasOwnProperty("channelIndex"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.channelIndex);
                return writer;
            };

            /**
             * Encodes the specified PeekProto message, length delimited. Does not implicitly {@link casper.PeekProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.PeekProto
             * @static
             * @param {casper.IPeekProto} message PeekProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PeekProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PeekProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.PeekProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.PeekProto} PeekProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PeekProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.PeekProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.channelIndex = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PeekProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.PeekProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.PeekProto} PeekProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PeekProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PeekProto message.
             * @function verify
             * @memberof casper.PeekProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PeekProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.channelIndex != null && message.hasOwnProperty("channelIndex"))
                    if (!$util.isInteger(message.channelIndex))
                        return "channelIndex: integer expected";
                return null;
            };

            /**
             * Creates a PeekProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.PeekProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.PeekProto} PeekProto
             */
            PeekProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.PeekProto)
                    return object;
                var message = new $root.casper.PeekProto();
                if (object.channelIndex != null)
                    message.channelIndex = object.channelIndex | 0;
                return message;
            };

            /**
             * Creates a plain object from a PeekProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.PeekProto
             * @static
             * @param {casper.PeekProto} message PeekProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PeekProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.channelIndex = 0;
                if (message.channelIndex != null && message.hasOwnProperty("channelIndex"))
                    object.channelIndex = message.channelIndex;
                return object;
            };

            /**
             * Converts this PeekProto to JSON.
             * @function toJSON
             * @memberof casper.PeekProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PeekProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PeekProto;
        })();

        casper.BondProto = (function() {

            /**
             * Properties of a BondProto.
             * @memberof casper
             * @interface IBondProto
             * @property {Uint8Array|null} [validator] BondProto validator
             * @property {number|Long|null} [stake] BondProto stake
             */

            /**
             * Constructs a new BondProto.
             * @memberof casper
             * @classdesc Represents a BondProto.
             * @implements IBondProto
             * @constructor
             * @param {casper.IBondProto=} [properties] Properties to set
             */
            function BondProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BondProto validator.
             * @member {Uint8Array} validator
             * @memberof casper.BondProto
             * @instance
             */
            BondProto.prototype.validator = $util.newBuffer([]);

            /**
             * BondProto stake.
             * @member {number|Long} stake
             * @memberof casper.BondProto
             * @instance
             */
            BondProto.prototype.stake = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new BondProto instance using the specified properties.
             * @function create
             * @memberof casper.BondProto
             * @static
             * @param {casper.IBondProto=} [properties] Properties to set
             * @returns {casper.BondProto} BondProto instance
             */
            BondProto.create = function create(properties) {
                return new BondProto(properties);
            };

            /**
             * Encodes the specified BondProto message. Does not implicitly {@link casper.BondProto.verify|verify} messages.
             * @function encode
             * @memberof casper.BondProto
             * @static
             * @param {casper.IBondProto} message BondProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BondProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator != null && message.hasOwnProperty("validator"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.validator);
                if (message.stake != null && message.hasOwnProperty("stake"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.stake);
                return writer;
            };

            /**
             * Encodes the specified BondProto message, length delimited. Does not implicitly {@link casper.BondProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BondProto
             * @static
             * @param {casper.IBondProto} message BondProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BondProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BondProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BondProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BondProto} BondProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BondProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BondProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator = reader.bytes();
                        break;
                    case 2:
                        message.stake = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BondProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BondProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BondProto} BondProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BondProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BondProto message.
             * @function verify
             * @memberof casper.BondProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BondProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator != null && message.hasOwnProperty("validator"))
                    if (!(message.validator && typeof message.validator.length === "number" || $util.isString(message.validator)))
                        return "validator: buffer expected";
                if (message.stake != null && message.hasOwnProperty("stake"))
                    if (!$util.isInteger(message.stake) && !(message.stake && $util.isInteger(message.stake.low) && $util.isInteger(message.stake.high)))
                        return "stake: integer|Long expected";
                return null;
            };

            /**
             * Creates a BondProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BondProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BondProto} BondProto
             */
            BondProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BondProto)
                    return object;
                var message = new $root.casper.BondProto();
                if (object.validator != null)
                    if (typeof object.validator === "string")
                        $util.base64.decode(object.validator, message.validator = $util.newBuffer($util.base64.length(object.validator)), 0);
                    else if (object.validator.length)
                        message.validator = object.validator;
                if (object.stake != null)
                    if ($util.Long)
                        (message.stake = $util.Long.fromValue(object.stake)).unsigned = false;
                    else if (typeof object.stake === "string")
                        message.stake = parseInt(object.stake, 10);
                    else if (typeof object.stake === "number")
                        message.stake = object.stake;
                    else if (typeof object.stake === "object")
                        message.stake = new $util.LongBits(object.stake.low >>> 0, object.stake.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BondProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BondProto
             * @static
             * @param {casper.BondProto} message BondProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BondProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.validator = "";
                    else {
                        object.validator = [];
                        if (options.bytes !== Array)
                            object.validator = $util.newBuffer(object.validator);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.stake = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.stake = options.longs === String ? "0" : 0;
                }
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = options.bytes === String ? $util.base64.encode(message.validator, 0, message.validator.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator) : message.validator;
                if (message.stake != null && message.hasOwnProperty("stake"))
                    if (typeof message.stake === "number")
                        object.stake = options.longs === String ? String(message.stake) : message.stake;
                    else
                        object.stake = options.longs === String ? $util.Long.prototype.toString.call(message.stake) : options.longs === Number ? new $util.LongBits(message.stake.low >>> 0, message.stake.high >>> 0).toNumber() : message.stake;
                return object;
            };

            /**
             * Converts this BondProto to JSON.
             * @function toJSON
             * @memberof casper.BondProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BondProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BondProto;
        })();

        casper.FindDeployQuery = (function() {

            /**
             * Properties of a FindDeployQuery.
             * @memberof casper
             * @interface IFindDeployQuery
             * @property {Uint8Array|null} [deployId] FindDeployQuery deployId
             */

            /**
             * Constructs a new FindDeployQuery.
             * @memberof casper
             * @classdesc Represents a FindDeployQuery.
             * @implements IFindDeployQuery
             * @constructor
             * @param {casper.IFindDeployQuery=} [properties] Properties to set
             */
            function FindDeployQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FindDeployQuery deployId.
             * @member {Uint8Array} deployId
             * @memberof casper.FindDeployQuery
             * @instance
             */
            FindDeployQuery.prototype.deployId = $util.newBuffer([]);

            /**
             * Creates a new FindDeployQuery instance using the specified properties.
             * @function create
             * @memberof casper.FindDeployQuery
             * @static
             * @param {casper.IFindDeployQuery=} [properties] Properties to set
             * @returns {casper.FindDeployQuery} FindDeployQuery instance
             */
            FindDeployQuery.create = function create(properties) {
                return new FindDeployQuery(properties);
            };

            /**
             * Encodes the specified FindDeployQuery message. Does not implicitly {@link casper.FindDeployQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.FindDeployQuery
             * @static
             * @param {casper.IFindDeployQuery} message FindDeployQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FindDeployQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deployId != null && message.hasOwnProperty("deployId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.deployId);
                return writer;
            };

            /**
             * Encodes the specified FindDeployQuery message, length delimited. Does not implicitly {@link casper.FindDeployQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.FindDeployQuery
             * @static
             * @param {casper.IFindDeployQuery} message FindDeployQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FindDeployQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FindDeployQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.FindDeployQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.FindDeployQuery} FindDeployQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FindDeployQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.FindDeployQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deployId = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FindDeployQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.FindDeployQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.FindDeployQuery} FindDeployQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FindDeployQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FindDeployQuery message.
             * @function verify
             * @memberof casper.FindDeployQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FindDeployQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deployId != null && message.hasOwnProperty("deployId"))
                    if (!(message.deployId && typeof message.deployId.length === "number" || $util.isString(message.deployId)))
                        return "deployId: buffer expected";
                return null;
            };

            /**
             * Creates a FindDeployQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.FindDeployQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.FindDeployQuery} FindDeployQuery
             */
            FindDeployQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.FindDeployQuery)
                    return object;
                var message = new $root.casper.FindDeployQuery();
                if (object.deployId != null)
                    if (typeof object.deployId === "string")
                        $util.base64.decode(object.deployId, message.deployId = $util.newBuffer($util.base64.length(object.deployId)), 0);
                    else if (object.deployId.length)
                        message.deployId = object.deployId;
                return message;
            };

            /**
             * Creates a plain object from a FindDeployQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.FindDeployQuery
             * @static
             * @param {casper.FindDeployQuery} message FindDeployQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FindDeployQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.deployId = "";
                    else {
                        object.deployId = [];
                        if (options.bytes !== Array)
                            object.deployId = $util.newBuffer(object.deployId);
                    }
                if (message.deployId != null && message.hasOwnProperty("deployId"))
                    object.deployId = options.bytes === String ? $util.base64.encode(message.deployId, 0, message.deployId.length) : options.bytes === Array ? Array.prototype.slice.call(message.deployId) : message.deployId;
                return object;
            };

            /**
             * Converts this FindDeployQuery to JSON.
             * @function toJSON
             * @memberof casper.FindDeployQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FindDeployQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FindDeployQuery;
        })();

        casper.BlockQuery = (function() {

            /**
             * Properties of a BlockQuery.
             * @memberof casper
             * @interface IBlockQuery
             * @property {string|null} [hash] BlockQuery hash
             */

            /**
             * Constructs a new BlockQuery.
             * @memberof casper
             * @classdesc Represents a BlockQuery.
             * @implements IBlockQuery
             * @constructor
             * @param {casper.IBlockQuery=} [properties] Properties to set
             */
            function BlockQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockQuery hash.
             * @member {string} hash
             * @memberof casper.BlockQuery
             * @instance
             */
            BlockQuery.prototype.hash = "";

            /**
             * Creates a new BlockQuery instance using the specified properties.
             * @function create
             * @memberof casper.BlockQuery
             * @static
             * @param {casper.IBlockQuery=} [properties] Properties to set
             * @returns {casper.BlockQuery} BlockQuery instance
             */
            BlockQuery.create = function create(properties) {
                return new BlockQuery(properties);
            };

            /**
             * Encodes the specified BlockQuery message. Does not implicitly {@link casper.BlockQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.BlockQuery
             * @static
             * @param {casper.IBlockQuery} message BlockQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && message.hasOwnProperty("hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);
                return writer;
            };

            /**
             * Encodes the specified BlockQuery message, length delimited. Does not implicitly {@link casper.BlockQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BlockQuery
             * @static
             * @param {casper.IBlockQuery} message BlockQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BlockQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BlockQuery} BlockQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BlockQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BlockQuery} BlockQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockQuery message.
             * @function verify
             * @memberof casper.BlockQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!$util.isString(message.hash))
                        return "hash: string expected";
                return null;
            };

            /**
             * Creates a BlockQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BlockQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BlockQuery} BlockQuery
             */
            BlockQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BlockQuery)
                    return object;
                var message = new $root.casper.BlockQuery();
                if (object.hash != null)
                    message.hash = String(object.hash);
                return message;
            };

            /**
             * Creates a plain object from a BlockQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BlockQuery
             * @static
             * @param {casper.BlockQuery} message BlockQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.hash = "";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = message.hash;
                return object;
            };

            /**
             * Converts this BlockQuery to JSON.
             * @function toJSON
             * @memberof casper.BlockQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockQuery;
        })();

        casper.BlocksQuery = (function() {

            /**
             * Properties of a BlocksQuery.
             * @memberof casper
             * @interface IBlocksQuery
             * @property {number|null} [depth] BlocksQuery depth
             */

            /**
             * Constructs a new BlocksQuery.
             * @memberof casper
             * @classdesc Represents a BlocksQuery.
             * @implements IBlocksQuery
             * @constructor
             * @param {casper.IBlocksQuery=} [properties] Properties to set
             */
            function BlocksQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlocksQuery depth.
             * @member {number} depth
             * @memberof casper.BlocksQuery
             * @instance
             */
            BlocksQuery.prototype.depth = 0;

            /**
             * Creates a new BlocksQuery instance using the specified properties.
             * @function create
             * @memberof casper.BlocksQuery
             * @static
             * @param {casper.IBlocksQuery=} [properties] Properties to set
             * @returns {casper.BlocksQuery} BlocksQuery instance
             */
            BlocksQuery.create = function create(properties) {
                return new BlocksQuery(properties);
            };

            /**
             * Encodes the specified BlocksQuery message. Does not implicitly {@link casper.BlocksQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.BlocksQuery
             * @static
             * @param {casper.IBlocksQuery} message BlocksQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlocksQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.depth != null && message.hasOwnProperty("depth"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.depth);
                return writer;
            };

            /**
             * Encodes the specified BlocksQuery message, length delimited. Does not implicitly {@link casper.BlocksQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BlocksQuery
             * @static
             * @param {casper.IBlocksQuery} message BlocksQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlocksQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlocksQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BlocksQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BlocksQuery} BlocksQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlocksQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlocksQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.depth = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlocksQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BlocksQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BlocksQuery} BlocksQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlocksQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlocksQuery message.
             * @function verify
             * @memberof casper.BlocksQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlocksQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.depth != null && message.hasOwnProperty("depth"))
                    if (!$util.isInteger(message.depth))
                        return "depth: integer expected";
                return null;
            };

            /**
             * Creates a BlocksQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BlocksQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BlocksQuery} BlocksQuery
             */
            BlocksQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BlocksQuery)
                    return object;
                var message = new $root.casper.BlocksQuery();
                if (object.depth != null)
                    message.depth = object.depth | 0;
                return message;
            };

            /**
             * Creates a plain object from a BlocksQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BlocksQuery
             * @static
             * @param {casper.BlocksQuery} message BlocksQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlocksQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.depth = 0;
                if (message.depth != null && message.hasOwnProperty("depth"))
                    object.depth = message.depth;
                return object;
            };

            /**
             * Converts this BlocksQuery to JSON.
             * @function toJSON
             * @memberof casper.BlocksQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlocksQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlocksQuery;
        })();

        casper.BlocksQueryByHeight = (function() {

            /**
             * Properties of a BlocksQueryByHeight.
             * @memberof casper
             * @interface IBlocksQueryByHeight
             * @property {number|Long|null} [startBlockNumber] BlocksQueryByHeight startBlockNumber
             * @property {number|Long|null} [endBlockNumber] BlocksQueryByHeight endBlockNumber
             */

            /**
             * Constructs a new BlocksQueryByHeight.
             * @memberof casper
             * @classdesc Represents a BlocksQueryByHeight.
             * @implements IBlocksQueryByHeight
             * @constructor
             * @param {casper.IBlocksQueryByHeight=} [properties] Properties to set
             */
            function BlocksQueryByHeight(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlocksQueryByHeight startBlockNumber.
             * @member {number|Long} startBlockNumber
             * @memberof casper.BlocksQueryByHeight
             * @instance
             */
            BlocksQueryByHeight.prototype.startBlockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlocksQueryByHeight endBlockNumber.
             * @member {number|Long} endBlockNumber
             * @memberof casper.BlocksQueryByHeight
             * @instance
             */
            BlocksQueryByHeight.prototype.endBlockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new BlocksQueryByHeight instance using the specified properties.
             * @function create
             * @memberof casper.BlocksQueryByHeight
             * @static
             * @param {casper.IBlocksQueryByHeight=} [properties] Properties to set
             * @returns {casper.BlocksQueryByHeight} BlocksQueryByHeight instance
             */
            BlocksQueryByHeight.create = function create(properties) {
                return new BlocksQueryByHeight(properties);
            };

            /**
             * Encodes the specified BlocksQueryByHeight message. Does not implicitly {@link casper.BlocksQueryByHeight.verify|verify} messages.
             * @function encode
             * @memberof casper.BlocksQueryByHeight
             * @static
             * @param {casper.IBlocksQueryByHeight} message BlocksQueryByHeight message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlocksQueryByHeight.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.startBlockNumber != null && message.hasOwnProperty("startBlockNumber"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.startBlockNumber);
                if (message.endBlockNumber != null && message.hasOwnProperty("endBlockNumber"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.endBlockNumber);
                return writer;
            };

            /**
             * Encodes the specified BlocksQueryByHeight message, length delimited. Does not implicitly {@link casper.BlocksQueryByHeight.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BlocksQueryByHeight
             * @static
             * @param {casper.IBlocksQueryByHeight} message BlocksQueryByHeight message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlocksQueryByHeight.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlocksQueryByHeight message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BlocksQueryByHeight
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BlocksQueryByHeight} BlocksQueryByHeight
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlocksQueryByHeight.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlocksQueryByHeight();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.startBlockNumber = reader.int64();
                        break;
                    case 2:
                        message.endBlockNumber = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlocksQueryByHeight message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BlocksQueryByHeight
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BlocksQueryByHeight} BlocksQueryByHeight
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlocksQueryByHeight.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlocksQueryByHeight message.
             * @function verify
             * @memberof casper.BlocksQueryByHeight
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlocksQueryByHeight.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.startBlockNumber != null && message.hasOwnProperty("startBlockNumber"))
                    if (!$util.isInteger(message.startBlockNumber) && !(message.startBlockNumber && $util.isInteger(message.startBlockNumber.low) && $util.isInteger(message.startBlockNumber.high)))
                        return "startBlockNumber: integer|Long expected";
                if (message.endBlockNumber != null && message.hasOwnProperty("endBlockNumber"))
                    if (!$util.isInteger(message.endBlockNumber) && !(message.endBlockNumber && $util.isInteger(message.endBlockNumber.low) && $util.isInteger(message.endBlockNumber.high)))
                        return "endBlockNumber: integer|Long expected";
                return null;
            };

            /**
             * Creates a BlocksQueryByHeight message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BlocksQueryByHeight
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BlocksQueryByHeight} BlocksQueryByHeight
             */
            BlocksQueryByHeight.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BlocksQueryByHeight)
                    return object;
                var message = new $root.casper.BlocksQueryByHeight();
                if (object.startBlockNumber != null)
                    if ($util.Long)
                        (message.startBlockNumber = $util.Long.fromValue(object.startBlockNumber)).unsigned = false;
                    else if (typeof object.startBlockNumber === "string")
                        message.startBlockNumber = parseInt(object.startBlockNumber, 10);
                    else if (typeof object.startBlockNumber === "number")
                        message.startBlockNumber = object.startBlockNumber;
                    else if (typeof object.startBlockNumber === "object")
                        message.startBlockNumber = new $util.LongBits(object.startBlockNumber.low >>> 0, object.startBlockNumber.high >>> 0).toNumber();
                if (object.endBlockNumber != null)
                    if ($util.Long)
                        (message.endBlockNumber = $util.Long.fromValue(object.endBlockNumber)).unsigned = false;
                    else if (typeof object.endBlockNumber === "string")
                        message.endBlockNumber = parseInt(object.endBlockNumber, 10);
                    else if (typeof object.endBlockNumber === "number")
                        message.endBlockNumber = object.endBlockNumber;
                    else if (typeof object.endBlockNumber === "object")
                        message.endBlockNumber = new $util.LongBits(object.endBlockNumber.low >>> 0, object.endBlockNumber.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BlocksQueryByHeight message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BlocksQueryByHeight
             * @static
             * @param {casper.BlocksQueryByHeight} message BlocksQueryByHeight
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlocksQueryByHeight.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.startBlockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.startBlockNumber = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.endBlockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.endBlockNumber = options.longs === String ? "0" : 0;
                }
                if (message.startBlockNumber != null && message.hasOwnProperty("startBlockNumber"))
                    if (typeof message.startBlockNumber === "number")
                        object.startBlockNumber = options.longs === String ? String(message.startBlockNumber) : message.startBlockNumber;
                    else
                        object.startBlockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.startBlockNumber) : options.longs === Number ? new $util.LongBits(message.startBlockNumber.low >>> 0, message.startBlockNumber.high >>> 0).toNumber() : message.startBlockNumber;
                if (message.endBlockNumber != null && message.hasOwnProperty("endBlockNumber"))
                    if (typeof message.endBlockNumber === "number")
                        object.endBlockNumber = options.longs === String ? String(message.endBlockNumber) : message.endBlockNumber;
                    else
                        object.endBlockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.endBlockNumber) : options.longs === Number ? new $util.LongBits(message.endBlockNumber.low >>> 0, message.endBlockNumber.high >>> 0).toNumber() : message.endBlockNumber;
                return object;
            };

            /**
             * Converts this BlocksQueryByHeight to JSON.
             * @function toJSON
             * @memberof casper.BlocksQueryByHeight
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlocksQueryByHeight.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlocksQueryByHeight;
        })();

        casper.DataAtNameQuery = (function() {

            /**
             * Properties of a DataAtNameQuery.
             * @memberof casper
             * @interface IDataAtNameQuery
             * @property {number|null} [depth] DataAtNameQuery depth
             * @property {IPar|null} [name] DataAtNameQuery name
             */

            /**
             * Constructs a new DataAtNameQuery.
             * @memberof casper
             * @classdesc Represents a DataAtNameQuery.
             * @implements IDataAtNameQuery
             * @constructor
             * @param {casper.IDataAtNameQuery=} [properties] Properties to set
             */
            function DataAtNameQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DataAtNameQuery depth.
             * @member {number} depth
             * @memberof casper.DataAtNameQuery
             * @instance
             */
            DataAtNameQuery.prototype.depth = 0;

            /**
             * DataAtNameQuery name.
             * @member {IPar|null|undefined} name
             * @memberof casper.DataAtNameQuery
             * @instance
             */
            DataAtNameQuery.prototype.name = null;

            /**
             * Creates a new DataAtNameQuery instance using the specified properties.
             * @function create
             * @memberof casper.DataAtNameQuery
             * @static
             * @param {casper.IDataAtNameQuery=} [properties] Properties to set
             * @returns {casper.DataAtNameQuery} DataAtNameQuery instance
             */
            DataAtNameQuery.create = function create(properties) {
                return new DataAtNameQuery(properties);
            };

            /**
             * Encodes the specified DataAtNameQuery message. Does not implicitly {@link casper.DataAtNameQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.DataAtNameQuery
             * @static
             * @param {casper.IDataAtNameQuery} message DataAtNameQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DataAtNameQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.depth != null && message.hasOwnProperty("depth"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.depth);
                if (message.name != null && message.hasOwnProperty("name"))
                    $root.Par.encode(message.name, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified DataAtNameQuery message, length delimited. Does not implicitly {@link casper.DataAtNameQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.DataAtNameQuery
             * @static
             * @param {casper.IDataAtNameQuery} message DataAtNameQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DataAtNameQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DataAtNameQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.DataAtNameQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.DataAtNameQuery} DataAtNameQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DataAtNameQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.DataAtNameQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.depth = reader.int32();
                        break;
                    case 2:
                        message.name = $root.Par.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DataAtNameQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.DataAtNameQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.DataAtNameQuery} DataAtNameQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DataAtNameQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DataAtNameQuery message.
             * @function verify
             * @memberof casper.DataAtNameQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DataAtNameQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.depth != null && message.hasOwnProperty("depth"))
                    if (!$util.isInteger(message.depth))
                        return "depth: integer expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    var error = $root.Par.verify(message.name);
                    if (error)
                        return "name." + error;
                }
                return null;
            };

            /**
             * Creates a DataAtNameQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.DataAtNameQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.DataAtNameQuery} DataAtNameQuery
             */
            DataAtNameQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.DataAtNameQuery)
                    return object;
                var message = new $root.casper.DataAtNameQuery();
                if (object.depth != null)
                    message.depth = object.depth | 0;
                if (object.name != null) {
                    if (typeof object.name !== "object")
                        throw TypeError(".casper.DataAtNameQuery.name: object expected");
                    message.name = $root.Par.fromObject(object.name);
                }
                return message;
            };

            /**
             * Creates a plain object from a DataAtNameQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.DataAtNameQuery
             * @static
             * @param {casper.DataAtNameQuery} message DataAtNameQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DataAtNameQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.depth = 0;
                    object.name = null;
                }
                if (message.depth != null && message.hasOwnProperty("depth"))
                    object.depth = message.depth;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = $root.Par.toObject(message.name, options);
                return object;
            };

            /**
             * Converts this DataAtNameQuery to JSON.
             * @function toJSON
             * @memberof casper.DataAtNameQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DataAtNameQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DataAtNameQuery;
        })();

        casper.ContinuationAtNameQuery = (function() {

            /**
             * Properties of a ContinuationAtNameQuery.
             * @memberof casper
             * @interface IContinuationAtNameQuery
             * @property {number|null} [depth] ContinuationAtNameQuery depth
             * @property {Array.<IPar>|null} [names] ContinuationAtNameQuery names
             */

            /**
             * Constructs a new ContinuationAtNameQuery.
             * @memberof casper
             * @classdesc Represents a ContinuationAtNameQuery.
             * @implements IContinuationAtNameQuery
             * @constructor
             * @param {casper.IContinuationAtNameQuery=} [properties] Properties to set
             */
            function ContinuationAtNameQuery(properties) {
                this.names = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ContinuationAtNameQuery depth.
             * @member {number} depth
             * @memberof casper.ContinuationAtNameQuery
             * @instance
             */
            ContinuationAtNameQuery.prototype.depth = 0;

            /**
             * ContinuationAtNameQuery names.
             * @member {Array.<IPar>} names
             * @memberof casper.ContinuationAtNameQuery
             * @instance
             */
            ContinuationAtNameQuery.prototype.names = $util.emptyArray;

            /**
             * Creates a new ContinuationAtNameQuery instance using the specified properties.
             * @function create
             * @memberof casper.ContinuationAtNameQuery
             * @static
             * @param {casper.IContinuationAtNameQuery=} [properties] Properties to set
             * @returns {casper.ContinuationAtNameQuery} ContinuationAtNameQuery instance
             */
            ContinuationAtNameQuery.create = function create(properties) {
                return new ContinuationAtNameQuery(properties);
            };

            /**
             * Encodes the specified ContinuationAtNameQuery message. Does not implicitly {@link casper.ContinuationAtNameQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.ContinuationAtNameQuery
             * @static
             * @param {casper.IContinuationAtNameQuery} message ContinuationAtNameQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContinuationAtNameQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.depth != null && message.hasOwnProperty("depth"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.depth);
                if (message.names != null && message.names.length)
                    for (var i = 0; i < message.names.length; ++i)
                        $root.Par.encode(message.names[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ContinuationAtNameQuery message, length delimited. Does not implicitly {@link casper.ContinuationAtNameQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ContinuationAtNameQuery
             * @static
             * @param {casper.IContinuationAtNameQuery} message ContinuationAtNameQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContinuationAtNameQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ContinuationAtNameQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ContinuationAtNameQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ContinuationAtNameQuery} ContinuationAtNameQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContinuationAtNameQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ContinuationAtNameQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.depth = reader.int32();
                        break;
                    case 2:
                        if (!(message.names && message.names.length))
                            message.names = [];
                        message.names.push($root.Par.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ContinuationAtNameQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ContinuationAtNameQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ContinuationAtNameQuery} ContinuationAtNameQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContinuationAtNameQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ContinuationAtNameQuery message.
             * @function verify
             * @memberof casper.ContinuationAtNameQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ContinuationAtNameQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.depth != null && message.hasOwnProperty("depth"))
                    if (!$util.isInteger(message.depth))
                        return "depth: integer expected";
                if (message.names != null && message.hasOwnProperty("names")) {
                    if (!Array.isArray(message.names))
                        return "names: array expected";
                    for (var i = 0; i < message.names.length; ++i) {
                        var error = $root.Par.verify(message.names[i]);
                        if (error)
                            return "names." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ContinuationAtNameQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ContinuationAtNameQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ContinuationAtNameQuery} ContinuationAtNameQuery
             */
            ContinuationAtNameQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ContinuationAtNameQuery)
                    return object;
                var message = new $root.casper.ContinuationAtNameQuery();
                if (object.depth != null)
                    message.depth = object.depth | 0;
                if (object.names) {
                    if (!Array.isArray(object.names))
                        throw TypeError(".casper.ContinuationAtNameQuery.names: array expected");
                    message.names = [];
                    for (var i = 0; i < object.names.length; ++i) {
                        if (typeof object.names[i] !== "object")
                            throw TypeError(".casper.ContinuationAtNameQuery.names: object expected");
                        message.names[i] = $root.Par.fromObject(object.names[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ContinuationAtNameQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ContinuationAtNameQuery
             * @static
             * @param {casper.ContinuationAtNameQuery} message ContinuationAtNameQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ContinuationAtNameQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.names = [];
                if (options.defaults)
                    object.depth = 0;
                if (message.depth != null && message.hasOwnProperty("depth"))
                    object.depth = message.depth;
                if (message.names && message.names.length) {
                    object.names = [];
                    for (var j = 0; j < message.names.length; ++j)
                        object.names[j] = $root.Par.toObject(message.names[j], options);
                }
                return object;
            };

            /**
             * Converts this ContinuationAtNameQuery to JSON.
             * @function toJSON
             * @memberof casper.ContinuationAtNameQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ContinuationAtNameQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ContinuationAtNameQuery;
        })();

        casper.VisualizeDagQuery = (function() {

            /**
             * Properties of a VisualizeDagQuery.
             * @memberof casper
             * @interface IVisualizeDagQuery
             * @property {number|null} [depth] VisualizeDagQuery depth
             * @property {boolean|null} [showJustificationLines] VisualizeDagQuery showJustificationLines
             * @property {number|null} [startBlockNumber] VisualizeDagQuery startBlockNumber
             */

            /**
             * Constructs a new VisualizeDagQuery.
             * @memberof casper
             * @classdesc Represents a VisualizeDagQuery.
             * @implements IVisualizeDagQuery
             * @constructor
             * @param {casper.IVisualizeDagQuery=} [properties] Properties to set
             */
            function VisualizeDagQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VisualizeDagQuery depth.
             * @member {number} depth
             * @memberof casper.VisualizeDagQuery
             * @instance
             */
            VisualizeDagQuery.prototype.depth = 0;

            /**
             * VisualizeDagQuery showJustificationLines.
             * @member {boolean} showJustificationLines
             * @memberof casper.VisualizeDagQuery
             * @instance
             */
            VisualizeDagQuery.prototype.showJustificationLines = false;

            /**
             * VisualizeDagQuery startBlockNumber.
             * @member {number} startBlockNumber
             * @memberof casper.VisualizeDagQuery
             * @instance
             */
            VisualizeDagQuery.prototype.startBlockNumber = 0;

            /**
             * Creates a new VisualizeDagQuery instance using the specified properties.
             * @function create
             * @memberof casper.VisualizeDagQuery
             * @static
             * @param {casper.IVisualizeDagQuery=} [properties] Properties to set
             * @returns {casper.VisualizeDagQuery} VisualizeDagQuery instance
             */
            VisualizeDagQuery.create = function create(properties) {
                return new VisualizeDagQuery(properties);
            };

            /**
             * Encodes the specified VisualizeDagQuery message. Does not implicitly {@link casper.VisualizeDagQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.VisualizeDagQuery
             * @static
             * @param {casper.IVisualizeDagQuery} message VisualizeDagQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VisualizeDagQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.depth != null && message.hasOwnProperty("depth"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.depth);
                if (message.showJustificationLines != null && message.hasOwnProperty("showJustificationLines"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.showJustificationLines);
                if (message.startBlockNumber != null && message.hasOwnProperty("startBlockNumber"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.startBlockNumber);
                return writer;
            };

            /**
             * Encodes the specified VisualizeDagQuery message, length delimited. Does not implicitly {@link casper.VisualizeDagQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.VisualizeDagQuery
             * @static
             * @param {casper.IVisualizeDagQuery} message VisualizeDagQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VisualizeDagQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VisualizeDagQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.VisualizeDagQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.VisualizeDagQuery} VisualizeDagQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VisualizeDagQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.VisualizeDagQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.depth = reader.int32();
                        break;
                    case 2:
                        message.showJustificationLines = reader.bool();
                        break;
                    case 3:
                        message.startBlockNumber = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VisualizeDagQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.VisualizeDagQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.VisualizeDagQuery} VisualizeDagQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VisualizeDagQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VisualizeDagQuery message.
             * @function verify
             * @memberof casper.VisualizeDagQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VisualizeDagQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.depth != null && message.hasOwnProperty("depth"))
                    if (!$util.isInteger(message.depth))
                        return "depth: integer expected";
                if (message.showJustificationLines != null && message.hasOwnProperty("showJustificationLines"))
                    if (typeof message.showJustificationLines !== "boolean")
                        return "showJustificationLines: boolean expected";
                if (message.startBlockNumber != null && message.hasOwnProperty("startBlockNumber"))
                    if (!$util.isInteger(message.startBlockNumber))
                        return "startBlockNumber: integer expected";
                return null;
            };

            /**
             * Creates a VisualizeDagQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.VisualizeDagQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.VisualizeDagQuery} VisualizeDagQuery
             */
            VisualizeDagQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.VisualizeDagQuery)
                    return object;
                var message = new $root.casper.VisualizeDagQuery();
                if (object.depth != null)
                    message.depth = object.depth | 0;
                if (object.showJustificationLines != null)
                    message.showJustificationLines = Boolean(object.showJustificationLines);
                if (object.startBlockNumber != null)
                    message.startBlockNumber = object.startBlockNumber | 0;
                return message;
            };

            /**
             * Creates a plain object from a VisualizeDagQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.VisualizeDagQuery
             * @static
             * @param {casper.VisualizeDagQuery} message VisualizeDagQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VisualizeDagQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.depth = 0;
                    object.showJustificationLines = false;
                    object.startBlockNumber = 0;
                }
                if (message.depth != null && message.hasOwnProperty("depth"))
                    object.depth = message.depth;
                if (message.showJustificationLines != null && message.hasOwnProperty("showJustificationLines"))
                    object.showJustificationLines = message.showJustificationLines;
                if (message.startBlockNumber != null && message.hasOwnProperty("startBlockNumber"))
                    object.startBlockNumber = message.startBlockNumber;
                return object;
            };

            /**
             * Converts this VisualizeDagQuery to JSON.
             * @function toJSON
             * @memberof casper.VisualizeDagQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VisualizeDagQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VisualizeDagQuery;
        })();

        casper.MachineVerifyQuery = (function() {

            /**
             * Properties of a MachineVerifyQuery.
             * @memberof casper
             * @interface IMachineVerifyQuery
             */

            /**
             * Constructs a new MachineVerifyQuery.
             * @memberof casper
             * @classdesc Represents a MachineVerifyQuery.
             * @implements IMachineVerifyQuery
             * @constructor
             * @param {casper.IMachineVerifyQuery=} [properties] Properties to set
             */
            function MachineVerifyQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new MachineVerifyQuery instance using the specified properties.
             * @function create
             * @memberof casper.MachineVerifyQuery
             * @static
             * @param {casper.IMachineVerifyQuery=} [properties] Properties to set
             * @returns {casper.MachineVerifyQuery} MachineVerifyQuery instance
             */
            MachineVerifyQuery.create = function create(properties) {
                return new MachineVerifyQuery(properties);
            };

            /**
             * Encodes the specified MachineVerifyQuery message. Does not implicitly {@link casper.MachineVerifyQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.MachineVerifyQuery
             * @static
             * @param {casper.IMachineVerifyQuery} message MachineVerifyQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MachineVerifyQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified MachineVerifyQuery message, length delimited. Does not implicitly {@link casper.MachineVerifyQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.MachineVerifyQuery
             * @static
             * @param {casper.IMachineVerifyQuery} message MachineVerifyQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MachineVerifyQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MachineVerifyQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.MachineVerifyQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.MachineVerifyQuery} MachineVerifyQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MachineVerifyQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.MachineVerifyQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MachineVerifyQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.MachineVerifyQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.MachineVerifyQuery} MachineVerifyQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MachineVerifyQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MachineVerifyQuery message.
             * @function verify
             * @memberof casper.MachineVerifyQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MachineVerifyQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a MachineVerifyQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.MachineVerifyQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.MachineVerifyQuery} MachineVerifyQuery
             */
            MachineVerifyQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.MachineVerifyQuery)
                    return object;
                return new $root.casper.MachineVerifyQuery();
            };

            /**
             * Creates a plain object from a MachineVerifyQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.MachineVerifyQuery
             * @static
             * @param {casper.MachineVerifyQuery} message MachineVerifyQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MachineVerifyQuery.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this MachineVerifyQuery to JSON.
             * @function toJSON
             * @memberof casper.MachineVerifyQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MachineVerifyQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MachineVerifyQuery;
        })();

        casper.PrivateNamePreviewQuery = (function() {

            /**
             * Properties of a PrivateNamePreviewQuery.
             * @memberof casper
             * @interface IPrivateNamePreviewQuery
             * @property {Uint8Array|null} [user] PrivateNamePreviewQuery user
             * @property {number|Long|null} [timestamp] PrivateNamePreviewQuery timestamp
             * @property {number|null} [nameQty] PrivateNamePreviewQuery nameQty
             */

            /**
             * Constructs a new PrivateNamePreviewQuery.
             * @memberof casper
             * @classdesc Represents a PrivateNamePreviewQuery.
             * @implements IPrivateNamePreviewQuery
             * @constructor
             * @param {casper.IPrivateNamePreviewQuery=} [properties] Properties to set
             */
            function PrivateNamePreviewQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PrivateNamePreviewQuery user.
             * @member {Uint8Array} user
             * @memberof casper.PrivateNamePreviewQuery
             * @instance
             */
            PrivateNamePreviewQuery.prototype.user = $util.newBuffer([]);

            /**
             * PrivateNamePreviewQuery timestamp.
             * @member {number|Long} timestamp
             * @memberof casper.PrivateNamePreviewQuery
             * @instance
             */
            PrivateNamePreviewQuery.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PrivateNamePreviewQuery nameQty.
             * @member {number} nameQty
             * @memberof casper.PrivateNamePreviewQuery
             * @instance
             */
            PrivateNamePreviewQuery.prototype.nameQty = 0;

            /**
             * Creates a new PrivateNamePreviewQuery instance using the specified properties.
             * @function create
             * @memberof casper.PrivateNamePreviewQuery
             * @static
             * @param {casper.IPrivateNamePreviewQuery=} [properties] Properties to set
             * @returns {casper.PrivateNamePreviewQuery} PrivateNamePreviewQuery instance
             */
            PrivateNamePreviewQuery.create = function create(properties) {
                return new PrivateNamePreviewQuery(properties);
            };

            /**
             * Encodes the specified PrivateNamePreviewQuery message. Does not implicitly {@link casper.PrivateNamePreviewQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.PrivateNamePreviewQuery
             * @static
             * @param {casper.IPrivateNamePreviewQuery} message PrivateNamePreviewQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrivateNamePreviewQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.user != null && message.hasOwnProperty("user"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.user);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timestamp);
                if (message.nameQty != null && message.hasOwnProperty("nameQty"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nameQty);
                return writer;
            };

            /**
             * Encodes the specified PrivateNamePreviewQuery message, length delimited. Does not implicitly {@link casper.PrivateNamePreviewQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.PrivateNamePreviewQuery
             * @static
             * @param {casper.IPrivateNamePreviewQuery} message PrivateNamePreviewQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrivateNamePreviewQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PrivateNamePreviewQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.PrivateNamePreviewQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.PrivateNamePreviewQuery} PrivateNamePreviewQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrivateNamePreviewQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.PrivateNamePreviewQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.user = reader.bytes();
                        break;
                    case 2:
                        message.timestamp = reader.int64();
                        break;
                    case 3:
                        message.nameQty = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PrivateNamePreviewQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.PrivateNamePreviewQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.PrivateNamePreviewQuery} PrivateNamePreviewQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrivateNamePreviewQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PrivateNamePreviewQuery message.
             * @function verify
             * @memberof casper.PrivateNamePreviewQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PrivateNamePreviewQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.user != null && message.hasOwnProperty("user"))
                    if (!(message.user && typeof message.user.length === "number" || $util.isString(message.user)))
                        return "user: buffer expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                        return "timestamp: integer|Long expected";
                if (message.nameQty != null && message.hasOwnProperty("nameQty"))
                    if (!$util.isInteger(message.nameQty))
                        return "nameQty: integer expected";
                return null;
            };

            /**
             * Creates a PrivateNamePreviewQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.PrivateNamePreviewQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.PrivateNamePreviewQuery} PrivateNamePreviewQuery
             */
            PrivateNamePreviewQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.PrivateNamePreviewQuery)
                    return object;
                var message = new $root.casper.PrivateNamePreviewQuery();
                if (object.user != null)
                    if (typeof object.user === "string")
                        $util.base64.decode(object.user, message.user = $util.newBuffer($util.base64.length(object.user)), 0);
                    else if (object.user.length)
                        message.user = object.user;
                if (object.timestamp != null)
                    if ($util.Long)
                        (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                    else if (typeof object.timestamp === "string")
                        message.timestamp = parseInt(object.timestamp, 10);
                    else if (typeof object.timestamp === "number")
                        message.timestamp = object.timestamp;
                    else if (typeof object.timestamp === "object")
                        message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                if (object.nameQty != null)
                    message.nameQty = object.nameQty | 0;
                return message;
            };

            /**
             * Creates a plain object from a PrivateNamePreviewQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.PrivateNamePreviewQuery
             * @static
             * @param {casper.PrivateNamePreviewQuery} message PrivateNamePreviewQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PrivateNamePreviewQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.user = "";
                    else {
                        object.user = [];
                        if (options.bytes !== Array)
                            object.user = $util.newBuffer(object.user);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestamp = options.longs === String ? "0" : 0;
                    object.nameQty = 0;
                }
                if (message.user != null && message.hasOwnProperty("user"))
                    object.user = options.bytes === String ? $util.base64.encode(message.user, 0, message.user.length) : options.bytes === Array ? Array.prototype.slice.call(message.user) : message.user;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (typeof message.timestamp === "number")
                        object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                    else
                        object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                if (message.nameQty != null && message.hasOwnProperty("nameQty"))
                    object.nameQty = message.nameQty;
                return object;
            };

            /**
             * Converts this PrivateNamePreviewQuery to JSON.
             * @function toJSON
             * @memberof casper.PrivateNamePreviewQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PrivateNamePreviewQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PrivateNamePreviewQuery;
        })();

        casper.LastFinalizedBlockQuery = (function() {

            /**
             * Properties of a LastFinalizedBlockQuery.
             * @memberof casper
             * @interface ILastFinalizedBlockQuery
             */

            /**
             * Constructs a new LastFinalizedBlockQuery.
             * @memberof casper
             * @classdesc Represents a LastFinalizedBlockQuery.
             * @implements ILastFinalizedBlockQuery
             * @constructor
             * @param {casper.ILastFinalizedBlockQuery=} [properties] Properties to set
             */
            function LastFinalizedBlockQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new LastFinalizedBlockQuery instance using the specified properties.
             * @function create
             * @memberof casper.LastFinalizedBlockQuery
             * @static
             * @param {casper.ILastFinalizedBlockQuery=} [properties] Properties to set
             * @returns {casper.LastFinalizedBlockQuery} LastFinalizedBlockQuery instance
             */
            LastFinalizedBlockQuery.create = function create(properties) {
                return new LastFinalizedBlockQuery(properties);
            };

            /**
             * Encodes the specified LastFinalizedBlockQuery message. Does not implicitly {@link casper.LastFinalizedBlockQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.LastFinalizedBlockQuery
             * @static
             * @param {casper.ILastFinalizedBlockQuery} message LastFinalizedBlockQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LastFinalizedBlockQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified LastFinalizedBlockQuery message, length delimited. Does not implicitly {@link casper.LastFinalizedBlockQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.LastFinalizedBlockQuery
             * @static
             * @param {casper.ILastFinalizedBlockQuery} message LastFinalizedBlockQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LastFinalizedBlockQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LastFinalizedBlockQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.LastFinalizedBlockQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.LastFinalizedBlockQuery} LastFinalizedBlockQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LastFinalizedBlockQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.LastFinalizedBlockQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LastFinalizedBlockQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.LastFinalizedBlockQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.LastFinalizedBlockQuery} LastFinalizedBlockQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LastFinalizedBlockQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LastFinalizedBlockQuery message.
             * @function verify
             * @memberof casper.LastFinalizedBlockQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LastFinalizedBlockQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a LastFinalizedBlockQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.LastFinalizedBlockQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.LastFinalizedBlockQuery} LastFinalizedBlockQuery
             */
            LastFinalizedBlockQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.LastFinalizedBlockQuery)
                    return object;
                return new $root.casper.LastFinalizedBlockQuery();
            };

            /**
             * Creates a plain object from a LastFinalizedBlockQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.LastFinalizedBlockQuery
             * @static
             * @param {casper.LastFinalizedBlockQuery} message LastFinalizedBlockQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LastFinalizedBlockQuery.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this LastFinalizedBlockQuery to JSON.
             * @function toJSON
             * @memberof casper.LastFinalizedBlockQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LastFinalizedBlockQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LastFinalizedBlockQuery;
        })();

        casper.IsFinalizedQuery = (function() {

            /**
             * Properties of an IsFinalizedQuery.
             * @memberof casper
             * @interface IIsFinalizedQuery
             * @property {string|null} [hash] IsFinalizedQuery hash
             */

            /**
             * Constructs a new IsFinalizedQuery.
             * @memberof casper
             * @classdesc Represents an IsFinalizedQuery.
             * @implements IIsFinalizedQuery
             * @constructor
             * @param {casper.IIsFinalizedQuery=} [properties] Properties to set
             */
            function IsFinalizedQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * IsFinalizedQuery hash.
             * @member {string} hash
             * @memberof casper.IsFinalizedQuery
             * @instance
             */
            IsFinalizedQuery.prototype.hash = "";

            /**
             * Creates a new IsFinalizedQuery instance using the specified properties.
             * @function create
             * @memberof casper.IsFinalizedQuery
             * @static
             * @param {casper.IIsFinalizedQuery=} [properties] Properties to set
             * @returns {casper.IsFinalizedQuery} IsFinalizedQuery instance
             */
            IsFinalizedQuery.create = function create(properties) {
                return new IsFinalizedQuery(properties);
            };

            /**
             * Encodes the specified IsFinalizedQuery message. Does not implicitly {@link casper.IsFinalizedQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.IsFinalizedQuery
             * @static
             * @param {casper.IIsFinalizedQuery} message IsFinalizedQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IsFinalizedQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && message.hasOwnProperty("hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);
                return writer;
            };

            /**
             * Encodes the specified IsFinalizedQuery message, length delimited. Does not implicitly {@link casper.IsFinalizedQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.IsFinalizedQuery
             * @static
             * @param {casper.IIsFinalizedQuery} message IsFinalizedQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            IsFinalizedQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an IsFinalizedQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.IsFinalizedQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.IsFinalizedQuery} IsFinalizedQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IsFinalizedQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.IsFinalizedQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an IsFinalizedQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.IsFinalizedQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.IsFinalizedQuery} IsFinalizedQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            IsFinalizedQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an IsFinalizedQuery message.
             * @function verify
             * @memberof casper.IsFinalizedQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            IsFinalizedQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!$util.isString(message.hash))
                        return "hash: string expected";
                return null;
            };

            /**
             * Creates an IsFinalizedQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.IsFinalizedQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.IsFinalizedQuery} IsFinalizedQuery
             */
            IsFinalizedQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.IsFinalizedQuery)
                    return object;
                var message = new $root.casper.IsFinalizedQuery();
                if (object.hash != null)
                    message.hash = String(object.hash);
                return message;
            };

            /**
             * Creates a plain object from an IsFinalizedQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.IsFinalizedQuery
             * @static
             * @param {casper.IsFinalizedQuery} message IsFinalizedQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            IsFinalizedQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.hash = "";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = message.hash;
                return object;
            };

            /**
             * Converts this IsFinalizedQuery to JSON.
             * @function toJSON
             * @memberof casper.IsFinalizedQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            IsFinalizedQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return IsFinalizedQuery;
        })();

        casper.BondStatusQuery = (function() {

            /**
             * Properties of a BondStatusQuery.
             * @memberof casper
             * @interface IBondStatusQuery
             * @property {Uint8Array|null} [publicKey] BondStatusQuery publicKey
             */

            /**
             * Constructs a new BondStatusQuery.
             * @memberof casper
             * @classdesc Represents a BondStatusQuery.
             * @implements IBondStatusQuery
             * @constructor
             * @param {casper.IBondStatusQuery=} [properties] Properties to set
             */
            function BondStatusQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BondStatusQuery publicKey.
             * @member {Uint8Array} publicKey
             * @memberof casper.BondStatusQuery
             * @instance
             */
            BondStatusQuery.prototype.publicKey = $util.newBuffer([]);

            /**
             * Creates a new BondStatusQuery instance using the specified properties.
             * @function create
             * @memberof casper.BondStatusQuery
             * @static
             * @param {casper.IBondStatusQuery=} [properties] Properties to set
             * @returns {casper.BondStatusQuery} BondStatusQuery instance
             */
            BondStatusQuery.create = function create(properties) {
                return new BondStatusQuery(properties);
            };

            /**
             * Encodes the specified BondStatusQuery message. Does not implicitly {@link casper.BondStatusQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.BondStatusQuery
             * @static
             * @param {casper.IBondStatusQuery} message BondStatusQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BondStatusQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.publicKey);
                return writer;
            };

            /**
             * Encodes the specified BondStatusQuery message, length delimited. Does not implicitly {@link casper.BondStatusQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BondStatusQuery
             * @static
             * @param {casper.IBondStatusQuery} message BondStatusQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BondStatusQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BondStatusQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BondStatusQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BondStatusQuery} BondStatusQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BondStatusQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BondStatusQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.publicKey = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BondStatusQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BondStatusQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BondStatusQuery} BondStatusQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BondStatusQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BondStatusQuery message.
             * @function verify
             * @memberof casper.BondStatusQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BondStatusQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                    if (!(message.publicKey && typeof message.publicKey.length === "number" || $util.isString(message.publicKey)))
                        return "publicKey: buffer expected";
                return null;
            };

            /**
             * Creates a BondStatusQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BondStatusQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BondStatusQuery} BondStatusQuery
             */
            BondStatusQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BondStatusQuery)
                    return object;
                var message = new $root.casper.BondStatusQuery();
                if (object.publicKey != null)
                    if (typeof object.publicKey === "string")
                        $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);
                    else if (object.publicKey.length)
                        message.publicKey = object.publicKey;
                return message;
            };

            /**
             * Creates a plain object from a BondStatusQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BondStatusQuery
             * @static
             * @param {casper.BondStatusQuery} message BondStatusQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BondStatusQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.publicKey = "";
                    else {
                        object.publicKey = [];
                        if (options.bytes !== Array)
                            object.publicKey = $util.newBuffer(object.publicKey);
                    }
                if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                    object.publicKey = options.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;
                return object;
            };

            /**
             * Converts this BondStatusQuery to JSON.
             * @function toJSON
             * @memberof casper.BondStatusQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BondStatusQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BondStatusQuery;
        })();

        casper.ExploratoryDeployQuery = (function() {

            /**
             * Properties of an ExploratoryDeployQuery.
             * @memberof casper
             * @interface IExploratoryDeployQuery
             * @property {string|null} [term] ExploratoryDeployQuery term
             * @property {string|null} [blockHash] ExploratoryDeployQuery blockHash
             * @property {boolean|null} [usePreStateHash] ExploratoryDeployQuery usePreStateHash
             */

            /**
             * Constructs a new ExploratoryDeployQuery.
             * @memberof casper
             * @classdesc Represents an ExploratoryDeployQuery.
             * @implements IExploratoryDeployQuery
             * @constructor
             * @param {casper.IExploratoryDeployQuery=} [properties] Properties to set
             */
            function ExploratoryDeployQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExploratoryDeployQuery term.
             * @member {string} term
             * @memberof casper.ExploratoryDeployQuery
             * @instance
             */
            ExploratoryDeployQuery.prototype.term = "";

            /**
             * ExploratoryDeployQuery blockHash.
             * @member {string} blockHash
             * @memberof casper.ExploratoryDeployQuery
             * @instance
             */
            ExploratoryDeployQuery.prototype.blockHash = "";

            /**
             * ExploratoryDeployQuery usePreStateHash.
             * @member {boolean} usePreStateHash
             * @memberof casper.ExploratoryDeployQuery
             * @instance
             */
            ExploratoryDeployQuery.prototype.usePreStateHash = false;

            /**
             * Creates a new ExploratoryDeployQuery instance using the specified properties.
             * @function create
             * @memberof casper.ExploratoryDeployQuery
             * @static
             * @param {casper.IExploratoryDeployQuery=} [properties] Properties to set
             * @returns {casper.ExploratoryDeployQuery} ExploratoryDeployQuery instance
             */
            ExploratoryDeployQuery.create = function create(properties) {
                return new ExploratoryDeployQuery(properties);
            };

            /**
             * Encodes the specified ExploratoryDeployQuery message. Does not implicitly {@link casper.ExploratoryDeployQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.ExploratoryDeployQuery
             * @static
             * @param {casper.IExploratoryDeployQuery} message ExploratoryDeployQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExploratoryDeployQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.term != null && message.hasOwnProperty("term"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.term);
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.blockHash);
                if (message.usePreStateHash != null && message.hasOwnProperty("usePreStateHash"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.usePreStateHash);
                return writer;
            };

            /**
             * Encodes the specified ExploratoryDeployQuery message, length delimited. Does not implicitly {@link casper.ExploratoryDeployQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ExploratoryDeployQuery
             * @static
             * @param {casper.IExploratoryDeployQuery} message ExploratoryDeployQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExploratoryDeployQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExploratoryDeployQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ExploratoryDeployQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ExploratoryDeployQuery} ExploratoryDeployQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExploratoryDeployQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ExploratoryDeployQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.term = reader.string();
                        break;
                    case 2:
                        message.blockHash = reader.string();
                        break;
                    case 3:
                        message.usePreStateHash = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExploratoryDeployQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ExploratoryDeployQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ExploratoryDeployQuery} ExploratoryDeployQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExploratoryDeployQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExploratoryDeployQuery message.
             * @function verify
             * @memberof casper.ExploratoryDeployQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExploratoryDeployQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.term != null && message.hasOwnProperty("term"))
                    if (!$util.isString(message.term))
                        return "term: string expected";
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    if (!$util.isString(message.blockHash))
                        return "blockHash: string expected";
                if (message.usePreStateHash != null && message.hasOwnProperty("usePreStateHash"))
                    if (typeof message.usePreStateHash !== "boolean")
                        return "usePreStateHash: boolean expected";
                return null;
            };

            /**
             * Creates an ExploratoryDeployQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ExploratoryDeployQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ExploratoryDeployQuery} ExploratoryDeployQuery
             */
            ExploratoryDeployQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ExploratoryDeployQuery)
                    return object;
                var message = new $root.casper.ExploratoryDeployQuery();
                if (object.term != null)
                    message.term = String(object.term);
                if (object.blockHash != null)
                    message.blockHash = String(object.blockHash);
                if (object.usePreStateHash != null)
                    message.usePreStateHash = Boolean(object.usePreStateHash);
                return message;
            };

            /**
             * Creates a plain object from an ExploratoryDeployQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ExploratoryDeployQuery
             * @static
             * @param {casper.ExploratoryDeployQuery} message ExploratoryDeployQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExploratoryDeployQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.term = "";
                    object.blockHash = "";
                    object.usePreStateHash = false;
                }
                if (message.term != null && message.hasOwnProperty("term"))
                    object.term = message.term;
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    object.blockHash = message.blockHash;
                if (message.usePreStateHash != null && message.hasOwnProperty("usePreStateHash"))
                    object.usePreStateHash = message.usePreStateHash;
                return object;
            };

            /**
             * Converts this ExploratoryDeployQuery to JSON.
             * @function toJSON
             * @memberof casper.ExploratoryDeployQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExploratoryDeployQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExploratoryDeployQuery;
        })();

        casper.BondInfo = (function() {

            /**
             * Properties of a BondInfo.
             * @memberof casper
             * @interface IBondInfo
             * @property {string|null} [validator] BondInfo validator
             * @property {number|Long|null} [stake] BondInfo stake
             */

            /**
             * Constructs a new BondInfo.
             * @memberof casper
             * @classdesc Represents a BondInfo.
             * @implements IBondInfo
             * @constructor
             * @param {casper.IBondInfo=} [properties] Properties to set
             */
            function BondInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BondInfo validator.
             * @member {string} validator
             * @memberof casper.BondInfo
             * @instance
             */
            BondInfo.prototype.validator = "";

            /**
             * BondInfo stake.
             * @member {number|Long} stake
             * @memberof casper.BondInfo
             * @instance
             */
            BondInfo.prototype.stake = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new BondInfo instance using the specified properties.
             * @function create
             * @memberof casper.BondInfo
             * @static
             * @param {casper.IBondInfo=} [properties] Properties to set
             * @returns {casper.BondInfo} BondInfo instance
             */
            BondInfo.create = function create(properties) {
                return new BondInfo(properties);
            };

            /**
             * Encodes the specified BondInfo message. Does not implicitly {@link casper.BondInfo.verify|verify} messages.
             * @function encode
             * @memberof casper.BondInfo
             * @static
             * @param {casper.IBondInfo} message BondInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BondInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator != null && message.hasOwnProperty("validator"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator);
                if (message.stake != null && message.hasOwnProperty("stake"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.stake);
                return writer;
            };

            /**
             * Encodes the specified BondInfo message, length delimited. Does not implicitly {@link casper.BondInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BondInfo
             * @static
             * @param {casper.IBondInfo} message BondInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BondInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BondInfo message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BondInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BondInfo} BondInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BondInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BondInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator = reader.string();
                        break;
                    case 2:
                        message.stake = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BondInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BondInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BondInfo} BondInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BondInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BondInfo message.
             * @function verify
             * @memberof casper.BondInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BondInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator != null && message.hasOwnProperty("validator"))
                    if (!$util.isString(message.validator))
                        return "validator: string expected";
                if (message.stake != null && message.hasOwnProperty("stake"))
                    if (!$util.isInteger(message.stake) && !(message.stake && $util.isInteger(message.stake.low) && $util.isInteger(message.stake.high)))
                        return "stake: integer|Long expected";
                return null;
            };

            /**
             * Creates a BondInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BondInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BondInfo} BondInfo
             */
            BondInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BondInfo)
                    return object;
                var message = new $root.casper.BondInfo();
                if (object.validator != null)
                    message.validator = String(object.validator);
                if (object.stake != null)
                    if ($util.Long)
                        (message.stake = $util.Long.fromValue(object.stake)).unsigned = false;
                    else if (typeof object.stake === "string")
                        message.stake = parseInt(object.stake, 10);
                    else if (typeof object.stake === "number")
                        message.stake = object.stake;
                    else if (typeof object.stake === "object")
                        message.stake = new $util.LongBits(object.stake.low >>> 0, object.stake.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BondInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BondInfo
             * @static
             * @param {casper.BondInfo} message BondInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BondInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.validator = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.stake = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.stake = options.longs === String ? "0" : 0;
                }
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = message.validator;
                if (message.stake != null && message.hasOwnProperty("stake"))
                    if (typeof message.stake === "number")
                        object.stake = options.longs === String ? String(message.stake) : message.stake;
                    else
                        object.stake = options.longs === String ? $util.Long.prototype.toString.call(message.stake) : options.longs === Number ? new $util.LongBits(message.stake.low >>> 0, message.stake.high >>> 0).toNumber() : message.stake;
                return object;
            };

            /**
             * Converts this BondInfo to JSON.
             * @function toJSON
             * @memberof casper.BondInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BondInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BondInfo;
        })();

        casper.JustificationInfo = (function() {

            /**
             * Properties of a JustificationInfo.
             * @memberof casper
             * @interface IJustificationInfo
             * @property {string|null} [validator] JustificationInfo validator
             * @property {string|null} [latestBlockHash] JustificationInfo latestBlockHash
             */

            /**
             * Constructs a new JustificationInfo.
             * @memberof casper
             * @classdesc Represents a JustificationInfo.
             * @implements IJustificationInfo
             * @constructor
             * @param {casper.IJustificationInfo=} [properties] Properties to set
             */
            function JustificationInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * JustificationInfo validator.
             * @member {string} validator
             * @memberof casper.JustificationInfo
             * @instance
             */
            JustificationInfo.prototype.validator = "";

            /**
             * JustificationInfo latestBlockHash.
             * @member {string} latestBlockHash
             * @memberof casper.JustificationInfo
             * @instance
             */
            JustificationInfo.prototype.latestBlockHash = "";

            /**
             * Creates a new JustificationInfo instance using the specified properties.
             * @function create
             * @memberof casper.JustificationInfo
             * @static
             * @param {casper.IJustificationInfo=} [properties] Properties to set
             * @returns {casper.JustificationInfo} JustificationInfo instance
             */
            JustificationInfo.create = function create(properties) {
                return new JustificationInfo(properties);
            };

            /**
             * Encodes the specified JustificationInfo message. Does not implicitly {@link casper.JustificationInfo.verify|verify} messages.
             * @function encode
             * @memberof casper.JustificationInfo
             * @static
             * @param {casper.IJustificationInfo} message JustificationInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JustificationInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validator != null && message.hasOwnProperty("validator"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator);
                if (message.latestBlockHash != null && message.hasOwnProperty("latestBlockHash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.latestBlockHash);
                return writer;
            };

            /**
             * Encodes the specified JustificationInfo message, length delimited. Does not implicitly {@link casper.JustificationInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.JustificationInfo
             * @static
             * @param {casper.IJustificationInfo} message JustificationInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            JustificationInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a JustificationInfo message from the specified reader or buffer.
             * @function decode
             * @memberof casper.JustificationInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.JustificationInfo} JustificationInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JustificationInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.JustificationInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.validator = reader.string();
                        break;
                    case 2:
                        message.latestBlockHash = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a JustificationInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.JustificationInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.JustificationInfo} JustificationInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            JustificationInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a JustificationInfo message.
             * @function verify
             * @memberof casper.JustificationInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            JustificationInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validator != null && message.hasOwnProperty("validator"))
                    if (!$util.isString(message.validator))
                        return "validator: string expected";
                if (message.latestBlockHash != null && message.hasOwnProperty("latestBlockHash"))
                    if (!$util.isString(message.latestBlockHash))
                        return "latestBlockHash: string expected";
                return null;
            };

            /**
             * Creates a JustificationInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.JustificationInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.JustificationInfo} JustificationInfo
             */
            JustificationInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.JustificationInfo)
                    return object;
                var message = new $root.casper.JustificationInfo();
                if (object.validator != null)
                    message.validator = String(object.validator);
                if (object.latestBlockHash != null)
                    message.latestBlockHash = String(object.latestBlockHash);
                return message;
            };

            /**
             * Creates a plain object from a JustificationInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.JustificationInfo
             * @static
             * @param {casper.JustificationInfo} message JustificationInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            JustificationInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.validator = "";
                    object.latestBlockHash = "";
                }
                if (message.validator != null && message.hasOwnProperty("validator"))
                    object.validator = message.validator;
                if (message.latestBlockHash != null && message.hasOwnProperty("latestBlockHash"))
                    object.latestBlockHash = message.latestBlockHash;
                return object;
            };

            /**
             * Converts this JustificationInfo to JSON.
             * @function toJSON
             * @memberof casper.JustificationInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            JustificationInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return JustificationInfo;
        })();

        casper.DeployInfo = (function() {

            /**
             * Properties of a DeployInfo.
             * @memberof casper
             * @interface IDeployInfo
             * @property {string|null} [deployer] DeployInfo deployer
             * @property {string|null} [term] DeployInfo term
             * @property {number|Long|null} [timestamp] DeployInfo timestamp
             * @property {string|null} [sig] DeployInfo sig
             * @property {string|null} [sigAlgorithm] DeployInfo sigAlgorithm
             * @property {number|Long|null} [phloPrice] DeployInfo phloPrice
             * @property {number|Long|null} [phloLimit] DeployInfo phloLimit
             * @property {number|Long|null} [validAfterBlockNumber] DeployInfo validAfterBlockNumber
             * @property {number|Long|null} [cost] DeployInfo cost
             * @property {boolean|null} [errored] DeployInfo errored
             * @property {string|null} [systemDeployError] DeployInfo systemDeployError
             */

            /**
             * Constructs a new DeployInfo.
             * @memberof casper
             * @classdesc Represents a DeployInfo.
             * @implements IDeployInfo
             * @constructor
             * @param {casper.IDeployInfo=} [properties] Properties to set
             */
            function DeployInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DeployInfo deployer.
             * @member {string} deployer
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.deployer = "";

            /**
             * DeployInfo term.
             * @member {string} term
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.term = "";

            /**
             * DeployInfo timestamp.
             * @member {number|Long} timestamp
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DeployInfo sig.
             * @member {string} sig
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.sig = "";

            /**
             * DeployInfo sigAlgorithm.
             * @member {string} sigAlgorithm
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.sigAlgorithm = "";

            /**
             * DeployInfo phloPrice.
             * @member {number|Long} phloPrice
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.phloPrice = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DeployInfo phloLimit.
             * @member {number|Long} phloLimit
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.phloLimit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DeployInfo validAfterBlockNumber.
             * @member {number|Long} validAfterBlockNumber
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.validAfterBlockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DeployInfo cost.
             * @member {number|Long} cost
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.cost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * DeployInfo errored.
             * @member {boolean} errored
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.errored = false;

            /**
             * DeployInfo systemDeployError.
             * @member {string} systemDeployError
             * @memberof casper.DeployInfo
             * @instance
             */
            DeployInfo.prototype.systemDeployError = "";

            /**
             * Creates a new DeployInfo instance using the specified properties.
             * @function create
             * @memberof casper.DeployInfo
             * @static
             * @param {casper.IDeployInfo=} [properties] Properties to set
             * @returns {casper.DeployInfo} DeployInfo instance
             */
            DeployInfo.create = function create(properties) {
                return new DeployInfo(properties);
            };

            /**
             * Encodes the specified DeployInfo message. Does not implicitly {@link casper.DeployInfo.verify|verify} messages.
             * @function encode
             * @memberof casper.DeployInfo
             * @static
             * @param {casper.IDeployInfo} message DeployInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeployInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deployer != null && message.hasOwnProperty("deployer"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.deployer);
                if (message.term != null && message.hasOwnProperty("term"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.term);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);
                if (message.sig != null && message.hasOwnProperty("sig"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.sig);
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.sigAlgorithm);
                if (message.phloPrice != null && message.hasOwnProperty("phloPrice"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.phloPrice);
                if (message.phloLimit != null && message.hasOwnProperty("phloLimit"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.phloLimit);
                if (message.validAfterBlockNumber != null && message.hasOwnProperty("validAfterBlockNumber"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.validAfterBlockNumber);
                if (message.cost != null && message.hasOwnProperty("cost"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.cost);
                if (message.errored != null && message.hasOwnProperty("errored"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.errored);
                if (message.systemDeployError != null && message.hasOwnProperty("systemDeployError"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.systemDeployError);
                return writer;
            };

            /**
             * Encodes the specified DeployInfo message, length delimited. Does not implicitly {@link casper.DeployInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.DeployInfo
             * @static
             * @param {casper.IDeployInfo} message DeployInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeployInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DeployInfo message from the specified reader or buffer.
             * @function decode
             * @memberof casper.DeployInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.DeployInfo} DeployInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeployInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.DeployInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deployer = reader.string();
                        break;
                    case 2:
                        message.term = reader.string();
                        break;
                    case 3:
                        message.timestamp = reader.int64();
                        break;
                    case 4:
                        message.sig = reader.string();
                        break;
                    case 5:
                        message.sigAlgorithm = reader.string();
                        break;
                    case 7:
                        message.phloPrice = reader.int64();
                        break;
                    case 8:
                        message.phloLimit = reader.int64();
                        break;
                    case 9:
                        message.validAfterBlockNumber = reader.int64();
                        break;
                    case 10:
                        message.cost = reader.uint64();
                        break;
                    case 11:
                        message.errored = reader.bool();
                        break;
                    case 12:
                        message.systemDeployError = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DeployInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.DeployInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.DeployInfo} DeployInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeployInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DeployInfo message.
             * @function verify
             * @memberof casper.DeployInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DeployInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deployer != null && message.hasOwnProperty("deployer"))
                    if (!$util.isString(message.deployer))
                        return "deployer: string expected";
                if (message.term != null && message.hasOwnProperty("term"))
                    if (!$util.isString(message.term))
                        return "term: string expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                        return "timestamp: integer|Long expected";
                if (message.sig != null && message.hasOwnProperty("sig"))
                    if (!$util.isString(message.sig))
                        return "sig: string expected";
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    if (!$util.isString(message.sigAlgorithm))
                        return "sigAlgorithm: string expected";
                if (message.phloPrice != null && message.hasOwnProperty("phloPrice"))
                    if (!$util.isInteger(message.phloPrice) && !(message.phloPrice && $util.isInteger(message.phloPrice.low) && $util.isInteger(message.phloPrice.high)))
                        return "phloPrice: integer|Long expected";
                if (message.phloLimit != null && message.hasOwnProperty("phloLimit"))
                    if (!$util.isInteger(message.phloLimit) && !(message.phloLimit && $util.isInteger(message.phloLimit.low) && $util.isInteger(message.phloLimit.high)))
                        return "phloLimit: integer|Long expected";
                if (message.validAfterBlockNumber != null && message.hasOwnProperty("validAfterBlockNumber"))
                    if (!$util.isInteger(message.validAfterBlockNumber) && !(message.validAfterBlockNumber && $util.isInteger(message.validAfterBlockNumber.low) && $util.isInteger(message.validAfterBlockNumber.high)))
                        return "validAfterBlockNumber: integer|Long expected";
                if (message.cost != null && message.hasOwnProperty("cost"))
                    if (!$util.isInteger(message.cost) && !(message.cost && $util.isInteger(message.cost.low) && $util.isInteger(message.cost.high)))
                        return "cost: integer|Long expected";
                if (message.errored != null && message.hasOwnProperty("errored"))
                    if (typeof message.errored !== "boolean")
                        return "errored: boolean expected";
                if (message.systemDeployError != null && message.hasOwnProperty("systemDeployError"))
                    if (!$util.isString(message.systemDeployError))
                        return "systemDeployError: string expected";
                return null;
            };

            /**
             * Creates a DeployInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.DeployInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.DeployInfo} DeployInfo
             */
            DeployInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.DeployInfo)
                    return object;
                var message = new $root.casper.DeployInfo();
                if (object.deployer != null)
                    message.deployer = String(object.deployer);
                if (object.term != null)
                    message.term = String(object.term);
                if (object.timestamp != null)
                    if ($util.Long)
                        (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                    else if (typeof object.timestamp === "string")
                        message.timestamp = parseInt(object.timestamp, 10);
                    else if (typeof object.timestamp === "number")
                        message.timestamp = object.timestamp;
                    else if (typeof object.timestamp === "object")
                        message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                if (object.sig != null)
                    message.sig = String(object.sig);
                if (object.sigAlgorithm != null)
                    message.sigAlgorithm = String(object.sigAlgorithm);
                if (object.phloPrice != null)
                    if ($util.Long)
                        (message.phloPrice = $util.Long.fromValue(object.phloPrice)).unsigned = false;
                    else if (typeof object.phloPrice === "string")
                        message.phloPrice = parseInt(object.phloPrice, 10);
                    else if (typeof object.phloPrice === "number")
                        message.phloPrice = object.phloPrice;
                    else if (typeof object.phloPrice === "object")
                        message.phloPrice = new $util.LongBits(object.phloPrice.low >>> 0, object.phloPrice.high >>> 0).toNumber();
                if (object.phloLimit != null)
                    if ($util.Long)
                        (message.phloLimit = $util.Long.fromValue(object.phloLimit)).unsigned = false;
                    else if (typeof object.phloLimit === "string")
                        message.phloLimit = parseInt(object.phloLimit, 10);
                    else if (typeof object.phloLimit === "number")
                        message.phloLimit = object.phloLimit;
                    else if (typeof object.phloLimit === "object")
                        message.phloLimit = new $util.LongBits(object.phloLimit.low >>> 0, object.phloLimit.high >>> 0).toNumber();
                if (object.validAfterBlockNumber != null)
                    if ($util.Long)
                        (message.validAfterBlockNumber = $util.Long.fromValue(object.validAfterBlockNumber)).unsigned = false;
                    else if (typeof object.validAfterBlockNumber === "string")
                        message.validAfterBlockNumber = parseInt(object.validAfterBlockNumber, 10);
                    else if (typeof object.validAfterBlockNumber === "number")
                        message.validAfterBlockNumber = object.validAfterBlockNumber;
                    else if (typeof object.validAfterBlockNumber === "object")
                        message.validAfterBlockNumber = new $util.LongBits(object.validAfterBlockNumber.low >>> 0, object.validAfterBlockNumber.high >>> 0).toNumber();
                if (object.cost != null)
                    if ($util.Long)
                        (message.cost = $util.Long.fromValue(object.cost)).unsigned = true;
                    else if (typeof object.cost === "string")
                        message.cost = parseInt(object.cost, 10);
                    else if (typeof object.cost === "number")
                        message.cost = object.cost;
                    else if (typeof object.cost === "object")
                        message.cost = new $util.LongBits(object.cost.low >>> 0, object.cost.high >>> 0).toNumber(true);
                if (object.errored != null)
                    message.errored = Boolean(object.errored);
                if (object.systemDeployError != null)
                    message.systemDeployError = String(object.systemDeployError);
                return message;
            };

            /**
             * Creates a plain object from a DeployInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.DeployInfo
             * @static
             * @param {casper.DeployInfo} message DeployInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DeployInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.deployer = "";
                    object.term = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestamp = options.longs === String ? "0" : 0;
                    object.sig = "";
                    object.sigAlgorithm = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.phloPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.phloPrice = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.phloLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.phloLimit = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.validAfterBlockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.validAfterBlockNumber = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.cost = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.cost = options.longs === String ? "0" : 0;
                    object.errored = false;
                    object.systemDeployError = "";
                }
                if (message.deployer != null && message.hasOwnProperty("deployer"))
                    object.deployer = message.deployer;
                if (message.term != null && message.hasOwnProperty("term"))
                    object.term = message.term;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (typeof message.timestamp === "number")
                        object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                    else
                        object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                if (message.sig != null && message.hasOwnProperty("sig"))
                    object.sig = message.sig;
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    object.sigAlgorithm = message.sigAlgorithm;
                if (message.phloPrice != null && message.hasOwnProperty("phloPrice"))
                    if (typeof message.phloPrice === "number")
                        object.phloPrice = options.longs === String ? String(message.phloPrice) : message.phloPrice;
                    else
                        object.phloPrice = options.longs === String ? $util.Long.prototype.toString.call(message.phloPrice) : options.longs === Number ? new $util.LongBits(message.phloPrice.low >>> 0, message.phloPrice.high >>> 0).toNumber() : message.phloPrice;
                if (message.phloLimit != null && message.hasOwnProperty("phloLimit"))
                    if (typeof message.phloLimit === "number")
                        object.phloLimit = options.longs === String ? String(message.phloLimit) : message.phloLimit;
                    else
                        object.phloLimit = options.longs === String ? $util.Long.prototype.toString.call(message.phloLimit) : options.longs === Number ? new $util.LongBits(message.phloLimit.low >>> 0, message.phloLimit.high >>> 0).toNumber() : message.phloLimit;
                if (message.validAfterBlockNumber != null && message.hasOwnProperty("validAfterBlockNumber"))
                    if (typeof message.validAfterBlockNumber === "number")
                        object.validAfterBlockNumber = options.longs === String ? String(message.validAfterBlockNumber) : message.validAfterBlockNumber;
                    else
                        object.validAfterBlockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.validAfterBlockNumber) : options.longs === Number ? new $util.LongBits(message.validAfterBlockNumber.low >>> 0, message.validAfterBlockNumber.high >>> 0).toNumber() : message.validAfterBlockNumber;
                if (message.cost != null && message.hasOwnProperty("cost"))
                    if (typeof message.cost === "number")
                        object.cost = options.longs === String ? String(message.cost) : message.cost;
                    else
                        object.cost = options.longs === String ? $util.Long.prototype.toString.call(message.cost) : options.longs === Number ? new $util.LongBits(message.cost.low >>> 0, message.cost.high >>> 0).toNumber(true) : message.cost;
                if (message.errored != null && message.hasOwnProperty("errored"))
                    object.errored = message.errored;
                if (message.systemDeployError != null && message.hasOwnProperty("systemDeployError"))
                    object.systemDeployError = message.systemDeployError;
                return object;
            };

            /**
             * Converts this DeployInfo to JSON.
             * @function toJSON
             * @memberof casper.DeployInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DeployInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DeployInfo;
        })();

        casper.LightBlockInfo = (function() {

            /**
             * Properties of a LightBlockInfo.
             * @memberof casper
             * @interface ILightBlockInfo
             * @property {string|null} [blockHash] LightBlockInfo blockHash
             * @property {string|null} [sender] LightBlockInfo sender
             * @property {number|Long|null} [seqNum] LightBlockInfo seqNum
             * @property {string|null} [sig] LightBlockInfo sig
             * @property {string|null} [sigAlgorithm] LightBlockInfo sigAlgorithm
             * @property {string|null} [shardId] LightBlockInfo shardId
             * @property {Uint8Array|null} [extraBytes] LightBlockInfo extraBytes
             * @property {number|Long|null} [version] LightBlockInfo version
             * @property {number|Long|null} [timestamp] LightBlockInfo timestamp
             * @property {Uint8Array|null} [headerExtraBytes] LightBlockInfo headerExtraBytes
             * @property {Array.<string>|null} [parentsHashList] LightBlockInfo parentsHashList
             * @property {number|Long|null} [blockNumber] LightBlockInfo blockNumber
             * @property {string|null} [preStateHash] LightBlockInfo preStateHash
             * @property {string|null} [postStateHash] LightBlockInfo postStateHash
             * @property {Uint8Array|null} [bodyExtraBytes] LightBlockInfo bodyExtraBytes
             * @property {Array.<casper.IBondInfo>|null} [bonds] LightBlockInfo bonds
             * @property {string|null} [blockSize] LightBlockInfo blockSize
             * @property {number|null} [deployCount] LightBlockInfo deployCount
             * @property {number|null} [faultTolerance] LightBlockInfo faultTolerance
             * @property {Array.<casper.IJustificationInfo>|null} [justifications] LightBlockInfo justifications
             */

            /**
             * Constructs a new LightBlockInfo.
             * @memberof casper
             * @classdesc Represents a LightBlockInfo.
             * @implements ILightBlockInfo
             * @constructor
             * @param {casper.ILightBlockInfo=} [properties] Properties to set
             */
            function LightBlockInfo(properties) {
                this.parentsHashList = [];
                this.bonds = [];
                this.justifications = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LightBlockInfo blockHash.
             * @member {string} blockHash
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.blockHash = "";

            /**
             * LightBlockInfo sender.
             * @member {string} sender
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.sender = "";

            /**
             * LightBlockInfo seqNum.
             * @member {number|Long} seqNum
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.seqNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LightBlockInfo sig.
             * @member {string} sig
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.sig = "";

            /**
             * LightBlockInfo sigAlgorithm.
             * @member {string} sigAlgorithm
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.sigAlgorithm = "";

            /**
             * LightBlockInfo shardId.
             * @member {string} shardId
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.shardId = "";

            /**
             * LightBlockInfo extraBytes.
             * @member {Uint8Array} extraBytes
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.extraBytes = $util.newBuffer([]);

            /**
             * LightBlockInfo version.
             * @member {number|Long} version
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LightBlockInfo timestamp.
             * @member {number|Long} timestamp
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LightBlockInfo headerExtraBytes.
             * @member {Uint8Array} headerExtraBytes
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.headerExtraBytes = $util.newBuffer([]);

            /**
             * LightBlockInfo parentsHashList.
             * @member {Array.<string>} parentsHashList
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.parentsHashList = $util.emptyArray;

            /**
             * LightBlockInfo blockNumber.
             * @member {number|Long} blockNumber
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.blockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LightBlockInfo preStateHash.
             * @member {string} preStateHash
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.preStateHash = "";

            /**
             * LightBlockInfo postStateHash.
             * @member {string} postStateHash
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.postStateHash = "";

            /**
             * LightBlockInfo bodyExtraBytes.
             * @member {Uint8Array} bodyExtraBytes
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.bodyExtraBytes = $util.newBuffer([]);

            /**
             * LightBlockInfo bonds.
             * @member {Array.<casper.IBondInfo>} bonds
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.bonds = $util.emptyArray;

            /**
             * LightBlockInfo blockSize.
             * @member {string} blockSize
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.blockSize = "";

            /**
             * LightBlockInfo deployCount.
             * @member {number} deployCount
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.deployCount = 0;

            /**
             * LightBlockInfo faultTolerance.
             * @member {number} faultTolerance
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.faultTolerance = 0;

            /**
             * LightBlockInfo justifications.
             * @member {Array.<casper.IJustificationInfo>} justifications
             * @memberof casper.LightBlockInfo
             * @instance
             */
            LightBlockInfo.prototype.justifications = $util.emptyArray;

            /**
             * Creates a new LightBlockInfo instance using the specified properties.
             * @function create
             * @memberof casper.LightBlockInfo
             * @static
             * @param {casper.ILightBlockInfo=} [properties] Properties to set
             * @returns {casper.LightBlockInfo} LightBlockInfo instance
             */
            LightBlockInfo.create = function create(properties) {
                return new LightBlockInfo(properties);
            };

            /**
             * Encodes the specified LightBlockInfo message. Does not implicitly {@link casper.LightBlockInfo.verify|verify} messages.
             * @function encode
             * @memberof casper.LightBlockInfo
             * @static
             * @param {casper.ILightBlockInfo} message LightBlockInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LightBlockInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.blockHash);
                if (message.sender != null && message.hasOwnProperty("sender"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.sender);
                if (message.seqNum != null && message.hasOwnProperty("seqNum"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.seqNum);
                if (message.sig != null && message.hasOwnProperty("sig"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.sig);
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.sigAlgorithm);
                if (message.shardId != null && message.hasOwnProperty("shardId"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.shardId);
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.extraBytes);
                if (message.version != null && message.hasOwnProperty("version"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.version);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.timestamp);
                if (message.headerExtraBytes != null && message.hasOwnProperty("headerExtraBytes"))
                    writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.headerExtraBytes);
                if (message.parentsHashList != null && message.parentsHashList.length)
                    for (var i = 0; i < message.parentsHashList.length; ++i)
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.parentsHashList[i]);
                if (message.blockNumber != null && message.hasOwnProperty("blockNumber"))
                    writer.uint32(/* id 12, wireType 0 =*/96).int64(message.blockNumber);
                if (message.preStateHash != null && message.hasOwnProperty("preStateHash"))
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.preStateHash);
                if (message.postStateHash != null && message.hasOwnProperty("postStateHash"))
                    writer.uint32(/* id 14, wireType 2 =*/114).string(message.postStateHash);
                if (message.bodyExtraBytes != null && message.hasOwnProperty("bodyExtraBytes"))
                    writer.uint32(/* id 15, wireType 2 =*/122).bytes(message.bodyExtraBytes);
                if (message.bonds != null && message.bonds.length)
                    for (var i = 0; i < message.bonds.length; ++i)
                        $root.casper.BondInfo.encode(message.bonds[i], writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                if (message.blockSize != null && message.hasOwnProperty("blockSize"))
                    writer.uint32(/* id 17, wireType 2 =*/138).string(message.blockSize);
                if (message.deployCount != null && message.hasOwnProperty("deployCount"))
                    writer.uint32(/* id 18, wireType 0 =*/144).int32(message.deployCount);
                if (message.faultTolerance != null && message.hasOwnProperty("faultTolerance"))
                    writer.uint32(/* id 19, wireType 5 =*/157).float(message.faultTolerance);
                if (message.justifications != null && message.justifications.length)
                    for (var i = 0; i < message.justifications.length; ++i)
                        $root.casper.JustificationInfo.encode(message.justifications[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LightBlockInfo message, length delimited. Does not implicitly {@link casper.LightBlockInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.LightBlockInfo
             * @static
             * @param {casper.ILightBlockInfo} message LightBlockInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LightBlockInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LightBlockInfo message from the specified reader or buffer.
             * @function decode
             * @memberof casper.LightBlockInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.LightBlockInfo} LightBlockInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LightBlockInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.LightBlockInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.blockHash = reader.string();
                        break;
                    case 2:
                        message.sender = reader.string();
                        break;
                    case 3:
                        message.seqNum = reader.int64();
                        break;
                    case 4:
                        message.sig = reader.string();
                        break;
                    case 5:
                        message.sigAlgorithm = reader.string();
                        break;
                    case 6:
                        message.shardId = reader.string();
                        break;
                    case 7:
                        message.extraBytes = reader.bytes();
                        break;
                    case 8:
                        message.version = reader.int64();
                        break;
                    case 9:
                        message.timestamp = reader.int64();
                        break;
                    case 10:
                        message.headerExtraBytes = reader.bytes();
                        break;
                    case 11:
                        if (!(message.parentsHashList && message.parentsHashList.length))
                            message.parentsHashList = [];
                        message.parentsHashList.push(reader.string());
                        break;
                    case 12:
                        message.blockNumber = reader.int64();
                        break;
                    case 13:
                        message.preStateHash = reader.string();
                        break;
                    case 14:
                        message.postStateHash = reader.string();
                        break;
                    case 15:
                        message.bodyExtraBytes = reader.bytes();
                        break;
                    case 16:
                        if (!(message.bonds && message.bonds.length))
                            message.bonds = [];
                        message.bonds.push($root.casper.BondInfo.decode(reader, reader.uint32()));
                        break;
                    case 17:
                        message.blockSize = reader.string();
                        break;
                    case 18:
                        message.deployCount = reader.int32();
                        break;
                    case 19:
                        message.faultTolerance = reader.float();
                        break;
                    case 20:
                        if (!(message.justifications && message.justifications.length))
                            message.justifications = [];
                        message.justifications.push($root.casper.JustificationInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LightBlockInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.LightBlockInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.LightBlockInfo} LightBlockInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LightBlockInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LightBlockInfo message.
             * @function verify
             * @memberof casper.LightBlockInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LightBlockInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    if (!$util.isString(message.blockHash))
                        return "blockHash: string expected";
                if (message.sender != null && message.hasOwnProperty("sender"))
                    if (!$util.isString(message.sender))
                        return "sender: string expected";
                if (message.seqNum != null && message.hasOwnProperty("seqNum"))
                    if (!$util.isInteger(message.seqNum) && !(message.seqNum && $util.isInteger(message.seqNum.low) && $util.isInteger(message.seqNum.high)))
                        return "seqNum: integer|Long expected";
                if (message.sig != null && message.hasOwnProperty("sig"))
                    if (!$util.isString(message.sig))
                        return "sig: string expected";
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    if (!$util.isString(message.sigAlgorithm))
                        return "sigAlgorithm: string expected";
                if (message.shardId != null && message.hasOwnProperty("shardId"))
                    if (!$util.isString(message.shardId))
                        return "shardId: string expected";
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    if (!(message.extraBytes && typeof message.extraBytes.length === "number" || $util.isString(message.extraBytes)))
                        return "extraBytes: buffer expected";
                if (message.version != null && message.hasOwnProperty("version"))
                    if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))
                        return "version: integer|Long expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                        return "timestamp: integer|Long expected";
                if (message.headerExtraBytes != null && message.hasOwnProperty("headerExtraBytes"))
                    if (!(message.headerExtraBytes && typeof message.headerExtraBytes.length === "number" || $util.isString(message.headerExtraBytes)))
                        return "headerExtraBytes: buffer expected";
                if (message.parentsHashList != null && message.hasOwnProperty("parentsHashList")) {
                    if (!Array.isArray(message.parentsHashList))
                        return "parentsHashList: array expected";
                    for (var i = 0; i < message.parentsHashList.length; ++i)
                        if (!$util.isString(message.parentsHashList[i]))
                            return "parentsHashList: string[] expected";
                }
                if (message.blockNumber != null && message.hasOwnProperty("blockNumber"))
                    if (!$util.isInteger(message.blockNumber) && !(message.blockNumber && $util.isInteger(message.blockNumber.low) && $util.isInteger(message.blockNumber.high)))
                        return "blockNumber: integer|Long expected";
                if (message.preStateHash != null && message.hasOwnProperty("preStateHash"))
                    if (!$util.isString(message.preStateHash))
                        return "preStateHash: string expected";
                if (message.postStateHash != null && message.hasOwnProperty("postStateHash"))
                    if (!$util.isString(message.postStateHash))
                        return "postStateHash: string expected";
                if (message.bodyExtraBytes != null && message.hasOwnProperty("bodyExtraBytes"))
                    if (!(message.bodyExtraBytes && typeof message.bodyExtraBytes.length === "number" || $util.isString(message.bodyExtraBytes)))
                        return "bodyExtraBytes: buffer expected";
                if (message.bonds != null && message.hasOwnProperty("bonds")) {
                    if (!Array.isArray(message.bonds))
                        return "bonds: array expected";
                    for (var i = 0; i < message.bonds.length; ++i) {
                        var error = $root.casper.BondInfo.verify(message.bonds[i]);
                        if (error)
                            return "bonds." + error;
                    }
                }
                if (message.blockSize != null && message.hasOwnProperty("blockSize"))
                    if (!$util.isString(message.blockSize))
                        return "blockSize: string expected";
                if (message.deployCount != null && message.hasOwnProperty("deployCount"))
                    if (!$util.isInteger(message.deployCount))
                        return "deployCount: integer expected";
                if (message.faultTolerance != null && message.hasOwnProperty("faultTolerance"))
                    if (typeof message.faultTolerance !== "number")
                        return "faultTolerance: number expected";
                if (message.justifications != null && message.hasOwnProperty("justifications")) {
                    if (!Array.isArray(message.justifications))
                        return "justifications: array expected";
                    for (var i = 0; i < message.justifications.length; ++i) {
                        var error = $root.casper.JustificationInfo.verify(message.justifications[i]);
                        if (error)
                            return "justifications." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LightBlockInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.LightBlockInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.LightBlockInfo} LightBlockInfo
             */
            LightBlockInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.LightBlockInfo)
                    return object;
                var message = new $root.casper.LightBlockInfo();
                if (object.blockHash != null)
                    message.blockHash = String(object.blockHash);
                if (object.sender != null)
                    message.sender = String(object.sender);
                if (object.seqNum != null)
                    if ($util.Long)
                        (message.seqNum = $util.Long.fromValue(object.seqNum)).unsigned = false;
                    else if (typeof object.seqNum === "string")
                        message.seqNum = parseInt(object.seqNum, 10);
                    else if (typeof object.seqNum === "number")
                        message.seqNum = object.seqNum;
                    else if (typeof object.seqNum === "object")
                        message.seqNum = new $util.LongBits(object.seqNum.low >>> 0, object.seqNum.high >>> 0).toNumber();
                if (object.sig != null)
                    message.sig = String(object.sig);
                if (object.sigAlgorithm != null)
                    message.sigAlgorithm = String(object.sigAlgorithm);
                if (object.shardId != null)
                    message.shardId = String(object.shardId);
                if (object.extraBytes != null)
                    if (typeof object.extraBytes === "string")
                        $util.base64.decode(object.extraBytes, message.extraBytes = $util.newBuffer($util.base64.length(object.extraBytes)), 0);
                    else if (object.extraBytes.length)
                        message.extraBytes = object.extraBytes;
                if (object.version != null)
                    if ($util.Long)
                        (message.version = $util.Long.fromValue(object.version)).unsigned = false;
                    else if (typeof object.version === "string")
                        message.version = parseInt(object.version, 10);
                    else if (typeof object.version === "number")
                        message.version = object.version;
                    else if (typeof object.version === "object")
                        message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();
                if (object.timestamp != null)
                    if ($util.Long)
                        (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;
                    else if (typeof object.timestamp === "string")
                        message.timestamp = parseInt(object.timestamp, 10);
                    else if (typeof object.timestamp === "number")
                        message.timestamp = object.timestamp;
                    else if (typeof object.timestamp === "object")
                        message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();
                if (object.headerExtraBytes != null)
                    if (typeof object.headerExtraBytes === "string")
                        $util.base64.decode(object.headerExtraBytes, message.headerExtraBytes = $util.newBuffer($util.base64.length(object.headerExtraBytes)), 0);
                    else if (object.headerExtraBytes.length)
                        message.headerExtraBytes = object.headerExtraBytes;
                if (object.parentsHashList) {
                    if (!Array.isArray(object.parentsHashList))
                        throw TypeError(".casper.LightBlockInfo.parentsHashList: array expected");
                    message.parentsHashList = [];
                    for (var i = 0; i < object.parentsHashList.length; ++i)
                        message.parentsHashList[i] = String(object.parentsHashList[i]);
                }
                if (object.blockNumber != null)
                    if ($util.Long)
                        (message.blockNumber = $util.Long.fromValue(object.blockNumber)).unsigned = false;
                    else if (typeof object.blockNumber === "string")
                        message.blockNumber = parseInt(object.blockNumber, 10);
                    else if (typeof object.blockNumber === "number")
                        message.blockNumber = object.blockNumber;
                    else if (typeof object.blockNumber === "object")
                        message.blockNumber = new $util.LongBits(object.blockNumber.low >>> 0, object.blockNumber.high >>> 0).toNumber();
                if (object.preStateHash != null)
                    message.preStateHash = String(object.preStateHash);
                if (object.postStateHash != null)
                    message.postStateHash = String(object.postStateHash);
                if (object.bodyExtraBytes != null)
                    if (typeof object.bodyExtraBytes === "string")
                        $util.base64.decode(object.bodyExtraBytes, message.bodyExtraBytes = $util.newBuffer($util.base64.length(object.bodyExtraBytes)), 0);
                    else if (object.bodyExtraBytes.length)
                        message.bodyExtraBytes = object.bodyExtraBytes;
                if (object.bonds) {
                    if (!Array.isArray(object.bonds))
                        throw TypeError(".casper.LightBlockInfo.bonds: array expected");
                    message.bonds = [];
                    for (var i = 0; i < object.bonds.length; ++i) {
                        if (typeof object.bonds[i] !== "object")
                            throw TypeError(".casper.LightBlockInfo.bonds: object expected");
                        message.bonds[i] = $root.casper.BondInfo.fromObject(object.bonds[i]);
                    }
                }
                if (object.blockSize != null)
                    message.blockSize = String(object.blockSize);
                if (object.deployCount != null)
                    message.deployCount = object.deployCount | 0;
                if (object.faultTolerance != null)
                    message.faultTolerance = Number(object.faultTolerance);
                if (object.justifications) {
                    if (!Array.isArray(object.justifications))
                        throw TypeError(".casper.LightBlockInfo.justifications: array expected");
                    message.justifications = [];
                    for (var i = 0; i < object.justifications.length; ++i) {
                        if (typeof object.justifications[i] !== "object")
                            throw TypeError(".casper.LightBlockInfo.justifications: object expected");
                        message.justifications[i] = $root.casper.JustificationInfo.fromObject(object.justifications[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LightBlockInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.LightBlockInfo
             * @static
             * @param {casper.LightBlockInfo} message LightBlockInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LightBlockInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.parentsHashList = [];
                    object.bonds = [];
                    object.justifications = [];
                }
                if (options.defaults) {
                    object.blockHash = "";
                    object.sender = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.seqNum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seqNum = options.longs === String ? "0" : 0;
                    object.sig = "";
                    object.sigAlgorithm = "";
                    object.shardId = "";
                    if (options.bytes === String)
                        object.extraBytes = "";
                    else {
                        object.extraBytes = [];
                        if (options.bytes !== Array)
                            object.extraBytes = $util.newBuffer(object.extraBytes);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.version = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.timestamp = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.headerExtraBytes = "";
                    else {
                        object.headerExtraBytes = [];
                        if (options.bytes !== Array)
                            object.headerExtraBytes = $util.newBuffer(object.headerExtraBytes);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.blockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.blockNumber = options.longs === String ? "0" : 0;
                    object.preStateHash = "";
                    object.postStateHash = "";
                    if (options.bytes === String)
                        object.bodyExtraBytes = "";
                    else {
                        object.bodyExtraBytes = [];
                        if (options.bytes !== Array)
                            object.bodyExtraBytes = $util.newBuffer(object.bodyExtraBytes);
                    }
                    object.blockSize = "";
                    object.deployCount = 0;
                    object.faultTolerance = 0;
                }
                if (message.blockHash != null && message.hasOwnProperty("blockHash"))
                    object.blockHash = message.blockHash;
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = message.sender;
                if (message.seqNum != null && message.hasOwnProperty("seqNum"))
                    if (typeof message.seqNum === "number")
                        object.seqNum = options.longs === String ? String(message.seqNum) : message.seqNum;
                    else
                        object.seqNum = options.longs === String ? $util.Long.prototype.toString.call(message.seqNum) : options.longs === Number ? new $util.LongBits(message.seqNum.low >>> 0, message.seqNum.high >>> 0).toNumber() : message.seqNum;
                if (message.sig != null && message.hasOwnProperty("sig"))
                    object.sig = message.sig;
                if (message.sigAlgorithm != null && message.hasOwnProperty("sigAlgorithm"))
                    object.sigAlgorithm = message.sigAlgorithm;
                if (message.shardId != null && message.hasOwnProperty("shardId"))
                    object.shardId = message.shardId;
                if (message.extraBytes != null && message.hasOwnProperty("extraBytes"))
                    object.extraBytes = options.bytes === String ? $util.base64.encode(message.extraBytes, 0, message.extraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.extraBytes) : message.extraBytes;
                if (message.version != null && message.hasOwnProperty("version"))
                    if (typeof message.version === "number")
                        object.version = options.longs === String ? String(message.version) : message.version;
                    else
                        object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    if (typeof message.timestamp === "number")
                        object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                    else
                        object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;
                if (message.headerExtraBytes != null && message.hasOwnProperty("headerExtraBytes"))
                    object.headerExtraBytes = options.bytes === String ? $util.base64.encode(message.headerExtraBytes, 0, message.headerExtraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.headerExtraBytes) : message.headerExtraBytes;
                if (message.parentsHashList && message.parentsHashList.length) {
                    object.parentsHashList = [];
                    for (var j = 0; j < message.parentsHashList.length; ++j)
                        object.parentsHashList[j] = message.parentsHashList[j];
                }
                if (message.blockNumber != null && message.hasOwnProperty("blockNumber"))
                    if (typeof message.blockNumber === "number")
                        object.blockNumber = options.longs === String ? String(message.blockNumber) : message.blockNumber;
                    else
                        object.blockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.blockNumber) : options.longs === Number ? new $util.LongBits(message.blockNumber.low >>> 0, message.blockNumber.high >>> 0).toNumber() : message.blockNumber;
                if (message.preStateHash != null && message.hasOwnProperty("preStateHash"))
                    object.preStateHash = message.preStateHash;
                if (message.postStateHash != null && message.hasOwnProperty("postStateHash"))
                    object.postStateHash = message.postStateHash;
                if (message.bodyExtraBytes != null && message.hasOwnProperty("bodyExtraBytes"))
                    object.bodyExtraBytes = options.bytes === String ? $util.base64.encode(message.bodyExtraBytes, 0, message.bodyExtraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.bodyExtraBytes) : message.bodyExtraBytes;
                if (message.bonds && message.bonds.length) {
                    object.bonds = [];
                    for (var j = 0; j < message.bonds.length; ++j)
                        object.bonds[j] = $root.casper.BondInfo.toObject(message.bonds[j], options);
                }
                if (message.blockSize != null && message.hasOwnProperty("blockSize"))
                    object.blockSize = message.blockSize;
                if (message.deployCount != null && message.hasOwnProperty("deployCount"))
                    object.deployCount = message.deployCount;
                if (message.faultTolerance != null && message.hasOwnProperty("faultTolerance"))
                    object.faultTolerance = options.json && !isFinite(message.faultTolerance) ? String(message.faultTolerance) : message.faultTolerance;
                if (message.justifications && message.justifications.length) {
                    object.justifications = [];
                    for (var j = 0; j < message.justifications.length; ++j)
                        object.justifications[j] = $root.casper.JustificationInfo.toObject(message.justifications[j], options);
                }
                return object;
            };

            /**
             * Converts this LightBlockInfo to JSON.
             * @function toJSON
             * @memberof casper.LightBlockInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LightBlockInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LightBlockInfo;
        })();

        casper.BlockInfo = (function() {

            /**
             * Properties of a BlockInfo.
             * @memberof casper
             * @interface IBlockInfo
             * @property {casper.ILightBlockInfo|null} [blockInfo] BlockInfo blockInfo
             * @property {Array.<casper.IDeployInfo>|null} [deploys] BlockInfo deploys
             */

            /**
             * Constructs a new BlockInfo.
             * @memberof casper
             * @classdesc Represents a BlockInfo.
             * @implements IBlockInfo
             * @constructor
             * @param {casper.IBlockInfo=} [properties] Properties to set
             */
            function BlockInfo(properties) {
                this.deploys = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockInfo blockInfo.
             * @member {casper.ILightBlockInfo|null|undefined} blockInfo
             * @memberof casper.BlockInfo
             * @instance
             */
            BlockInfo.prototype.blockInfo = null;

            /**
             * BlockInfo deploys.
             * @member {Array.<casper.IDeployInfo>} deploys
             * @memberof casper.BlockInfo
             * @instance
             */
            BlockInfo.prototype.deploys = $util.emptyArray;

            /**
             * Creates a new BlockInfo instance using the specified properties.
             * @function create
             * @memberof casper.BlockInfo
             * @static
             * @param {casper.IBlockInfo=} [properties] Properties to set
             * @returns {casper.BlockInfo} BlockInfo instance
             */
            BlockInfo.create = function create(properties) {
                return new BlockInfo(properties);
            };

            /**
             * Encodes the specified BlockInfo message. Does not implicitly {@link casper.BlockInfo.verify|verify} messages.
             * @function encode
             * @memberof casper.BlockInfo
             * @static
             * @param {casper.IBlockInfo} message BlockInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.blockInfo != null && message.hasOwnProperty("blockInfo"))
                    $root.casper.LightBlockInfo.encode(message.blockInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.deploys != null && message.deploys.length)
                    for (var i = 0; i < message.deploys.length; ++i)
                        $root.casper.DeployInfo.encode(message.deploys[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BlockInfo message, length delimited. Does not implicitly {@link casper.BlockInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BlockInfo
             * @static
             * @param {casper.IBlockInfo} message BlockInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockInfo message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BlockInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BlockInfo} BlockInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.blockInfo = $root.casper.LightBlockInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.deploys && message.deploys.length))
                            message.deploys = [];
                        message.deploys.push($root.casper.DeployInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BlockInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BlockInfo} BlockInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockInfo message.
             * @function verify
             * @memberof casper.BlockInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                    var error = $root.casper.LightBlockInfo.verify(message.blockInfo);
                    if (error)
                        return "blockInfo." + error;
                }
                if (message.deploys != null && message.hasOwnProperty("deploys")) {
                    if (!Array.isArray(message.deploys))
                        return "deploys: array expected";
                    for (var i = 0; i < message.deploys.length; ++i) {
                        var error = $root.casper.DeployInfo.verify(message.deploys[i]);
                        if (error)
                            return "deploys." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a BlockInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BlockInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BlockInfo} BlockInfo
             */
            BlockInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BlockInfo)
                    return object;
                var message = new $root.casper.BlockInfo();
                if (object.blockInfo != null) {
                    if (typeof object.blockInfo !== "object")
                        throw TypeError(".casper.BlockInfo.blockInfo: object expected");
                    message.blockInfo = $root.casper.LightBlockInfo.fromObject(object.blockInfo);
                }
                if (object.deploys) {
                    if (!Array.isArray(object.deploys))
                        throw TypeError(".casper.BlockInfo.deploys: array expected");
                    message.deploys = [];
                    for (var i = 0; i < object.deploys.length; ++i) {
                        if (typeof object.deploys[i] !== "object")
                            throw TypeError(".casper.BlockInfo.deploys: object expected");
                        message.deploys[i] = $root.casper.DeployInfo.fromObject(object.deploys[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a BlockInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BlockInfo
             * @static
             * @param {casper.BlockInfo} message BlockInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.deploys = [];
                if (options.defaults)
                    object.blockInfo = null;
                if (message.blockInfo != null && message.hasOwnProperty("blockInfo"))
                    object.blockInfo = $root.casper.LightBlockInfo.toObject(message.blockInfo, options);
                if (message.deploys && message.deploys.length) {
                    object.deploys = [];
                    for (var j = 0; j < message.deploys.length; ++j)
                        object.deploys[j] = $root.casper.DeployInfo.toObject(message.deploys[j], options);
                }
                return object;
            };

            /**
             * Converts this BlockInfo to JSON.
             * @function toJSON
             * @memberof casper.BlockInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockInfo;
        })();

        casper.DataWithBlockInfo = (function() {

            /**
             * Properties of a DataWithBlockInfo.
             * @memberof casper
             * @interface IDataWithBlockInfo
             * @property {Array.<IPar>|null} [postBlockData] DataWithBlockInfo postBlockData
             * @property {casper.ILightBlockInfo|null} [block] DataWithBlockInfo block
             */

            /**
             * Constructs a new DataWithBlockInfo.
             * @memberof casper
             * @classdesc Represents a DataWithBlockInfo.
             * @implements IDataWithBlockInfo
             * @constructor
             * @param {casper.IDataWithBlockInfo=} [properties] Properties to set
             */
            function DataWithBlockInfo(properties) {
                this.postBlockData = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DataWithBlockInfo postBlockData.
             * @member {Array.<IPar>} postBlockData
             * @memberof casper.DataWithBlockInfo
             * @instance
             */
            DataWithBlockInfo.prototype.postBlockData = $util.emptyArray;

            /**
             * DataWithBlockInfo block.
             * @member {casper.ILightBlockInfo|null|undefined} block
             * @memberof casper.DataWithBlockInfo
             * @instance
             */
            DataWithBlockInfo.prototype.block = null;

            /**
             * Creates a new DataWithBlockInfo instance using the specified properties.
             * @function create
             * @memberof casper.DataWithBlockInfo
             * @static
             * @param {casper.IDataWithBlockInfo=} [properties] Properties to set
             * @returns {casper.DataWithBlockInfo} DataWithBlockInfo instance
             */
            DataWithBlockInfo.create = function create(properties) {
                return new DataWithBlockInfo(properties);
            };

            /**
             * Encodes the specified DataWithBlockInfo message. Does not implicitly {@link casper.DataWithBlockInfo.verify|verify} messages.
             * @function encode
             * @memberof casper.DataWithBlockInfo
             * @static
             * @param {casper.IDataWithBlockInfo} message DataWithBlockInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DataWithBlockInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.postBlockData != null && message.postBlockData.length)
                    for (var i = 0; i < message.postBlockData.length; ++i)
                        $root.Par.encode(message.postBlockData[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.block != null && message.hasOwnProperty("block"))
                    $root.casper.LightBlockInfo.encode(message.block, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified DataWithBlockInfo message, length delimited. Does not implicitly {@link casper.DataWithBlockInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.DataWithBlockInfo
             * @static
             * @param {casper.IDataWithBlockInfo} message DataWithBlockInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DataWithBlockInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DataWithBlockInfo message from the specified reader or buffer.
             * @function decode
             * @memberof casper.DataWithBlockInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.DataWithBlockInfo} DataWithBlockInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DataWithBlockInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.DataWithBlockInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.postBlockData && message.postBlockData.length))
                            message.postBlockData = [];
                        message.postBlockData.push($root.Par.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.block = $root.casper.LightBlockInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DataWithBlockInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.DataWithBlockInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.DataWithBlockInfo} DataWithBlockInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DataWithBlockInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DataWithBlockInfo message.
             * @function verify
             * @memberof casper.DataWithBlockInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DataWithBlockInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.postBlockData != null && message.hasOwnProperty("postBlockData")) {
                    if (!Array.isArray(message.postBlockData))
                        return "postBlockData: array expected";
                    for (var i = 0; i < message.postBlockData.length; ++i) {
                        var error = $root.Par.verify(message.postBlockData[i]);
                        if (error)
                            return "postBlockData." + error;
                    }
                }
                if (message.block != null && message.hasOwnProperty("block")) {
                    var error = $root.casper.LightBlockInfo.verify(message.block);
                    if (error)
                        return "block." + error;
                }
                return null;
            };

            /**
             * Creates a DataWithBlockInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.DataWithBlockInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.DataWithBlockInfo} DataWithBlockInfo
             */
            DataWithBlockInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.DataWithBlockInfo)
                    return object;
                var message = new $root.casper.DataWithBlockInfo();
                if (object.postBlockData) {
                    if (!Array.isArray(object.postBlockData))
                        throw TypeError(".casper.DataWithBlockInfo.postBlockData: array expected");
                    message.postBlockData = [];
                    for (var i = 0; i < object.postBlockData.length; ++i) {
                        if (typeof object.postBlockData[i] !== "object")
                            throw TypeError(".casper.DataWithBlockInfo.postBlockData: object expected");
                        message.postBlockData[i] = $root.Par.fromObject(object.postBlockData[i]);
                    }
                }
                if (object.block != null) {
                    if (typeof object.block !== "object")
                        throw TypeError(".casper.DataWithBlockInfo.block: object expected");
                    message.block = $root.casper.LightBlockInfo.fromObject(object.block);
                }
                return message;
            };

            /**
             * Creates a plain object from a DataWithBlockInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.DataWithBlockInfo
             * @static
             * @param {casper.DataWithBlockInfo} message DataWithBlockInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DataWithBlockInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.postBlockData = [];
                if (options.defaults)
                    object.block = null;
                if (message.postBlockData && message.postBlockData.length) {
                    object.postBlockData = [];
                    for (var j = 0; j < message.postBlockData.length; ++j)
                        object.postBlockData[j] = $root.Par.toObject(message.postBlockData[j], options);
                }
                if (message.block != null && message.hasOwnProperty("block"))
                    object.block = $root.casper.LightBlockInfo.toObject(message.block, options);
                return object;
            };

            /**
             * Converts this DataWithBlockInfo to JSON.
             * @function toJSON
             * @memberof casper.DataWithBlockInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DataWithBlockInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DataWithBlockInfo;
        })();

        casper.ContinuationsWithBlockInfo = (function() {

            /**
             * Properties of a ContinuationsWithBlockInfo.
             * @memberof casper
             * @interface IContinuationsWithBlockInfo
             * @property {Array.<casper.IWaitingContinuationInfo>|null} [postBlockContinuations] ContinuationsWithBlockInfo postBlockContinuations
             * @property {casper.ILightBlockInfo|null} [block] ContinuationsWithBlockInfo block
             */

            /**
             * Constructs a new ContinuationsWithBlockInfo.
             * @memberof casper
             * @classdesc Represents a ContinuationsWithBlockInfo.
             * @implements IContinuationsWithBlockInfo
             * @constructor
             * @param {casper.IContinuationsWithBlockInfo=} [properties] Properties to set
             */
            function ContinuationsWithBlockInfo(properties) {
                this.postBlockContinuations = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ContinuationsWithBlockInfo postBlockContinuations.
             * @member {Array.<casper.IWaitingContinuationInfo>} postBlockContinuations
             * @memberof casper.ContinuationsWithBlockInfo
             * @instance
             */
            ContinuationsWithBlockInfo.prototype.postBlockContinuations = $util.emptyArray;

            /**
             * ContinuationsWithBlockInfo block.
             * @member {casper.ILightBlockInfo|null|undefined} block
             * @memberof casper.ContinuationsWithBlockInfo
             * @instance
             */
            ContinuationsWithBlockInfo.prototype.block = null;

            /**
             * Creates a new ContinuationsWithBlockInfo instance using the specified properties.
             * @function create
             * @memberof casper.ContinuationsWithBlockInfo
             * @static
             * @param {casper.IContinuationsWithBlockInfo=} [properties] Properties to set
             * @returns {casper.ContinuationsWithBlockInfo} ContinuationsWithBlockInfo instance
             */
            ContinuationsWithBlockInfo.create = function create(properties) {
                return new ContinuationsWithBlockInfo(properties);
            };

            /**
             * Encodes the specified ContinuationsWithBlockInfo message. Does not implicitly {@link casper.ContinuationsWithBlockInfo.verify|verify} messages.
             * @function encode
             * @memberof casper.ContinuationsWithBlockInfo
             * @static
             * @param {casper.IContinuationsWithBlockInfo} message ContinuationsWithBlockInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContinuationsWithBlockInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.postBlockContinuations != null && message.postBlockContinuations.length)
                    for (var i = 0; i < message.postBlockContinuations.length; ++i)
                        $root.casper.WaitingContinuationInfo.encode(message.postBlockContinuations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.block != null && message.hasOwnProperty("block"))
                    $root.casper.LightBlockInfo.encode(message.block, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ContinuationsWithBlockInfo message, length delimited. Does not implicitly {@link casper.ContinuationsWithBlockInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ContinuationsWithBlockInfo
             * @static
             * @param {casper.IContinuationsWithBlockInfo} message ContinuationsWithBlockInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ContinuationsWithBlockInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ContinuationsWithBlockInfo message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ContinuationsWithBlockInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ContinuationsWithBlockInfo} ContinuationsWithBlockInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContinuationsWithBlockInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ContinuationsWithBlockInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.postBlockContinuations && message.postBlockContinuations.length))
                            message.postBlockContinuations = [];
                        message.postBlockContinuations.push($root.casper.WaitingContinuationInfo.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.block = $root.casper.LightBlockInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ContinuationsWithBlockInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ContinuationsWithBlockInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ContinuationsWithBlockInfo} ContinuationsWithBlockInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ContinuationsWithBlockInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ContinuationsWithBlockInfo message.
             * @function verify
             * @memberof casper.ContinuationsWithBlockInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ContinuationsWithBlockInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.postBlockContinuations != null && message.hasOwnProperty("postBlockContinuations")) {
                    if (!Array.isArray(message.postBlockContinuations))
                        return "postBlockContinuations: array expected";
                    for (var i = 0; i < message.postBlockContinuations.length; ++i) {
                        var error = $root.casper.WaitingContinuationInfo.verify(message.postBlockContinuations[i]);
                        if (error)
                            return "postBlockContinuations." + error;
                    }
                }
                if (message.block != null && message.hasOwnProperty("block")) {
                    var error = $root.casper.LightBlockInfo.verify(message.block);
                    if (error)
                        return "block." + error;
                }
                return null;
            };

            /**
             * Creates a ContinuationsWithBlockInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ContinuationsWithBlockInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ContinuationsWithBlockInfo} ContinuationsWithBlockInfo
             */
            ContinuationsWithBlockInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ContinuationsWithBlockInfo)
                    return object;
                var message = new $root.casper.ContinuationsWithBlockInfo();
                if (object.postBlockContinuations) {
                    if (!Array.isArray(object.postBlockContinuations))
                        throw TypeError(".casper.ContinuationsWithBlockInfo.postBlockContinuations: array expected");
                    message.postBlockContinuations = [];
                    for (var i = 0; i < object.postBlockContinuations.length; ++i) {
                        if (typeof object.postBlockContinuations[i] !== "object")
                            throw TypeError(".casper.ContinuationsWithBlockInfo.postBlockContinuations: object expected");
                        message.postBlockContinuations[i] = $root.casper.WaitingContinuationInfo.fromObject(object.postBlockContinuations[i]);
                    }
                }
                if (object.block != null) {
                    if (typeof object.block !== "object")
                        throw TypeError(".casper.ContinuationsWithBlockInfo.block: object expected");
                    message.block = $root.casper.LightBlockInfo.fromObject(object.block);
                }
                return message;
            };

            /**
             * Creates a plain object from a ContinuationsWithBlockInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ContinuationsWithBlockInfo
             * @static
             * @param {casper.ContinuationsWithBlockInfo} message ContinuationsWithBlockInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ContinuationsWithBlockInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.postBlockContinuations = [];
                if (options.defaults)
                    object.block = null;
                if (message.postBlockContinuations && message.postBlockContinuations.length) {
                    object.postBlockContinuations = [];
                    for (var j = 0; j < message.postBlockContinuations.length; ++j)
                        object.postBlockContinuations[j] = $root.casper.WaitingContinuationInfo.toObject(message.postBlockContinuations[j], options);
                }
                if (message.block != null && message.hasOwnProperty("block"))
                    object.block = $root.casper.LightBlockInfo.toObject(message.block, options);
                return object;
            };

            /**
             * Converts this ContinuationsWithBlockInfo to JSON.
             * @function toJSON
             * @memberof casper.ContinuationsWithBlockInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ContinuationsWithBlockInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ContinuationsWithBlockInfo;
        })();

        casper.WaitingContinuationInfo = (function() {

            /**
             * Properties of a WaitingContinuationInfo.
             * @memberof casper
             * @interface IWaitingContinuationInfo
             * @property {Array.<IBindPattern>|null} [postBlockPatterns] WaitingContinuationInfo postBlockPatterns
             * @property {IPar|null} [postBlockContinuation] WaitingContinuationInfo postBlockContinuation
             */

            /**
             * Constructs a new WaitingContinuationInfo.
             * @memberof casper
             * @classdesc Represents a WaitingContinuationInfo.
             * @implements IWaitingContinuationInfo
             * @constructor
             * @param {casper.IWaitingContinuationInfo=} [properties] Properties to set
             */
            function WaitingContinuationInfo(properties) {
                this.postBlockPatterns = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * WaitingContinuationInfo postBlockPatterns.
             * @member {Array.<IBindPattern>} postBlockPatterns
             * @memberof casper.WaitingContinuationInfo
             * @instance
             */
            WaitingContinuationInfo.prototype.postBlockPatterns = $util.emptyArray;

            /**
             * WaitingContinuationInfo postBlockContinuation.
             * @member {IPar|null|undefined} postBlockContinuation
             * @memberof casper.WaitingContinuationInfo
             * @instance
             */
            WaitingContinuationInfo.prototype.postBlockContinuation = null;

            /**
             * Creates a new WaitingContinuationInfo instance using the specified properties.
             * @function create
             * @memberof casper.WaitingContinuationInfo
             * @static
             * @param {casper.IWaitingContinuationInfo=} [properties] Properties to set
             * @returns {casper.WaitingContinuationInfo} WaitingContinuationInfo instance
             */
            WaitingContinuationInfo.create = function create(properties) {
                return new WaitingContinuationInfo(properties);
            };

            /**
             * Encodes the specified WaitingContinuationInfo message. Does not implicitly {@link casper.WaitingContinuationInfo.verify|verify} messages.
             * @function encode
             * @memberof casper.WaitingContinuationInfo
             * @static
             * @param {casper.IWaitingContinuationInfo} message WaitingContinuationInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WaitingContinuationInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.postBlockPatterns != null && message.postBlockPatterns.length)
                    for (var i = 0; i < message.postBlockPatterns.length; ++i)
                        $root.BindPattern.encode(message.postBlockPatterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.postBlockContinuation != null && message.hasOwnProperty("postBlockContinuation"))
                    $root.Par.encode(message.postBlockContinuation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified WaitingContinuationInfo message, length delimited. Does not implicitly {@link casper.WaitingContinuationInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.WaitingContinuationInfo
             * @static
             * @param {casper.IWaitingContinuationInfo} message WaitingContinuationInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WaitingContinuationInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a WaitingContinuationInfo message from the specified reader or buffer.
             * @function decode
             * @memberof casper.WaitingContinuationInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.WaitingContinuationInfo} WaitingContinuationInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WaitingContinuationInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.WaitingContinuationInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.postBlockPatterns && message.postBlockPatterns.length))
                            message.postBlockPatterns = [];
                        message.postBlockPatterns.push($root.BindPattern.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.postBlockContinuation = $root.Par.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a WaitingContinuationInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.WaitingContinuationInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.WaitingContinuationInfo} WaitingContinuationInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WaitingContinuationInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a WaitingContinuationInfo message.
             * @function verify
             * @memberof casper.WaitingContinuationInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WaitingContinuationInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.postBlockPatterns != null && message.hasOwnProperty("postBlockPatterns")) {
                    if (!Array.isArray(message.postBlockPatterns))
                        return "postBlockPatterns: array expected";
                    for (var i = 0; i < message.postBlockPatterns.length; ++i) {
                        var error = $root.BindPattern.verify(message.postBlockPatterns[i]);
                        if (error)
                            return "postBlockPatterns." + error;
                    }
                }
                if (message.postBlockContinuation != null && message.hasOwnProperty("postBlockContinuation")) {
                    var error = $root.Par.verify(message.postBlockContinuation);
                    if (error)
                        return "postBlockContinuation." + error;
                }
                return null;
            };

            /**
             * Creates a WaitingContinuationInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.WaitingContinuationInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.WaitingContinuationInfo} WaitingContinuationInfo
             */
            WaitingContinuationInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.WaitingContinuationInfo)
                    return object;
                var message = new $root.casper.WaitingContinuationInfo();
                if (object.postBlockPatterns) {
                    if (!Array.isArray(object.postBlockPatterns))
                        throw TypeError(".casper.WaitingContinuationInfo.postBlockPatterns: array expected");
                    message.postBlockPatterns = [];
                    for (var i = 0; i < object.postBlockPatterns.length; ++i) {
                        if (typeof object.postBlockPatterns[i] !== "object")
                            throw TypeError(".casper.WaitingContinuationInfo.postBlockPatterns: object expected");
                        message.postBlockPatterns[i] = $root.BindPattern.fromObject(object.postBlockPatterns[i]);
                    }
                }
                if (object.postBlockContinuation != null) {
                    if (typeof object.postBlockContinuation !== "object")
                        throw TypeError(".casper.WaitingContinuationInfo.postBlockContinuation: object expected");
                    message.postBlockContinuation = $root.Par.fromObject(object.postBlockContinuation);
                }
                return message;
            };

            /**
             * Creates a plain object from a WaitingContinuationInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.WaitingContinuationInfo
             * @static
             * @param {casper.WaitingContinuationInfo} message WaitingContinuationInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WaitingContinuationInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.postBlockPatterns = [];
                if (options.defaults)
                    object.postBlockContinuation = null;
                if (message.postBlockPatterns && message.postBlockPatterns.length) {
                    object.postBlockPatterns = [];
                    for (var j = 0; j < message.postBlockPatterns.length; ++j)
                        object.postBlockPatterns[j] = $root.BindPattern.toObject(message.postBlockPatterns[j], options);
                }
                if (message.postBlockContinuation != null && message.hasOwnProperty("postBlockContinuation"))
                    object.postBlockContinuation = $root.Par.toObject(message.postBlockContinuation, options);
                return object;
            };

            /**
             * Converts this WaitingContinuationInfo to JSON.
             * @function toJSON
             * @memberof casper.WaitingContinuationInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WaitingContinuationInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return WaitingContinuationInfo;
        })();

        casper.ReportProduceProto = (function() {

            /**
             * Properties of a ReportProduceProto.
             * @memberof casper
             * @interface IReportProduceProto
             * @property {IPar|null} [channel] ReportProduceProto channel
             * @property {IListParWithRandom|null} [data] ReportProduceProto data
             */

            /**
             * Constructs a new ReportProduceProto.
             * @memberof casper
             * @classdesc Represents a ReportProduceProto.
             * @implements IReportProduceProto
             * @constructor
             * @param {casper.IReportProduceProto=} [properties] Properties to set
             */
            function ReportProduceProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ReportProduceProto channel.
             * @member {IPar|null|undefined} channel
             * @memberof casper.ReportProduceProto
             * @instance
             */
            ReportProduceProto.prototype.channel = null;

            /**
             * ReportProduceProto data.
             * @member {IListParWithRandom|null|undefined} data
             * @memberof casper.ReportProduceProto
             * @instance
             */
            ReportProduceProto.prototype.data = null;

            /**
             * Creates a new ReportProduceProto instance using the specified properties.
             * @function create
             * @memberof casper.ReportProduceProto
             * @static
             * @param {casper.IReportProduceProto=} [properties] Properties to set
             * @returns {casper.ReportProduceProto} ReportProduceProto instance
             */
            ReportProduceProto.create = function create(properties) {
                return new ReportProduceProto(properties);
            };

            /**
             * Encodes the specified ReportProduceProto message. Does not implicitly {@link casper.ReportProduceProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ReportProduceProto
             * @static
             * @param {casper.IReportProduceProto} message ReportProduceProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReportProduceProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.channel != null && message.hasOwnProperty("channel"))
                    $root.Par.encode(message.channel, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.data != null && message.hasOwnProperty("data"))
                    $root.ListParWithRandom.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ReportProduceProto message, length delimited. Does not implicitly {@link casper.ReportProduceProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ReportProduceProto
             * @static
             * @param {casper.IReportProduceProto} message ReportProduceProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReportProduceProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ReportProduceProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ReportProduceProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ReportProduceProto} ReportProduceProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReportProduceProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ReportProduceProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.channel = $root.Par.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.data = $root.ListParWithRandom.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ReportProduceProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ReportProduceProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ReportProduceProto} ReportProduceProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReportProduceProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ReportProduceProto message.
             * @function verify
             * @memberof casper.ReportProduceProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReportProduceProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.channel != null && message.hasOwnProperty("channel")) {
                    var error = $root.Par.verify(message.channel);
                    if (error)
                        return "channel." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.ListParWithRandom.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            /**
             * Creates a ReportProduceProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ReportProduceProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ReportProduceProto} ReportProduceProto
             */
            ReportProduceProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ReportProduceProto)
                    return object;
                var message = new $root.casper.ReportProduceProto();
                if (object.channel != null) {
                    if (typeof object.channel !== "object")
                        throw TypeError(".casper.ReportProduceProto.channel: object expected");
                    message.channel = $root.Par.fromObject(object.channel);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".casper.ReportProduceProto.data: object expected");
                    message.data = $root.ListParWithRandom.fromObject(object.data);
                }
                return message;
            };

            /**
             * Creates a plain object from a ReportProduceProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ReportProduceProto
             * @static
             * @param {casper.ReportProduceProto} message ReportProduceProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReportProduceProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.channel = null;
                    object.data = null;
                }
                if (message.channel != null && message.hasOwnProperty("channel"))
                    object.channel = $root.Par.toObject(message.channel, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.ListParWithRandom.toObject(message.data, options);
                return object;
            };

            /**
             * Converts this ReportProduceProto to JSON.
             * @function toJSON
             * @memberof casper.ReportProduceProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReportProduceProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ReportProduceProto;
        })();

        casper.ReportConsumeProto = (function() {

            /**
             * Properties of a ReportConsumeProto.
             * @memberof casper
             * @interface IReportConsumeProto
             * @property {Array.<IPar>|null} [channels] ReportConsumeProto channels
             * @property {Array.<IBindPattern>|null} [patterns] ReportConsumeProto patterns
             * @property {Array.<casper.IPeekProto>|null} [peeks] ReportConsumeProto peeks
             */

            /**
             * Constructs a new ReportConsumeProto.
             * @memberof casper
             * @classdesc Represents a ReportConsumeProto.
             * @implements IReportConsumeProto
             * @constructor
             * @param {casper.IReportConsumeProto=} [properties] Properties to set
             */
            function ReportConsumeProto(properties) {
                this.channels = [];
                this.patterns = [];
                this.peeks = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ReportConsumeProto channels.
             * @member {Array.<IPar>} channels
             * @memberof casper.ReportConsumeProto
             * @instance
             */
            ReportConsumeProto.prototype.channels = $util.emptyArray;

            /**
             * ReportConsumeProto patterns.
             * @member {Array.<IBindPattern>} patterns
             * @memberof casper.ReportConsumeProto
             * @instance
             */
            ReportConsumeProto.prototype.patterns = $util.emptyArray;

            /**
             * ReportConsumeProto peeks.
             * @member {Array.<casper.IPeekProto>} peeks
             * @memberof casper.ReportConsumeProto
             * @instance
             */
            ReportConsumeProto.prototype.peeks = $util.emptyArray;

            /**
             * Creates a new ReportConsumeProto instance using the specified properties.
             * @function create
             * @memberof casper.ReportConsumeProto
             * @static
             * @param {casper.IReportConsumeProto=} [properties] Properties to set
             * @returns {casper.ReportConsumeProto} ReportConsumeProto instance
             */
            ReportConsumeProto.create = function create(properties) {
                return new ReportConsumeProto(properties);
            };

            /**
             * Encodes the specified ReportConsumeProto message. Does not implicitly {@link casper.ReportConsumeProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ReportConsumeProto
             * @static
             * @param {casper.IReportConsumeProto} message ReportConsumeProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReportConsumeProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.channels != null && message.channels.length)
                    for (var i = 0; i < message.channels.length; ++i)
                        $root.Par.encode(message.channels[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.patterns != null && message.patterns.length)
                    for (var i = 0; i < message.patterns.length; ++i)
                        $root.BindPattern.encode(message.patterns[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.peeks != null && message.peeks.length)
                    for (var i = 0; i < message.peeks.length; ++i)
                        $root.casper.PeekProto.encode(message.peeks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ReportConsumeProto message, length delimited. Does not implicitly {@link casper.ReportConsumeProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ReportConsumeProto
             * @static
             * @param {casper.IReportConsumeProto} message ReportConsumeProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReportConsumeProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ReportConsumeProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ReportConsumeProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ReportConsumeProto} ReportConsumeProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReportConsumeProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ReportConsumeProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.channels && message.channels.length))
                            message.channels = [];
                        message.channels.push($root.Par.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        if (!(message.patterns && message.patterns.length))
                            message.patterns = [];
                        message.patterns.push($root.BindPattern.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.peeks && message.peeks.length))
                            message.peeks = [];
                        message.peeks.push($root.casper.PeekProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ReportConsumeProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ReportConsumeProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ReportConsumeProto} ReportConsumeProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReportConsumeProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ReportConsumeProto message.
             * @function verify
             * @memberof casper.ReportConsumeProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReportConsumeProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.channels != null && message.hasOwnProperty("channels")) {
                    if (!Array.isArray(message.channels))
                        return "channels: array expected";
                    for (var i = 0; i < message.channels.length; ++i) {
                        var error = $root.Par.verify(message.channels[i]);
                        if (error)
                            return "channels." + error;
                    }
                }
                if (message.patterns != null && message.hasOwnProperty("patterns")) {
                    if (!Array.isArray(message.patterns))
                        return "patterns: array expected";
                    for (var i = 0; i < message.patterns.length; ++i) {
                        var error = $root.BindPattern.verify(message.patterns[i]);
                        if (error)
                            return "patterns." + error;
                    }
                }
                if (message.peeks != null && message.hasOwnProperty("peeks")) {
                    if (!Array.isArray(message.peeks))
                        return "peeks: array expected";
                    for (var i = 0; i < message.peeks.length; ++i) {
                        var error = $root.casper.PeekProto.verify(message.peeks[i]);
                        if (error)
                            return "peeks." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ReportConsumeProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ReportConsumeProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ReportConsumeProto} ReportConsumeProto
             */
            ReportConsumeProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ReportConsumeProto)
                    return object;
                var message = new $root.casper.ReportConsumeProto();
                if (object.channels) {
                    if (!Array.isArray(object.channels))
                        throw TypeError(".casper.ReportConsumeProto.channels: array expected");
                    message.channels = [];
                    for (var i = 0; i < object.channels.length; ++i) {
                        if (typeof object.channels[i] !== "object")
                            throw TypeError(".casper.ReportConsumeProto.channels: object expected");
                        message.channels[i] = $root.Par.fromObject(object.channels[i]);
                    }
                }
                if (object.patterns) {
                    if (!Array.isArray(object.patterns))
                        throw TypeError(".casper.ReportConsumeProto.patterns: array expected");
                    message.patterns = [];
                    for (var i = 0; i < object.patterns.length; ++i) {
                        if (typeof object.patterns[i] !== "object")
                            throw TypeError(".casper.ReportConsumeProto.patterns: object expected");
                        message.patterns[i] = $root.BindPattern.fromObject(object.patterns[i]);
                    }
                }
                if (object.peeks) {
                    if (!Array.isArray(object.peeks))
                        throw TypeError(".casper.ReportConsumeProto.peeks: array expected");
                    message.peeks = [];
                    for (var i = 0; i < object.peeks.length; ++i) {
                        if (typeof object.peeks[i] !== "object")
                            throw TypeError(".casper.ReportConsumeProto.peeks: object expected");
                        message.peeks[i] = $root.casper.PeekProto.fromObject(object.peeks[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ReportConsumeProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ReportConsumeProto
             * @static
             * @param {casper.ReportConsumeProto} message ReportConsumeProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReportConsumeProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.channels = [];
                    object.patterns = [];
                    object.peeks = [];
                }
                if (message.channels && message.channels.length) {
                    object.channels = [];
                    for (var j = 0; j < message.channels.length; ++j)
                        object.channels[j] = $root.Par.toObject(message.channels[j], options);
                }
                if (message.patterns && message.patterns.length) {
                    object.patterns = [];
                    for (var j = 0; j < message.patterns.length; ++j)
                        object.patterns[j] = $root.BindPattern.toObject(message.patterns[j], options);
                }
                if (message.peeks && message.peeks.length) {
                    object.peeks = [];
                    for (var j = 0; j < message.peeks.length; ++j)
                        object.peeks[j] = $root.casper.PeekProto.toObject(message.peeks[j], options);
                }
                return object;
            };

            /**
             * Converts this ReportConsumeProto to JSON.
             * @function toJSON
             * @memberof casper.ReportConsumeProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReportConsumeProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ReportConsumeProto;
        })();

        casper.ReportCommProto = (function() {

            /**
             * Properties of a ReportCommProto.
             * @memberof casper
             * @interface IReportCommProto
             * @property {casper.IReportConsumeProto|null} [consume] ReportCommProto consume
             * @property {Array.<casper.IReportProduceProto>|null} [produces] ReportCommProto produces
             */

            /**
             * Constructs a new ReportCommProto.
             * @memberof casper
             * @classdesc Represents a ReportCommProto.
             * @implements IReportCommProto
             * @constructor
             * @param {casper.IReportCommProto=} [properties] Properties to set
             */
            function ReportCommProto(properties) {
                this.produces = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ReportCommProto consume.
             * @member {casper.IReportConsumeProto|null|undefined} consume
             * @memberof casper.ReportCommProto
             * @instance
             */
            ReportCommProto.prototype.consume = null;

            /**
             * ReportCommProto produces.
             * @member {Array.<casper.IReportProduceProto>} produces
             * @memberof casper.ReportCommProto
             * @instance
             */
            ReportCommProto.prototype.produces = $util.emptyArray;

            /**
             * Creates a new ReportCommProto instance using the specified properties.
             * @function create
             * @memberof casper.ReportCommProto
             * @static
             * @param {casper.IReportCommProto=} [properties] Properties to set
             * @returns {casper.ReportCommProto} ReportCommProto instance
             */
            ReportCommProto.create = function create(properties) {
                return new ReportCommProto(properties);
            };

            /**
             * Encodes the specified ReportCommProto message. Does not implicitly {@link casper.ReportCommProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ReportCommProto
             * @static
             * @param {casper.IReportCommProto} message ReportCommProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReportCommProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.consume != null && message.hasOwnProperty("consume"))
                    $root.casper.ReportConsumeProto.encode(message.consume, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.produces != null && message.produces.length)
                    for (var i = 0; i < message.produces.length; ++i)
                        $root.casper.ReportProduceProto.encode(message.produces[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ReportCommProto message, length delimited. Does not implicitly {@link casper.ReportCommProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ReportCommProto
             * @static
             * @param {casper.IReportCommProto} message ReportCommProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReportCommProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ReportCommProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ReportCommProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ReportCommProto} ReportCommProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReportCommProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ReportCommProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.consume = $root.casper.ReportConsumeProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.produces && message.produces.length))
                            message.produces = [];
                        message.produces.push($root.casper.ReportProduceProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ReportCommProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ReportCommProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ReportCommProto} ReportCommProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReportCommProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ReportCommProto message.
             * @function verify
             * @memberof casper.ReportCommProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReportCommProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.consume != null && message.hasOwnProperty("consume")) {
                    var error = $root.casper.ReportConsumeProto.verify(message.consume);
                    if (error)
                        return "consume." + error;
                }
                if (message.produces != null && message.hasOwnProperty("produces")) {
                    if (!Array.isArray(message.produces))
                        return "produces: array expected";
                    for (var i = 0; i < message.produces.length; ++i) {
                        var error = $root.casper.ReportProduceProto.verify(message.produces[i]);
                        if (error)
                            return "produces." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ReportCommProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ReportCommProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ReportCommProto} ReportCommProto
             */
            ReportCommProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ReportCommProto)
                    return object;
                var message = new $root.casper.ReportCommProto();
                if (object.consume != null) {
                    if (typeof object.consume !== "object")
                        throw TypeError(".casper.ReportCommProto.consume: object expected");
                    message.consume = $root.casper.ReportConsumeProto.fromObject(object.consume);
                }
                if (object.produces) {
                    if (!Array.isArray(object.produces))
                        throw TypeError(".casper.ReportCommProto.produces: array expected");
                    message.produces = [];
                    for (var i = 0; i < object.produces.length; ++i) {
                        if (typeof object.produces[i] !== "object")
                            throw TypeError(".casper.ReportCommProto.produces: object expected");
                        message.produces[i] = $root.casper.ReportProduceProto.fromObject(object.produces[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ReportCommProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ReportCommProto
             * @static
             * @param {casper.ReportCommProto} message ReportCommProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReportCommProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.produces = [];
                if (options.defaults)
                    object.consume = null;
                if (message.consume != null && message.hasOwnProperty("consume"))
                    object.consume = $root.casper.ReportConsumeProto.toObject(message.consume, options);
                if (message.produces && message.produces.length) {
                    object.produces = [];
                    for (var j = 0; j < message.produces.length; ++j)
                        object.produces[j] = $root.casper.ReportProduceProto.toObject(message.produces[j], options);
                }
                return object;
            };

            /**
             * Converts this ReportCommProto to JSON.
             * @function toJSON
             * @memberof casper.ReportCommProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReportCommProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ReportCommProto;
        })();

        casper.ReportProto = (function() {

            /**
             * Properties of a ReportProto.
             * @memberof casper
             * @interface IReportProto
             * @property {casper.IReportProduceProto|null} [produce] ReportProto produce
             * @property {casper.IReportConsumeProto|null} [consume] ReportProto consume
             * @property {casper.IReportCommProto|null} [comm] ReportProto comm
             */

            /**
             * Constructs a new ReportProto.
             * @memberof casper
             * @classdesc Represents a ReportProto.
             * @implements IReportProto
             * @constructor
             * @param {casper.IReportProto=} [properties] Properties to set
             */
            function ReportProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ReportProto produce.
             * @member {casper.IReportProduceProto|null|undefined} produce
             * @memberof casper.ReportProto
             * @instance
             */
            ReportProto.prototype.produce = null;

            /**
             * ReportProto consume.
             * @member {casper.IReportConsumeProto|null|undefined} consume
             * @memberof casper.ReportProto
             * @instance
             */
            ReportProto.prototype.consume = null;

            /**
             * ReportProto comm.
             * @member {casper.IReportCommProto|null|undefined} comm
             * @memberof casper.ReportProto
             * @instance
             */
            ReportProto.prototype.comm = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * ReportProto report.
             * @member {"produce"|"consume"|"comm"|undefined} report
             * @memberof casper.ReportProto
             * @instance
             */
            Object.defineProperty(ReportProto.prototype, "report", {
                get: $util.oneOfGetter($oneOfFields = ["produce", "consume", "comm"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new ReportProto instance using the specified properties.
             * @function create
             * @memberof casper.ReportProto
             * @static
             * @param {casper.IReportProto=} [properties] Properties to set
             * @returns {casper.ReportProto} ReportProto instance
             */
            ReportProto.create = function create(properties) {
                return new ReportProto(properties);
            };

            /**
             * Encodes the specified ReportProto message. Does not implicitly {@link casper.ReportProto.verify|verify} messages.
             * @function encode
             * @memberof casper.ReportProto
             * @static
             * @param {casper.IReportProto} message ReportProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReportProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.produce != null && message.hasOwnProperty("produce"))
                    $root.casper.ReportProduceProto.encode(message.produce, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.consume != null && message.hasOwnProperty("consume"))
                    $root.casper.ReportConsumeProto.encode(message.consume, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.comm != null && message.hasOwnProperty("comm"))
                    $root.casper.ReportCommProto.encode(message.comm, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ReportProto message, length delimited. Does not implicitly {@link casper.ReportProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.ReportProto
             * @static
             * @param {casper.IReportProto} message ReportProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReportProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ReportProto message from the specified reader or buffer.
             * @function decode
             * @memberof casper.ReportProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.ReportProto} ReportProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReportProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ReportProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.produce = $root.casper.ReportProduceProto.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.consume = $root.casper.ReportConsumeProto.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.comm = $root.casper.ReportCommProto.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ReportProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.ReportProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.ReportProto} ReportProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReportProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ReportProto message.
             * @function verify
             * @memberof casper.ReportProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReportProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.produce != null && message.hasOwnProperty("produce")) {
                    properties.report = 1;
                    {
                        var error = $root.casper.ReportProduceProto.verify(message.produce);
                        if (error)
                            return "produce." + error;
                    }
                }
                if (message.consume != null && message.hasOwnProperty("consume")) {
                    if (properties.report === 1)
                        return "report: multiple values";
                    properties.report = 1;
                    {
                        var error = $root.casper.ReportConsumeProto.verify(message.consume);
                        if (error)
                            return "consume." + error;
                    }
                }
                if (message.comm != null && message.hasOwnProperty("comm")) {
                    if (properties.report === 1)
                        return "report: multiple values";
                    properties.report = 1;
                    {
                        var error = $root.casper.ReportCommProto.verify(message.comm);
                        if (error)
                            return "comm." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ReportProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.ReportProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.ReportProto} ReportProto
             */
            ReportProto.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.ReportProto)
                    return object;
                var message = new $root.casper.ReportProto();
                if (object.produce != null) {
                    if (typeof object.produce !== "object")
                        throw TypeError(".casper.ReportProto.produce: object expected");
                    message.produce = $root.casper.ReportProduceProto.fromObject(object.produce);
                }
                if (object.consume != null) {
                    if (typeof object.consume !== "object")
                        throw TypeError(".casper.ReportProto.consume: object expected");
                    message.consume = $root.casper.ReportConsumeProto.fromObject(object.consume);
                }
                if (object.comm != null) {
                    if (typeof object.comm !== "object")
                        throw TypeError(".casper.ReportProto.comm: object expected");
                    message.comm = $root.casper.ReportCommProto.fromObject(object.comm);
                }
                return message;
            };

            /**
             * Creates a plain object from a ReportProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.ReportProto
             * @static
             * @param {casper.ReportProto} message ReportProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReportProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.produce != null && message.hasOwnProperty("produce")) {
                    object.produce = $root.casper.ReportProduceProto.toObject(message.produce, options);
                    if (options.oneofs)
                        object.report = "produce";
                }
                if (message.consume != null && message.hasOwnProperty("consume")) {
                    object.consume = $root.casper.ReportConsumeProto.toObject(message.consume, options);
                    if (options.oneofs)
                        object.report = "consume";
                }
                if (message.comm != null && message.hasOwnProperty("comm")) {
                    object.comm = $root.casper.ReportCommProto.toObject(message.comm, options);
                    if (options.oneofs)
                        object.report = "comm";
                }
                return object;
            };

            /**
             * Converts this ReportProto to JSON.
             * @function toJSON
             * @memberof casper.ReportProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReportProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ReportProto;
        })();

        casper.SingleReport = (function() {

            /**
             * Properties of a SingleReport.
             * @memberof casper
             * @interface ISingleReport
             * @property {Array.<casper.IReportProto>|null} [events] SingleReport events
             */

            /**
             * Constructs a new SingleReport.
             * @memberof casper
             * @classdesc Represents a SingleReport.
             * @implements ISingleReport
             * @constructor
             * @param {casper.ISingleReport=} [properties] Properties to set
             */
            function SingleReport(properties) {
                this.events = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SingleReport events.
             * @member {Array.<casper.IReportProto>} events
             * @memberof casper.SingleReport
             * @instance
             */
            SingleReport.prototype.events = $util.emptyArray;

            /**
             * Creates a new SingleReport instance using the specified properties.
             * @function create
             * @memberof casper.SingleReport
             * @static
             * @param {casper.ISingleReport=} [properties] Properties to set
             * @returns {casper.SingleReport} SingleReport instance
             */
            SingleReport.create = function create(properties) {
                return new SingleReport(properties);
            };

            /**
             * Encodes the specified SingleReport message. Does not implicitly {@link casper.SingleReport.verify|verify} messages.
             * @function encode
             * @memberof casper.SingleReport
             * @static
             * @param {casper.ISingleReport} message SingleReport message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SingleReport.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.events != null && message.events.length)
                    for (var i = 0; i < message.events.length; ++i)
                        $root.casper.ReportProto.encode(message.events[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SingleReport message, length delimited. Does not implicitly {@link casper.SingleReport.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.SingleReport
             * @static
             * @param {casper.ISingleReport} message SingleReport message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SingleReport.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SingleReport message from the specified reader or buffer.
             * @function decode
             * @memberof casper.SingleReport
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.SingleReport} SingleReport
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SingleReport.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.SingleReport();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.events && message.events.length))
                            message.events = [];
                        message.events.push($root.casper.ReportProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SingleReport message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.SingleReport
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.SingleReport} SingleReport
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SingleReport.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SingleReport message.
             * @function verify
             * @memberof casper.SingleReport
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SingleReport.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.events != null && message.hasOwnProperty("events")) {
                    if (!Array.isArray(message.events))
                        return "events: array expected";
                    for (var i = 0; i < message.events.length; ++i) {
                        var error = $root.casper.ReportProto.verify(message.events[i]);
                        if (error)
                            return "events." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SingleReport message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.SingleReport
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.SingleReport} SingleReport
             */
            SingleReport.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.SingleReport)
                    return object;
                var message = new $root.casper.SingleReport();
                if (object.events) {
                    if (!Array.isArray(object.events))
                        throw TypeError(".casper.SingleReport.events: array expected");
                    message.events = [];
                    for (var i = 0; i < object.events.length; ++i) {
                        if (typeof object.events[i] !== "object")
                            throw TypeError(".casper.SingleReport.events: object expected");
                        message.events[i] = $root.casper.ReportProto.fromObject(object.events[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SingleReport message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.SingleReport
             * @static
             * @param {casper.SingleReport} message SingleReport
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SingleReport.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.events = [];
                if (message.events && message.events.length) {
                    object.events = [];
                    for (var j = 0; j < message.events.length; ++j)
                        object.events[j] = $root.casper.ReportProto.toObject(message.events[j], options);
                }
                return object;
            };

            /**
             * Converts this SingleReport to JSON.
             * @function toJSON
             * @memberof casper.SingleReport
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SingleReport.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SingleReport;
        })();

        casper.DeployInfoWithEventData = (function() {

            /**
             * Properties of a DeployInfoWithEventData.
             * @memberof casper
             * @interface IDeployInfoWithEventData
             * @property {casper.IDeployInfo|null} [deployInfo] DeployInfoWithEventData deployInfo
             * @property {Array.<casper.ISingleReport>|null} [report] DeployInfoWithEventData report
             */

            /**
             * Constructs a new DeployInfoWithEventData.
             * @memberof casper
             * @classdesc Represents a DeployInfoWithEventData.
             * @implements IDeployInfoWithEventData
             * @constructor
             * @param {casper.IDeployInfoWithEventData=} [properties] Properties to set
             */
            function DeployInfoWithEventData(properties) {
                this.report = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DeployInfoWithEventData deployInfo.
             * @member {casper.IDeployInfo|null|undefined} deployInfo
             * @memberof casper.DeployInfoWithEventData
             * @instance
             */
            DeployInfoWithEventData.prototype.deployInfo = null;

            /**
             * DeployInfoWithEventData report.
             * @member {Array.<casper.ISingleReport>} report
             * @memberof casper.DeployInfoWithEventData
             * @instance
             */
            DeployInfoWithEventData.prototype.report = $util.emptyArray;

            /**
             * Creates a new DeployInfoWithEventData instance using the specified properties.
             * @function create
             * @memberof casper.DeployInfoWithEventData
             * @static
             * @param {casper.IDeployInfoWithEventData=} [properties] Properties to set
             * @returns {casper.DeployInfoWithEventData} DeployInfoWithEventData instance
             */
            DeployInfoWithEventData.create = function create(properties) {
                return new DeployInfoWithEventData(properties);
            };

            /**
             * Encodes the specified DeployInfoWithEventData message. Does not implicitly {@link casper.DeployInfoWithEventData.verify|verify} messages.
             * @function encode
             * @memberof casper.DeployInfoWithEventData
             * @static
             * @param {casper.IDeployInfoWithEventData} message DeployInfoWithEventData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeployInfoWithEventData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deployInfo != null && message.hasOwnProperty("deployInfo"))
                    $root.casper.DeployInfo.encode(message.deployInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.report != null && message.report.length)
                    for (var i = 0; i < message.report.length; ++i)
                        $root.casper.SingleReport.encode(message.report[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified DeployInfoWithEventData message, length delimited. Does not implicitly {@link casper.DeployInfoWithEventData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.DeployInfoWithEventData
             * @static
             * @param {casper.IDeployInfoWithEventData} message DeployInfoWithEventData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeployInfoWithEventData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DeployInfoWithEventData message from the specified reader or buffer.
             * @function decode
             * @memberof casper.DeployInfoWithEventData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.DeployInfoWithEventData} DeployInfoWithEventData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeployInfoWithEventData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.DeployInfoWithEventData();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deployInfo = $root.casper.DeployInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.report && message.report.length))
                            message.report = [];
                        message.report.push($root.casper.SingleReport.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DeployInfoWithEventData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.DeployInfoWithEventData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.DeployInfoWithEventData} DeployInfoWithEventData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeployInfoWithEventData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DeployInfoWithEventData message.
             * @function verify
             * @memberof casper.DeployInfoWithEventData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DeployInfoWithEventData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deployInfo != null && message.hasOwnProperty("deployInfo")) {
                    var error = $root.casper.DeployInfo.verify(message.deployInfo);
                    if (error)
                        return "deployInfo." + error;
                }
                if (message.report != null && message.hasOwnProperty("report")) {
                    if (!Array.isArray(message.report))
                        return "report: array expected";
                    for (var i = 0; i < message.report.length; ++i) {
                        var error = $root.casper.SingleReport.verify(message.report[i]);
                        if (error)
                            return "report." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a DeployInfoWithEventData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.DeployInfoWithEventData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.DeployInfoWithEventData} DeployInfoWithEventData
             */
            DeployInfoWithEventData.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.DeployInfoWithEventData)
                    return object;
                var message = new $root.casper.DeployInfoWithEventData();
                if (object.deployInfo != null) {
                    if (typeof object.deployInfo !== "object")
                        throw TypeError(".casper.DeployInfoWithEventData.deployInfo: object expected");
                    message.deployInfo = $root.casper.DeployInfo.fromObject(object.deployInfo);
                }
                if (object.report) {
                    if (!Array.isArray(object.report))
                        throw TypeError(".casper.DeployInfoWithEventData.report: array expected");
                    message.report = [];
                    for (var i = 0; i < object.report.length; ++i) {
                        if (typeof object.report[i] !== "object")
                            throw TypeError(".casper.DeployInfoWithEventData.report: object expected");
                        message.report[i] = $root.casper.SingleReport.fromObject(object.report[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a DeployInfoWithEventData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.DeployInfoWithEventData
             * @static
             * @param {casper.DeployInfoWithEventData} message DeployInfoWithEventData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DeployInfoWithEventData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.report = [];
                if (options.defaults)
                    object.deployInfo = null;
                if (message.deployInfo != null && message.hasOwnProperty("deployInfo"))
                    object.deployInfo = $root.casper.DeployInfo.toObject(message.deployInfo, options);
                if (message.report && message.report.length) {
                    object.report = [];
                    for (var j = 0; j < message.report.length; ++j)
                        object.report[j] = $root.casper.SingleReport.toObject(message.report[j], options);
                }
                return object;
            };

            /**
             * Converts this DeployInfoWithEventData to JSON.
             * @function toJSON
             * @memberof casper.DeployInfoWithEventData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DeployInfoWithEventData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DeployInfoWithEventData;
        })();

        casper.BlockEventInfo = (function() {

            /**
             * Properties of a BlockEventInfo.
             * @memberof casper
             * @interface IBlockEventInfo
             * @property {casper.ILightBlockInfo|null} [blockInfo] BlockEventInfo blockInfo
             * @property {Array.<casper.IDeployInfoWithEventData>|null} [deploys] BlockEventInfo deploys
             */

            /**
             * Constructs a new BlockEventInfo.
             * @memberof casper
             * @classdesc Represents a BlockEventInfo.
             * @implements IBlockEventInfo
             * @constructor
             * @param {casper.IBlockEventInfo=} [properties] Properties to set
             */
            function BlockEventInfo(properties) {
                this.deploys = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockEventInfo blockInfo.
             * @member {casper.ILightBlockInfo|null|undefined} blockInfo
             * @memberof casper.BlockEventInfo
             * @instance
             */
            BlockEventInfo.prototype.blockInfo = null;

            /**
             * BlockEventInfo deploys.
             * @member {Array.<casper.IDeployInfoWithEventData>} deploys
             * @memberof casper.BlockEventInfo
             * @instance
             */
            BlockEventInfo.prototype.deploys = $util.emptyArray;

            /**
             * Creates a new BlockEventInfo instance using the specified properties.
             * @function create
             * @memberof casper.BlockEventInfo
             * @static
             * @param {casper.IBlockEventInfo=} [properties] Properties to set
             * @returns {casper.BlockEventInfo} BlockEventInfo instance
             */
            BlockEventInfo.create = function create(properties) {
                return new BlockEventInfo(properties);
            };

            /**
             * Encodes the specified BlockEventInfo message. Does not implicitly {@link casper.BlockEventInfo.verify|verify} messages.
             * @function encode
             * @memberof casper.BlockEventInfo
             * @static
             * @param {casper.IBlockEventInfo} message BlockEventInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockEventInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.blockInfo != null && message.hasOwnProperty("blockInfo"))
                    $root.casper.LightBlockInfo.encode(message.blockInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.deploys != null && message.deploys.length)
                    for (var i = 0; i < message.deploys.length; ++i)
                        $root.casper.DeployInfoWithEventData.encode(message.deploys[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BlockEventInfo message, length delimited. Does not implicitly {@link casper.BlockEventInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.BlockEventInfo
             * @static
             * @param {casper.IBlockEventInfo} message BlockEventInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockEventInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockEventInfo message from the specified reader or buffer.
             * @function decode
             * @memberof casper.BlockEventInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.BlockEventInfo} BlockEventInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockEventInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockEventInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.blockInfo = $root.casper.LightBlockInfo.decode(reader, reader.uint32());
                        break;
                    case 2:
                        if (!(message.deploys && message.deploys.length))
                            message.deploys = [];
                        message.deploys.push($root.casper.DeployInfoWithEventData.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockEventInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.BlockEventInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.BlockEventInfo} BlockEventInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockEventInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockEventInfo message.
             * @function verify
             * @memberof casper.BlockEventInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockEventInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                    var error = $root.casper.LightBlockInfo.verify(message.blockInfo);
                    if (error)
                        return "blockInfo." + error;
                }
                if (message.deploys != null && message.hasOwnProperty("deploys")) {
                    if (!Array.isArray(message.deploys))
                        return "deploys: array expected";
                    for (var i = 0; i < message.deploys.length; ++i) {
                        var error = $root.casper.DeployInfoWithEventData.verify(message.deploys[i]);
                        if (error)
                            return "deploys." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a BlockEventInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.BlockEventInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.BlockEventInfo} BlockEventInfo
             */
            BlockEventInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.BlockEventInfo)
                    return object;
                var message = new $root.casper.BlockEventInfo();
                if (object.blockInfo != null) {
                    if (typeof object.blockInfo !== "object")
                        throw TypeError(".casper.BlockEventInfo.blockInfo: object expected");
                    message.blockInfo = $root.casper.LightBlockInfo.fromObject(object.blockInfo);
                }
                if (object.deploys) {
                    if (!Array.isArray(object.deploys))
                        throw TypeError(".casper.BlockEventInfo.deploys: array expected");
                    message.deploys = [];
                    for (var i = 0; i < object.deploys.length; ++i) {
                        if (typeof object.deploys[i] !== "object")
                            throw TypeError(".casper.BlockEventInfo.deploys: object expected");
                        message.deploys[i] = $root.casper.DeployInfoWithEventData.fromObject(object.deploys[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a BlockEventInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.BlockEventInfo
             * @static
             * @param {casper.BlockEventInfo} message BlockEventInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockEventInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.deploys = [];
                if (options.defaults)
                    object.blockInfo = null;
                if (message.blockInfo != null && message.hasOwnProperty("blockInfo"))
                    object.blockInfo = $root.casper.LightBlockInfo.toObject(message.blockInfo, options);
                if (message.deploys && message.deploys.length) {
                    object.deploys = [];
                    for (var j = 0; j < message.deploys.length; ++j)
                        object.deploys[j] = $root.casper.DeployInfoWithEventData.toObject(message.deploys[j], options);
                }
                return object;
            };

            /**
             * Converts this BlockEventInfo to JSON.
             * @function toJSON
             * @memberof casper.BlockEventInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockEventInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockEventInfo;
        })();

        casper.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof casper
             * @namespace
             */
            var v1 = {};

            v1.DeployService = (function() {

                /**
                 * Constructs a new DeployService service.
                 * @memberof casper.v1
                 * @classdesc Represents a DeployService
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function DeployService(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (DeployService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = DeployService;

                /**
                 * Creates new DeployService service using the specified rpc implementation.
                 * @function create
                 * @memberof casper.v1.DeployService
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {DeployService} RPC service. Useful where requests and/or responses are streamed.
                 */
                DeployService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link casper.v1.DeployService#doDeploy}.
                 * @memberof casper.v1.DeployService
                 * @typedef doDeployCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.DeployResponse} [response] DeployResponse
                 */

                /**
                 * Calls doDeploy.
                 * @function doDeploy
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IDeployDataProto} request DeployDataProto message or plain object
                 * @param {casper.v1.DeployService.doDeployCallback} callback Node-style callback called with the error, if any, and DeployResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.doDeploy = function doDeploy(request, callback) {
                    return this.rpcCall(doDeploy, $root.casper.DeployDataProto, $root.casper.v1.DeployResponse, request, callback);
                }, "name", { value: "doDeploy" });

                /**
                 * Calls doDeploy.
                 * @function doDeploy
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IDeployDataProto} request DeployDataProto message or plain object
                 * @returns {Promise<casper.v1.DeployResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#getBlock}.
                 * @memberof casper.v1.DeployService
                 * @typedef getBlockCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.BlockResponse} [response] BlockResponse
                 */

                /**
                 * Calls getBlock.
                 * @function getBlock
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBlockQuery} request BlockQuery message or plain object
                 * @param {casper.v1.DeployService.getBlockCallback} callback Node-style callback called with the error, if any, and BlockResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.getBlock = function getBlock(request, callback) {
                    return this.rpcCall(getBlock, $root.casper.BlockQuery, $root.casper.v1.BlockResponse, request, callback);
                }, "name", { value: "getBlock" });

                /**
                 * Calls getBlock.
                 * @function getBlock
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBlockQuery} request BlockQuery message or plain object
                 * @returns {Promise<casper.v1.BlockResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#visualizeDag}.
                 * @memberof casper.v1.DeployService
                 * @typedef visualizeDagCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.VisualizeBlocksResponse} [response] VisualizeBlocksResponse
                 */

                /**
                 * Calls visualizeDag.
                 * @function visualizeDag
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IVisualizeDagQuery} request VisualizeDagQuery message or plain object
                 * @param {casper.v1.DeployService.visualizeDagCallback} callback Node-style callback called with the error, if any, and VisualizeBlocksResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.visualizeDag = function visualizeDag(request, callback) {
                    return this.rpcCall(visualizeDag, $root.casper.VisualizeDagQuery, $root.casper.v1.VisualizeBlocksResponse, request, callback);
                }, "name", { value: "visualizeDag" });

                /**
                 * Calls visualizeDag.
                 * @function visualizeDag
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IVisualizeDagQuery} request VisualizeDagQuery message or plain object
                 * @returns {Promise<casper.v1.VisualizeBlocksResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#machineVerifiableDag}.
                 * @memberof casper.v1.DeployService
                 * @typedef machineVerifiableDagCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.MachineVerifyResponse} [response] MachineVerifyResponse
                 */

                /**
                 * Calls machineVerifiableDag.
                 * @function machineVerifiableDag
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IMachineVerifyQuery} request MachineVerifyQuery message or plain object
                 * @param {casper.v1.DeployService.machineVerifiableDagCallback} callback Node-style callback called with the error, if any, and MachineVerifyResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.machineVerifiableDag = function machineVerifiableDag(request, callback) {
                    return this.rpcCall(machineVerifiableDag, $root.casper.MachineVerifyQuery, $root.casper.v1.MachineVerifyResponse, request, callback);
                }, "name", { value: "machineVerifiableDag" });

                /**
                 * Calls machineVerifiableDag.
                 * @function machineVerifiableDag
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IMachineVerifyQuery} request MachineVerifyQuery message or plain object
                 * @returns {Promise<casper.v1.MachineVerifyResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#showMainChain}.
                 * @memberof casper.v1.DeployService
                 * @typedef showMainChainCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.BlockInfoResponse} [response] BlockInfoResponse
                 */

                /**
                 * Calls showMainChain.
                 * @function showMainChain
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBlocksQuery} request BlocksQuery message or plain object
                 * @param {casper.v1.DeployService.showMainChainCallback} callback Node-style callback called with the error, if any, and BlockInfoResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.showMainChain = function showMainChain(request, callback) {
                    return this.rpcCall(showMainChain, $root.casper.BlocksQuery, $root.casper.v1.BlockInfoResponse, request, callback);
                }, "name", { value: "showMainChain" });

                /**
                 * Calls showMainChain.
                 * @function showMainChain
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBlocksQuery} request BlocksQuery message or plain object
                 * @returns {Promise<casper.v1.BlockInfoResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#getBlocks}.
                 * @memberof casper.v1.DeployService
                 * @typedef getBlocksCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.BlockInfoResponse} [response] BlockInfoResponse
                 */

                /**
                 * Calls getBlocks.
                 * @function getBlocks
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBlocksQuery} request BlocksQuery message or plain object
                 * @param {casper.v1.DeployService.getBlocksCallback} callback Node-style callback called with the error, if any, and BlockInfoResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.getBlocks = function getBlocks(request, callback) {
                    return this.rpcCall(getBlocks, $root.casper.BlocksQuery, $root.casper.v1.BlockInfoResponse, request, callback);
                }, "name", { value: "getBlocks" });

                /**
                 * Calls getBlocks.
                 * @function getBlocks
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBlocksQuery} request BlocksQuery message or plain object
                 * @returns {Promise<casper.v1.BlockInfoResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#listenForDataAtName}.
                 * @memberof casper.v1.DeployService
                 * @typedef listenForDataAtNameCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.ListeningNameDataResponse} [response] ListeningNameDataResponse
                 */

                /**
                 * Calls listenForDataAtName.
                 * @function listenForDataAtName
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IDataAtNameQuery} request DataAtNameQuery message or plain object
                 * @param {casper.v1.DeployService.listenForDataAtNameCallback} callback Node-style callback called with the error, if any, and ListeningNameDataResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.listenForDataAtName = function listenForDataAtName(request, callback) {
                    return this.rpcCall(listenForDataAtName, $root.casper.DataAtNameQuery, $root.casper.v1.ListeningNameDataResponse, request, callback);
                }, "name", { value: "listenForDataAtName" });

                /**
                 * Calls listenForDataAtName.
                 * @function listenForDataAtName
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IDataAtNameQuery} request DataAtNameQuery message or plain object
                 * @returns {Promise<casper.v1.ListeningNameDataResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#listenForContinuationAtName}.
                 * @memberof casper.v1.DeployService
                 * @typedef listenForContinuationAtNameCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.ContinuationAtNameResponse} [response] ContinuationAtNameResponse
                 */

                /**
                 * Calls listenForContinuationAtName.
                 * @function listenForContinuationAtName
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IContinuationAtNameQuery} request ContinuationAtNameQuery message or plain object
                 * @param {casper.v1.DeployService.listenForContinuationAtNameCallback} callback Node-style callback called with the error, if any, and ContinuationAtNameResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.listenForContinuationAtName = function listenForContinuationAtName(request, callback) {
                    return this.rpcCall(listenForContinuationAtName, $root.casper.ContinuationAtNameQuery, $root.casper.v1.ContinuationAtNameResponse, request, callback);
                }, "name", { value: "listenForContinuationAtName" });

                /**
                 * Calls listenForContinuationAtName.
                 * @function listenForContinuationAtName
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IContinuationAtNameQuery} request ContinuationAtNameQuery message or plain object
                 * @returns {Promise<casper.v1.ContinuationAtNameResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#findDeploy}.
                 * @memberof casper.v1.DeployService
                 * @typedef findDeployCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.FindDeployResponse} [response] FindDeployResponse
                 */

                /**
                 * Calls findDeploy.
                 * @function findDeploy
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IFindDeployQuery} request FindDeployQuery message or plain object
                 * @param {casper.v1.DeployService.findDeployCallback} callback Node-style callback called with the error, if any, and FindDeployResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.findDeploy = function findDeploy(request, callback) {
                    return this.rpcCall(findDeploy, $root.casper.FindDeployQuery, $root.casper.v1.FindDeployResponse, request, callback);
                }, "name", { value: "findDeploy" });

                /**
                 * Calls findDeploy.
                 * @function findDeploy
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IFindDeployQuery} request FindDeployQuery message or plain object
                 * @returns {Promise<casper.v1.FindDeployResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#previewPrivateNames}.
                 * @memberof casper.v1.DeployService
                 * @typedef previewPrivateNamesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.PrivateNamePreviewResponse} [response] PrivateNamePreviewResponse
                 */

                /**
                 * Calls previewPrivateNames.
                 * @function previewPrivateNames
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IPrivateNamePreviewQuery} request PrivateNamePreviewQuery message or plain object
                 * @param {casper.v1.DeployService.previewPrivateNamesCallback} callback Node-style callback called with the error, if any, and PrivateNamePreviewResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.previewPrivateNames = function previewPrivateNames(request, callback) {
                    return this.rpcCall(previewPrivateNames, $root.casper.PrivateNamePreviewQuery, $root.casper.v1.PrivateNamePreviewResponse, request, callback);
                }, "name", { value: "previewPrivateNames" });

                /**
                 * Calls previewPrivateNames.
                 * @function previewPrivateNames
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IPrivateNamePreviewQuery} request PrivateNamePreviewQuery message or plain object
                 * @returns {Promise<casper.v1.PrivateNamePreviewResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#lastFinalizedBlock}.
                 * @memberof casper.v1.DeployService
                 * @typedef lastFinalizedBlockCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.LastFinalizedBlockResponse} [response] LastFinalizedBlockResponse
                 */

                /**
                 * Calls lastFinalizedBlock.
                 * @function lastFinalizedBlock
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.ILastFinalizedBlockQuery} request LastFinalizedBlockQuery message or plain object
                 * @param {casper.v1.DeployService.lastFinalizedBlockCallback} callback Node-style callback called with the error, if any, and LastFinalizedBlockResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.lastFinalizedBlock = function lastFinalizedBlock(request, callback) {
                    return this.rpcCall(lastFinalizedBlock, $root.casper.LastFinalizedBlockQuery, $root.casper.v1.LastFinalizedBlockResponse, request, callback);
                }, "name", { value: "lastFinalizedBlock" });

                /**
                 * Calls lastFinalizedBlock.
                 * @function lastFinalizedBlock
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.ILastFinalizedBlockQuery} request LastFinalizedBlockQuery message or plain object
                 * @returns {Promise<casper.v1.LastFinalizedBlockResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#isFinalized}.
                 * @memberof casper.v1.DeployService
                 * @typedef isFinalizedCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.IsFinalizedResponse} [response] IsFinalizedResponse
                 */

                /**
                 * Calls isFinalized.
                 * @function isFinalized
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IIsFinalizedQuery} request IsFinalizedQuery message or plain object
                 * @param {casper.v1.DeployService.isFinalizedCallback} callback Node-style callback called with the error, if any, and IsFinalizedResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.isFinalized = function isFinalized(request, callback) {
                    return this.rpcCall(isFinalized, $root.casper.IsFinalizedQuery, $root.casper.v1.IsFinalizedResponse, request, callback);
                }, "name", { value: "isFinalized" });

                /**
                 * Calls isFinalized.
                 * @function isFinalized
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IIsFinalizedQuery} request IsFinalizedQuery message or plain object
                 * @returns {Promise<casper.v1.IsFinalizedResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#bondStatus}.
                 * @memberof casper.v1.DeployService
                 * @typedef bondStatusCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.BondStatusResponse} [response] BondStatusResponse
                 */

                /**
                 * Calls bondStatus.
                 * @function bondStatus
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBondStatusQuery} request BondStatusQuery message or plain object
                 * @param {casper.v1.DeployService.bondStatusCallback} callback Node-style callback called with the error, if any, and BondStatusResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.bondStatus = function bondStatus(request, callback) {
                    return this.rpcCall(bondStatus, $root.casper.BondStatusQuery, $root.casper.v1.BondStatusResponse, request, callback);
                }, "name", { value: "bondStatus" });

                /**
                 * Calls bondStatus.
                 * @function bondStatus
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBondStatusQuery} request BondStatusQuery message or plain object
                 * @returns {Promise<casper.v1.BondStatusResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#exploratoryDeploy}.
                 * @memberof casper.v1.DeployService
                 * @typedef exploratoryDeployCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.ExploratoryDeployResponse} [response] ExploratoryDeployResponse
                 */

                /**
                 * Calls exploratoryDeploy.
                 * @function exploratoryDeploy
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IExploratoryDeployQuery} request ExploratoryDeployQuery message or plain object
                 * @param {casper.v1.DeployService.exploratoryDeployCallback} callback Node-style callback called with the error, if any, and ExploratoryDeployResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.exploratoryDeploy = function exploratoryDeploy(request, callback) {
                    return this.rpcCall(exploratoryDeploy, $root.casper.ExploratoryDeployQuery, $root.casper.v1.ExploratoryDeployResponse, request, callback);
                }, "name", { value: "exploratoryDeploy" });

                /**
                 * Calls exploratoryDeploy.
                 * @function exploratoryDeploy
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IExploratoryDeployQuery} request ExploratoryDeployQuery message or plain object
                 * @returns {Promise<casper.v1.ExploratoryDeployResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#getBlocksByHeights}.
                 * @memberof casper.v1.DeployService
                 * @typedef getBlocksByHeightsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.BlockInfoResponse} [response] BlockInfoResponse
                 */

                /**
                 * Calls getBlocksByHeights.
                 * @function getBlocksByHeights
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBlocksQueryByHeight} request BlocksQueryByHeight message or plain object
                 * @param {casper.v1.DeployService.getBlocksByHeightsCallback} callback Node-style callback called with the error, if any, and BlockInfoResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.getBlocksByHeights = function getBlocksByHeights(request, callback) {
                    return this.rpcCall(getBlocksByHeights, $root.casper.BlocksQueryByHeight, $root.casper.v1.BlockInfoResponse, request, callback);
                }, "name", { value: "getBlocksByHeights" });

                /**
                 * Calls getBlocksByHeights.
                 * @function getBlocksByHeights
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBlocksQueryByHeight} request BlocksQueryByHeight message or plain object
                 * @returns {Promise<casper.v1.BlockInfoResponse>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link casper.v1.DeployService#getEventByHash}.
                 * @memberof casper.v1.DeployService
                 * @typedef getEventByHashCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.EventInfoResponse} [response] EventInfoResponse
                 */

                /**
                 * Calls getEventByHash.
                 * @function getEventByHash
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBlockQuery} request BlockQuery message or plain object
                 * @param {casper.v1.DeployService.getEventByHashCallback} callback Node-style callback called with the error, if any, and EventInfoResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(DeployService.prototype.getEventByHash = function getEventByHash(request, callback) {
                    return this.rpcCall(getEventByHash, $root.casper.BlockQuery, $root.casper.v1.EventInfoResponse, request, callback);
                }, "name", { value: "getEventByHash" });

                /**
                 * Calls getEventByHash.
                 * @function getEventByHash
                 * @memberof casper.v1.DeployService
                 * @instance
                 * @param {casper.IBlockQuery} request BlockQuery message or plain object
                 * @returns {Promise<casper.v1.EventInfoResponse>} Promise
                 * @variation 2
                 */

                return DeployService;
            })();

            v1.EventInfoResponse = (function() {

                /**
                 * Properties of an EventInfoResponse.
                 * @memberof casper.v1
                 * @interface IEventInfoResponse
                 * @property {IServiceError|null} [error] EventInfoResponse error
                 * @property {casper.IBlockEventInfo|null} [result] EventInfoResponse result
                 */

                /**
                 * Constructs a new EventInfoResponse.
                 * @memberof casper.v1
                 * @classdesc Represents an EventInfoResponse.
                 * @implements IEventInfoResponse
                 * @constructor
                 * @param {casper.v1.IEventInfoResponse=} [properties] Properties to set
                 */
                function EventInfoResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EventInfoResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.EventInfoResponse
                 * @instance
                 */
                EventInfoResponse.prototype.error = null;

                /**
                 * EventInfoResponse result.
                 * @member {casper.IBlockEventInfo|null|undefined} result
                 * @memberof casper.v1.EventInfoResponse
                 * @instance
                 */
                EventInfoResponse.prototype.result = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * EventInfoResponse message.
                 * @member {"error"|"result"|undefined} message
                 * @memberof casper.v1.EventInfoResponse
                 * @instance
                 */
                Object.defineProperty(EventInfoResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "result"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new EventInfoResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.EventInfoResponse
                 * @static
                 * @param {casper.v1.IEventInfoResponse=} [properties] Properties to set
                 * @returns {casper.v1.EventInfoResponse} EventInfoResponse instance
                 */
                EventInfoResponse.create = function create(properties) {
                    return new EventInfoResponse(properties);
                };

                /**
                 * Encodes the specified EventInfoResponse message. Does not implicitly {@link casper.v1.EventInfoResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.EventInfoResponse
                 * @static
                 * @param {casper.v1.IEventInfoResponse} message EventInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventInfoResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.result != null && message.hasOwnProperty("result"))
                        $root.casper.BlockEventInfo.encode(message.result, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EventInfoResponse message, length delimited. Does not implicitly {@link casper.v1.EventInfoResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.EventInfoResponse
                 * @static
                 * @param {casper.v1.IEventInfoResponse} message EventInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EventInfoResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.EventInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.EventInfoResponse} EventInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventInfoResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.EventInfoResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.result = $root.casper.BlockEventInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EventInfoResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.EventInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.EventInfoResponse} EventInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EventInfoResponse message.
                 * @function verify
                 * @memberof casper.v1.EventInfoResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventInfoResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.result != null && message.hasOwnProperty("result")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.casper.BlockEventInfo.verify(message.result);
                            if (error)
                                return "result." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an EventInfoResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.EventInfoResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.EventInfoResponse} EventInfoResponse
                 */
                EventInfoResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.EventInfoResponse)
                        return object;
                    var message = new $root.casper.v1.EventInfoResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.EventInfoResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.result != null) {
                        if (typeof object.result !== "object")
                            throw TypeError(".casper.v1.EventInfoResponse.result: object expected");
                        message.result = $root.casper.BlockEventInfo.fromObject(object.result);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EventInfoResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.EventInfoResponse
                 * @static
                 * @param {casper.v1.EventInfoResponse} message EventInfoResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventInfoResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.result != null && message.hasOwnProperty("result")) {
                        object.result = $root.casper.BlockEventInfo.toObject(message.result, options);
                        if (options.oneofs)
                            object.message = "result";
                    }
                    return object;
                };

                /**
                 * Converts this EventInfoResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.EventInfoResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventInfoResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EventInfoResponse;
            })();

            v1.ExploratoryDeployResponse = (function() {

                /**
                 * Properties of an ExploratoryDeployResponse.
                 * @memberof casper.v1
                 * @interface IExploratoryDeployResponse
                 * @property {IServiceError|null} [error] ExploratoryDeployResponse error
                 * @property {casper.IDataWithBlockInfo|null} [result] ExploratoryDeployResponse result
                 */

                /**
                 * Constructs a new ExploratoryDeployResponse.
                 * @memberof casper.v1
                 * @classdesc Represents an ExploratoryDeployResponse.
                 * @implements IExploratoryDeployResponse
                 * @constructor
                 * @param {casper.v1.IExploratoryDeployResponse=} [properties] Properties to set
                 */
                function ExploratoryDeployResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExploratoryDeployResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @instance
                 */
                ExploratoryDeployResponse.prototype.error = null;

                /**
                 * ExploratoryDeployResponse result.
                 * @member {casper.IDataWithBlockInfo|null|undefined} result
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @instance
                 */
                ExploratoryDeployResponse.prototype.result = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * ExploratoryDeployResponse message.
                 * @member {"error"|"result"|undefined} message
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @instance
                 */
                Object.defineProperty(ExploratoryDeployResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "result"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new ExploratoryDeployResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @static
                 * @param {casper.v1.IExploratoryDeployResponse=} [properties] Properties to set
                 * @returns {casper.v1.ExploratoryDeployResponse} ExploratoryDeployResponse instance
                 */
                ExploratoryDeployResponse.create = function create(properties) {
                    return new ExploratoryDeployResponse(properties);
                };

                /**
                 * Encodes the specified ExploratoryDeployResponse message. Does not implicitly {@link casper.v1.ExploratoryDeployResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @static
                 * @param {casper.v1.IExploratoryDeployResponse} message ExploratoryDeployResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExploratoryDeployResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.result != null && message.hasOwnProperty("result"))
                        $root.casper.DataWithBlockInfo.encode(message.result, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ExploratoryDeployResponse message, length delimited. Does not implicitly {@link casper.v1.ExploratoryDeployResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @static
                 * @param {casper.v1.IExploratoryDeployResponse} message ExploratoryDeployResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExploratoryDeployResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExploratoryDeployResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.ExploratoryDeployResponse} ExploratoryDeployResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExploratoryDeployResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ExploratoryDeployResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.result = $root.casper.DataWithBlockInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExploratoryDeployResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.ExploratoryDeployResponse} ExploratoryDeployResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExploratoryDeployResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExploratoryDeployResponse message.
                 * @function verify
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExploratoryDeployResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.result != null && message.hasOwnProperty("result")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.casper.DataWithBlockInfo.verify(message.result);
                            if (error)
                                return "result." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an ExploratoryDeployResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.ExploratoryDeployResponse} ExploratoryDeployResponse
                 */
                ExploratoryDeployResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.ExploratoryDeployResponse)
                        return object;
                    var message = new $root.casper.v1.ExploratoryDeployResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.ExploratoryDeployResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.result != null) {
                        if (typeof object.result !== "object")
                            throw TypeError(".casper.v1.ExploratoryDeployResponse.result: object expected");
                        message.result = $root.casper.DataWithBlockInfo.fromObject(object.result);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ExploratoryDeployResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @static
                 * @param {casper.v1.ExploratoryDeployResponse} message ExploratoryDeployResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExploratoryDeployResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.result != null && message.hasOwnProperty("result")) {
                        object.result = $root.casper.DataWithBlockInfo.toObject(message.result, options);
                        if (options.oneofs)
                            object.message = "result";
                    }
                    return object;
                };

                /**
                 * Converts this ExploratoryDeployResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.ExploratoryDeployResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExploratoryDeployResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExploratoryDeployResponse;
            })();

            v1.DeployResponse = (function() {

                /**
                 * Properties of a DeployResponse.
                 * @memberof casper.v1
                 * @interface IDeployResponse
                 * @property {IServiceError|null} [error] DeployResponse error
                 * @property {string|null} [result] DeployResponse result
                 */

                /**
                 * Constructs a new DeployResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a DeployResponse.
                 * @implements IDeployResponse
                 * @constructor
                 * @param {casper.v1.IDeployResponse=} [properties] Properties to set
                 */
                function DeployResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DeployResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.DeployResponse
                 * @instance
                 */
                DeployResponse.prototype.error = null;

                /**
                 * DeployResponse result.
                 * @member {string} result
                 * @memberof casper.v1.DeployResponse
                 * @instance
                 */
                DeployResponse.prototype.result = "";

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * DeployResponse message.
                 * @member {"error"|"result"|undefined} message
                 * @memberof casper.v1.DeployResponse
                 * @instance
                 */
                Object.defineProperty(DeployResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "result"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new DeployResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.DeployResponse
                 * @static
                 * @param {casper.v1.IDeployResponse=} [properties] Properties to set
                 * @returns {casper.v1.DeployResponse} DeployResponse instance
                 */
                DeployResponse.create = function create(properties) {
                    return new DeployResponse(properties);
                };

                /**
                 * Encodes the specified DeployResponse message. Does not implicitly {@link casper.v1.DeployResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.DeployResponse
                 * @static
                 * @param {casper.v1.IDeployResponse} message DeployResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeployResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.result != null && message.hasOwnProperty("result"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.result);
                    return writer;
                };

                /**
                 * Encodes the specified DeployResponse message, length delimited. Does not implicitly {@link casper.v1.DeployResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.DeployResponse
                 * @static
                 * @param {casper.v1.IDeployResponse} message DeployResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeployResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DeployResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.DeployResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.DeployResponse} DeployResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeployResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.DeployResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.result = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DeployResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.DeployResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.DeployResponse} DeployResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeployResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DeployResponse message.
                 * @function verify
                 * @memberof casper.v1.DeployResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeployResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.result != null && message.hasOwnProperty("result")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        if (!$util.isString(message.result))
                            return "result: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a DeployResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.DeployResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.DeployResponse} DeployResponse
                 */
                DeployResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.DeployResponse)
                        return object;
                    var message = new $root.casper.v1.DeployResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.DeployResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.result != null)
                        message.result = String(object.result);
                    return message;
                };

                /**
                 * Creates a plain object from a DeployResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.DeployResponse
                 * @static
                 * @param {casper.v1.DeployResponse} message DeployResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeployResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.result != null && message.hasOwnProperty("result")) {
                        object.result = message.result;
                        if (options.oneofs)
                            object.message = "result";
                    }
                    return object;
                };

                /**
                 * Converts this DeployResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.DeployResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeployResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DeployResponse;
            })();

            v1.BlockResponse = (function() {

                /**
                 * Properties of a BlockResponse.
                 * @memberof casper.v1
                 * @interface IBlockResponse
                 * @property {IServiceError|null} [error] BlockResponse error
                 * @property {casper.IBlockInfo|null} [blockInfo] BlockResponse blockInfo
                 */

                /**
                 * Constructs a new BlockResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a BlockResponse.
                 * @implements IBlockResponse
                 * @constructor
                 * @param {casper.v1.IBlockResponse=} [properties] Properties to set
                 */
                function BlockResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * BlockResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.BlockResponse
                 * @instance
                 */
                BlockResponse.prototype.error = null;

                /**
                 * BlockResponse blockInfo.
                 * @member {casper.IBlockInfo|null|undefined} blockInfo
                 * @memberof casper.v1.BlockResponse
                 * @instance
                 */
                BlockResponse.prototype.blockInfo = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * BlockResponse message.
                 * @member {"error"|"blockInfo"|undefined} message
                 * @memberof casper.v1.BlockResponse
                 * @instance
                 */
                Object.defineProperty(BlockResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "blockInfo"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new BlockResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.BlockResponse
                 * @static
                 * @param {casper.v1.IBlockResponse=} [properties] Properties to set
                 * @returns {casper.v1.BlockResponse} BlockResponse instance
                 */
                BlockResponse.create = function create(properties) {
                    return new BlockResponse(properties);
                };

                /**
                 * Encodes the specified BlockResponse message. Does not implicitly {@link casper.v1.BlockResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.BlockResponse
                 * @static
                 * @param {casper.v1.IBlockResponse} message BlockResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo"))
                        $root.casper.BlockInfo.encode(message.blockInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified BlockResponse message, length delimited. Does not implicitly {@link casper.v1.BlockResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.BlockResponse
                 * @static
                 * @param {casper.v1.IBlockResponse} message BlockResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a BlockResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.BlockResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.BlockResponse} BlockResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.BlockResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.blockInfo = $root.casper.BlockInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a BlockResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.BlockResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.BlockResponse} BlockResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a BlockResponse message.
                 * @function verify
                 * @memberof casper.v1.BlockResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BlockResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.casper.BlockInfo.verify(message.blockInfo);
                            if (error)
                                return "blockInfo." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a BlockResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.BlockResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.BlockResponse} BlockResponse
                 */
                BlockResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.BlockResponse)
                        return object;
                    var message = new $root.casper.v1.BlockResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.BlockResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.blockInfo != null) {
                        if (typeof object.blockInfo !== "object")
                            throw TypeError(".casper.v1.BlockResponse.blockInfo: object expected");
                        message.blockInfo = $root.casper.BlockInfo.fromObject(object.blockInfo);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a BlockResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.BlockResponse
                 * @static
                 * @param {casper.v1.BlockResponse} message BlockResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BlockResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                        object.blockInfo = $root.casper.BlockInfo.toObject(message.blockInfo, options);
                        if (options.oneofs)
                            object.message = "blockInfo";
                    }
                    return object;
                };

                /**
                 * Converts this BlockResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.BlockResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BlockResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return BlockResponse;
            })();

            v1.VisualizeBlocksResponse = (function() {

                /**
                 * Properties of a VisualizeBlocksResponse.
                 * @memberof casper.v1
                 * @interface IVisualizeBlocksResponse
                 * @property {IServiceError|null} [error] VisualizeBlocksResponse error
                 * @property {string|null} [content] VisualizeBlocksResponse content
                 */

                /**
                 * Constructs a new VisualizeBlocksResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a VisualizeBlocksResponse.
                 * @implements IVisualizeBlocksResponse
                 * @constructor
                 * @param {casper.v1.IVisualizeBlocksResponse=} [properties] Properties to set
                 */
                function VisualizeBlocksResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VisualizeBlocksResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @instance
                 */
                VisualizeBlocksResponse.prototype.error = null;

                /**
                 * VisualizeBlocksResponse content.
                 * @member {string} content
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @instance
                 */
                VisualizeBlocksResponse.prototype.content = "";

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * VisualizeBlocksResponse message.
                 * @member {"error"|"content"|undefined} message
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @instance
                 */
                Object.defineProperty(VisualizeBlocksResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "content"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new VisualizeBlocksResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @static
                 * @param {casper.v1.IVisualizeBlocksResponse=} [properties] Properties to set
                 * @returns {casper.v1.VisualizeBlocksResponse} VisualizeBlocksResponse instance
                 */
                VisualizeBlocksResponse.create = function create(properties) {
                    return new VisualizeBlocksResponse(properties);
                };

                /**
                 * Encodes the specified VisualizeBlocksResponse message. Does not implicitly {@link casper.v1.VisualizeBlocksResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @static
                 * @param {casper.v1.IVisualizeBlocksResponse} message VisualizeBlocksResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VisualizeBlocksResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.content != null && message.hasOwnProperty("content"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
                    return writer;
                };

                /**
                 * Encodes the specified VisualizeBlocksResponse message, length delimited. Does not implicitly {@link casper.v1.VisualizeBlocksResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @static
                 * @param {casper.v1.IVisualizeBlocksResponse} message VisualizeBlocksResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VisualizeBlocksResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VisualizeBlocksResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.VisualizeBlocksResponse} VisualizeBlocksResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VisualizeBlocksResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.VisualizeBlocksResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.content = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a VisualizeBlocksResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.VisualizeBlocksResponse} VisualizeBlocksResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VisualizeBlocksResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VisualizeBlocksResponse message.
                 * @function verify
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VisualizeBlocksResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.content != null && message.hasOwnProperty("content")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        if (!$util.isString(message.content))
                            return "content: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a VisualizeBlocksResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.VisualizeBlocksResponse} VisualizeBlocksResponse
                 */
                VisualizeBlocksResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.VisualizeBlocksResponse)
                        return object;
                    var message = new $root.casper.v1.VisualizeBlocksResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.VisualizeBlocksResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.content != null)
                        message.content = String(object.content);
                    return message;
                };

                /**
                 * Creates a plain object from a VisualizeBlocksResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @static
                 * @param {casper.v1.VisualizeBlocksResponse} message VisualizeBlocksResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VisualizeBlocksResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.content != null && message.hasOwnProperty("content")) {
                        object.content = message.content;
                        if (options.oneofs)
                            object.message = "content";
                    }
                    return object;
                };

                /**
                 * Converts this VisualizeBlocksResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.VisualizeBlocksResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VisualizeBlocksResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return VisualizeBlocksResponse;
            })();

            v1.MachineVerifyResponse = (function() {

                /**
                 * Properties of a MachineVerifyResponse.
                 * @memberof casper.v1
                 * @interface IMachineVerifyResponse
                 * @property {IServiceError|null} [error] MachineVerifyResponse error
                 * @property {string|null} [content] MachineVerifyResponse content
                 */

                /**
                 * Constructs a new MachineVerifyResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a MachineVerifyResponse.
                 * @implements IMachineVerifyResponse
                 * @constructor
                 * @param {casper.v1.IMachineVerifyResponse=} [properties] Properties to set
                 */
                function MachineVerifyResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MachineVerifyResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.MachineVerifyResponse
                 * @instance
                 */
                MachineVerifyResponse.prototype.error = null;

                /**
                 * MachineVerifyResponse content.
                 * @member {string} content
                 * @memberof casper.v1.MachineVerifyResponse
                 * @instance
                 */
                MachineVerifyResponse.prototype.content = "";

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * MachineVerifyResponse message.
                 * @member {"error"|"content"|undefined} message
                 * @memberof casper.v1.MachineVerifyResponse
                 * @instance
                 */
                Object.defineProperty(MachineVerifyResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "content"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new MachineVerifyResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.MachineVerifyResponse
                 * @static
                 * @param {casper.v1.IMachineVerifyResponse=} [properties] Properties to set
                 * @returns {casper.v1.MachineVerifyResponse} MachineVerifyResponse instance
                 */
                MachineVerifyResponse.create = function create(properties) {
                    return new MachineVerifyResponse(properties);
                };

                /**
                 * Encodes the specified MachineVerifyResponse message. Does not implicitly {@link casper.v1.MachineVerifyResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.MachineVerifyResponse
                 * @static
                 * @param {casper.v1.IMachineVerifyResponse} message MachineVerifyResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MachineVerifyResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.content != null && message.hasOwnProperty("content"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
                    return writer;
                };

                /**
                 * Encodes the specified MachineVerifyResponse message, length delimited. Does not implicitly {@link casper.v1.MachineVerifyResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.MachineVerifyResponse
                 * @static
                 * @param {casper.v1.IMachineVerifyResponse} message MachineVerifyResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MachineVerifyResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MachineVerifyResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.MachineVerifyResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.MachineVerifyResponse} MachineVerifyResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MachineVerifyResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.MachineVerifyResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.content = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MachineVerifyResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.MachineVerifyResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.MachineVerifyResponse} MachineVerifyResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MachineVerifyResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MachineVerifyResponse message.
                 * @function verify
                 * @memberof casper.v1.MachineVerifyResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MachineVerifyResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.content != null && message.hasOwnProperty("content")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        if (!$util.isString(message.content))
                            return "content: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a MachineVerifyResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.MachineVerifyResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.MachineVerifyResponse} MachineVerifyResponse
                 */
                MachineVerifyResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.MachineVerifyResponse)
                        return object;
                    var message = new $root.casper.v1.MachineVerifyResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.MachineVerifyResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.content != null)
                        message.content = String(object.content);
                    return message;
                };

                /**
                 * Creates a plain object from a MachineVerifyResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.MachineVerifyResponse
                 * @static
                 * @param {casper.v1.MachineVerifyResponse} message MachineVerifyResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MachineVerifyResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.content != null && message.hasOwnProperty("content")) {
                        object.content = message.content;
                        if (options.oneofs)
                            object.message = "content";
                    }
                    return object;
                };

                /**
                 * Converts this MachineVerifyResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.MachineVerifyResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MachineVerifyResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MachineVerifyResponse;
            })();

            v1.BlockInfoResponse = (function() {

                /**
                 * Properties of a BlockInfoResponse.
                 * @memberof casper.v1
                 * @interface IBlockInfoResponse
                 * @property {IServiceError|null} [error] BlockInfoResponse error
                 * @property {casper.ILightBlockInfo|null} [blockInfo] BlockInfoResponse blockInfo
                 */

                /**
                 * Constructs a new BlockInfoResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a BlockInfoResponse.
                 * @implements IBlockInfoResponse
                 * @constructor
                 * @param {casper.v1.IBlockInfoResponse=} [properties] Properties to set
                 */
                function BlockInfoResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * BlockInfoResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.BlockInfoResponse
                 * @instance
                 */
                BlockInfoResponse.prototype.error = null;

                /**
                 * BlockInfoResponse blockInfo.
                 * @member {casper.ILightBlockInfo|null|undefined} blockInfo
                 * @memberof casper.v1.BlockInfoResponse
                 * @instance
                 */
                BlockInfoResponse.prototype.blockInfo = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * BlockInfoResponse message.
                 * @member {"error"|"blockInfo"|undefined} message
                 * @memberof casper.v1.BlockInfoResponse
                 * @instance
                 */
                Object.defineProperty(BlockInfoResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "blockInfo"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new BlockInfoResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.BlockInfoResponse
                 * @static
                 * @param {casper.v1.IBlockInfoResponse=} [properties] Properties to set
                 * @returns {casper.v1.BlockInfoResponse} BlockInfoResponse instance
                 */
                BlockInfoResponse.create = function create(properties) {
                    return new BlockInfoResponse(properties);
                };

                /**
                 * Encodes the specified BlockInfoResponse message. Does not implicitly {@link casper.v1.BlockInfoResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.BlockInfoResponse
                 * @static
                 * @param {casper.v1.IBlockInfoResponse} message BlockInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockInfoResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo"))
                        $root.casper.LightBlockInfo.encode(message.blockInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified BlockInfoResponse message, length delimited. Does not implicitly {@link casper.v1.BlockInfoResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.BlockInfoResponse
                 * @static
                 * @param {casper.v1.IBlockInfoResponse} message BlockInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a BlockInfoResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.BlockInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.BlockInfoResponse} BlockInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockInfoResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.BlockInfoResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.blockInfo = $root.casper.LightBlockInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a BlockInfoResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.BlockInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.BlockInfoResponse} BlockInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a BlockInfoResponse message.
                 * @function verify
                 * @memberof casper.v1.BlockInfoResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BlockInfoResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.casper.LightBlockInfo.verify(message.blockInfo);
                            if (error)
                                return "blockInfo." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a BlockInfoResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.BlockInfoResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.BlockInfoResponse} BlockInfoResponse
                 */
                BlockInfoResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.BlockInfoResponse)
                        return object;
                    var message = new $root.casper.v1.BlockInfoResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.BlockInfoResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.blockInfo != null) {
                        if (typeof object.blockInfo !== "object")
                            throw TypeError(".casper.v1.BlockInfoResponse.blockInfo: object expected");
                        message.blockInfo = $root.casper.LightBlockInfo.fromObject(object.blockInfo);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a BlockInfoResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.BlockInfoResponse
                 * @static
                 * @param {casper.v1.BlockInfoResponse} message BlockInfoResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BlockInfoResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                        object.blockInfo = $root.casper.LightBlockInfo.toObject(message.blockInfo, options);
                        if (options.oneofs)
                            object.message = "blockInfo";
                    }
                    return object;
                };

                /**
                 * Converts this BlockInfoResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.BlockInfoResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BlockInfoResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return BlockInfoResponse;
            })();

            v1.ListeningNameDataResponse = (function() {

                /**
                 * Properties of a ListeningNameDataResponse.
                 * @memberof casper.v1
                 * @interface IListeningNameDataResponse
                 * @property {IServiceError|null} [error] ListeningNameDataResponse error
                 * @property {casper.v1.IListeningNameDataPayload|null} [payload] ListeningNameDataResponse payload
                 */

                /**
                 * Constructs a new ListeningNameDataResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a ListeningNameDataResponse.
                 * @implements IListeningNameDataResponse
                 * @constructor
                 * @param {casper.v1.IListeningNameDataResponse=} [properties] Properties to set
                 */
                function ListeningNameDataResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ListeningNameDataResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @instance
                 */
                ListeningNameDataResponse.prototype.error = null;

                /**
                 * ListeningNameDataResponse payload.
                 * @member {casper.v1.IListeningNameDataPayload|null|undefined} payload
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @instance
                 */
                ListeningNameDataResponse.prototype.payload = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * ListeningNameDataResponse message.
                 * @member {"error"|"payload"|undefined} message
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @instance
                 */
                Object.defineProperty(ListeningNameDataResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "payload"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new ListeningNameDataResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @static
                 * @param {casper.v1.IListeningNameDataResponse=} [properties] Properties to set
                 * @returns {casper.v1.ListeningNameDataResponse} ListeningNameDataResponse instance
                 */
                ListeningNameDataResponse.create = function create(properties) {
                    return new ListeningNameDataResponse(properties);
                };

                /**
                 * Encodes the specified ListeningNameDataResponse message. Does not implicitly {@link casper.v1.ListeningNameDataResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @static
                 * @param {casper.v1.IListeningNameDataResponse} message ListeningNameDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListeningNameDataResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.payload != null && message.hasOwnProperty("payload"))
                        $root.casper.v1.ListeningNameDataPayload.encode(message.payload, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ListeningNameDataResponse message, length delimited. Does not implicitly {@link casper.v1.ListeningNameDataResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @static
                 * @param {casper.v1.IListeningNameDataResponse} message ListeningNameDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListeningNameDataResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ListeningNameDataResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.ListeningNameDataResponse} ListeningNameDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListeningNameDataResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ListeningNameDataResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.payload = $root.casper.v1.ListeningNameDataPayload.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ListeningNameDataResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.ListeningNameDataResponse} ListeningNameDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListeningNameDataResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ListeningNameDataResponse message.
                 * @function verify
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListeningNameDataResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.payload != null && message.hasOwnProperty("payload")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.casper.v1.ListeningNameDataPayload.verify(message.payload);
                            if (error)
                                return "payload." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ListeningNameDataResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.ListeningNameDataResponse} ListeningNameDataResponse
                 */
                ListeningNameDataResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.ListeningNameDataResponse)
                        return object;
                    var message = new $root.casper.v1.ListeningNameDataResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.ListeningNameDataResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.payload != null) {
                        if (typeof object.payload !== "object")
                            throw TypeError(".casper.v1.ListeningNameDataResponse.payload: object expected");
                        message.payload = $root.casper.v1.ListeningNameDataPayload.fromObject(object.payload);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ListeningNameDataResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @static
                 * @param {casper.v1.ListeningNameDataResponse} message ListeningNameDataResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListeningNameDataResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.payload != null && message.hasOwnProperty("payload")) {
                        object.payload = $root.casper.v1.ListeningNameDataPayload.toObject(message.payload, options);
                        if (options.oneofs)
                            object.message = "payload";
                    }
                    return object;
                };

                /**
                 * Converts this ListeningNameDataResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.ListeningNameDataResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListeningNameDataResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ListeningNameDataResponse;
            })();

            v1.ListeningNameDataPayload = (function() {

                /**
                 * Properties of a ListeningNameDataPayload.
                 * @memberof casper.v1
                 * @interface IListeningNameDataPayload
                 * @property {Array.<casper.IDataWithBlockInfo>|null} [blockInfo] ListeningNameDataPayload blockInfo
                 * @property {number|null} [length] ListeningNameDataPayload length
                 */

                /**
                 * Constructs a new ListeningNameDataPayload.
                 * @memberof casper.v1
                 * @classdesc Represents a ListeningNameDataPayload.
                 * @implements IListeningNameDataPayload
                 * @constructor
                 * @param {casper.v1.IListeningNameDataPayload=} [properties] Properties to set
                 */
                function ListeningNameDataPayload(properties) {
                    this.blockInfo = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ListeningNameDataPayload blockInfo.
                 * @member {Array.<casper.IDataWithBlockInfo>} blockInfo
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @instance
                 */
                ListeningNameDataPayload.prototype.blockInfo = $util.emptyArray;

                /**
                 * ListeningNameDataPayload length.
                 * @member {number} length
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @instance
                 */
                ListeningNameDataPayload.prototype.length = 0;

                /**
                 * Creates a new ListeningNameDataPayload instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @static
                 * @param {casper.v1.IListeningNameDataPayload=} [properties] Properties to set
                 * @returns {casper.v1.ListeningNameDataPayload} ListeningNameDataPayload instance
                 */
                ListeningNameDataPayload.create = function create(properties) {
                    return new ListeningNameDataPayload(properties);
                };

                /**
                 * Encodes the specified ListeningNameDataPayload message. Does not implicitly {@link casper.v1.ListeningNameDataPayload.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @static
                 * @param {casper.v1.IListeningNameDataPayload} message ListeningNameDataPayload message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListeningNameDataPayload.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.blockInfo != null && message.blockInfo.length)
                        for (var i = 0; i < message.blockInfo.length; ++i)
                            $root.casper.DataWithBlockInfo.encode(message.blockInfo[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.length != null && message.hasOwnProperty("length"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.length);
                    return writer;
                };

                /**
                 * Encodes the specified ListeningNameDataPayload message, length delimited. Does not implicitly {@link casper.v1.ListeningNameDataPayload.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @static
                 * @param {casper.v1.IListeningNameDataPayload} message ListeningNameDataPayload message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListeningNameDataPayload.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ListeningNameDataPayload message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.ListeningNameDataPayload} ListeningNameDataPayload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListeningNameDataPayload.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ListeningNameDataPayload();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.blockInfo && message.blockInfo.length))
                                message.blockInfo = [];
                            message.blockInfo.push($root.casper.DataWithBlockInfo.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.length = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ListeningNameDataPayload message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.ListeningNameDataPayload} ListeningNameDataPayload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListeningNameDataPayload.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ListeningNameDataPayload message.
                 * @function verify
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListeningNameDataPayload.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                        if (!Array.isArray(message.blockInfo))
                            return "blockInfo: array expected";
                        for (var i = 0; i < message.blockInfo.length; ++i) {
                            var error = $root.casper.DataWithBlockInfo.verify(message.blockInfo[i]);
                            if (error)
                                return "blockInfo." + error;
                        }
                    }
                    if (message.length != null && message.hasOwnProperty("length"))
                        if (!$util.isInteger(message.length))
                            return "length: integer expected";
                    return null;
                };

                /**
                 * Creates a ListeningNameDataPayload message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.ListeningNameDataPayload} ListeningNameDataPayload
                 */
                ListeningNameDataPayload.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.ListeningNameDataPayload)
                        return object;
                    var message = new $root.casper.v1.ListeningNameDataPayload();
                    if (object.blockInfo) {
                        if (!Array.isArray(object.blockInfo))
                            throw TypeError(".casper.v1.ListeningNameDataPayload.blockInfo: array expected");
                        message.blockInfo = [];
                        for (var i = 0; i < object.blockInfo.length; ++i) {
                            if (typeof object.blockInfo[i] !== "object")
                                throw TypeError(".casper.v1.ListeningNameDataPayload.blockInfo: object expected");
                            message.blockInfo[i] = $root.casper.DataWithBlockInfo.fromObject(object.blockInfo[i]);
                        }
                    }
                    if (object.length != null)
                        message.length = object.length | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ListeningNameDataPayload message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @static
                 * @param {casper.v1.ListeningNameDataPayload} message ListeningNameDataPayload
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListeningNameDataPayload.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.blockInfo = [];
                    if (options.defaults)
                        object.length = 0;
                    if (message.blockInfo && message.blockInfo.length) {
                        object.blockInfo = [];
                        for (var j = 0; j < message.blockInfo.length; ++j)
                            object.blockInfo[j] = $root.casper.DataWithBlockInfo.toObject(message.blockInfo[j], options);
                    }
                    if (message.length != null && message.hasOwnProperty("length"))
                        object.length = message.length;
                    return object;
                };

                /**
                 * Converts this ListeningNameDataPayload to JSON.
                 * @function toJSON
                 * @memberof casper.v1.ListeningNameDataPayload
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListeningNameDataPayload.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ListeningNameDataPayload;
            })();

            v1.ContinuationAtNameResponse = (function() {

                /**
                 * Properties of a ContinuationAtNameResponse.
                 * @memberof casper.v1
                 * @interface IContinuationAtNameResponse
                 * @property {IServiceError|null} [error] ContinuationAtNameResponse error
                 * @property {casper.v1.IContinuationAtNamePayload|null} [payload] ContinuationAtNameResponse payload
                 */

                /**
                 * Constructs a new ContinuationAtNameResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a ContinuationAtNameResponse.
                 * @implements IContinuationAtNameResponse
                 * @constructor
                 * @param {casper.v1.IContinuationAtNameResponse=} [properties] Properties to set
                 */
                function ContinuationAtNameResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ContinuationAtNameResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @instance
                 */
                ContinuationAtNameResponse.prototype.error = null;

                /**
                 * ContinuationAtNameResponse payload.
                 * @member {casper.v1.IContinuationAtNamePayload|null|undefined} payload
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @instance
                 */
                ContinuationAtNameResponse.prototype.payload = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * ContinuationAtNameResponse message.
                 * @member {"error"|"payload"|undefined} message
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @instance
                 */
                Object.defineProperty(ContinuationAtNameResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "payload"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new ContinuationAtNameResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @static
                 * @param {casper.v1.IContinuationAtNameResponse=} [properties] Properties to set
                 * @returns {casper.v1.ContinuationAtNameResponse} ContinuationAtNameResponse instance
                 */
                ContinuationAtNameResponse.create = function create(properties) {
                    return new ContinuationAtNameResponse(properties);
                };

                /**
                 * Encodes the specified ContinuationAtNameResponse message. Does not implicitly {@link casper.v1.ContinuationAtNameResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @static
                 * @param {casper.v1.IContinuationAtNameResponse} message ContinuationAtNameResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContinuationAtNameResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.payload != null && message.hasOwnProperty("payload"))
                        $root.casper.v1.ContinuationAtNamePayload.encode(message.payload, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ContinuationAtNameResponse message, length delimited. Does not implicitly {@link casper.v1.ContinuationAtNameResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @static
                 * @param {casper.v1.IContinuationAtNameResponse} message ContinuationAtNameResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContinuationAtNameResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ContinuationAtNameResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.ContinuationAtNameResponse} ContinuationAtNameResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContinuationAtNameResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ContinuationAtNameResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.payload = $root.casper.v1.ContinuationAtNamePayload.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ContinuationAtNameResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.ContinuationAtNameResponse} ContinuationAtNameResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContinuationAtNameResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ContinuationAtNameResponse message.
                 * @function verify
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ContinuationAtNameResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.payload != null && message.hasOwnProperty("payload")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.casper.v1.ContinuationAtNamePayload.verify(message.payload);
                            if (error)
                                return "payload." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ContinuationAtNameResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.ContinuationAtNameResponse} ContinuationAtNameResponse
                 */
                ContinuationAtNameResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.ContinuationAtNameResponse)
                        return object;
                    var message = new $root.casper.v1.ContinuationAtNameResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.ContinuationAtNameResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.payload != null) {
                        if (typeof object.payload !== "object")
                            throw TypeError(".casper.v1.ContinuationAtNameResponse.payload: object expected");
                        message.payload = $root.casper.v1.ContinuationAtNamePayload.fromObject(object.payload);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ContinuationAtNameResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @static
                 * @param {casper.v1.ContinuationAtNameResponse} message ContinuationAtNameResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ContinuationAtNameResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.payload != null && message.hasOwnProperty("payload")) {
                        object.payload = $root.casper.v1.ContinuationAtNamePayload.toObject(message.payload, options);
                        if (options.oneofs)
                            object.message = "payload";
                    }
                    return object;
                };

                /**
                 * Converts this ContinuationAtNameResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.ContinuationAtNameResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ContinuationAtNameResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ContinuationAtNameResponse;
            })();

            v1.ContinuationAtNamePayload = (function() {

                /**
                 * Properties of a ContinuationAtNamePayload.
                 * @memberof casper.v1
                 * @interface IContinuationAtNamePayload
                 * @property {Array.<casper.IContinuationsWithBlockInfo>|null} [blockResults] ContinuationAtNamePayload blockResults
                 * @property {number|null} [length] ContinuationAtNamePayload length
                 */

                /**
                 * Constructs a new ContinuationAtNamePayload.
                 * @memberof casper.v1
                 * @classdesc Represents a ContinuationAtNamePayload.
                 * @implements IContinuationAtNamePayload
                 * @constructor
                 * @param {casper.v1.IContinuationAtNamePayload=} [properties] Properties to set
                 */
                function ContinuationAtNamePayload(properties) {
                    this.blockResults = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ContinuationAtNamePayload blockResults.
                 * @member {Array.<casper.IContinuationsWithBlockInfo>} blockResults
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @instance
                 */
                ContinuationAtNamePayload.prototype.blockResults = $util.emptyArray;

                /**
                 * ContinuationAtNamePayload length.
                 * @member {number} length
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @instance
                 */
                ContinuationAtNamePayload.prototype.length = 0;

                /**
                 * Creates a new ContinuationAtNamePayload instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @static
                 * @param {casper.v1.IContinuationAtNamePayload=} [properties] Properties to set
                 * @returns {casper.v1.ContinuationAtNamePayload} ContinuationAtNamePayload instance
                 */
                ContinuationAtNamePayload.create = function create(properties) {
                    return new ContinuationAtNamePayload(properties);
                };

                /**
                 * Encodes the specified ContinuationAtNamePayload message. Does not implicitly {@link casper.v1.ContinuationAtNamePayload.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @static
                 * @param {casper.v1.IContinuationAtNamePayload} message ContinuationAtNamePayload message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContinuationAtNamePayload.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.blockResults != null && message.blockResults.length)
                        for (var i = 0; i < message.blockResults.length; ++i)
                            $root.casper.ContinuationsWithBlockInfo.encode(message.blockResults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.length != null && message.hasOwnProperty("length"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.length);
                    return writer;
                };

                /**
                 * Encodes the specified ContinuationAtNamePayload message, length delimited. Does not implicitly {@link casper.v1.ContinuationAtNamePayload.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @static
                 * @param {casper.v1.IContinuationAtNamePayload} message ContinuationAtNamePayload message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ContinuationAtNamePayload.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ContinuationAtNamePayload message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.ContinuationAtNamePayload} ContinuationAtNamePayload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContinuationAtNamePayload.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ContinuationAtNamePayload();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.blockResults && message.blockResults.length))
                                message.blockResults = [];
                            message.blockResults.push($root.casper.ContinuationsWithBlockInfo.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.length = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ContinuationAtNamePayload message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.ContinuationAtNamePayload} ContinuationAtNamePayload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ContinuationAtNamePayload.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ContinuationAtNamePayload message.
                 * @function verify
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ContinuationAtNamePayload.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.blockResults != null && message.hasOwnProperty("blockResults")) {
                        if (!Array.isArray(message.blockResults))
                            return "blockResults: array expected";
                        for (var i = 0; i < message.blockResults.length; ++i) {
                            var error = $root.casper.ContinuationsWithBlockInfo.verify(message.blockResults[i]);
                            if (error)
                                return "blockResults." + error;
                        }
                    }
                    if (message.length != null && message.hasOwnProperty("length"))
                        if (!$util.isInteger(message.length))
                            return "length: integer expected";
                    return null;
                };

                /**
                 * Creates a ContinuationAtNamePayload message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.ContinuationAtNamePayload} ContinuationAtNamePayload
                 */
                ContinuationAtNamePayload.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.ContinuationAtNamePayload)
                        return object;
                    var message = new $root.casper.v1.ContinuationAtNamePayload();
                    if (object.blockResults) {
                        if (!Array.isArray(object.blockResults))
                            throw TypeError(".casper.v1.ContinuationAtNamePayload.blockResults: array expected");
                        message.blockResults = [];
                        for (var i = 0; i < object.blockResults.length; ++i) {
                            if (typeof object.blockResults[i] !== "object")
                                throw TypeError(".casper.v1.ContinuationAtNamePayload.blockResults: object expected");
                            message.blockResults[i] = $root.casper.ContinuationsWithBlockInfo.fromObject(object.blockResults[i]);
                        }
                    }
                    if (object.length != null)
                        message.length = object.length | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ContinuationAtNamePayload message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @static
                 * @param {casper.v1.ContinuationAtNamePayload} message ContinuationAtNamePayload
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ContinuationAtNamePayload.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.blockResults = [];
                    if (options.defaults)
                        object.length = 0;
                    if (message.blockResults && message.blockResults.length) {
                        object.blockResults = [];
                        for (var j = 0; j < message.blockResults.length; ++j)
                            object.blockResults[j] = $root.casper.ContinuationsWithBlockInfo.toObject(message.blockResults[j], options);
                    }
                    if (message.length != null && message.hasOwnProperty("length"))
                        object.length = message.length;
                    return object;
                };

                /**
                 * Converts this ContinuationAtNamePayload to JSON.
                 * @function toJSON
                 * @memberof casper.v1.ContinuationAtNamePayload
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ContinuationAtNamePayload.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ContinuationAtNamePayload;
            })();

            v1.FindDeployResponse = (function() {

                /**
                 * Properties of a FindDeployResponse.
                 * @memberof casper.v1
                 * @interface IFindDeployResponse
                 * @property {IServiceError|null} [error] FindDeployResponse error
                 * @property {casper.ILightBlockInfo|null} [blockInfo] FindDeployResponse blockInfo
                 */

                /**
                 * Constructs a new FindDeployResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a FindDeployResponse.
                 * @implements IFindDeployResponse
                 * @constructor
                 * @param {casper.v1.IFindDeployResponse=} [properties] Properties to set
                 */
                function FindDeployResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FindDeployResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.FindDeployResponse
                 * @instance
                 */
                FindDeployResponse.prototype.error = null;

                /**
                 * FindDeployResponse blockInfo.
                 * @member {casper.ILightBlockInfo|null|undefined} blockInfo
                 * @memberof casper.v1.FindDeployResponse
                 * @instance
                 */
                FindDeployResponse.prototype.blockInfo = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * FindDeployResponse message.
                 * @member {"error"|"blockInfo"|undefined} message
                 * @memberof casper.v1.FindDeployResponse
                 * @instance
                 */
                Object.defineProperty(FindDeployResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "blockInfo"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new FindDeployResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.FindDeployResponse
                 * @static
                 * @param {casper.v1.IFindDeployResponse=} [properties] Properties to set
                 * @returns {casper.v1.FindDeployResponse} FindDeployResponse instance
                 */
                FindDeployResponse.create = function create(properties) {
                    return new FindDeployResponse(properties);
                };

                /**
                 * Encodes the specified FindDeployResponse message. Does not implicitly {@link casper.v1.FindDeployResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.FindDeployResponse
                 * @static
                 * @param {casper.v1.IFindDeployResponse} message FindDeployResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FindDeployResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo"))
                        $root.casper.LightBlockInfo.encode(message.blockInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified FindDeployResponse message, length delimited. Does not implicitly {@link casper.v1.FindDeployResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.FindDeployResponse
                 * @static
                 * @param {casper.v1.IFindDeployResponse} message FindDeployResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FindDeployResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FindDeployResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.FindDeployResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.FindDeployResponse} FindDeployResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FindDeployResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.FindDeployResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.blockInfo = $root.casper.LightBlockInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FindDeployResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.FindDeployResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.FindDeployResponse} FindDeployResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FindDeployResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FindDeployResponse message.
                 * @function verify
                 * @memberof casper.v1.FindDeployResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FindDeployResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.casper.LightBlockInfo.verify(message.blockInfo);
                            if (error)
                                return "blockInfo." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a FindDeployResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.FindDeployResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.FindDeployResponse} FindDeployResponse
                 */
                FindDeployResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.FindDeployResponse)
                        return object;
                    var message = new $root.casper.v1.FindDeployResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.FindDeployResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.blockInfo != null) {
                        if (typeof object.blockInfo !== "object")
                            throw TypeError(".casper.v1.FindDeployResponse.blockInfo: object expected");
                        message.blockInfo = $root.casper.LightBlockInfo.fromObject(object.blockInfo);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FindDeployResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.FindDeployResponse
                 * @static
                 * @param {casper.v1.FindDeployResponse} message FindDeployResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FindDeployResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                        object.blockInfo = $root.casper.LightBlockInfo.toObject(message.blockInfo, options);
                        if (options.oneofs)
                            object.message = "blockInfo";
                    }
                    return object;
                };

                /**
                 * Converts this FindDeployResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.FindDeployResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FindDeployResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return FindDeployResponse;
            })();

            v1.PrivateNamePreviewResponse = (function() {

                /**
                 * Properties of a PrivateNamePreviewResponse.
                 * @memberof casper.v1
                 * @interface IPrivateNamePreviewResponse
                 * @property {IServiceError|null} [error] PrivateNamePreviewResponse error
                 * @property {casper.v1.IPrivateNamePreviewPayload|null} [payload] PrivateNamePreviewResponse payload
                 */

                /**
                 * Constructs a new PrivateNamePreviewResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a PrivateNamePreviewResponse.
                 * @implements IPrivateNamePreviewResponse
                 * @constructor
                 * @param {casper.v1.IPrivateNamePreviewResponse=} [properties] Properties to set
                 */
                function PrivateNamePreviewResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PrivateNamePreviewResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @instance
                 */
                PrivateNamePreviewResponse.prototype.error = null;

                /**
                 * PrivateNamePreviewResponse payload.
                 * @member {casper.v1.IPrivateNamePreviewPayload|null|undefined} payload
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @instance
                 */
                PrivateNamePreviewResponse.prototype.payload = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * PrivateNamePreviewResponse message.
                 * @member {"error"|"payload"|undefined} message
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @instance
                 */
                Object.defineProperty(PrivateNamePreviewResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "payload"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new PrivateNamePreviewResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @static
                 * @param {casper.v1.IPrivateNamePreviewResponse=} [properties] Properties to set
                 * @returns {casper.v1.PrivateNamePreviewResponse} PrivateNamePreviewResponse instance
                 */
                PrivateNamePreviewResponse.create = function create(properties) {
                    return new PrivateNamePreviewResponse(properties);
                };

                /**
                 * Encodes the specified PrivateNamePreviewResponse message. Does not implicitly {@link casper.v1.PrivateNamePreviewResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @static
                 * @param {casper.v1.IPrivateNamePreviewResponse} message PrivateNamePreviewResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PrivateNamePreviewResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.payload != null && message.hasOwnProperty("payload"))
                        $root.casper.v1.PrivateNamePreviewPayload.encode(message.payload, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified PrivateNamePreviewResponse message, length delimited. Does not implicitly {@link casper.v1.PrivateNamePreviewResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @static
                 * @param {casper.v1.IPrivateNamePreviewResponse} message PrivateNamePreviewResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PrivateNamePreviewResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PrivateNamePreviewResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.PrivateNamePreviewResponse} PrivateNamePreviewResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PrivateNamePreviewResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.PrivateNamePreviewResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.payload = $root.casper.v1.PrivateNamePreviewPayload.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PrivateNamePreviewResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.PrivateNamePreviewResponse} PrivateNamePreviewResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PrivateNamePreviewResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PrivateNamePreviewResponse message.
                 * @function verify
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PrivateNamePreviewResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.payload != null && message.hasOwnProperty("payload")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.casper.v1.PrivateNamePreviewPayload.verify(message.payload);
                            if (error)
                                return "payload." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a PrivateNamePreviewResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.PrivateNamePreviewResponse} PrivateNamePreviewResponse
                 */
                PrivateNamePreviewResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.PrivateNamePreviewResponse)
                        return object;
                    var message = new $root.casper.v1.PrivateNamePreviewResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.PrivateNamePreviewResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.payload != null) {
                        if (typeof object.payload !== "object")
                            throw TypeError(".casper.v1.PrivateNamePreviewResponse.payload: object expected");
                        message.payload = $root.casper.v1.PrivateNamePreviewPayload.fromObject(object.payload);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a PrivateNamePreviewResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @static
                 * @param {casper.v1.PrivateNamePreviewResponse} message PrivateNamePreviewResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PrivateNamePreviewResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.payload != null && message.hasOwnProperty("payload")) {
                        object.payload = $root.casper.v1.PrivateNamePreviewPayload.toObject(message.payload, options);
                        if (options.oneofs)
                            object.message = "payload";
                    }
                    return object;
                };

                /**
                 * Converts this PrivateNamePreviewResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.PrivateNamePreviewResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PrivateNamePreviewResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return PrivateNamePreviewResponse;
            })();

            v1.PrivateNamePreviewPayload = (function() {

                /**
                 * Properties of a PrivateNamePreviewPayload.
                 * @memberof casper.v1
                 * @interface IPrivateNamePreviewPayload
                 * @property {Array.<Uint8Array>|null} [ids] PrivateNamePreviewPayload ids
                 */

                /**
                 * Constructs a new PrivateNamePreviewPayload.
                 * @memberof casper.v1
                 * @classdesc Represents a PrivateNamePreviewPayload.
                 * @implements IPrivateNamePreviewPayload
                 * @constructor
                 * @param {casper.v1.IPrivateNamePreviewPayload=} [properties] Properties to set
                 */
                function PrivateNamePreviewPayload(properties) {
                    this.ids = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PrivateNamePreviewPayload ids.
                 * @member {Array.<Uint8Array>} ids
                 * @memberof casper.v1.PrivateNamePreviewPayload
                 * @instance
                 */
                PrivateNamePreviewPayload.prototype.ids = $util.emptyArray;

                /**
                 * Creates a new PrivateNamePreviewPayload instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.PrivateNamePreviewPayload
                 * @static
                 * @param {casper.v1.IPrivateNamePreviewPayload=} [properties] Properties to set
                 * @returns {casper.v1.PrivateNamePreviewPayload} PrivateNamePreviewPayload instance
                 */
                PrivateNamePreviewPayload.create = function create(properties) {
                    return new PrivateNamePreviewPayload(properties);
                };

                /**
                 * Encodes the specified PrivateNamePreviewPayload message. Does not implicitly {@link casper.v1.PrivateNamePreviewPayload.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.PrivateNamePreviewPayload
                 * @static
                 * @param {casper.v1.IPrivateNamePreviewPayload} message PrivateNamePreviewPayload message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PrivateNamePreviewPayload.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ids != null && message.ids.length)
                        for (var i = 0; i < message.ids.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ids[i]);
                    return writer;
                };

                /**
                 * Encodes the specified PrivateNamePreviewPayload message, length delimited. Does not implicitly {@link casper.v1.PrivateNamePreviewPayload.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.PrivateNamePreviewPayload
                 * @static
                 * @param {casper.v1.IPrivateNamePreviewPayload} message PrivateNamePreviewPayload message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PrivateNamePreviewPayload.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PrivateNamePreviewPayload message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.PrivateNamePreviewPayload
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.PrivateNamePreviewPayload} PrivateNamePreviewPayload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PrivateNamePreviewPayload.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.PrivateNamePreviewPayload();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.ids && message.ids.length))
                                message.ids = [];
                            message.ids.push(reader.bytes());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PrivateNamePreviewPayload message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.PrivateNamePreviewPayload
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.PrivateNamePreviewPayload} PrivateNamePreviewPayload
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PrivateNamePreviewPayload.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PrivateNamePreviewPayload message.
                 * @function verify
                 * @memberof casper.v1.PrivateNamePreviewPayload
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PrivateNamePreviewPayload.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ids != null && message.hasOwnProperty("ids")) {
                        if (!Array.isArray(message.ids))
                            return "ids: array expected";
                        for (var i = 0; i < message.ids.length; ++i)
                            if (!(message.ids[i] && typeof message.ids[i].length === "number" || $util.isString(message.ids[i])))
                                return "ids: buffer[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a PrivateNamePreviewPayload message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.PrivateNamePreviewPayload
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.PrivateNamePreviewPayload} PrivateNamePreviewPayload
                 */
                PrivateNamePreviewPayload.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.PrivateNamePreviewPayload)
                        return object;
                    var message = new $root.casper.v1.PrivateNamePreviewPayload();
                    if (object.ids) {
                        if (!Array.isArray(object.ids))
                            throw TypeError(".casper.v1.PrivateNamePreviewPayload.ids: array expected");
                        message.ids = [];
                        for (var i = 0; i < object.ids.length; ++i)
                            if (typeof object.ids[i] === "string")
                                $util.base64.decode(object.ids[i], message.ids[i] = $util.newBuffer($util.base64.length(object.ids[i])), 0);
                            else if (object.ids[i].length)
                                message.ids[i] = object.ids[i];
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a PrivateNamePreviewPayload message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.PrivateNamePreviewPayload
                 * @static
                 * @param {casper.v1.PrivateNamePreviewPayload} message PrivateNamePreviewPayload
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PrivateNamePreviewPayload.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.ids = [];
                    if (message.ids && message.ids.length) {
                        object.ids = [];
                        for (var j = 0; j < message.ids.length; ++j)
                            object.ids[j] = options.bytes === String ? $util.base64.encode(message.ids[j], 0, message.ids[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.ids[j]) : message.ids[j];
                    }
                    return object;
                };

                /**
                 * Converts this PrivateNamePreviewPayload to JSON.
                 * @function toJSON
                 * @memberof casper.v1.PrivateNamePreviewPayload
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PrivateNamePreviewPayload.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return PrivateNamePreviewPayload;
            })();

            v1.LastFinalizedBlockResponse = (function() {

                /**
                 * Properties of a LastFinalizedBlockResponse.
                 * @memberof casper.v1
                 * @interface ILastFinalizedBlockResponse
                 * @property {IServiceError|null} [error] LastFinalizedBlockResponse error
                 * @property {casper.IBlockInfo|null} [blockInfo] LastFinalizedBlockResponse blockInfo
                 */

                /**
                 * Constructs a new LastFinalizedBlockResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a LastFinalizedBlockResponse.
                 * @implements ILastFinalizedBlockResponse
                 * @constructor
                 * @param {casper.v1.ILastFinalizedBlockResponse=} [properties] Properties to set
                 */
                function LastFinalizedBlockResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * LastFinalizedBlockResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @instance
                 */
                LastFinalizedBlockResponse.prototype.error = null;

                /**
                 * LastFinalizedBlockResponse blockInfo.
                 * @member {casper.IBlockInfo|null|undefined} blockInfo
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @instance
                 */
                LastFinalizedBlockResponse.prototype.blockInfo = null;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * LastFinalizedBlockResponse message.
                 * @member {"error"|"blockInfo"|undefined} message
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @instance
                 */
                Object.defineProperty(LastFinalizedBlockResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "blockInfo"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new LastFinalizedBlockResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @static
                 * @param {casper.v1.ILastFinalizedBlockResponse=} [properties] Properties to set
                 * @returns {casper.v1.LastFinalizedBlockResponse} LastFinalizedBlockResponse instance
                 */
                LastFinalizedBlockResponse.create = function create(properties) {
                    return new LastFinalizedBlockResponse(properties);
                };

                /**
                 * Encodes the specified LastFinalizedBlockResponse message. Does not implicitly {@link casper.v1.LastFinalizedBlockResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @static
                 * @param {casper.v1.ILastFinalizedBlockResponse} message LastFinalizedBlockResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LastFinalizedBlockResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo"))
                        $root.casper.BlockInfo.encode(message.blockInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified LastFinalizedBlockResponse message, length delimited. Does not implicitly {@link casper.v1.LastFinalizedBlockResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @static
                 * @param {casper.v1.ILastFinalizedBlockResponse} message LastFinalizedBlockResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LastFinalizedBlockResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a LastFinalizedBlockResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.LastFinalizedBlockResponse} LastFinalizedBlockResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LastFinalizedBlockResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.LastFinalizedBlockResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.blockInfo = $root.casper.BlockInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a LastFinalizedBlockResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.LastFinalizedBlockResponse} LastFinalizedBlockResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LastFinalizedBlockResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a LastFinalizedBlockResponse message.
                 * @function verify
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LastFinalizedBlockResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        {
                            var error = $root.casper.BlockInfo.verify(message.blockInfo);
                            if (error)
                                return "blockInfo." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a LastFinalizedBlockResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.LastFinalizedBlockResponse} LastFinalizedBlockResponse
                 */
                LastFinalizedBlockResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.LastFinalizedBlockResponse)
                        return object;
                    var message = new $root.casper.v1.LastFinalizedBlockResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.LastFinalizedBlockResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.blockInfo != null) {
                        if (typeof object.blockInfo !== "object")
                            throw TypeError(".casper.v1.LastFinalizedBlockResponse.blockInfo: object expected");
                        message.blockInfo = $root.casper.BlockInfo.fromObject(object.blockInfo);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a LastFinalizedBlockResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @static
                 * @param {casper.v1.LastFinalizedBlockResponse} message LastFinalizedBlockResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LastFinalizedBlockResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.blockInfo != null && message.hasOwnProperty("blockInfo")) {
                        object.blockInfo = $root.casper.BlockInfo.toObject(message.blockInfo, options);
                        if (options.oneofs)
                            object.message = "blockInfo";
                    }
                    return object;
                };

                /**
                 * Converts this LastFinalizedBlockResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.LastFinalizedBlockResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LastFinalizedBlockResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return LastFinalizedBlockResponse;
            })();

            v1.IsFinalizedResponse = (function() {

                /**
                 * Properties of an IsFinalizedResponse.
                 * @memberof casper.v1
                 * @interface IIsFinalizedResponse
                 * @property {IServiceError|null} [error] IsFinalizedResponse error
                 * @property {boolean|null} [isFinalized] IsFinalizedResponse isFinalized
                 */

                /**
                 * Constructs a new IsFinalizedResponse.
                 * @memberof casper.v1
                 * @classdesc Represents an IsFinalizedResponse.
                 * @implements IIsFinalizedResponse
                 * @constructor
                 * @param {casper.v1.IIsFinalizedResponse=} [properties] Properties to set
                 */
                function IsFinalizedResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * IsFinalizedResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.IsFinalizedResponse
                 * @instance
                 */
                IsFinalizedResponse.prototype.error = null;

                /**
                 * IsFinalizedResponse isFinalized.
                 * @member {boolean} isFinalized
                 * @memberof casper.v1.IsFinalizedResponse
                 * @instance
                 */
                IsFinalizedResponse.prototype.isFinalized = false;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * IsFinalizedResponse message.
                 * @member {"error"|"isFinalized"|undefined} message
                 * @memberof casper.v1.IsFinalizedResponse
                 * @instance
                 */
                Object.defineProperty(IsFinalizedResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "isFinalized"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new IsFinalizedResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.IsFinalizedResponse
                 * @static
                 * @param {casper.v1.IIsFinalizedResponse=} [properties] Properties to set
                 * @returns {casper.v1.IsFinalizedResponse} IsFinalizedResponse instance
                 */
                IsFinalizedResponse.create = function create(properties) {
                    return new IsFinalizedResponse(properties);
                };

                /**
                 * Encodes the specified IsFinalizedResponse message. Does not implicitly {@link casper.v1.IsFinalizedResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.IsFinalizedResponse
                 * @static
                 * @param {casper.v1.IIsFinalizedResponse} message IsFinalizedResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IsFinalizedResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.isFinalized != null && message.hasOwnProperty("isFinalized"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isFinalized);
                    return writer;
                };

                /**
                 * Encodes the specified IsFinalizedResponse message, length delimited. Does not implicitly {@link casper.v1.IsFinalizedResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.IsFinalizedResponse
                 * @static
                 * @param {casper.v1.IIsFinalizedResponse} message IsFinalizedResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IsFinalizedResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an IsFinalizedResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.IsFinalizedResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.IsFinalizedResponse} IsFinalizedResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IsFinalizedResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.IsFinalizedResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.isFinalized = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an IsFinalizedResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.IsFinalizedResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.IsFinalizedResponse} IsFinalizedResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IsFinalizedResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an IsFinalizedResponse message.
                 * @function verify
                 * @memberof casper.v1.IsFinalizedResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                IsFinalizedResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.isFinalized != null && message.hasOwnProperty("isFinalized")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        if (typeof message.isFinalized !== "boolean")
                            return "isFinalized: boolean expected";
                    }
                    return null;
                };

                /**
                 * Creates an IsFinalizedResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.IsFinalizedResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.IsFinalizedResponse} IsFinalizedResponse
                 */
                IsFinalizedResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.IsFinalizedResponse)
                        return object;
                    var message = new $root.casper.v1.IsFinalizedResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.IsFinalizedResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.isFinalized != null)
                        message.isFinalized = Boolean(object.isFinalized);
                    return message;
                };

                /**
                 * Creates a plain object from an IsFinalizedResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.IsFinalizedResponse
                 * @static
                 * @param {casper.v1.IsFinalizedResponse} message IsFinalizedResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                IsFinalizedResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.isFinalized != null && message.hasOwnProperty("isFinalized")) {
                        object.isFinalized = message.isFinalized;
                        if (options.oneofs)
                            object.message = "isFinalized";
                    }
                    return object;
                };

                /**
                 * Converts this IsFinalizedResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.IsFinalizedResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                IsFinalizedResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return IsFinalizedResponse;
            })();

            v1.BondStatusResponse = (function() {

                /**
                 * Properties of a BondStatusResponse.
                 * @memberof casper.v1
                 * @interface IBondStatusResponse
                 * @property {IServiceError|null} [error] BondStatusResponse error
                 * @property {boolean|null} [isBonded] BondStatusResponse isBonded
                 */

                /**
                 * Constructs a new BondStatusResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a BondStatusResponse.
                 * @implements IBondStatusResponse
                 * @constructor
                 * @param {casper.v1.IBondStatusResponse=} [properties] Properties to set
                 */
                function BondStatusResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * BondStatusResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.BondStatusResponse
                 * @instance
                 */
                BondStatusResponse.prototype.error = null;

                /**
                 * BondStatusResponse isBonded.
                 * @member {boolean} isBonded
                 * @memberof casper.v1.BondStatusResponse
                 * @instance
                 */
                BondStatusResponse.prototype.isBonded = false;

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * BondStatusResponse message.
                 * @member {"error"|"isBonded"|undefined} message
                 * @memberof casper.v1.BondStatusResponse
                 * @instance
                 */
                Object.defineProperty(BondStatusResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "isBonded"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new BondStatusResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.BondStatusResponse
                 * @static
                 * @param {casper.v1.IBondStatusResponse=} [properties] Properties to set
                 * @returns {casper.v1.BondStatusResponse} BondStatusResponse instance
                 */
                BondStatusResponse.create = function create(properties) {
                    return new BondStatusResponse(properties);
                };

                /**
                 * Encodes the specified BondStatusResponse message. Does not implicitly {@link casper.v1.BondStatusResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.BondStatusResponse
                 * @static
                 * @param {casper.v1.IBondStatusResponse} message BondStatusResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BondStatusResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.isBonded != null && message.hasOwnProperty("isBonded"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isBonded);
                    return writer;
                };

                /**
                 * Encodes the specified BondStatusResponse message, length delimited. Does not implicitly {@link casper.v1.BondStatusResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.BondStatusResponse
                 * @static
                 * @param {casper.v1.IBondStatusResponse} message BondStatusResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BondStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a BondStatusResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.BondStatusResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.BondStatusResponse} BondStatusResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BondStatusResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.BondStatusResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.isBonded = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a BondStatusResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.BondStatusResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.BondStatusResponse} BondStatusResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BondStatusResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a BondStatusResponse message.
                 * @function verify
                 * @memberof casper.v1.BondStatusResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BondStatusResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.isBonded != null && message.hasOwnProperty("isBonded")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        if (typeof message.isBonded !== "boolean")
                            return "isBonded: boolean expected";
                    }
                    return null;
                };

                /**
                 * Creates a BondStatusResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.BondStatusResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.BondStatusResponse} BondStatusResponse
                 */
                BondStatusResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.BondStatusResponse)
                        return object;
                    var message = new $root.casper.v1.BondStatusResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.BondStatusResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.isBonded != null)
                        message.isBonded = Boolean(object.isBonded);
                    return message;
                };

                /**
                 * Creates a plain object from a BondStatusResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.BondStatusResponse
                 * @static
                 * @param {casper.v1.BondStatusResponse} message BondStatusResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BondStatusResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.isBonded != null && message.hasOwnProperty("isBonded")) {
                        object.isBonded = message.isBonded;
                        if (options.oneofs)
                            object.message = "isBonded";
                    }
                    return object;
                };

                /**
                 * Converts this BondStatusResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.BondStatusResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BondStatusResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return BondStatusResponse;
            })();

            v1.ProposeService = (function() {

                /**
                 * Constructs a new ProposeService service.
                 * @memberof casper.v1
                 * @classdesc Represents a ProposeService
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ProposeService(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (ProposeService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ProposeService;

                /**
                 * Creates new ProposeService service using the specified rpc implementation.
                 * @function create
                 * @memberof casper.v1.ProposeService
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {ProposeService} RPC service. Useful where requests and/or responses are streamed.
                 */
                ProposeService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link casper.v1.ProposeService#propose}.
                 * @memberof casper.v1.ProposeService
                 * @typedef proposeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {casper.v1.ProposeResponse} [response] ProposeResponse
                 */

                /**
                 * Calls propose.
                 * @function propose
                 * @memberof casper.v1.ProposeService
                 * @instance
                 * @param {casper.IPrintUnmatchedSendsQuery} request PrintUnmatchedSendsQuery message or plain object
                 * @param {casper.v1.ProposeService.proposeCallback} callback Node-style callback called with the error, if any, and ProposeResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ProposeService.prototype.propose = function propose(request, callback) {
                    return this.rpcCall(propose, $root.casper.PrintUnmatchedSendsQuery, $root.casper.v1.ProposeResponse, request, callback);
                }, "name", { value: "propose" });

                /**
                 * Calls propose.
                 * @function propose
                 * @memberof casper.v1.ProposeService
                 * @instance
                 * @param {casper.IPrintUnmatchedSendsQuery} request PrintUnmatchedSendsQuery message or plain object
                 * @returns {Promise<casper.v1.ProposeResponse>} Promise
                 * @variation 2
                 */

                return ProposeService;
            })();

            v1.ProposeResponse = (function() {

                /**
                 * Properties of a ProposeResponse.
                 * @memberof casper.v1
                 * @interface IProposeResponse
                 * @property {IServiceError|null} [error] ProposeResponse error
                 * @property {string|null} [result] ProposeResponse result
                 */

                /**
                 * Constructs a new ProposeResponse.
                 * @memberof casper.v1
                 * @classdesc Represents a ProposeResponse.
                 * @implements IProposeResponse
                 * @constructor
                 * @param {casper.v1.IProposeResponse=} [properties] Properties to set
                 */
                function ProposeResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ProposeResponse error.
                 * @member {IServiceError|null|undefined} error
                 * @memberof casper.v1.ProposeResponse
                 * @instance
                 */
                ProposeResponse.prototype.error = null;

                /**
                 * ProposeResponse result.
                 * @member {string} result
                 * @memberof casper.v1.ProposeResponse
                 * @instance
                 */
                ProposeResponse.prototype.result = "";

                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;

                /**
                 * ProposeResponse message.
                 * @member {"error"|"result"|undefined} message
                 * @memberof casper.v1.ProposeResponse
                 * @instance
                 */
                Object.defineProperty(ProposeResponse.prototype, "message", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "result"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                /**
                 * Creates a new ProposeResponse instance using the specified properties.
                 * @function create
                 * @memberof casper.v1.ProposeResponse
                 * @static
                 * @param {casper.v1.IProposeResponse=} [properties] Properties to set
                 * @returns {casper.v1.ProposeResponse} ProposeResponse instance
                 */
                ProposeResponse.create = function create(properties) {
                    return new ProposeResponse(properties);
                };

                /**
                 * Encodes the specified ProposeResponse message. Does not implicitly {@link casper.v1.ProposeResponse.verify|verify} messages.
                 * @function encode
                 * @memberof casper.v1.ProposeResponse
                 * @static
                 * @param {casper.v1.IProposeResponse} message ProposeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProposeResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && message.hasOwnProperty("error"))
                        $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.result != null && message.hasOwnProperty("result"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.result);
                    return writer;
                };

                /**
                 * Encodes the specified ProposeResponse message, length delimited. Does not implicitly {@link casper.v1.ProposeResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof casper.v1.ProposeResponse
                 * @static
                 * @param {casper.v1.IProposeResponse} message ProposeResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProposeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ProposeResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof casper.v1.ProposeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {casper.v1.ProposeResponse} ProposeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProposeResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ProposeResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = $root.ServiceError.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.result = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ProposeResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof casper.v1.ProposeResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {casper.v1.ProposeResponse} ProposeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProposeResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ProposeResponse message.
                 * @function verify
                 * @memberof casper.v1.ProposeResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProposeResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.message = 1;
                        {
                            var error = $root.ServiceError.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.result != null && message.hasOwnProperty("result")) {
                        if (properties.message === 1)
                            return "message: multiple values";
                        properties.message = 1;
                        if (!$util.isString(message.result))
                            return "result: string expected";
                    }
                    return null;
                };

                /**
                 * Creates a ProposeResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof casper.v1.ProposeResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {casper.v1.ProposeResponse} ProposeResponse
                 */
                ProposeResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.casper.v1.ProposeResponse)
                        return object;
                    var message = new $root.casper.v1.ProposeResponse();
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".casper.v1.ProposeResponse.error: object expected");
                        message.error = $root.ServiceError.fromObject(object.error);
                    }
                    if (object.result != null)
                        message.result = String(object.result);
                    return message;
                };

                /**
                 * Creates a plain object from a ProposeResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof casper.v1.ProposeResponse
                 * @static
                 * @param {casper.v1.ProposeResponse} message ProposeResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProposeResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.ServiceError.toObject(message.error, options);
                        if (options.oneofs)
                            object.message = "error";
                    }
                    if (message.result != null && message.hasOwnProperty("result")) {
                        object.result = message.result;
                        if (options.oneofs)
                            object.message = "result";
                    }
                    return object;
                };

                /**
                 * Converts this ProposeResponse to JSON.
                 * @function toJSON
                 * @memberof casper.v1.ProposeResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProposeResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ProposeResponse;
            })();

            return v1;
        })();

        casper.PrintUnmatchedSendsQuery = (function() {

            /**
             * Properties of a PrintUnmatchedSendsQuery.
             * @memberof casper
             * @interface IPrintUnmatchedSendsQuery
             * @property {boolean|null} [printUnmatchedSends] PrintUnmatchedSendsQuery printUnmatchedSends
             */

            /**
             * Constructs a new PrintUnmatchedSendsQuery.
             * @memberof casper
             * @classdesc Represents a PrintUnmatchedSendsQuery.
             * @implements IPrintUnmatchedSendsQuery
             * @constructor
             * @param {casper.IPrintUnmatchedSendsQuery=} [properties] Properties to set
             */
            function PrintUnmatchedSendsQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PrintUnmatchedSendsQuery printUnmatchedSends.
             * @member {boolean} printUnmatchedSends
             * @memberof casper.PrintUnmatchedSendsQuery
             * @instance
             */
            PrintUnmatchedSendsQuery.prototype.printUnmatchedSends = false;

            /**
             * Creates a new PrintUnmatchedSendsQuery instance using the specified properties.
             * @function create
             * @memberof casper.PrintUnmatchedSendsQuery
             * @static
             * @param {casper.IPrintUnmatchedSendsQuery=} [properties] Properties to set
             * @returns {casper.PrintUnmatchedSendsQuery} PrintUnmatchedSendsQuery instance
             */
            PrintUnmatchedSendsQuery.create = function create(properties) {
                return new PrintUnmatchedSendsQuery(properties);
            };

            /**
             * Encodes the specified PrintUnmatchedSendsQuery message. Does not implicitly {@link casper.PrintUnmatchedSendsQuery.verify|verify} messages.
             * @function encode
             * @memberof casper.PrintUnmatchedSendsQuery
             * @static
             * @param {casper.IPrintUnmatchedSendsQuery} message PrintUnmatchedSendsQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrintUnmatchedSendsQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.printUnmatchedSends != null && message.hasOwnProperty("printUnmatchedSends"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.printUnmatchedSends);
                return writer;
            };

            /**
             * Encodes the specified PrintUnmatchedSendsQuery message, length delimited. Does not implicitly {@link casper.PrintUnmatchedSendsQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof casper.PrintUnmatchedSendsQuery
             * @static
             * @param {casper.IPrintUnmatchedSendsQuery} message PrintUnmatchedSendsQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrintUnmatchedSendsQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PrintUnmatchedSendsQuery message from the specified reader or buffer.
             * @function decode
             * @memberof casper.PrintUnmatchedSendsQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {casper.PrintUnmatchedSendsQuery} PrintUnmatchedSendsQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrintUnmatchedSendsQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.PrintUnmatchedSendsQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.printUnmatchedSends = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PrintUnmatchedSendsQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof casper.PrintUnmatchedSendsQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {casper.PrintUnmatchedSendsQuery} PrintUnmatchedSendsQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrintUnmatchedSendsQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PrintUnmatchedSendsQuery message.
             * @function verify
             * @memberof casper.PrintUnmatchedSendsQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PrintUnmatchedSendsQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.printUnmatchedSends != null && message.hasOwnProperty("printUnmatchedSends"))
                    if (typeof message.printUnmatchedSends !== "boolean")
                        return "printUnmatchedSends: boolean expected";
                return null;
            };

            /**
             * Creates a PrintUnmatchedSendsQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof casper.PrintUnmatchedSendsQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {casper.PrintUnmatchedSendsQuery} PrintUnmatchedSendsQuery
             */
            PrintUnmatchedSendsQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.casper.PrintUnmatchedSendsQuery)
                    return object;
                var message = new $root.casper.PrintUnmatchedSendsQuery();
                if (object.printUnmatchedSends != null)
                    message.printUnmatchedSends = Boolean(object.printUnmatchedSends);
                return message;
            };

            /**
             * Creates a plain object from a PrintUnmatchedSendsQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof casper.PrintUnmatchedSendsQuery
             * @static
             * @param {casper.PrintUnmatchedSendsQuery} message PrintUnmatchedSendsQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PrintUnmatchedSendsQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.printUnmatchedSends = false;
                if (message.printUnmatchedSends != null && message.hasOwnProperty("printUnmatchedSends"))
                    object.printUnmatchedSends = message.printUnmatchedSends;
                return object;
            };

            /**
             * Converts this PrintUnmatchedSendsQuery to JSON.
             * @function toJSON
             * @memberof casper.PrintUnmatchedSendsQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PrintUnmatchedSendsQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PrintUnmatchedSendsQuery;
        })();

        return casper;
    })();

    $root.scalapb = (function() {

        /**
         * Namespace scalapb.
         * @exports scalapb
         * @namespace
         */
        var scalapb = {};

        scalapb.ScalaPbOptions = (function() {

            /**
             * Properties of a ScalaPbOptions.
             * @memberof scalapb
             * @interface IScalaPbOptions
             * @property {string|null} [package_name] ScalaPbOptions package_name
             * @property {boolean|null} [flat_package] ScalaPbOptions flat_package
             * @property {Array.<string>|null} ["import"] ScalaPbOptions import
             * @property {Array.<string>|null} [preamble] ScalaPbOptions preamble
             * @property {boolean|null} [single_file] ScalaPbOptions single_file
             * @property {boolean|null} [no_primitive_wrappers] ScalaPbOptions no_primitive_wrappers
             * @property {boolean|null} [primitive_wrappers] ScalaPbOptions primitive_wrappers
             * @property {string|null} [collection_type] ScalaPbOptions collection_type
             * @property {boolean|null} [preserve_unknown_fields] ScalaPbOptions preserve_unknown_fields
             * @property {string|null} [object_name] ScalaPbOptions object_name
             * @property {scalapb.ScalaPbOptions.OptionsScope|null} [scope] ScalaPbOptions scope
             * @property {boolean|null} [lenses] ScalaPbOptions lenses
             * @property {boolean|null} [retain_source_code_info] ScalaPbOptions retain_source_code_info
             * @property {string|null} [map_type] ScalaPbOptions map_type
             * @property {boolean|null} [no_default_values_in_constructor] ScalaPbOptions no_default_values_in_constructor
             * @property {scalapb.ScalaPbOptions.EnumValueNaming|null} [enum_value_naming] ScalaPbOptions enum_value_naming
             * @property {boolean|null} [enum_strip_prefix] ScalaPbOptions enum_strip_prefix
             * @property {string|null} [bytes_type] ScalaPbOptions bytes_type
             * @property {boolean|null} [java_conversions] ScalaPbOptions java_conversions
             * @property {Array.<scalapb.ScalaPbOptions.IAuxMessageOptions>|null} [aux_message_options] ScalaPbOptions aux_message_options
             * @property {Array.<scalapb.ScalaPbOptions.IAuxFieldOptions>|null} [aux_field_options] ScalaPbOptions aux_field_options
             * @property {Array.<scalapb.ScalaPbOptions.IAuxEnumOptions>|null} [aux_enum_options] ScalaPbOptions aux_enum_options
             * @property {Array.<scalapb.ScalaPbOptions.IAuxEnumValueOptions>|null} [aux_enum_value_options] ScalaPbOptions aux_enum_value_options
             * @property {boolean|null} [test_only_no_java_conversions] ScalaPbOptions test_only_no_java_conversions
             */

            /**
             * Constructs a new ScalaPbOptions.
             * @memberof scalapb
             * @classdesc Represents a ScalaPbOptions.
             * @implements IScalaPbOptions
             * @constructor
             * @param {scalapb.IScalaPbOptions=} [properties] Properties to set
             */
            function ScalaPbOptions(properties) {
                this["import"] = [];
                this.preamble = [];
                this.aux_message_options = [];
                this.aux_field_options = [];
                this.aux_enum_options = [];
                this.aux_enum_value_options = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ScalaPbOptions package_name.
             * @member {string} package_name
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.package_name = "";

            /**
             * ScalaPbOptions flat_package.
             * @member {boolean} flat_package
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.flat_package = false;

            /**
             * ScalaPbOptions import.
             * @member {Array.<string>} import
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype["import"] = $util.emptyArray;

            /**
             * ScalaPbOptions preamble.
             * @member {Array.<string>} preamble
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.preamble = $util.emptyArray;

            /**
             * ScalaPbOptions single_file.
             * @member {boolean} single_file
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.single_file = false;

            /**
             * ScalaPbOptions no_primitive_wrappers.
             * @member {boolean} no_primitive_wrappers
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.no_primitive_wrappers = false;

            /**
             * ScalaPbOptions primitive_wrappers.
             * @member {boolean} primitive_wrappers
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.primitive_wrappers = false;

            /**
             * ScalaPbOptions collection_type.
             * @member {string} collection_type
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.collection_type = "";

            /**
             * ScalaPbOptions preserve_unknown_fields.
             * @member {boolean} preserve_unknown_fields
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.preserve_unknown_fields = true;

            /**
             * ScalaPbOptions object_name.
             * @member {string} object_name
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.object_name = "";

            /**
             * ScalaPbOptions scope.
             * @member {scalapb.ScalaPbOptions.OptionsScope} scope
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.scope = 0;

            /**
             * ScalaPbOptions lenses.
             * @member {boolean} lenses
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.lenses = true;

            /**
             * ScalaPbOptions retain_source_code_info.
             * @member {boolean} retain_source_code_info
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.retain_source_code_info = false;

            /**
             * ScalaPbOptions map_type.
             * @member {string} map_type
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.map_type = "";

            /**
             * ScalaPbOptions no_default_values_in_constructor.
             * @member {boolean} no_default_values_in_constructor
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.no_default_values_in_constructor = false;

            /**
             * ScalaPbOptions enum_value_naming.
             * @member {scalapb.ScalaPbOptions.EnumValueNaming} enum_value_naming
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.enum_value_naming = 0;

            /**
             * ScalaPbOptions enum_strip_prefix.
             * @member {boolean} enum_strip_prefix
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.enum_strip_prefix = false;

            /**
             * ScalaPbOptions bytes_type.
             * @member {string} bytes_type
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.bytes_type = "";

            /**
             * ScalaPbOptions java_conversions.
             * @member {boolean} java_conversions
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.java_conversions = false;

            /**
             * ScalaPbOptions aux_message_options.
             * @member {Array.<scalapb.ScalaPbOptions.IAuxMessageOptions>} aux_message_options
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.aux_message_options = $util.emptyArray;

            /**
             * ScalaPbOptions aux_field_options.
             * @member {Array.<scalapb.ScalaPbOptions.IAuxFieldOptions>} aux_field_options
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.aux_field_options = $util.emptyArray;

            /**
             * ScalaPbOptions aux_enum_options.
             * @member {Array.<scalapb.ScalaPbOptions.IAuxEnumOptions>} aux_enum_options
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.aux_enum_options = $util.emptyArray;

            /**
             * ScalaPbOptions aux_enum_value_options.
             * @member {Array.<scalapb.ScalaPbOptions.IAuxEnumValueOptions>} aux_enum_value_options
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.aux_enum_value_options = $util.emptyArray;

            /**
             * ScalaPbOptions test_only_no_java_conversions.
             * @member {boolean} test_only_no_java_conversions
             * @memberof scalapb.ScalaPbOptions
             * @instance
             */
            ScalaPbOptions.prototype.test_only_no_java_conversions = false;

            /**
             * Creates a new ScalaPbOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {scalapb.IScalaPbOptions=} [properties] Properties to set
             * @returns {scalapb.ScalaPbOptions} ScalaPbOptions instance
             */
            ScalaPbOptions.create = function create(properties) {
                return new ScalaPbOptions(properties);
            };

            /**
             * Encodes the specified ScalaPbOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {scalapb.IScalaPbOptions} message ScalaPbOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScalaPbOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.package_name != null && message.hasOwnProperty("package_name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.package_name);
                if (message.flat_package != null && message.hasOwnProperty("flat_package"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.flat_package);
                if (message["import"] != null && message["import"].length)
                    for (var i = 0; i < message["import"].length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message["import"][i]);
                if (message.preamble != null && message.preamble.length)
                    for (var i = 0; i < message.preamble.length; ++i)
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.preamble[i]);
                if (message.single_file != null && message.hasOwnProperty("single_file"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.single_file);
                if (message.primitive_wrappers != null && message.hasOwnProperty("primitive_wrappers"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.primitive_wrappers);
                if (message.no_primitive_wrappers != null && message.hasOwnProperty("no_primitive_wrappers"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.no_primitive_wrappers);
                if (message.collection_type != null && message.hasOwnProperty("collection_type"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.collection_type);
                if (message.preserve_unknown_fields != null && message.hasOwnProperty("preserve_unknown_fields"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.preserve_unknown_fields);
                if (message.object_name != null && message.hasOwnProperty("object_name"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.object_name);
                if (message.scope != null && message.hasOwnProperty("scope"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int32(message.scope);
                if (message.lenses != null && message.hasOwnProperty("lenses"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.lenses);
                if (message.retain_source_code_info != null && message.hasOwnProperty("retain_source_code_info"))
                    writer.uint32(/* id 13, wireType 0 =*/104).bool(message.retain_source_code_info);
                if (message.map_type != null && message.hasOwnProperty("map_type"))
                    writer.uint32(/* id 14, wireType 2 =*/114).string(message.map_type);
                if (message.no_default_values_in_constructor != null && message.hasOwnProperty("no_default_values_in_constructor"))
                    writer.uint32(/* id 15, wireType 0 =*/120).bool(message.no_default_values_in_constructor);
                if (message.enum_value_naming != null && message.hasOwnProperty("enum_value_naming"))
                    writer.uint32(/* id 16, wireType 0 =*/128).int32(message.enum_value_naming);
                if (message.enum_strip_prefix != null && message.hasOwnProperty("enum_strip_prefix"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.enum_strip_prefix);
                if (message.aux_message_options != null && message.aux_message_options.length)
                    for (var i = 0; i < message.aux_message_options.length; ++i)
                        $root.scalapb.ScalaPbOptions.AuxMessageOptions.encode(message.aux_message_options[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                if (message.aux_field_options != null && message.aux_field_options.length)
                    for (var i = 0; i < message.aux_field_options.length; ++i)
                        $root.scalapb.ScalaPbOptions.AuxFieldOptions.encode(message.aux_field_options[i], writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                if (message.aux_enum_options != null && message.aux_enum_options.length)
                    for (var i = 0; i < message.aux_enum_options.length; ++i)
                        $root.scalapb.ScalaPbOptions.AuxEnumOptions.encode(message.aux_enum_options[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                if (message.bytes_type != null && message.hasOwnProperty("bytes_type"))
                    writer.uint32(/* id 21, wireType 2 =*/170).string(message.bytes_type);
                if (message.aux_enum_value_options != null && message.aux_enum_value_options.length)
                    for (var i = 0; i < message.aux_enum_value_options.length; ++i)
                        $root.scalapb.ScalaPbOptions.AuxEnumValueOptions.encode(message.aux_enum_value_options[i], writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                if (message.java_conversions != null && message.hasOwnProperty("java_conversions"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.java_conversions);
                if (message.test_only_no_java_conversions != null && message.hasOwnProperty("test_only_no_java_conversions"))
                    writer.uint32(/* id 1001, wireType 0 =*/8008).bool(message.test_only_no_java_conversions);
                return writer;
            };

            /**
             * Encodes the specified ScalaPbOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {scalapb.IScalaPbOptions} message ScalaPbOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScalaPbOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ScalaPbOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.ScalaPbOptions} ScalaPbOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScalaPbOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.package_name = reader.string();
                        break;
                    case 2:
                        message.flat_package = reader.bool();
                        break;
                    case 3:
                        if (!(message["import"] && message["import"].length))
                            message["import"] = [];
                        message["import"].push(reader.string());
                        break;
                    case 4:
                        if (!(message.preamble && message.preamble.length))
                            message.preamble = [];
                        message.preamble.push(reader.string());
                        break;
                    case 5:
                        message.single_file = reader.bool();
                        break;
                    case 7:
                        message.no_primitive_wrappers = reader.bool();
                        break;
                    case 6:
                        message.primitive_wrappers = reader.bool();
                        break;
                    case 8:
                        message.collection_type = reader.string();
                        break;
                    case 9:
                        message.preserve_unknown_fields = reader.bool();
                        break;
                    case 10:
                        message.object_name = reader.string();
                        break;
                    case 11:
                        message.scope = reader.int32();
                        break;
                    case 12:
                        message.lenses = reader.bool();
                        break;
                    case 13:
                        message.retain_source_code_info = reader.bool();
                        break;
                    case 14:
                        message.map_type = reader.string();
                        break;
                    case 15:
                        message.no_default_values_in_constructor = reader.bool();
                        break;
                    case 16:
                        message.enum_value_naming = reader.int32();
                        break;
                    case 17:
                        message.enum_strip_prefix = reader.bool();
                        break;
                    case 21:
                        message.bytes_type = reader.string();
                        break;
                    case 23:
                        message.java_conversions = reader.bool();
                        break;
                    case 18:
                        if (!(message.aux_message_options && message.aux_message_options.length))
                            message.aux_message_options = [];
                        message.aux_message_options.push($root.scalapb.ScalaPbOptions.AuxMessageOptions.decode(reader, reader.uint32()));
                        break;
                    case 19:
                        if (!(message.aux_field_options && message.aux_field_options.length))
                            message.aux_field_options = [];
                        message.aux_field_options.push($root.scalapb.ScalaPbOptions.AuxFieldOptions.decode(reader, reader.uint32()));
                        break;
                    case 20:
                        if (!(message.aux_enum_options && message.aux_enum_options.length))
                            message.aux_enum_options = [];
                        message.aux_enum_options.push($root.scalapb.ScalaPbOptions.AuxEnumOptions.decode(reader, reader.uint32()));
                        break;
                    case 22:
                        if (!(message.aux_enum_value_options && message.aux_enum_value_options.length))
                            message.aux_enum_value_options = [];
                        message.aux_enum_value_options.push($root.scalapb.ScalaPbOptions.AuxEnumValueOptions.decode(reader, reader.uint32()));
                        break;
                    case 1001:
                        message.test_only_no_java_conversions = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ScalaPbOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.ScalaPbOptions} ScalaPbOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScalaPbOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ScalaPbOptions message.
             * @function verify
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ScalaPbOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.package_name != null && message.hasOwnProperty("package_name"))
                    if (!$util.isString(message.package_name))
                        return "package_name: string expected";
                if (message.flat_package != null && message.hasOwnProperty("flat_package"))
                    if (typeof message.flat_package !== "boolean")
                        return "flat_package: boolean expected";
                if (message["import"] != null && message.hasOwnProperty("import")) {
                    if (!Array.isArray(message["import"]))
                        return "import: array expected";
                    for (var i = 0; i < message["import"].length; ++i)
                        if (!$util.isString(message["import"][i]))
                            return "import: string[] expected";
                }
                if (message.preamble != null && message.hasOwnProperty("preamble")) {
                    if (!Array.isArray(message.preamble))
                        return "preamble: array expected";
                    for (var i = 0; i < message.preamble.length; ++i)
                        if (!$util.isString(message.preamble[i]))
                            return "preamble: string[] expected";
                }
                if (message.single_file != null && message.hasOwnProperty("single_file"))
                    if (typeof message.single_file !== "boolean")
                        return "single_file: boolean expected";
                if (message.no_primitive_wrappers != null && message.hasOwnProperty("no_primitive_wrappers"))
                    if (typeof message.no_primitive_wrappers !== "boolean")
                        return "no_primitive_wrappers: boolean expected";
                if (message.primitive_wrappers != null && message.hasOwnProperty("primitive_wrappers"))
                    if (typeof message.primitive_wrappers !== "boolean")
                        return "primitive_wrappers: boolean expected";
                if (message.collection_type != null && message.hasOwnProperty("collection_type"))
                    if (!$util.isString(message.collection_type))
                        return "collection_type: string expected";
                if (message.preserve_unknown_fields != null && message.hasOwnProperty("preserve_unknown_fields"))
                    if (typeof message.preserve_unknown_fields !== "boolean")
                        return "preserve_unknown_fields: boolean expected";
                if (message.object_name != null && message.hasOwnProperty("object_name"))
                    if (!$util.isString(message.object_name))
                        return "object_name: string expected";
                if (message.scope != null && message.hasOwnProperty("scope"))
                    switch (message.scope) {
                    default:
                        return "scope: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.lenses != null && message.hasOwnProperty("lenses"))
                    if (typeof message.lenses !== "boolean")
                        return "lenses: boolean expected";
                if (message.retain_source_code_info != null && message.hasOwnProperty("retain_source_code_info"))
                    if (typeof message.retain_source_code_info !== "boolean")
                        return "retain_source_code_info: boolean expected";
                if (message.map_type != null && message.hasOwnProperty("map_type"))
                    if (!$util.isString(message.map_type))
                        return "map_type: string expected";
                if (message.no_default_values_in_constructor != null && message.hasOwnProperty("no_default_values_in_constructor"))
                    if (typeof message.no_default_values_in_constructor !== "boolean")
                        return "no_default_values_in_constructor: boolean expected";
                if (message.enum_value_naming != null && message.hasOwnProperty("enum_value_naming"))
                    switch (message.enum_value_naming) {
                    default:
                        return "enum_value_naming: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.enum_strip_prefix != null && message.hasOwnProperty("enum_strip_prefix"))
                    if (typeof message.enum_strip_prefix !== "boolean")
                        return "enum_strip_prefix: boolean expected";
                if (message.bytes_type != null && message.hasOwnProperty("bytes_type"))
                    if (!$util.isString(message.bytes_type))
                        return "bytes_type: string expected";
                if (message.java_conversions != null && message.hasOwnProperty("java_conversions"))
                    if (typeof message.java_conversions !== "boolean")
                        return "java_conversions: boolean expected";
                if (message.aux_message_options != null && message.hasOwnProperty("aux_message_options")) {
                    if (!Array.isArray(message.aux_message_options))
                        return "aux_message_options: array expected";
                    for (var i = 0; i < message.aux_message_options.length; ++i) {
                        var error = $root.scalapb.ScalaPbOptions.AuxMessageOptions.verify(message.aux_message_options[i]);
                        if (error)
                            return "aux_message_options." + error;
                    }
                }
                if (message.aux_field_options != null && message.hasOwnProperty("aux_field_options")) {
                    if (!Array.isArray(message.aux_field_options))
                        return "aux_field_options: array expected";
                    for (var i = 0; i < message.aux_field_options.length; ++i) {
                        var error = $root.scalapb.ScalaPbOptions.AuxFieldOptions.verify(message.aux_field_options[i]);
                        if (error)
                            return "aux_field_options." + error;
                    }
                }
                if (message.aux_enum_options != null && message.hasOwnProperty("aux_enum_options")) {
                    if (!Array.isArray(message.aux_enum_options))
                        return "aux_enum_options: array expected";
                    for (var i = 0; i < message.aux_enum_options.length; ++i) {
                        var error = $root.scalapb.ScalaPbOptions.AuxEnumOptions.verify(message.aux_enum_options[i]);
                        if (error)
                            return "aux_enum_options." + error;
                    }
                }
                if (message.aux_enum_value_options != null && message.hasOwnProperty("aux_enum_value_options")) {
                    if (!Array.isArray(message.aux_enum_value_options))
                        return "aux_enum_value_options: array expected";
                    for (var i = 0; i < message.aux_enum_value_options.length; ++i) {
                        var error = $root.scalapb.ScalaPbOptions.AuxEnumValueOptions.verify(message.aux_enum_value_options[i]);
                        if (error)
                            return "aux_enum_value_options." + error;
                    }
                }
                if (message.test_only_no_java_conversions != null && message.hasOwnProperty("test_only_no_java_conversions"))
                    if (typeof message.test_only_no_java_conversions !== "boolean")
                        return "test_only_no_java_conversions: boolean expected";
                return null;
            };

            /**
             * Creates a ScalaPbOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.ScalaPbOptions} ScalaPbOptions
             */
            ScalaPbOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.ScalaPbOptions)
                    return object;
                var message = new $root.scalapb.ScalaPbOptions();
                if (object.package_name != null)
                    message.package_name = String(object.package_name);
                if (object.flat_package != null)
                    message.flat_package = Boolean(object.flat_package);
                if (object["import"]) {
                    if (!Array.isArray(object["import"]))
                        throw TypeError(".scalapb.ScalaPbOptions.import: array expected");
                    message["import"] = [];
                    for (var i = 0; i < object["import"].length; ++i)
                        message["import"][i] = String(object["import"][i]);
                }
                if (object.preamble) {
                    if (!Array.isArray(object.preamble))
                        throw TypeError(".scalapb.ScalaPbOptions.preamble: array expected");
                    message.preamble = [];
                    for (var i = 0; i < object.preamble.length; ++i)
                        message.preamble[i] = String(object.preamble[i]);
                }
                if (object.single_file != null)
                    message.single_file = Boolean(object.single_file);
                if (object.no_primitive_wrappers != null)
                    message.no_primitive_wrappers = Boolean(object.no_primitive_wrappers);
                if (object.primitive_wrappers != null)
                    message.primitive_wrappers = Boolean(object.primitive_wrappers);
                if (object.collection_type != null)
                    message.collection_type = String(object.collection_type);
                if (object.preserve_unknown_fields != null)
                    message.preserve_unknown_fields = Boolean(object.preserve_unknown_fields);
                if (object.object_name != null)
                    message.object_name = String(object.object_name);
                switch (object.scope) {
                case "FILE":
                case 0:
                    message.scope = 0;
                    break;
                case "PACKAGE":
                case 1:
                    message.scope = 1;
                    break;
                }
                if (object.lenses != null)
                    message.lenses = Boolean(object.lenses);
                if (object.retain_source_code_info != null)
                    message.retain_source_code_info = Boolean(object.retain_source_code_info);
                if (object.map_type != null)
                    message.map_type = String(object.map_type);
                if (object.no_default_values_in_constructor != null)
                    message.no_default_values_in_constructor = Boolean(object.no_default_values_in_constructor);
                switch (object.enum_value_naming) {
                case "AS_IN_PROTO":
                case 0:
                    message.enum_value_naming = 0;
                    break;
                case "CAMEL_CASE":
                case 1:
                    message.enum_value_naming = 1;
                    break;
                }
                if (object.enum_strip_prefix != null)
                    message.enum_strip_prefix = Boolean(object.enum_strip_prefix);
                if (object.bytes_type != null)
                    message.bytes_type = String(object.bytes_type);
                if (object.java_conversions != null)
                    message.java_conversions = Boolean(object.java_conversions);
                if (object.aux_message_options) {
                    if (!Array.isArray(object.aux_message_options))
                        throw TypeError(".scalapb.ScalaPbOptions.aux_message_options: array expected");
                    message.aux_message_options = [];
                    for (var i = 0; i < object.aux_message_options.length; ++i) {
                        if (typeof object.aux_message_options[i] !== "object")
                            throw TypeError(".scalapb.ScalaPbOptions.aux_message_options: object expected");
                        message.aux_message_options[i] = $root.scalapb.ScalaPbOptions.AuxMessageOptions.fromObject(object.aux_message_options[i]);
                    }
                }
                if (object.aux_field_options) {
                    if (!Array.isArray(object.aux_field_options))
                        throw TypeError(".scalapb.ScalaPbOptions.aux_field_options: array expected");
                    message.aux_field_options = [];
                    for (var i = 0; i < object.aux_field_options.length; ++i) {
                        if (typeof object.aux_field_options[i] !== "object")
                            throw TypeError(".scalapb.ScalaPbOptions.aux_field_options: object expected");
                        message.aux_field_options[i] = $root.scalapb.ScalaPbOptions.AuxFieldOptions.fromObject(object.aux_field_options[i]);
                    }
                }
                if (object.aux_enum_options) {
                    if (!Array.isArray(object.aux_enum_options))
                        throw TypeError(".scalapb.ScalaPbOptions.aux_enum_options: array expected");
                    message.aux_enum_options = [];
                    for (var i = 0; i < object.aux_enum_options.length; ++i) {
                        if (typeof object.aux_enum_options[i] !== "object")
                            throw TypeError(".scalapb.ScalaPbOptions.aux_enum_options: object expected");
                        message.aux_enum_options[i] = $root.scalapb.ScalaPbOptions.AuxEnumOptions.fromObject(object.aux_enum_options[i]);
                    }
                }
                if (object.aux_enum_value_options) {
                    if (!Array.isArray(object.aux_enum_value_options))
                        throw TypeError(".scalapb.ScalaPbOptions.aux_enum_value_options: array expected");
                    message.aux_enum_value_options = [];
                    for (var i = 0; i < object.aux_enum_value_options.length; ++i) {
                        if (typeof object.aux_enum_value_options[i] !== "object")
                            throw TypeError(".scalapb.ScalaPbOptions.aux_enum_value_options: object expected");
                        message.aux_enum_value_options[i] = $root.scalapb.ScalaPbOptions.AuxEnumValueOptions.fromObject(object.aux_enum_value_options[i]);
                    }
                }
                if (object.test_only_no_java_conversions != null)
                    message.test_only_no_java_conversions = Boolean(object.test_only_no_java_conversions);
                return message;
            };

            /**
             * Creates a plain object from a ScalaPbOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.ScalaPbOptions
             * @static
             * @param {scalapb.ScalaPbOptions} message ScalaPbOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ScalaPbOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object["import"] = [];
                    object.preamble = [];
                    object.aux_message_options = [];
                    object.aux_field_options = [];
                    object.aux_enum_options = [];
                    object.aux_enum_value_options = [];
                }
                if (options.defaults) {
                    object.package_name = "";
                    object.flat_package = false;
                    object.single_file = false;
                    object.primitive_wrappers = false;
                    object.no_primitive_wrappers = false;
                    object.collection_type = "";
                    object.preserve_unknown_fields = true;
                    object.object_name = "";
                    object.scope = options.enums === String ? "FILE" : 0;
                    object.lenses = true;
                    object.retain_source_code_info = false;
                    object.map_type = "";
                    object.no_default_values_in_constructor = false;
                    object.enum_value_naming = options.enums === String ? "AS_IN_PROTO" : 0;
                    object.enum_strip_prefix = false;
                    object.bytes_type = "";
                    object.java_conversions = false;
                    object.test_only_no_java_conversions = false;
                }
                if (message.package_name != null && message.hasOwnProperty("package_name"))
                    object.package_name = message.package_name;
                if (message.flat_package != null && message.hasOwnProperty("flat_package"))
                    object.flat_package = message.flat_package;
                if (message["import"] && message["import"].length) {
                    object["import"] = [];
                    for (var j = 0; j < message["import"].length; ++j)
                        object["import"][j] = message["import"][j];
                }
                if (message.preamble && message.preamble.length) {
                    object.preamble = [];
                    for (var j = 0; j < message.preamble.length; ++j)
                        object.preamble[j] = message.preamble[j];
                }
                if (message.single_file != null && message.hasOwnProperty("single_file"))
                    object.single_file = message.single_file;
                if (message.primitive_wrappers != null && message.hasOwnProperty("primitive_wrappers"))
                    object.primitive_wrappers = message.primitive_wrappers;
                if (message.no_primitive_wrappers != null && message.hasOwnProperty("no_primitive_wrappers"))
                    object.no_primitive_wrappers = message.no_primitive_wrappers;
                if (message.collection_type != null && message.hasOwnProperty("collection_type"))
                    object.collection_type = message.collection_type;
                if (message.preserve_unknown_fields != null && message.hasOwnProperty("preserve_unknown_fields"))
                    object.preserve_unknown_fields = message.preserve_unknown_fields;
                if (message.object_name != null && message.hasOwnProperty("object_name"))
                    object.object_name = message.object_name;
                if (message.scope != null && message.hasOwnProperty("scope"))
                    object.scope = options.enums === String ? $root.scalapb.ScalaPbOptions.OptionsScope[message.scope] : message.scope;
                if (message.lenses != null && message.hasOwnProperty("lenses"))
                    object.lenses = message.lenses;
                if (message.retain_source_code_info != null && message.hasOwnProperty("retain_source_code_info"))
                    object.retain_source_code_info = message.retain_source_code_info;
                if (message.map_type != null && message.hasOwnProperty("map_type"))
                    object.map_type = message.map_type;
                if (message.no_default_values_in_constructor != null && message.hasOwnProperty("no_default_values_in_constructor"))
                    object.no_default_values_in_constructor = message.no_default_values_in_constructor;
                if (message.enum_value_naming != null && message.hasOwnProperty("enum_value_naming"))
                    object.enum_value_naming = options.enums === String ? $root.scalapb.ScalaPbOptions.EnumValueNaming[message.enum_value_naming] : message.enum_value_naming;
                if (message.enum_strip_prefix != null && message.hasOwnProperty("enum_strip_prefix"))
                    object.enum_strip_prefix = message.enum_strip_prefix;
                if (message.aux_message_options && message.aux_message_options.length) {
                    object.aux_message_options = [];
                    for (var j = 0; j < message.aux_message_options.length; ++j)
                        object.aux_message_options[j] = $root.scalapb.ScalaPbOptions.AuxMessageOptions.toObject(message.aux_message_options[j], options);
                }
                if (message.aux_field_options && message.aux_field_options.length) {
                    object.aux_field_options = [];
                    for (var j = 0; j < message.aux_field_options.length; ++j)
                        object.aux_field_options[j] = $root.scalapb.ScalaPbOptions.AuxFieldOptions.toObject(message.aux_field_options[j], options);
                }
                if (message.aux_enum_options && message.aux_enum_options.length) {
                    object.aux_enum_options = [];
                    for (var j = 0; j < message.aux_enum_options.length; ++j)
                        object.aux_enum_options[j] = $root.scalapb.ScalaPbOptions.AuxEnumOptions.toObject(message.aux_enum_options[j], options);
                }
                if (message.bytes_type != null && message.hasOwnProperty("bytes_type"))
                    object.bytes_type = message.bytes_type;
                if (message.aux_enum_value_options && message.aux_enum_value_options.length) {
                    object.aux_enum_value_options = [];
                    for (var j = 0; j < message.aux_enum_value_options.length; ++j)
                        object.aux_enum_value_options[j] = $root.scalapb.ScalaPbOptions.AuxEnumValueOptions.toObject(message.aux_enum_value_options[j], options);
                }
                if (message.java_conversions != null && message.hasOwnProperty("java_conversions"))
                    object.java_conversions = message.java_conversions;
                if (message.test_only_no_java_conversions != null && message.hasOwnProperty("test_only_no_java_conversions"))
                    object.test_only_no_java_conversions = message.test_only_no_java_conversions;
                return object;
            };

            /**
             * Converts this ScalaPbOptions to JSON.
             * @function toJSON
             * @memberof scalapb.ScalaPbOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ScalaPbOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptionsScope enum.
             * @name scalapb.ScalaPbOptions.OptionsScope
             * @enum {string}
             * @property {number} FILE=0 FILE value
             * @property {number} PACKAGE=1 PACKAGE value
             */
            ScalaPbOptions.OptionsScope = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FILE"] = 0;
                values[valuesById[1] = "PACKAGE"] = 1;
                return values;
            })();

            /**
             * EnumValueNaming enum.
             * @name scalapb.ScalaPbOptions.EnumValueNaming
             * @enum {string}
             * @property {number} AS_IN_PROTO=0 AS_IN_PROTO value
             * @property {number} CAMEL_CASE=1 CAMEL_CASE value
             */
            ScalaPbOptions.EnumValueNaming = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "AS_IN_PROTO"] = 0;
                values[valuesById[1] = "CAMEL_CASE"] = 1;
                return values;
            })();

            ScalaPbOptions.AuxMessageOptions = (function() {

                /**
                 * Properties of an AuxMessageOptions.
                 * @memberof scalapb.ScalaPbOptions
                 * @interface IAuxMessageOptions
                 * @property {string|null} [target] AuxMessageOptions target
                 * @property {scalapb.IMessageOptions|null} [options] AuxMessageOptions options
                 */

                /**
                 * Constructs a new AuxMessageOptions.
                 * @memberof scalapb.ScalaPbOptions
                 * @classdesc Represents an AuxMessageOptions.
                 * @implements IAuxMessageOptions
                 * @constructor
                 * @param {scalapb.ScalaPbOptions.IAuxMessageOptions=} [properties] Properties to set
                 */
                function AuxMessageOptions(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AuxMessageOptions target.
                 * @member {string} target
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @instance
                 */
                AuxMessageOptions.prototype.target = "";

                /**
                 * AuxMessageOptions options.
                 * @member {scalapb.IMessageOptions|null|undefined} options
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @instance
                 */
                AuxMessageOptions.prototype.options = null;

                /**
                 * Creates a new AuxMessageOptions instance using the specified properties.
                 * @function create
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxMessageOptions=} [properties] Properties to set
                 * @returns {scalapb.ScalaPbOptions.AuxMessageOptions} AuxMessageOptions instance
                 */
                AuxMessageOptions.create = function create(properties) {
                    return new AuxMessageOptions(properties);
                };

                /**
                 * Encodes the specified AuxMessageOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.AuxMessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxMessageOptions} message AuxMessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AuxMessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.target != null && message.hasOwnProperty("target"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.target);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.scalapb.MessageOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified AuxMessageOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.AuxMessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxMessageOptions} message AuxMessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AuxMessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AuxMessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {scalapb.ScalaPbOptions.AuxMessageOptions} AuxMessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AuxMessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions.AuxMessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.target = reader.string();
                            break;
                        case 2:
                            message.options = $root.scalapb.MessageOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AuxMessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {scalapb.ScalaPbOptions.AuxMessageOptions} AuxMessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AuxMessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AuxMessageOptions message.
                 * @function verify
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AuxMessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.target != null && message.hasOwnProperty("target"))
                        if (!$util.isString(message.target))
                            return "target: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.scalapb.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an AuxMessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {scalapb.ScalaPbOptions.AuxMessageOptions} AuxMessageOptions
                 */
                AuxMessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.scalapb.ScalaPbOptions.AuxMessageOptions)
                        return object;
                    var message = new $root.scalapb.ScalaPbOptions.AuxMessageOptions();
                    if (object.target != null)
                        message.target = String(object.target);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".scalapb.ScalaPbOptions.AuxMessageOptions.options: object expected");
                        message.options = $root.scalapb.MessageOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AuxMessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.AuxMessageOptions} message AuxMessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AuxMessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.target = "";
                        object.options = null;
                    }
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = message.target;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.scalapb.MessageOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this AuxMessageOptions to JSON.
                 * @function toJSON
                 * @memberof scalapb.ScalaPbOptions.AuxMessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AuxMessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AuxMessageOptions;
            })();

            ScalaPbOptions.AuxFieldOptions = (function() {

                /**
                 * Properties of an AuxFieldOptions.
                 * @memberof scalapb.ScalaPbOptions
                 * @interface IAuxFieldOptions
                 * @property {string|null} [target] AuxFieldOptions target
                 * @property {scalapb.IFieldOptions|null} [options] AuxFieldOptions options
                 */

                /**
                 * Constructs a new AuxFieldOptions.
                 * @memberof scalapb.ScalaPbOptions
                 * @classdesc Represents an AuxFieldOptions.
                 * @implements IAuxFieldOptions
                 * @constructor
                 * @param {scalapb.ScalaPbOptions.IAuxFieldOptions=} [properties] Properties to set
                 */
                function AuxFieldOptions(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AuxFieldOptions target.
                 * @member {string} target
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @instance
                 */
                AuxFieldOptions.prototype.target = "";

                /**
                 * AuxFieldOptions options.
                 * @member {scalapb.IFieldOptions|null|undefined} options
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @instance
                 */
                AuxFieldOptions.prototype.options = null;

                /**
                 * Creates a new AuxFieldOptions instance using the specified properties.
                 * @function create
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxFieldOptions=} [properties] Properties to set
                 * @returns {scalapb.ScalaPbOptions.AuxFieldOptions} AuxFieldOptions instance
                 */
                AuxFieldOptions.create = function create(properties) {
                    return new AuxFieldOptions(properties);
                };

                /**
                 * Encodes the specified AuxFieldOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.AuxFieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxFieldOptions} message AuxFieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AuxFieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.target != null && message.hasOwnProperty("target"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.target);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.scalapb.FieldOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified AuxFieldOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.AuxFieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxFieldOptions} message AuxFieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AuxFieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AuxFieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {scalapb.ScalaPbOptions.AuxFieldOptions} AuxFieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AuxFieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions.AuxFieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.target = reader.string();
                            break;
                        case 2:
                            message.options = $root.scalapb.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AuxFieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {scalapb.ScalaPbOptions.AuxFieldOptions} AuxFieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AuxFieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AuxFieldOptions message.
                 * @function verify
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AuxFieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.target != null && message.hasOwnProperty("target"))
                        if (!$util.isString(message.target))
                            return "target: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.scalapb.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an AuxFieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {scalapb.ScalaPbOptions.AuxFieldOptions} AuxFieldOptions
                 */
                AuxFieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.scalapb.ScalaPbOptions.AuxFieldOptions)
                        return object;
                    var message = new $root.scalapb.ScalaPbOptions.AuxFieldOptions();
                    if (object.target != null)
                        message.target = String(object.target);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".scalapb.ScalaPbOptions.AuxFieldOptions.options: object expected");
                        message.options = $root.scalapb.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AuxFieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.AuxFieldOptions} message AuxFieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AuxFieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.target = "";
                        object.options = null;
                    }
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = message.target;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.scalapb.FieldOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this AuxFieldOptions to JSON.
                 * @function toJSON
                 * @memberof scalapb.ScalaPbOptions.AuxFieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AuxFieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AuxFieldOptions;
            })();

            ScalaPbOptions.AuxEnumOptions = (function() {

                /**
                 * Properties of an AuxEnumOptions.
                 * @memberof scalapb.ScalaPbOptions
                 * @interface IAuxEnumOptions
                 * @property {string|null} [target] AuxEnumOptions target
                 * @property {scalapb.IEnumOptions|null} [options] AuxEnumOptions options
                 */

                /**
                 * Constructs a new AuxEnumOptions.
                 * @memberof scalapb.ScalaPbOptions
                 * @classdesc Represents an AuxEnumOptions.
                 * @implements IAuxEnumOptions
                 * @constructor
                 * @param {scalapb.ScalaPbOptions.IAuxEnumOptions=} [properties] Properties to set
                 */
                function AuxEnumOptions(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AuxEnumOptions target.
                 * @member {string} target
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @instance
                 */
                AuxEnumOptions.prototype.target = "";

                /**
                 * AuxEnumOptions options.
                 * @member {scalapb.IEnumOptions|null|undefined} options
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @instance
                 */
                AuxEnumOptions.prototype.options = null;

                /**
                 * Creates a new AuxEnumOptions instance using the specified properties.
                 * @function create
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxEnumOptions=} [properties] Properties to set
                 * @returns {scalapb.ScalaPbOptions.AuxEnumOptions} AuxEnumOptions instance
                 */
                AuxEnumOptions.create = function create(properties) {
                    return new AuxEnumOptions(properties);
                };

                /**
                 * Encodes the specified AuxEnumOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.AuxEnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxEnumOptions} message AuxEnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AuxEnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.target != null && message.hasOwnProperty("target"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.target);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.scalapb.EnumOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified AuxEnumOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.AuxEnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxEnumOptions} message AuxEnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AuxEnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AuxEnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {scalapb.ScalaPbOptions.AuxEnumOptions} AuxEnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AuxEnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions.AuxEnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.target = reader.string();
                            break;
                        case 2:
                            message.options = $root.scalapb.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AuxEnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {scalapb.ScalaPbOptions.AuxEnumOptions} AuxEnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AuxEnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AuxEnumOptions message.
                 * @function verify
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AuxEnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.target != null && message.hasOwnProperty("target"))
                        if (!$util.isString(message.target))
                            return "target: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.scalapb.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an AuxEnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {scalapb.ScalaPbOptions.AuxEnumOptions} AuxEnumOptions
                 */
                AuxEnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.scalapb.ScalaPbOptions.AuxEnumOptions)
                        return object;
                    var message = new $root.scalapb.ScalaPbOptions.AuxEnumOptions();
                    if (object.target != null)
                        message.target = String(object.target);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".scalapb.ScalaPbOptions.AuxEnumOptions.options: object expected");
                        message.options = $root.scalapb.EnumOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AuxEnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.AuxEnumOptions} message AuxEnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AuxEnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.target = "";
                        object.options = null;
                    }
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = message.target;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.scalapb.EnumOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this AuxEnumOptions to JSON.
                 * @function toJSON
                 * @memberof scalapb.ScalaPbOptions.AuxEnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AuxEnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AuxEnumOptions;
            })();

            ScalaPbOptions.AuxEnumValueOptions = (function() {

                /**
                 * Properties of an AuxEnumValueOptions.
                 * @memberof scalapb.ScalaPbOptions
                 * @interface IAuxEnumValueOptions
                 * @property {string|null} [target] AuxEnumValueOptions target
                 * @property {scalapb.IEnumValueOptions|null} [options] AuxEnumValueOptions options
                 */

                /**
                 * Constructs a new AuxEnumValueOptions.
                 * @memberof scalapb.ScalaPbOptions
                 * @classdesc Represents an AuxEnumValueOptions.
                 * @implements IAuxEnumValueOptions
                 * @constructor
                 * @param {scalapb.ScalaPbOptions.IAuxEnumValueOptions=} [properties] Properties to set
                 */
                function AuxEnumValueOptions(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AuxEnumValueOptions target.
                 * @member {string} target
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @instance
                 */
                AuxEnumValueOptions.prototype.target = "";

                /**
                 * AuxEnumValueOptions options.
                 * @member {scalapb.IEnumValueOptions|null|undefined} options
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @instance
                 */
                AuxEnumValueOptions.prototype.options = null;

                /**
                 * Creates a new AuxEnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxEnumValueOptions=} [properties] Properties to set
                 * @returns {scalapb.ScalaPbOptions.AuxEnumValueOptions} AuxEnumValueOptions instance
                 */
                AuxEnumValueOptions.create = function create(properties) {
                    return new AuxEnumValueOptions(properties);
                };

                /**
                 * Encodes the specified AuxEnumValueOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.AuxEnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxEnumValueOptions} message AuxEnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AuxEnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.target != null && message.hasOwnProperty("target"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.target);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.scalapb.EnumValueOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified AuxEnumValueOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.AuxEnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.IAuxEnumValueOptions} message AuxEnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AuxEnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AuxEnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {scalapb.ScalaPbOptions.AuxEnumValueOptions} AuxEnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AuxEnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions.AuxEnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.target = reader.string();
                            break;
                        case 2:
                            message.options = $root.scalapb.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an AuxEnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {scalapb.ScalaPbOptions.AuxEnumValueOptions} AuxEnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AuxEnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AuxEnumValueOptions message.
                 * @function verify
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AuxEnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.target != null && message.hasOwnProperty("target"))
                        if (!$util.isString(message.target))
                            return "target: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.scalapb.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an AuxEnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {scalapb.ScalaPbOptions.AuxEnumValueOptions} AuxEnumValueOptions
                 */
                AuxEnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.scalapb.ScalaPbOptions.AuxEnumValueOptions)
                        return object;
                    var message = new $root.scalapb.ScalaPbOptions.AuxEnumValueOptions();
                    if (object.target != null)
                        message.target = String(object.target);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".scalapb.ScalaPbOptions.AuxEnumValueOptions.options: object expected");
                        message.options = $root.scalapb.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AuxEnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @static
                 * @param {scalapb.ScalaPbOptions.AuxEnumValueOptions} message AuxEnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AuxEnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.target = "";
                        object.options = null;
                    }
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = message.target;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.scalapb.EnumValueOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this AuxEnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AuxEnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return AuxEnumValueOptions;
            })();

            return ScalaPbOptions;
        })();

        scalapb.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof scalapb
             * @interface IMessageOptions
             * @property {Array.<string>|null} ["extends"] MessageOptions extends
             * @property {Array.<string>|null} [companion_extends] MessageOptions companion_extends
             * @property {Array.<string>|null} [annotations] MessageOptions annotations
             * @property {string|null} [type] MessageOptions type
             * @property {Array.<string>|null} [companion_annotations] MessageOptions companion_annotations
             * @property {Array.<string>|null} [sealed_oneof_extends] MessageOptions sealed_oneof_extends
             * @property {boolean|null} [no_box] MessageOptions no_box
             * @property {Array.<string>|null} [unknown_fields_annotations] MessageOptions unknown_fields_annotations
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof scalapb
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {scalapb.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this["extends"] = [];
                this.companion_extends = [];
                this.annotations = [];
                this.companion_annotations = [];
                this.sealed_oneof_extends = [];
                this.unknown_fields_annotations = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions extends.
             * @member {Array.<string>} extends
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype["extends"] = $util.emptyArray;

            /**
             * MessageOptions companion_extends.
             * @member {Array.<string>} companion_extends
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.companion_extends = $util.emptyArray;

            /**
             * MessageOptions annotations.
             * @member {Array.<string>} annotations
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.annotations = $util.emptyArray;

            /**
             * MessageOptions type.
             * @member {string} type
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.type = "";

            /**
             * MessageOptions companion_annotations.
             * @member {Array.<string>} companion_annotations
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.companion_annotations = $util.emptyArray;

            /**
             * MessageOptions sealed_oneof_extends.
             * @member {Array.<string>} sealed_oneof_extends
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.sealed_oneof_extends = $util.emptyArray;

            /**
             * MessageOptions no_box.
             * @member {boolean} no_box
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.no_box = false;

            /**
             * MessageOptions unknown_fields_annotations.
             * @member {Array.<string>} unknown_fields_annotations
             * @memberof scalapb.MessageOptions
             * @instance
             */
            MessageOptions.prototype.unknown_fields_annotations = $util.emptyArray;

            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.MessageOptions
             * @static
             * @param {scalapb.IMessageOptions=} [properties] Properties to set
             * @returns {scalapb.MessageOptions} MessageOptions instance
             */
            MessageOptions.create = function create(properties) {
                return new MessageOptions(properties);
            };

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link scalapb.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.MessageOptions
             * @static
             * @param {scalapb.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["extends"] != null && message["extends"].length)
                    for (var i = 0; i < message["extends"].length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["extends"][i]);
                if (message.companion_extends != null && message.companion_extends.length)
                    for (var i = 0; i < message.companion_extends.length; ++i)
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.companion_extends[i]);
                if (message.annotations != null && message.annotations.length)
                    for (var i = 0; i < message.annotations.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.annotations[i]);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.type);
                if (message.companion_annotations != null && message.companion_annotations.length)
                    for (var i = 0; i < message.companion_annotations.length; ++i)
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.companion_annotations[i]);
                if (message.sealed_oneof_extends != null && message.sealed_oneof_extends.length)
                    for (var i = 0; i < message.sealed_oneof_extends.length; ++i)
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.sealed_oneof_extends[i]);
                if (message.no_box != null && message.hasOwnProperty("no_box"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.no_box);
                if (message.unknown_fields_annotations != null && message.unknown_fields_annotations.length)
                    for (var i = 0; i < message.unknown_fields_annotations.length; ++i)
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.unknown_fields_annotations[i]);
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link scalapb.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.MessageOptions
             * @static
             * @param {scalapb.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.MessageOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message["extends"] && message["extends"].length))
                            message["extends"] = [];
                        message["extends"].push(reader.string());
                        break;
                    case 2:
                        if (!(message.companion_extends && message.companion_extends.length))
                            message.companion_extends = [];
                        message.companion_extends.push(reader.string());
                        break;
                    case 3:
                        if (!(message.annotations && message.annotations.length))
                            message.annotations = [];
                        message.annotations.push(reader.string());
                        break;
                    case 4:
                        message.type = reader.string();
                        break;
                    case 5:
                        if (!(message.companion_annotations && message.companion_annotations.length))
                            message.companion_annotations = [];
                        message.companion_annotations.push(reader.string());
                        break;
                    case 6:
                        if (!(message.sealed_oneof_extends && message.sealed_oneof_extends.length))
                            message.sealed_oneof_extends = [];
                        message.sealed_oneof_extends.push(reader.string());
                        break;
                    case 7:
                        message.no_box = reader.bool();
                        break;
                    case 8:
                        if (!(message.unknown_fields_annotations && message.unknown_fields_annotations.length))
                            message.unknown_fields_annotations = [];
                        message.unknown_fields_annotations.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof scalapb.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message["extends"] != null && message.hasOwnProperty("extends")) {
                    if (!Array.isArray(message["extends"]))
                        return "extends: array expected";
                    for (var i = 0; i < message["extends"].length; ++i)
                        if (!$util.isString(message["extends"][i]))
                            return "extends: string[] expected";
                }
                if (message.companion_extends != null && message.hasOwnProperty("companion_extends")) {
                    if (!Array.isArray(message.companion_extends))
                        return "companion_extends: array expected";
                    for (var i = 0; i < message.companion_extends.length; ++i)
                        if (!$util.isString(message.companion_extends[i]))
                            return "companion_extends: string[] expected";
                }
                if (message.annotations != null && message.hasOwnProperty("annotations")) {
                    if (!Array.isArray(message.annotations))
                        return "annotations: array expected";
                    for (var i = 0; i < message.annotations.length; ++i)
                        if (!$util.isString(message.annotations[i]))
                            return "annotations: string[] expected";
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.companion_annotations != null && message.hasOwnProperty("companion_annotations")) {
                    if (!Array.isArray(message.companion_annotations))
                        return "companion_annotations: array expected";
                    for (var i = 0; i < message.companion_annotations.length; ++i)
                        if (!$util.isString(message.companion_annotations[i]))
                            return "companion_annotations: string[] expected";
                }
                if (message.sealed_oneof_extends != null && message.hasOwnProperty("sealed_oneof_extends")) {
                    if (!Array.isArray(message.sealed_oneof_extends))
                        return "sealed_oneof_extends: array expected";
                    for (var i = 0; i < message.sealed_oneof_extends.length; ++i)
                        if (!$util.isString(message.sealed_oneof_extends[i]))
                            return "sealed_oneof_extends: string[] expected";
                }
                if (message.no_box != null && message.hasOwnProperty("no_box"))
                    if (typeof message.no_box !== "boolean")
                        return "no_box: boolean expected";
                if (message.unknown_fields_annotations != null && message.hasOwnProperty("unknown_fields_annotations")) {
                    if (!Array.isArray(message.unknown_fields_annotations))
                        return "unknown_fields_annotations: array expected";
                    for (var i = 0; i < message.unknown_fields_annotations.length; ++i)
                        if (!$util.isString(message.unknown_fields_annotations[i]))
                            return "unknown_fields_annotations: string[] expected";
                }
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.MessageOptions)
                    return object;
                var message = new $root.scalapb.MessageOptions();
                if (object["extends"]) {
                    if (!Array.isArray(object["extends"]))
                        throw TypeError(".scalapb.MessageOptions.extends: array expected");
                    message["extends"] = [];
                    for (var i = 0; i < object["extends"].length; ++i)
                        message["extends"][i] = String(object["extends"][i]);
                }
                if (object.companion_extends) {
                    if (!Array.isArray(object.companion_extends))
                        throw TypeError(".scalapb.MessageOptions.companion_extends: array expected");
                    message.companion_extends = [];
                    for (var i = 0; i < object.companion_extends.length; ++i)
                        message.companion_extends[i] = String(object.companion_extends[i]);
                }
                if (object.annotations) {
                    if (!Array.isArray(object.annotations))
                        throw TypeError(".scalapb.MessageOptions.annotations: array expected");
                    message.annotations = [];
                    for (var i = 0; i < object.annotations.length; ++i)
                        message.annotations[i] = String(object.annotations[i]);
                }
                if (object.type != null)
                    message.type = String(object.type);
                if (object.companion_annotations) {
                    if (!Array.isArray(object.companion_annotations))
                        throw TypeError(".scalapb.MessageOptions.companion_annotations: array expected");
                    message.companion_annotations = [];
                    for (var i = 0; i < object.companion_annotations.length; ++i)
                        message.companion_annotations[i] = String(object.companion_annotations[i]);
                }
                if (object.sealed_oneof_extends) {
                    if (!Array.isArray(object.sealed_oneof_extends))
                        throw TypeError(".scalapb.MessageOptions.sealed_oneof_extends: array expected");
                    message.sealed_oneof_extends = [];
                    for (var i = 0; i < object.sealed_oneof_extends.length; ++i)
                        message.sealed_oneof_extends[i] = String(object.sealed_oneof_extends[i]);
                }
                if (object.no_box != null)
                    message.no_box = Boolean(object.no_box);
                if (object.unknown_fields_annotations) {
                    if (!Array.isArray(object.unknown_fields_annotations))
                        throw TypeError(".scalapb.MessageOptions.unknown_fields_annotations: array expected");
                    message.unknown_fields_annotations = [];
                    for (var i = 0; i < object.unknown_fields_annotations.length; ++i)
                        message.unknown_fields_annotations[i] = String(object.unknown_fields_annotations[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.MessageOptions
             * @static
             * @param {scalapb.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object["extends"] = [];
                    object.companion_extends = [];
                    object.annotations = [];
                    object.companion_annotations = [];
                    object.sealed_oneof_extends = [];
                    object.unknown_fields_annotations = [];
                }
                if (options.defaults) {
                    object.type = "";
                    object.no_box = false;
                }
                if (message["extends"] && message["extends"].length) {
                    object["extends"] = [];
                    for (var j = 0; j < message["extends"].length; ++j)
                        object["extends"][j] = message["extends"][j];
                }
                if (message.companion_extends && message.companion_extends.length) {
                    object.companion_extends = [];
                    for (var j = 0; j < message.companion_extends.length; ++j)
                        object.companion_extends[j] = message.companion_extends[j];
                }
                if (message.annotations && message.annotations.length) {
                    object.annotations = [];
                    for (var j = 0; j < message.annotations.length; ++j)
                        object.annotations[j] = message.annotations[j];
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.companion_annotations && message.companion_annotations.length) {
                    object.companion_annotations = [];
                    for (var j = 0; j < message.companion_annotations.length; ++j)
                        object.companion_annotations[j] = message.companion_annotations[j];
                }
                if (message.sealed_oneof_extends && message.sealed_oneof_extends.length) {
                    object.sealed_oneof_extends = [];
                    for (var j = 0; j < message.sealed_oneof_extends.length; ++j)
                        object.sealed_oneof_extends[j] = message.sealed_oneof_extends[j];
                }
                if (message.no_box != null && message.hasOwnProperty("no_box"))
                    object.no_box = message.no_box;
                if (message.unknown_fields_annotations && message.unknown_fields_annotations.length) {
                    object.unknown_fields_annotations = [];
                    for (var j = 0; j < message.unknown_fields_annotations.length; ++j)
                        object.unknown_fields_annotations[j] = message.unknown_fields_annotations[j];
                }
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof scalapb.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        scalapb.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof scalapb
             * @interface IFieldOptions
             * @property {string|null} [type] FieldOptions type
             * @property {string|null} [scala_name] FieldOptions scala_name
             * @property {string|null} [collection_type] FieldOptions collection_type
             * @property {string|null} [key_type] FieldOptions key_type
             * @property {string|null} [value_type] FieldOptions value_type
             * @property {Array.<string>|null} [annotations] FieldOptions annotations
             * @property {string|null} [map_type] FieldOptions map_type
             * @property {boolean|null} [no_box] FieldOptions no_box
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof scalapb
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {scalapb.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.annotations = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions type.
             * @member {string} type
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.type = "";

            /**
             * FieldOptions scala_name.
             * @member {string} scala_name
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.scala_name = "";

            /**
             * FieldOptions collection_type.
             * @member {string} collection_type
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.collection_type = "";

            /**
             * FieldOptions key_type.
             * @member {string} key_type
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.key_type = "";

            /**
             * FieldOptions value_type.
             * @member {string} value_type
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.value_type = "";

            /**
             * FieldOptions annotations.
             * @member {Array.<string>} annotations
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.annotations = $util.emptyArray;

            /**
             * FieldOptions map_type.
             * @member {string} map_type
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.map_type = "";

            /**
             * FieldOptions no_box.
             * @member {boolean} no_box
             * @memberof scalapb.FieldOptions
             * @instance
             */
            FieldOptions.prototype.no_box = false;

            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.FieldOptions
             * @static
             * @param {scalapb.IFieldOptions=} [properties] Properties to set
             * @returns {scalapb.FieldOptions} FieldOptions instance
             */
            FieldOptions.create = function create(properties) {
                return new FieldOptions(properties);
            };

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link scalapb.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.FieldOptions
             * @static
             * @param {scalapb.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                if (message.scala_name != null && message.hasOwnProperty("scala_name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.scala_name);
                if (message.collection_type != null && message.hasOwnProperty("collection_type"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.collection_type);
                if (message.key_type != null && message.hasOwnProperty("key_type"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.key_type);
                if (message.value_type != null && message.hasOwnProperty("value_type"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.value_type);
                if (message.annotations != null && message.annotations.length)
                    for (var i = 0; i < message.annotations.length; ++i)
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.annotations[i]);
                if (message.map_type != null && message.hasOwnProperty("map_type"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.map_type);
                if (message.no_box != null && message.hasOwnProperty("no_box"))
                    writer.uint32(/* id 30, wireType 0 =*/240).bool(message.no_box);
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link scalapb.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.FieldOptions
             * @static
             * @param {scalapb.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.FieldOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.string();
                        break;
                    case 2:
                        message.scala_name = reader.string();
                        break;
                    case 3:
                        message.collection_type = reader.string();
                        break;
                    case 4:
                        message.key_type = reader.string();
                        break;
                    case 5:
                        message.value_type = reader.string();
                        break;
                    case 6:
                        if (!(message.annotations && message.annotations.length))
                            message.annotations = [];
                        message.annotations.push(reader.string());
                        break;
                    case 7:
                        message.map_type = reader.string();
                        break;
                    case 30:
                        message.no_box = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof scalapb.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.scala_name != null && message.hasOwnProperty("scala_name"))
                    if (!$util.isString(message.scala_name))
                        return "scala_name: string expected";
                if (message.collection_type != null && message.hasOwnProperty("collection_type"))
                    if (!$util.isString(message.collection_type))
                        return "collection_type: string expected";
                if (message.key_type != null && message.hasOwnProperty("key_type"))
                    if (!$util.isString(message.key_type))
                        return "key_type: string expected";
                if (message.value_type != null && message.hasOwnProperty("value_type"))
                    if (!$util.isString(message.value_type))
                        return "value_type: string expected";
                if (message.annotations != null && message.hasOwnProperty("annotations")) {
                    if (!Array.isArray(message.annotations))
                        return "annotations: array expected";
                    for (var i = 0; i < message.annotations.length; ++i)
                        if (!$util.isString(message.annotations[i]))
                            return "annotations: string[] expected";
                }
                if (message.map_type != null && message.hasOwnProperty("map_type"))
                    if (!$util.isString(message.map_type))
                        return "map_type: string expected";
                if (message.no_box != null && message.hasOwnProperty("no_box"))
                    if (typeof message.no_box !== "boolean")
                        return "no_box: boolean expected";
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.FieldOptions)
                    return object;
                var message = new $root.scalapb.FieldOptions();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.scala_name != null)
                    message.scala_name = String(object.scala_name);
                if (object.collection_type != null)
                    message.collection_type = String(object.collection_type);
                if (object.key_type != null)
                    message.key_type = String(object.key_type);
                if (object.value_type != null)
                    message.value_type = String(object.value_type);
                if (object.annotations) {
                    if (!Array.isArray(object.annotations))
                        throw TypeError(".scalapb.FieldOptions.annotations: array expected");
                    message.annotations = [];
                    for (var i = 0; i < object.annotations.length; ++i)
                        message.annotations[i] = String(object.annotations[i]);
                }
                if (object.map_type != null)
                    message.map_type = String(object.map_type);
                if (object.no_box != null)
                    message.no_box = Boolean(object.no_box);
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.FieldOptions
             * @static
             * @param {scalapb.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.annotations = [];
                if (options.defaults) {
                    object.type = "";
                    object.scala_name = "";
                    object.collection_type = "";
                    object.key_type = "";
                    object.value_type = "";
                    object.map_type = "";
                    object.no_box = false;
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.scala_name != null && message.hasOwnProperty("scala_name"))
                    object.scala_name = message.scala_name;
                if (message.collection_type != null && message.hasOwnProperty("collection_type"))
                    object.collection_type = message.collection_type;
                if (message.key_type != null && message.hasOwnProperty("key_type"))
                    object.key_type = message.key_type;
                if (message.value_type != null && message.hasOwnProperty("value_type"))
                    object.value_type = message.value_type;
                if (message.annotations && message.annotations.length) {
                    object.annotations = [];
                    for (var j = 0; j < message.annotations.length; ++j)
                        object.annotations[j] = message.annotations[j];
                }
                if (message.map_type != null && message.hasOwnProperty("map_type"))
                    object.map_type = message.map_type;
                if (message.no_box != null && message.hasOwnProperty("no_box"))
                    object.no_box = message.no_box;
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof scalapb.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FieldOptions;
        })();

        scalapb.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof scalapb
             * @interface IEnumOptions
             * @property {Array.<string>|null} ["extends"] EnumOptions extends
             * @property {Array.<string>|null} [companion_extends] EnumOptions companion_extends
             * @property {string|null} [type] EnumOptions type
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof scalapb
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {scalapb.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this["extends"] = [];
                this.companion_extends = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions extends.
             * @member {Array.<string>} extends
             * @memberof scalapb.EnumOptions
             * @instance
             */
            EnumOptions.prototype["extends"] = $util.emptyArray;

            /**
             * EnumOptions companion_extends.
             * @member {Array.<string>} companion_extends
             * @memberof scalapb.EnumOptions
             * @instance
             */
            EnumOptions.prototype.companion_extends = $util.emptyArray;

            /**
             * EnumOptions type.
             * @member {string} type
             * @memberof scalapb.EnumOptions
             * @instance
             */
            EnumOptions.prototype.type = "";

            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.EnumOptions
             * @static
             * @param {scalapb.IEnumOptions=} [properties] Properties to set
             * @returns {scalapb.EnumOptions} EnumOptions instance
             */
            EnumOptions.create = function create(properties) {
                return new EnumOptions(properties);
            };

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link scalapb.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.EnumOptions
             * @static
             * @param {scalapb.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["extends"] != null && message["extends"].length)
                    for (var i = 0; i < message["extends"].length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["extends"][i]);
                if (message.companion_extends != null && message.companion_extends.length)
                    for (var i = 0; i < message.companion_extends.length; ++i)
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.companion_extends[i]);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link scalapb.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.EnumOptions
             * @static
             * @param {scalapb.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.EnumOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message["extends"] && message["extends"].length))
                            message["extends"] = [];
                        message["extends"].push(reader.string());
                        break;
                    case 2:
                        if (!(message.companion_extends && message.companion_extends.length))
                            message.companion_extends = [];
                        message.companion_extends.push(reader.string());
                        break;
                    case 3:
                        message.type = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof scalapb.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message["extends"] != null && message.hasOwnProperty("extends")) {
                    if (!Array.isArray(message["extends"]))
                        return "extends: array expected";
                    for (var i = 0; i < message["extends"].length; ++i)
                        if (!$util.isString(message["extends"][i]))
                            return "extends: string[] expected";
                }
                if (message.companion_extends != null && message.hasOwnProperty("companion_extends")) {
                    if (!Array.isArray(message.companion_extends))
                        return "companion_extends: array expected";
                    for (var i = 0; i < message.companion_extends.length; ++i)
                        if (!$util.isString(message.companion_extends[i]))
                            return "companion_extends: string[] expected";
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.EnumOptions)
                    return object;
                var message = new $root.scalapb.EnumOptions();
                if (object["extends"]) {
                    if (!Array.isArray(object["extends"]))
                        throw TypeError(".scalapb.EnumOptions.extends: array expected");
                    message["extends"] = [];
                    for (var i = 0; i < object["extends"].length; ++i)
                        message["extends"][i] = String(object["extends"][i]);
                }
                if (object.companion_extends) {
                    if (!Array.isArray(object.companion_extends))
                        throw TypeError(".scalapb.EnumOptions.companion_extends: array expected");
                    message.companion_extends = [];
                    for (var i = 0; i < object.companion_extends.length; ++i)
                        message.companion_extends[i] = String(object.companion_extends[i]);
                }
                if (object.type != null)
                    message.type = String(object.type);
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.EnumOptions
             * @static
             * @param {scalapb.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object["extends"] = [];
                    object.companion_extends = [];
                }
                if (options.defaults)
                    object.type = "";
                if (message["extends"] && message["extends"].length) {
                    object["extends"] = [];
                    for (var j = 0; j < message["extends"].length; ++j)
                        object["extends"][j] = message["extends"][j];
                }
                if (message.companion_extends && message.companion_extends.length) {
                    object.companion_extends = [];
                    for (var j = 0; j < message.companion_extends.length; ++j)
                        object.companion_extends[j] = message.companion_extends[j];
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof scalapb.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        scalapb.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof scalapb
             * @interface IEnumValueOptions
             * @property {Array.<string>|null} ["extends"] EnumValueOptions extends
             * @property {string|null} [scala_name] EnumValueOptions scala_name
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof scalapb
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {scalapb.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this["extends"] = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions extends.
             * @member {Array.<string>} extends
             * @memberof scalapb.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype["extends"] = $util.emptyArray;

            /**
             * EnumValueOptions scala_name.
             * @member {string} scala_name
             * @memberof scalapb.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.scala_name = "";

            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {scalapb.IEnumValueOptions=} [properties] Properties to set
             * @returns {scalapb.EnumValueOptions} EnumValueOptions instance
             */
            EnumValueOptions.create = function create(properties) {
                return new EnumValueOptions(properties);
            };

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link scalapb.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {scalapb.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["extends"] != null && message["extends"].length)
                    for (var i = 0; i < message["extends"].length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["extends"][i]);
                if (message.scala_name != null && message.hasOwnProperty("scala_name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.scala_name);
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link scalapb.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {scalapb.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.EnumValueOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message["extends"] && message["extends"].length))
                            message["extends"] = [];
                        message["extends"].push(reader.string());
                        break;
                    case 2:
                        message.scala_name = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message["extends"] != null && message.hasOwnProperty("extends")) {
                    if (!Array.isArray(message["extends"]))
                        return "extends: array expected";
                    for (var i = 0; i < message["extends"].length; ++i)
                        if (!$util.isString(message["extends"][i]))
                            return "extends: string[] expected";
                }
                if (message.scala_name != null && message.hasOwnProperty("scala_name"))
                    if (!$util.isString(message.scala_name))
                        return "scala_name: string expected";
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.EnumValueOptions)
                    return object;
                var message = new $root.scalapb.EnumValueOptions();
                if (object["extends"]) {
                    if (!Array.isArray(object["extends"]))
                        throw TypeError(".scalapb.EnumValueOptions.extends: array expected");
                    message["extends"] = [];
                    for (var i = 0; i < object["extends"].length; ++i)
                        message["extends"][i] = String(object["extends"][i]);
                }
                if (object.scala_name != null)
                    message.scala_name = String(object.scala_name);
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.EnumValueOptions
             * @static
             * @param {scalapb.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object["extends"] = [];
                if (options.defaults)
                    object.scala_name = "";
                if (message["extends"] && message["extends"].length) {
                    object["extends"] = [];
                    for (var j = 0; j < message["extends"].length; ++j)
                        object["extends"][j] = message["extends"][j];
                }
                if (message.scala_name != null && message.hasOwnProperty("scala_name"))
                    object.scala_name = message.scala_name;
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof scalapb.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        scalapb.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof scalapb
             * @interface IOneofOptions
             * @property {Array.<string>|null} ["extends"] OneofOptions extends
             * @property {string|null} [scala_name] OneofOptions scala_name
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof scalapb
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {scalapb.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this["extends"] = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions extends.
             * @member {Array.<string>} extends
             * @memberof scalapb.OneofOptions
             * @instance
             */
            OneofOptions.prototype["extends"] = $util.emptyArray;

            /**
             * OneofOptions scala_name.
             * @member {string} scala_name
             * @memberof scalapb.OneofOptions
             * @instance
             */
            OneofOptions.prototype.scala_name = "";

            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @function create
             * @memberof scalapb.OneofOptions
             * @static
             * @param {scalapb.IOneofOptions=} [properties] Properties to set
             * @returns {scalapb.OneofOptions} OneofOptions instance
             */
            OneofOptions.create = function create(properties) {
                return new OneofOptions(properties);
            };

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link scalapb.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof scalapb.OneofOptions
             * @static
             * @param {scalapb.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["extends"] != null && message["extends"].length)
                    for (var i = 0; i < message["extends"].length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message["extends"][i]);
                if (message.scala_name != null && message.hasOwnProperty("scala_name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.scala_name);
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link scalapb.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof scalapb.OneofOptions
             * @static
             * @param {scalapb.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof scalapb.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {scalapb.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.OneofOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message["extends"] && message["extends"].length))
                            message["extends"] = [];
                        message["extends"].push(reader.string());
                        break;
                    case 2:
                        message.scala_name = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof scalapb.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {scalapb.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof scalapb.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message["extends"] != null && message.hasOwnProperty("extends")) {
                    if (!Array.isArray(message["extends"]))
                        return "extends: array expected";
                    for (var i = 0; i < message["extends"].length; ++i)
                        if (!$util.isString(message["extends"][i]))
                            return "extends: string[] expected";
                }
                if (message.scala_name != null && message.hasOwnProperty("scala_name"))
                    if (!$util.isString(message.scala_name))
                        return "scala_name: string expected";
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof scalapb.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {scalapb.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.scalapb.OneofOptions)
                    return object;
                var message = new $root.scalapb.OneofOptions();
                if (object["extends"]) {
                    if (!Array.isArray(object["extends"]))
                        throw TypeError(".scalapb.OneofOptions.extends: array expected");
                    message["extends"] = [];
                    for (var i = 0; i < object["extends"].length; ++i)
                        message["extends"][i] = String(object["extends"][i]);
                }
                if (object.scala_name != null)
                    message.scala_name = String(object.scala_name);
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof scalapb.OneofOptions
             * @static
             * @param {scalapb.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object["extends"] = [];
                if (options.defaults)
                    object.scala_name = "";
                if (message["extends"] && message["extends"].length) {
                    object["extends"] = [];
                    for (var j = 0; j < message["extends"].length; ++j)
                        object["extends"][j] = message["extends"][j];
                }
                if (message.scala_name != null && message.hasOwnProperty("scala_name"))
                    object.scala_name = message.scala_name;
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof scalapb.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        return scalapb;
    })();

    $root.google = (function() {

        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};

        google.protobuf = (function() {

            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};

            protobuf.FileDescriptorSet = (function() {

                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */

                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;

                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };

                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return FileDescriptorSet;
            })();

            protobuf.FileDescriptorProto = (function() {

                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
                 * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */

                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.public_dependency = [];
                    this.weak_dependency = [];
                    this.message_type = [];
                    this.enum_type = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";

                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";

                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;

                /**
                 * FileDescriptorProto public_dependency.
                 * @member {Array.<number>} public_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.public_dependency = $util.emptyArray;

                /**
                 * FileDescriptorProto weak_dependency.
                 * @member {Array.<number>} weak_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;

                /**
                 * FileDescriptorProto message_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} message_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.message_type = $util.emptyArray;

                /**
                 * FileDescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enum_type = $util.emptyArray;

                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;

                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;

                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;

                /**
                 * FileDescriptorProto source_code_info.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.source_code_info = null;

                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";

                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };

                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.message_type != null && message.message_type.length)
                        for (var i = 0; i < message.message_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.public_dependency != null && message.public_dependency.length)
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                    if (message.weak_dependency != null && message.weak_dependency.length)
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };

                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.public_dependency && message.public_dependency.length))
                                message.public_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.public_dependency.push(reader.int32());
                            } else
                                message.public_dependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weak_dependency && message.weak_dependency.length))
                                message.weak_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weak_dependency.push(reader.int32());
                            } else
                                message.weak_dependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.message_type && message.message_type.length))
                                message.message_type = [];
                            message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                        if (!Array.isArray(message.public_dependency))
                            return "public_dependency: array expected";
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            if (!$util.isInteger(message.public_dependency[i]))
                                return "public_dependency: integer[] expected";
                    }
                    if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                        if (!Array.isArray(message.weak_dependency))
                            return "weak_dependency: array expected";
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            if (!$util.isInteger(message.weak_dependency[i]))
                                return "weak_dependency: integer[] expected";
                    }
                    if (message.message_type != null && message.hasOwnProperty("message_type")) {
                        if (!Array.isArray(message.message_type))
                            return "message_type: array expected";
                        for (var i = 0; i < message.message_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                            if (error)
                                return "message_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                        if (error)
                            return "source_code_info." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };

                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.public_dependency) {
                        if (!Array.isArray(object.public_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                        message.public_dependency = [];
                        for (var i = 0; i < object.public_dependency.length; ++i)
                            message.public_dependency[i] = object.public_dependency[i] | 0;
                    }
                    if (object.weak_dependency) {
                        if (!Array.isArray(object.weak_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                        message.weak_dependency = [];
                        for (var i = 0; i < object.weak_dependency.length; ++i)
                            message.weak_dependency[i] = object.weak_dependency[i] | 0;
                    }
                    if (object.message_type) {
                        if (!Array.isArray(object.message_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                        message.message_type = [];
                        for (var i = 0; i < object.message_type.length; ++i) {
                            if (typeof object.message_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                            message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.source_code_info != null) {
                        if (typeof object.source_code_info !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };

                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.message_type = [];
                        object.enum_type = [];
                        object.service = [];
                        object.extension = [];
                        object.public_dependency = [];
                        object.weak_dependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.source_code_info = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.message_type && message.message_type.length) {
                        object.message_type = [];
                        for (var j = 0; j < message.message_type.length; ++j)
                            object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                    if (message.public_dependency && message.public_dependency.length) {
                        object.public_dependency = [];
                        for (var j = 0; j < message.public_dependency.length; ++j)
                            object.public_dependency[j] = message.public_dependency[j];
                    }
                    if (message.weak_dependency && message.weak_dependency.length) {
                        object.weak_dependency = [];
                        for (var j = 0; j < message.weak_dependency.length; ++j)
                            object.weak_dependency[j] = message.weak_dependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };

                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return FileDescriptorProto;
            })();

            protobuf.DescriptorProto = (function() {

                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
                 * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
                 */

                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nested_type = [];
                    this.enum_type = [];
                    this.extension_range = [];
                    this.oneof_decl = [];
                    this.reserved_range = [];
                    this.reserved_name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";

                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;

                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;

                /**
                 * DescriptorProto nested_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nested_type = $util.emptyArray;

                /**
                 * DescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enum_type = $util.emptyArray;

                /**
                 * DescriptorProto extension_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension_range = $util.emptyArray;

                /**
                 * DescriptorProto oneof_decl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneof_decl = $util.emptyArray;

                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;

                /**
                 * DescriptorProto reserved_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reserved_range = $util.emptyArray;

                /**
                 * DescriptorProto reserved_name.
                 * @member {Array.<string>} reserved_name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reserved_name = $util.emptyArray;

                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };

                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nested_type != null && message.nested_type.length)
                        for (var i = 0; i < message.nested_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extension_range != null && message.extension_range.length)
                        for (var i = 0; i < message.extension_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneof_decl != null && message.oneof_decl.length)
                        for (var i = 0; i < message.oneof_decl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reserved_range != null && message.reserved_range.length)
                        for (var i = 0; i < message.reserved_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reserved_name != null && message.reserved_name.length)
                        for (var i = 0; i < message.reserved_name.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                    return writer;
                };

                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nested_type && message.nested_type.length))
                                message.nested_type = [];
                            message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extension_range && message.extension_range.length))
                                message.extension_range = [];
                            message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneof_decl && message.oneof_decl.length))
                                message.oneof_decl = [];
                            message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reserved_range && message.reserved_range.length))
                                message.reserved_range = [];
                            message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reserved_name && message.reserved_name.length))
                                message.reserved_name = [];
                            message.reserved_name.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                        if (!Array.isArray(message.nested_type))
                            return "nested_type: array expected";
                        for (var i = 0; i < message.nested_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                            if (error)
                                return "nested_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                        if (!Array.isArray(message.extension_range))
                            return "extension_range: array expected";
                        for (var i = 0; i < message.extension_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                            if (error)
                                return "extension_range." + error;
                        }
                    }
                    if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                        if (!Array.isArray(message.oneof_decl))
                            return "oneof_decl: array expected";
                        for (var i = 0; i < message.oneof_decl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                            if (error)
                                return "oneof_decl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                        if (!Array.isArray(message.reserved_range))
                            return "reserved_range: array expected";
                        for (var i = 0; i < message.reserved_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                            if (error)
                                return "reserved_range." + error;
                        }
                    }
                    if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                        if (!Array.isArray(message.reserved_name))
                            return "reserved_name: array expected";
                        for (var i = 0; i < message.reserved_name.length; ++i)
                            if (!$util.isString(message.reserved_name[i]))
                                return "reserved_name: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nested_type) {
                        if (!Array.isArray(object.nested_type))
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                        message.nested_type = [];
                        for (var i = 0; i < object.nested_type.length; ++i) {
                            if (typeof object.nested_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                            message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.extension_range) {
                        if (!Array.isArray(object.extension_range))
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                        message.extension_range = [];
                        for (var i = 0; i < object.extension_range.length; ++i) {
                            if (typeof object.extension_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                            message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                        }
                    }
                    if (object.oneof_decl) {
                        if (!Array.isArray(object.oneof_decl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                        message.oneof_decl = [];
                        for (var i = 0; i < object.oneof_decl.length; ++i) {
                            if (typeof object.oneof_decl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                            message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reserved_range) {
                        if (!Array.isArray(object.reserved_range))
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                        message.reserved_range = [];
                        for (var i = 0; i < object.reserved_range.length; ++i) {
                            if (typeof object.reserved_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                            message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                        }
                    }
                    if (object.reserved_name) {
                        if (!Array.isArray(object.reserved_name))
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                        message.reserved_name = [];
                        for (var i = 0; i < object.reserved_name.length; ++i)
                            message.reserved_name[i] = String(object.reserved_name[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nested_type = [];
                        object.enum_type = [];
                        object.extension_range = [];
                        object.extension = [];
                        object.oneof_decl = [];
                        object.reserved_range = [];
                        object.reserved_name = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nested_type && message.nested_type.length) {
                        object.nested_type = [];
                        for (var j = 0; j < message.nested_type.length; ++j)
                            object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.extension_range && message.extension_range.length) {
                        object.extension_range = [];
                        for (var j = 0; j < message.extension_range.length; ++j)
                            object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneof_decl && message.oneof_decl.length) {
                        object.oneof_decl = [];
                        for (var j = 0; j < message.oneof_decl.length; ++j)
                            object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                    }
                    if (message.reserved_range && message.reserved_range.length) {
                        object.reserved_range = [];
                        for (var j = 0; j < message.reserved_range.length; ++j)
                            object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                    }
                    if (message.reserved_name && message.reserved_name.length) {
                        object.reserved_name = [];
                        for (var j = 0; j < message.reserved_name.length; ++j)
                            object.reserved_name[j] = message.reserved_name[j];
                    }
                    return object;
                };

                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                DescriptorProto.ExtensionRange = (function() {

                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     */

                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;

                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;

                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };

                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };

                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };

                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };

                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ExtensionRange;
                })();

                DescriptorProto.ReservedRange = (function() {

                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */

                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;

                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;

                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };

                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && message.hasOwnProperty("start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };

                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };

                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };

                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ReservedRange;
                })();

                return DescriptorProto;
            })();

            protobuf.FieldDescriptorProto = (function() {

                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [type_name] FieldDescriptorProto type_name
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [default_value] FieldDescriptorProto default_value
                 * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
                 * @property {string|null} [json_name] FieldDescriptorProto json_name
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 */

                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";

                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;

                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;

                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;

                /**
                 * FieldDescriptorProto type_name.
                 * @member {string} type_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type_name = "";

                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";

                /**
                 * FieldDescriptorProto default_value.
                 * @member {string} default_value
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.default_value = "";

                /**
                 * FieldDescriptorProto oneof_index.
                 * @member {number} oneof_index
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneof_index = 0;

                /**
                 * FieldDescriptorProto json_name.
                 * @member {string} json_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.json_name = "";

                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;

                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };

                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && message.hasOwnProperty("label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                    return writer;
                };

                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.type_name = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.default_value = reader.string();
                            break;
                        case 9:
                            message.oneof_index = reader.int32();
                            break;
                        case 10:
                            message.json_name = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        if (!$util.isString(message.type_name))
                            return "type_name: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        if (!$util.isString(message.default_value))
                            return "default_value: string expected";
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        if (!$util.isInteger(message.oneof_index))
                            return "oneof_index: integer expected";
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        if (!$util.isString(message.json_name))
                            return "json_name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.type_name != null)
                        message.type_name = String(object.type_name);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.default_value != null)
                        message.default_value = String(object.default_value);
                    if (object.oneof_index != null)
                        message.oneof_index = object.oneof_index | 0;
                    if (object.json_name != null)
                        message.json_name = String(object.json_name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.type_name = "";
                        object.default_value = "";
                        object.options = null;
                        object.oneof_index = 0;
                        object.json_name = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        object.type_name = message.type_name;
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        object.default_value = message.default_value;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        object.oneof_index = message.oneof_index;
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        object.json_name = message.json_name;
                    return object;
                };

                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {string}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();

                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {string}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();

                return FieldDescriptorProto;
            })();

            protobuf.OneofDescriptorProto = (function() {

                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */

                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";

                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;

                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };

                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return OneofDescriptorProto;
            })();

            protobuf.EnumDescriptorProto = (function() {

                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 */

                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";

                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;

                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;

                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };

                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.value = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EnumDescriptorProto;
            })();

            protobuf.EnumValueDescriptorProto = (function() {

                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */

                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";

                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;

                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;

                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };

                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && message.hasOwnProperty("number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EnumValueDescriptorProto;
            })();

            protobuf.ServiceDescriptorProto = (function() {

                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */

                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";

                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;

                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;

                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };

                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ServiceDescriptorProto;
            })();

            protobuf.MethodDescriptorProto = (function() {

                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [input_type] MethodDescriptorProto input_type
                 * @property {string|null} [output_type] MethodDescriptorProto output_type
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
                 * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
                 */

                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";

                /**
                 * MethodDescriptorProto input_type.
                 * @member {string} input_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.input_type = "";

                /**
                 * MethodDescriptorProto output_type.
                 * @member {string} output_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.output_type = "";

                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;

                /**
                 * MethodDescriptorProto client_streaming.
                 * @member {boolean} client_streaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.client_streaming = false;

                /**
                 * MethodDescriptorProto server_streaming.
                 * @member {boolean} server_streaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.server_streaming = false;

                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };

                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                    return writer;
                };

                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.input_type = reader.string();
                            break;
                        case 3:
                            message.output_type = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.client_streaming = reader.bool();
                            break;
                        case 6:
                            message.server_streaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        if (!$util.isString(message.input_type))
                            return "input_type: string expected";
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        if (!$util.isString(message.output_type))
                            return "output_type: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        if (typeof message.client_streaming !== "boolean")
                            return "client_streaming: boolean expected";
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        if (typeof message.server_streaming !== "boolean")
                            return "server_streaming: boolean expected";
                    return null;
                };

                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.input_type != null)
                        message.input_type = String(object.input_type);
                    if (object.output_type != null)
                        message.output_type = String(object.output_type);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.client_streaming != null)
                        message.client_streaming = Boolean(object.client_streaming);
                    if (object.server_streaming != null)
                        message.server_streaming = Boolean(object.server_streaming);
                    return message;
                };

                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.input_type = "";
                        object.output_type = "";
                        object.options = null;
                        object.client_streaming = false;
                        object.server_streaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        object.input_type = message.input_type;
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        object.output_type = message.output_type;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        object.client_streaming = message.client_streaming;
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        object.server_streaming = message.server_streaming;
                    return object;
                };

                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MethodDescriptorProto;
            })();

            protobuf.FileOptions = (function() {

                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [java_package] FileOptions java_package
                 * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
                 * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
                 * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
                 * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
                 * @property {string|null} [go_package] FileOptions go_package
                 * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
                 * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
                 * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
                 * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
                 * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
                 * @property {scalapb.IScalaPbOptions|null} [".scalapb.options"] FileOptions .scalapb.options
                 */

                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FileOptions java_package.
                 * @member {string} java_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_package = "";

                /**
                 * FileOptions java_outer_classname.
                 * @member {string} java_outer_classname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_outer_classname = "";

                /**
                 * FileOptions java_multiple_files.
                 * @member {boolean} java_multiple_files
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_multiple_files = false;

                /**
                 * FileOptions java_generate_equals_and_hash.
                 * @member {boolean} java_generate_equals_and_hash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generate_equals_and_hash = false;

                /**
                 * FileOptions java_string_check_utf8.
                 * @member {boolean} java_string_check_utf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_string_check_utf8 = false;

                /**
                 * FileOptions optimize_for.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimize_for = 1;

                /**
                 * FileOptions go_package.
                 * @member {string} go_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.go_package = "";

                /**
                 * FileOptions cc_generic_services.
                 * @member {boolean} cc_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_generic_services = false;

                /**
                 * FileOptions java_generic_services.
                 * @member {boolean} java_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generic_services = false;

                /**
                 * FileOptions py_generic_services.
                 * @member {boolean} py_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.py_generic_services = false;

                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;

                /**
                 * FileOptions cc_enable_arenas.
                 * @member {boolean} cc_enable_arenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_enable_arenas = false;

                /**
                 * FileOptions objc_class_prefix.
                 * @member {string} objc_class_prefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objc_class_prefix = "";

                /**
                 * FileOptions csharp_namespace.
                 * @member {string} csharp_namespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharp_namespace = "";

                /**
                 * FileOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpreted_option = $util.emptyArray;

                /**
                 * FileOptions .scalapb.options.
                 * @member {scalapb.IScalaPbOptions|null|undefined} .scalapb.options
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".scalapb.options"] = null;

                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };

                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.options"] != null && message.hasOwnProperty(".scalapb.options"))
                        $root.scalapb.ScalaPbOptions.encode(message[".scalapb.options"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.java_package = reader.string();
                            break;
                        case 8:
                            message.java_outer_classname = reader.string();
                            break;
                        case 10:
                            message.java_multiple_files = reader.bool();
                            break;
                        case 20:
                            message.java_generate_equals_and_hash = reader.bool();
                            break;
                        case 27:
                            message.java_string_check_utf8 = reader.bool();
                            break;
                        case 9:
                            message.optimize_for = reader.int32();
                            break;
                        case 11:
                            message.go_package = reader.string();
                            break;
                        case 16:
                            message.cc_generic_services = reader.bool();
                            break;
                        case 17:
                            message.java_generic_services = reader.bool();
                            break;
                        case 18:
                            message.py_generic_services = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.cc_enable_arenas = reader.bool();
                            break;
                        case 36:
                            message.objc_class_prefix = reader.string();
                            break;
                        case 37:
                            message.csharp_namespace = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.options"] = $root.scalapb.ScalaPbOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        if (!$util.isString(message.java_package))
                            return "java_package: string expected";
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        if (!$util.isString(message.java_outer_classname))
                            return "java_outer_classname: string expected";
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        if (typeof message.java_multiple_files !== "boolean")
                            return "java_multiple_files: boolean expected";
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        if (typeof message.java_generate_equals_and_hash !== "boolean")
                            return "java_generate_equals_and_hash: boolean expected";
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        if (typeof message.java_string_check_utf8 !== "boolean")
                            return "java_string_check_utf8: boolean expected";
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        switch (message.optimize_for) {
                        default:
                            return "optimize_for: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        if (!$util.isString(message.go_package))
                            return "go_package: string expected";
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        if (typeof message.cc_generic_services !== "boolean")
                            return "cc_generic_services: boolean expected";
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        if (typeof message.java_generic_services !== "boolean")
                            return "java_generic_services: boolean expected";
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        if (typeof message.py_generic_services !== "boolean")
                            return "py_generic_services: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        if (typeof message.cc_enable_arenas !== "boolean")
                            return "cc_enable_arenas: boolean expected";
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        if (!$util.isString(message.objc_class_prefix))
                            return "objc_class_prefix: string expected";
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        if (!$util.isString(message.csharp_namespace))
                            return "csharp_namespace: string expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".scalapb.options"] != null && message.hasOwnProperty(".scalapb.options")) {
                        var error = $root.scalapb.ScalaPbOptions.verify(message[".scalapb.options"]);
                        if (error)
                            return ".scalapb.options." + error;
                    }
                    return null;
                };

                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.java_package != null)
                        message.java_package = String(object.java_package);
                    if (object.java_outer_classname != null)
                        message.java_outer_classname = String(object.java_outer_classname);
                    if (object.java_multiple_files != null)
                        message.java_multiple_files = Boolean(object.java_multiple_files);
                    if (object.java_generate_equals_and_hash != null)
                        message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                    if (object.java_string_check_utf8 != null)
                        message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                    switch (object.optimize_for) {
                    case "SPEED":
                    case 1:
                        message.optimize_for = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimize_for = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimize_for = 3;
                        break;
                    }
                    if (object.go_package != null)
                        message.go_package = String(object.go_package);
                    if (object.cc_generic_services != null)
                        message.cc_generic_services = Boolean(object.cc_generic_services);
                    if (object.java_generic_services != null)
                        message.java_generic_services = Boolean(object.java_generic_services);
                    if (object.py_generic_services != null)
                        message.py_generic_services = Boolean(object.py_generic_services);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.cc_enable_arenas != null)
                        message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                    if (object.objc_class_prefix != null)
                        message.objc_class_prefix = String(object.objc_class_prefix);
                    if (object.csharp_namespace != null)
                        message.csharp_namespace = String(object.csharp_namespace);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".scalapb.options"] != null) {
                        if (typeof object[".scalapb.options"] !== "object")
                            throw TypeError(".google.protobuf.FileOptions..scalapb.options: object expected");
                        message[".scalapb.options"] = $root.scalapb.ScalaPbOptions.fromObject(object[".scalapb.options"]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.java_package = "";
                        object.java_outer_classname = "";
                        object.optimize_for = options.enums === String ? "SPEED" : 1;
                        object.java_multiple_files = false;
                        object.go_package = "";
                        object.cc_generic_services = false;
                        object.java_generic_services = false;
                        object.py_generic_services = false;
                        object.java_generate_equals_and_hash = false;
                        object.deprecated = false;
                        object.java_string_check_utf8 = false;
                        object.cc_enable_arenas = false;
                        object.objc_class_prefix = "";
                        object.csharp_namespace = "";
                        object[".scalapb.options"] = null;
                    }
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        object.java_package = message.java_package;
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        object.java_outer_classname = message.java_outer_classname;
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        object.java_multiple_files = message.java_multiple_files;
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        object.go_package = message.go_package;
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        object.cc_generic_services = message.cc_generic_services;
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        object.java_generic_services = message.java_generic_services;
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        object.py_generic_services = message.py_generic_services;
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        object.java_string_check_utf8 = message.java_string_check_utf8;
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        object.cc_enable_arenas = message.cc_enable_arenas;
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        object.objc_class_prefix = message.objc_class_prefix;
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        object.csharp_namespace = message.csharp_namespace;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".scalapb.options"] != null && message.hasOwnProperty(".scalapb.options"))
                        object[".scalapb.options"] = $root.scalapb.ScalaPbOptions.toObject(message[".scalapb.options"], options);
                    return object;
                };

                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {string}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();

                return FileOptions;
            })();

            protobuf.MessageOptions = (function() {

                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
                 * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [map_entry] MessageOptions map_entry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
                 * @property {scalapb.IMessageOptions|null} [".scalapb.message"] MessageOptions .scalapb.message
                 */

                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MessageOptions message_set_wire_format.
                 * @member {boolean} message_set_wire_format
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.message_set_wire_format = false;

                /**
                 * MessageOptions no_standard_descriptor_accessor.
                 * @member {boolean} no_standard_descriptor_accessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.no_standard_descriptor_accessor = false;

                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;

                /**
                 * MessageOptions map_entry.
                 * @member {boolean} map_entry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.map_entry = false;

                /**
                 * MessageOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpreted_option = $util.emptyArray;

                /**
                 * MessageOptions .scalapb.message.
                 * @member {scalapb.IMessageOptions|null|undefined} .scalapb.message
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".scalapb.message"] = null;

                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };

                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.message"] != null && message.hasOwnProperty(".scalapb.message"))
                        $root.scalapb.MessageOptions.encode(message[".scalapb.message"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message_set_wire_format = reader.bool();
                            break;
                        case 2:
                            message.no_standard_descriptor_accessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.map_entry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.message"] = $root.scalapb.MessageOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        if (typeof message.message_set_wire_format !== "boolean")
                            return "message_set_wire_format: boolean expected";
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        if (typeof message.no_standard_descriptor_accessor !== "boolean")
                            return "no_standard_descriptor_accessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        if (typeof message.map_entry !== "boolean")
                            return "map_entry: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".scalapb.message"] != null && message.hasOwnProperty(".scalapb.message")) {
                        var error = $root.scalapb.MessageOptions.verify(message[".scalapb.message"]);
                        if (error)
                            return ".scalapb.message." + error;
                    }
                    return null;
                };

                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.message_set_wire_format != null)
                        message.message_set_wire_format = Boolean(object.message_set_wire_format);
                    if (object.no_standard_descriptor_accessor != null)
                        message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.map_entry != null)
                        message.map_entry = Boolean(object.map_entry);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".scalapb.message"] != null) {
                        if (typeof object[".scalapb.message"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..scalapb.message: object expected");
                        message[".scalapb.message"] = $root.scalapb.MessageOptions.fromObject(object[".scalapb.message"]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.message_set_wire_format = false;
                        object.no_standard_descriptor_accessor = false;
                        object.deprecated = false;
                        object.map_entry = false;
                        object[".scalapb.message"] = null;
                    }
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        object.message_set_wire_format = message.message_set_wire_format;
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        object.map_entry = message.map_entry;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".scalapb.message"] != null && message.hasOwnProperty(".scalapb.message"))
                        object[".scalapb.message"] = $root.scalapb.MessageOptions.toObject(message[".scalapb.message"], options);
                    return object;
                };

                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MessageOptions;
            })();

            protobuf.FieldOptions = (function() {

                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
                 * @property {scalapb.IFieldOptions|null} [".scalapb.field"] FieldOptions .scalapb.field
                 */

                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;

                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;

                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;

                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;

                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;

                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;

                /**
                 * FieldOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpreted_option = $util.emptyArray;

                /**
                 * FieldOptions .scalapb.field.
                 * @member {scalapb.IFieldOptions|null|undefined} .scalapb.field
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".scalapb.field"] = null;

                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };

                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.field"] != null && message.hasOwnProperty(".scalapb.field"))
                        $root.scalapb.FieldOptions.encode(message[".scalapb.field"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.field"] = $root.scalapb.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".scalapb.field"] != null && message.hasOwnProperty(".scalapb.field")) {
                        var error = $root.scalapb.FieldOptions.verify(message[".scalapb.field"]);
                        if (error)
                            return ".scalapb.field." + error;
                    }
                    return null;
                };

                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".scalapb.field"] != null) {
                        if (typeof object[".scalapb.field"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..scalapb.field: object expected");
                        message[".scalapb.field"] = $root.scalapb.FieldOptions.fromObject(object[".scalapb.field"]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object[".scalapb.field"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".scalapb.field"] != null && message.hasOwnProperty(".scalapb.field"))
                        object[".scalapb.field"] = $root.scalapb.FieldOptions.toObject(message[".scalapb.field"], options);
                    return object;
                };

                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {string}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();

                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {string}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();

                return FieldOptions;
            })();

            protobuf.OneofOptions = (function() {

                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
                 * @property {scalapb.IOneofOptions|null} [".scalapb.oneof"] OneofOptions .scalapb.oneof
                 */

                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * OneofOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpreted_option = $util.emptyArray;

                /**
                 * OneofOptions .scalapb.oneof.
                 * @member {scalapb.IOneofOptions|null|undefined} .scalapb.oneof
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype[".scalapb.oneof"] = null;

                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };

                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.oneof"] != null && message.hasOwnProperty(".scalapb.oneof"))
                        $root.scalapb.OneofOptions.encode(message[".scalapb.oneof"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.oneof"] = $root.scalapb.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".scalapb.oneof"] != null && message.hasOwnProperty(".scalapb.oneof")) {
                        var error = $root.scalapb.OneofOptions.verify(message[".scalapb.oneof"]);
                        if (error)
                            return ".scalapb.oneof." + error;
                    }
                    return null;
                };

                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".scalapb.oneof"] != null) {
                        if (typeof object[".scalapb.oneof"] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions..scalapb.oneof: object expected");
                        message[".scalapb.oneof"] = $root.scalapb.OneofOptions.fromObject(object[".scalapb.oneof"]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults)
                        object[".scalapb.oneof"] = null;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".scalapb.oneof"] != null && message.hasOwnProperty(".scalapb.oneof"))
                        object[".scalapb.oneof"] = $root.scalapb.OneofOptions.toObject(message[".scalapb.oneof"], options);
                    return object;
                };

                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return OneofOptions;
            })();

            protobuf.EnumOptions = (function() {

                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allow_alias] EnumOptions allow_alias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
                 * @property {scalapb.IEnumOptions|null} [".scalapb.enum_options"] EnumOptions .scalapb.enum_options
                 */

                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumOptions allow_alias.
                 * @member {boolean} allow_alias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allow_alias = false;

                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;

                /**
                 * EnumOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpreted_option = $util.emptyArray;

                /**
                 * EnumOptions .scalapb.enum_options.
                 * @member {scalapb.IEnumOptions|null|undefined} .scalapb.enum_options
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".scalapb.enum_options"] = null;

                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };

                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.enum_options"] != null && message.hasOwnProperty(".scalapb.enum_options"))
                        $root.scalapb.EnumOptions.encode(message[".scalapb.enum_options"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allow_alias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.enum_options"] = $root.scalapb.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        if (typeof message.allow_alias !== "boolean")
                            return "allow_alias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".scalapb.enum_options"] != null && message.hasOwnProperty(".scalapb.enum_options")) {
                        var error = $root.scalapb.EnumOptions.verify(message[".scalapb.enum_options"]);
                        if (error)
                            return ".scalapb.enum_options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allow_alias != null)
                        message.allow_alias = Boolean(object.allow_alias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".scalapb.enum_options"] != null) {
                        if (typeof object[".scalapb.enum_options"] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions..scalapb.enum_options: object expected");
                        message[".scalapb.enum_options"] = $root.scalapb.EnumOptions.fromObject(object[".scalapb.enum_options"]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.allow_alias = false;
                        object.deprecated = false;
                        object[".scalapb.enum_options"] = null;
                    }
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        object.allow_alias = message.allow_alias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".scalapb.enum_options"] != null && message.hasOwnProperty(".scalapb.enum_options"))
                        object[".scalapb.enum_options"] = $root.scalapb.EnumOptions.toObject(message[".scalapb.enum_options"], options);
                    return object;
                };

                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EnumOptions;
            })();

            protobuf.EnumValueOptions = (function() {

                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
                 * @property {scalapb.IEnumValueOptions|null} [".scalapb.enum_value"] EnumValueOptions .scalapb.enum_value
                 */

                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;

                /**
                 * EnumValueOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;

                /**
                 * EnumValueOptions .scalapb.enum_value.
                 * @member {scalapb.IEnumValueOptions|null|undefined} .scalapb.enum_value
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype[".scalapb.enum_value"] = null;

                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };

                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".scalapb.enum_value"] != null && message.hasOwnProperty(".scalapb.enum_value"))
                        $root.scalapb.EnumValueOptions.encode(message[".scalapb.enum_value"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 1020:
                            message[".scalapb.enum_value"] = $root.scalapb.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".scalapb.enum_value"] != null && message.hasOwnProperty(".scalapb.enum_value")) {
                        var error = $root.scalapb.EnumValueOptions.verify(message[".scalapb.enum_value"]);
                        if (error)
                            return ".scalapb.enum_value." + error;
                    }
                    return null;
                };

                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".scalapb.enum_value"] != null) {
                        if (typeof object[".scalapb.enum_value"] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions..scalapb.enum_value: object expected");
                        message[".scalapb.enum_value"] = $root.scalapb.EnumValueOptions.fromObject(object[".scalapb.enum_value"]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".scalapb.enum_value"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".scalapb.enum_value"] != null && message.hasOwnProperty(".scalapb.enum_value"))
                        object[".scalapb.enum_value"] = $root.scalapb.EnumValueOptions.toObject(message[".scalapb.enum_value"], options);
                    return object;
                };

                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EnumValueOptions;
            })();

            protobuf.ServiceOptions = (function() {

                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
                 */

                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;

                /**
                 * ServiceOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;

                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };

                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ServiceOptions;
            })();

            protobuf.MethodOptions = (function() {

                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
                 */

                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;

                /**
                 * MethodOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpreted_option = $util.emptyArray;

                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };

                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return MethodOptions;
            })();

            protobuf.UninterpretedOption = (function() {

                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifier_value] UninterpretedOption identifier_value
                 * @property {number|Long|null} [positive_int_value] UninterpretedOption positive_int_value
                 * @property {number|Long|null} [negative_int_value] UninterpretedOption negative_int_value
                 * @property {number|null} [double_value] UninterpretedOption double_value
                 * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
                 * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
                 */

                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;

                /**
                 * UninterpretedOption identifier_value.
                 * @member {string} identifier_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifier_value = "";

                /**
                 * UninterpretedOption positive_int_value.
                 * @member {number|Long} positive_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * UninterpretedOption negative_int_value.
                 * @member {number|Long} negative_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * UninterpretedOption double_value.
                 * @member {number} double_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.double_value = 0;

                /**
                 * UninterpretedOption string_value.
                 * @member {Uint8Array} string_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.string_value = $util.newBuffer([]);

                /**
                 * UninterpretedOption aggregate_value.
                 * @member {string} aggregate_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregate_value = "";

                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };

                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                    return writer;
                };

                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifier_value = reader.string();
                            break;
                        case 4:
                            message.positive_int_value = reader.uint64();
                            break;
                        case 5:
                            message.negative_int_value = reader.int64();
                            break;
                        case 6:
                            message.double_value = reader.double();
                            break;
                        case 7:
                            message.string_value = reader.bytes();
                            break;
                        case 8:
                            message.aggregate_value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        if (!$util.isString(message.identifier_value))
                            return "identifier_value: string expected";
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                            return "positive_int_value: integer|Long expected";
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                            return "negative_int_value: integer|Long expected";
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        if (typeof message.double_value !== "number")
                            return "double_value: number expected";
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                            return "string_value: buffer expected";
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        if (!$util.isString(message.aggregate_value))
                            return "aggregate_value: string expected";
                    return null;
                };

                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifier_value != null)
                        message.identifier_value = String(object.identifier_value);
                    if (object.positive_int_value != null)
                        if ($util.Long)
                            (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                        else if (typeof object.positive_int_value === "string")
                            message.positive_int_value = parseInt(object.positive_int_value, 10);
                        else if (typeof object.positive_int_value === "number")
                            message.positive_int_value = object.positive_int_value;
                        else if (typeof object.positive_int_value === "object")
                            message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                    if (object.negative_int_value != null)
                        if ($util.Long)
                            (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                        else if (typeof object.negative_int_value === "string")
                            message.negative_int_value = parseInt(object.negative_int_value, 10);
                        else if (typeof object.negative_int_value === "number")
                            message.negative_int_value = object.negative_int_value;
                        else if (typeof object.negative_int_value === "object")
                            message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                    if (object.double_value != null)
                        message.double_value = Number(object.double_value);
                    if (object.string_value != null)
                        if (typeof object.string_value === "string")
                            $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                        else if (object.string_value.length)
                            message.string_value = object.string_value;
                    if (object.aggregate_value != null)
                        message.aggregate_value = String(object.aggregate_value);
                    return message;
                };

                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifier_value = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positive_int_value = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negative_int_value = options.longs === String ? "0" : 0;
                        object.double_value = 0;
                        if (options.bytes === String)
                            object.string_value = "";
                        else {
                            object.string_value = [];
                            if (options.bytes !== Array)
                                object.string_value = $util.newBuffer(object.string_value);
                        }
                        object.aggregate_value = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        object.identifier_value = message.identifier_value;
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (typeof message.positive_int_value === "number")
                            object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                        else
                            object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (typeof message.negative_int_value === "number")
                            object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                        else
                            object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        object.aggregate_value = message.aggregate_value;
                    return object;
                };

                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                UninterpretedOption.NamePart = (function() {

                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} name_part NamePart name_part
                     * @property {boolean} is_extension NamePart is_extension
                     */

                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * NamePart name_part.
                     * @member {string} name_part
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.name_part = "";

                    /**
                     * NamePart is_extension.
                     * @member {boolean} is_extension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.is_extension = false;

                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };

                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                        return writer;
                    };

                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name_part = reader.string();
                                break;
                            case 2:
                                message.is_extension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("name_part"))
                            throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                        if (!message.hasOwnProperty("is_extension"))
                            throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                        return message;
                    };

                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.name_part))
                            return "name_part: string expected";
                        if (typeof message.is_extension !== "boolean")
                            return "is_extension: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.name_part != null)
                            message.name_part = String(object.name_part);
                        if (object.is_extension != null)
                            message.is_extension = Boolean(object.is_extension);
                        return message;
                    };

                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name_part = "";
                            object.is_extension = false;
                        }
                        if (message.name_part != null && message.hasOwnProperty("name_part"))
                            object.name_part = message.name_part;
                        if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                            object.is_extension = message.is_extension;
                        return object;
                    };

                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return NamePart;
                })();

                return UninterpretedOption;
            })();

            protobuf.SourceCodeInfo = (function() {

                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */

                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;

                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };

                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                SourceCodeInfo.Location = (function() {

                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leading_comments] Location leading_comments
                     * @property {string|null} [trailing_comments] Location trailing_comments
                     * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                     */

                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leading_detached_comments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;

                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;

                    /**
                     * Location leading_comments.
                     * @member {string} leading_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_comments = "";

                    /**
                     * Location trailing_comments.
                     * @member {string} trailing_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailing_comments = "";

                    /**
                     * Location leading_detached_comments.
                     * @member {Array.<string>} leading_detached_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_detached_comments = $util.emptyArray;

                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };

                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                        if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                            for (var i = 0; i < message.leading_detached_comments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leading_comments = reader.string();
                                break;
                            case 4:
                                message.trailing_comments = reader.string();
                                break;
                            case 6:
                                if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                    message.leading_detached_comments = [];
                                message.leading_detached_comments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            if (!$util.isString(message.leading_comments))
                                return "leading_comments: string expected";
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            if (!$util.isString(message.trailing_comments))
                                return "trailing_comments: string expected";
                        if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                            if (!Array.isArray(message.leading_detached_comments))
                                return "leading_detached_comments: array expected";
                            for (var i = 0; i < message.leading_detached_comments.length; ++i)
                                if (!$util.isString(message.leading_detached_comments[i]))
                                    return "leading_detached_comments: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leading_comments != null)
                            message.leading_comments = String(object.leading_comments);
                        if (object.trailing_comments != null)
                            message.trailing_comments = String(object.trailing_comments);
                        if (object.leading_detached_comments) {
                            if (!Array.isArray(object.leading_detached_comments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                            message.leading_detached_comments = [];
                            for (var i = 0; i < object.leading_detached_comments.length; ++i)
                                message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leading_detached_comments = [];
                        }
                        if (options.defaults) {
                            object.leading_comments = "";
                            object.trailing_comments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            object.leading_comments = message.leading_comments;
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            object.trailing_comments = message.trailing_comments;
                        if (message.leading_detached_comments && message.leading_detached_comments.length) {
                            object.leading_detached_comments = [];
                            for (var j = 0; j < message.leading_detached_comments.length; ++j)
                                object.leading_detached_comments[j] = message.leading_detached_comments[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Location;
                })();

                return SourceCodeInfo;
            })();

            protobuf.GeneratedCodeInfo = (function() {

                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */

                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };

                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                GeneratedCodeInfo.Annotation = (function() {

                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [source_file] Annotation source_file
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */

                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;

                    /**
                     * Annotation source_file.
                     * @member {string} source_file
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.source_file = "";

                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;

                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;

                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };

                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && message.hasOwnProperty("end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };

                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.source_file = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            if (!$util.isString(message.source_file))
                                return "source_file: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };

                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.source_file != null)
                            message.source_file = String(object.source_file);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.source_file = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            object.source_file = message.source_file;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };

                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Annotation;
                })();

                return GeneratedCodeInfo;
            })();

            return protobuf;
        })();

        return google;
    })();

    $root.Par = (function() {

        /**
         * Properties of a Par.
         * @exports IPar
         * @interface IPar
         * @property {Array.<ISend>|null} [sends] Par sends
         * @property {Array.<IReceive>|null} [receives] Par receives
         * @property {Array.<INew>|null} [news] Par news
         * @property {Array.<IExpr>|null} [exprs] Par exprs
         * @property {Array.<IMatch>|null} [matches] Par matches
         * @property {Array.<IGUnforgeable>|null} [unforgeables] Par unforgeables
         * @property {Array.<IBundle>|null} [bundles] Par bundles
         * @property {Array.<IConnective>|null} [connectives] Par connectives
         * @property {Uint8Array|null} [locallyFree] Par locallyFree
         * @property {boolean|null} [connective_used] Par connective_used
         */

        /**
         * Constructs a new Par.
         * @exports Par
         * @classdesc Rholang process
         * 
         * For example, `@0!(1) | @2!(3) | for(x <- @0) { Nil }` has two sends
         * and one receive.
         * 
         * The Nil process is a `Par` with no sends, receives, etc.
         * @implements IPar
         * @constructor
         * @param {IPar=} [properties] Properties to set
         */
        function Par(properties) {
            this.sends = [];
            this.receives = [];
            this.news = [];
            this.exprs = [];
            this.matches = [];
            this.unforgeables = [];
            this.bundles = [];
            this.connectives = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Par sends.
         * @member {Array.<ISend>} sends
         * @memberof Par
         * @instance
         */
        Par.prototype.sends = $util.emptyArray;

        /**
         * Par receives.
         * @member {Array.<IReceive>} receives
         * @memberof Par
         * @instance
         */
        Par.prototype.receives = $util.emptyArray;

        /**
         * Par news.
         * @member {Array.<INew>} news
         * @memberof Par
         * @instance
         */
        Par.prototype.news = $util.emptyArray;

        /**
         * Par exprs.
         * @member {Array.<IExpr>} exprs
         * @memberof Par
         * @instance
         */
        Par.prototype.exprs = $util.emptyArray;

        /**
         * Par matches.
         * @member {Array.<IMatch>} matches
         * @memberof Par
         * @instance
         */
        Par.prototype.matches = $util.emptyArray;

        /**
         * Par unforgeables.
         * @member {Array.<IGUnforgeable>} unforgeables
         * @memberof Par
         * @instance
         */
        Par.prototype.unforgeables = $util.emptyArray;

        /**
         * Par bundles.
         * @member {Array.<IBundle>} bundles
         * @memberof Par
         * @instance
         */
        Par.prototype.bundles = $util.emptyArray;

        /**
         * Par connectives.
         * @member {Array.<IConnective>} connectives
         * @memberof Par
         * @instance
         */
        Par.prototype.connectives = $util.emptyArray;

        /**
         * Par locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof Par
         * @instance
         */
        Par.prototype.locallyFree = $util.newBuffer([]);

        /**
         * Par connective_used.
         * @member {boolean} connective_used
         * @memberof Par
         * @instance
         */
        Par.prototype.connective_used = false;

        /**
         * Creates a new Par instance using the specified properties.
         * @function create
         * @memberof Par
         * @static
         * @param {IPar=} [properties] Properties to set
         * @returns {Par} Par instance
         */
        Par.create = function create(properties) {
            return new Par(properties);
        };

        /**
         * Encodes the specified Par message. Does not implicitly {@link Par.verify|verify} messages.
         * @function encode
         * @memberof Par
         * @static
         * @param {IPar} message Par message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Par.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sends != null && message.sends.length)
                for (var i = 0; i < message.sends.length; ++i)
                    $root.Send.encode(message.sends[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.receives != null && message.receives.length)
                for (var i = 0; i < message.receives.length; ++i)
                    $root.Receive.encode(message.receives[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.news != null && message.news.length)
                for (var i = 0; i < message.news.length; ++i)
                    $root.New.encode(message.news[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.exprs != null && message.exprs.length)
                for (var i = 0; i < message.exprs.length; ++i)
                    $root.Expr.encode(message.exprs[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.matches != null && message.matches.length)
                for (var i = 0; i < message.matches.length; ++i)
                    $root.Match.encode(message.matches[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.unforgeables != null && message.unforgeables.length)
                for (var i = 0; i < message.unforgeables.length; ++i)
                    $root.GUnforgeable.encode(message.unforgeables[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.connectives != null && message.connectives.length)
                for (var i = 0; i < message.connectives.length; ++i)
                    $root.Connective.encode(message.connectives[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.locallyFree);
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.connective_used);
            if (message.bundles != null && message.bundles.length)
                for (var i = 0; i < message.bundles.length; ++i)
                    $root.Bundle.encode(message.bundles[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Par message, length delimited. Does not implicitly {@link Par.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Par
         * @static
         * @param {IPar} message Par message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Par.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Par message from the specified reader or buffer.
         * @function decode
         * @memberof Par
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Par} Par
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Par.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Par();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.sends && message.sends.length))
                        message.sends = [];
                    message.sends.push($root.Send.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.receives && message.receives.length))
                        message.receives = [];
                    message.receives.push($root.Receive.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.news && message.news.length))
                        message.news = [];
                    message.news.push($root.New.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.exprs && message.exprs.length))
                        message.exprs = [];
                    message.exprs.push($root.Expr.decode(reader, reader.uint32()));
                    break;
                case 6:
                    if (!(message.matches && message.matches.length))
                        message.matches = [];
                    message.matches.push($root.Match.decode(reader, reader.uint32()));
                    break;
                case 7:
                    if (!(message.unforgeables && message.unforgeables.length))
                        message.unforgeables = [];
                    message.unforgeables.push($root.GUnforgeable.decode(reader, reader.uint32()));
                    break;
                case 11:
                    if (!(message.bundles && message.bundles.length))
                        message.bundles = [];
                    message.bundles.push($root.Bundle.decode(reader, reader.uint32()));
                    break;
                case 8:
                    if (!(message.connectives && message.connectives.length))
                        message.connectives = [];
                    message.connectives.push($root.Connective.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.locallyFree = reader.bytes();
                    break;
                case 10:
                    message.connective_used = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Par message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Par
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Par} Par
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Par.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Par message.
         * @function verify
         * @memberof Par
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Par.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sends != null && message.hasOwnProperty("sends")) {
                if (!Array.isArray(message.sends))
                    return "sends: array expected";
                for (var i = 0; i < message.sends.length; ++i) {
                    var error = $root.Send.verify(message.sends[i]);
                    if (error)
                        return "sends." + error;
                }
            }
            if (message.receives != null && message.hasOwnProperty("receives")) {
                if (!Array.isArray(message.receives))
                    return "receives: array expected";
                for (var i = 0; i < message.receives.length; ++i) {
                    var error = $root.Receive.verify(message.receives[i]);
                    if (error)
                        return "receives." + error;
                }
            }
            if (message.news != null && message.hasOwnProperty("news")) {
                if (!Array.isArray(message.news))
                    return "news: array expected";
                for (var i = 0; i < message.news.length; ++i) {
                    var error = $root.New.verify(message.news[i]);
                    if (error)
                        return "news." + error;
                }
            }
            if (message.exprs != null && message.hasOwnProperty("exprs")) {
                if (!Array.isArray(message.exprs))
                    return "exprs: array expected";
                for (var i = 0; i < message.exprs.length; ++i) {
                    var error = $root.Expr.verify(message.exprs[i]);
                    if (error)
                        return "exprs." + error;
                }
            }
            if (message.matches != null && message.hasOwnProperty("matches")) {
                if (!Array.isArray(message.matches))
                    return "matches: array expected";
                for (var i = 0; i < message.matches.length; ++i) {
                    var error = $root.Match.verify(message.matches[i]);
                    if (error)
                        return "matches." + error;
                }
            }
            if (message.unforgeables != null && message.hasOwnProperty("unforgeables")) {
                if (!Array.isArray(message.unforgeables))
                    return "unforgeables: array expected";
                for (var i = 0; i < message.unforgeables.length; ++i) {
                    var error = $root.GUnforgeable.verify(message.unforgeables[i]);
                    if (error)
                        return "unforgeables." + error;
                }
            }
            if (message.bundles != null && message.hasOwnProperty("bundles")) {
                if (!Array.isArray(message.bundles))
                    return "bundles: array expected";
                for (var i = 0; i < message.bundles.length; ++i) {
                    var error = $root.Bundle.verify(message.bundles[i]);
                    if (error)
                        return "bundles." + error;
                }
            }
            if (message.connectives != null && message.hasOwnProperty("connectives")) {
                if (!Array.isArray(message.connectives))
                    return "connectives: array expected";
                for (var i = 0; i < message.connectives.length; ++i) {
                    var error = $root.Connective.verify(message.connectives[i]);
                    if (error)
                        return "connectives." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                if (typeof message.connective_used !== "boolean")
                    return "connective_used: boolean expected";
            return null;
        };

        /**
         * Creates a Par message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Par
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Par} Par
         */
        Par.fromObject = function fromObject(object) {
            if (object instanceof $root.Par)
                return object;
            var message = new $root.Par();
            if (object.sends) {
                if (!Array.isArray(object.sends))
                    throw TypeError(".Par.sends: array expected");
                message.sends = [];
                for (var i = 0; i < object.sends.length; ++i) {
                    if (typeof object.sends[i] !== "object")
                        throw TypeError(".Par.sends: object expected");
                    message.sends[i] = $root.Send.fromObject(object.sends[i]);
                }
            }
            if (object.receives) {
                if (!Array.isArray(object.receives))
                    throw TypeError(".Par.receives: array expected");
                message.receives = [];
                for (var i = 0; i < object.receives.length; ++i) {
                    if (typeof object.receives[i] !== "object")
                        throw TypeError(".Par.receives: object expected");
                    message.receives[i] = $root.Receive.fromObject(object.receives[i]);
                }
            }
            if (object.news) {
                if (!Array.isArray(object.news))
                    throw TypeError(".Par.news: array expected");
                message.news = [];
                for (var i = 0; i < object.news.length; ++i) {
                    if (typeof object.news[i] !== "object")
                        throw TypeError(".Par.news: object expected");
                    message.news[i] = $root.New.fromObject(object.news[i]);
                }
            }
            if (object.exprs) {
                if (!Array.isArray(object.exprs))
                    throw TypeError(".Par.exprs: array expected");
                message.exprs = [];
                for (var i = 0; i < object.exprs.length; ++i) {
                    if (typeof object.exprs[i] !== "object")
                        throw TypeError(".Par.exprs: object expected");
                    message.exprs[i] = $root.Expr.fromObject(object.exprs[i]);
                }
            }
            if (object.matches) {
                if (!Array.isArray(object.matches))
                    throw TypeError(".Par.matches: array expected");
                message.matches = [];
                for (var i = 0; i < object.matches.length; ++i) {
                    if (typeof object.matches[i] !== "object")
                        throw TypeError(".Par.matches: object expected");
                    message.matches[i] = $root.Match.fromObject(object.matches[i]);
                }
            }
            if (object.unforgeables) {
                if (!Array.isArray(object.unforgeables))
                    throw TypeError(".Par.unforgeables: array expected");
                message.unforgeables = [];
                for (var i = 0; i < object.unforgeables.length; ++i) {
                    if (typeof object.unforgeables[i] !== "object")
                        throw TypeError(".Par.unforgeables: object expected");
                    message.unforgeables[i] = $root.GUnforgeable.fromObject(object.unforgeables[i]);
                }
            }
            if (object.bundles) {
                if (!Array.isArray(object.bundles))
                    throw TypeError(".Par.bundles: array expected");
                message.bundles = [];
                for (var i = 0; i < object.bundles.length; ++i) {
                    if (typeof object.bundles[i] !== "object")
                        throw TypeError(".Par.bundles: object expected");
                    message.bundles[i] = $root.Bundle.fromObject(object.bundles[i]);
                }
            }
            if (object.connectives) {
                if (!Array.isArray(object.connectives))
                    throw TypeError(".Par.connectives: array expected");
                message.connectives = [];
                for (var i = 0; i < object.connectives.length; ++i) {
                    if (typeof object.connectives[i] !== "object")
                        throw TypeError(".Par.connectives: object expected");
                    message.connectives[i] = $root.Connective.fromObject(object.connectives[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connective_used != null)
                message.connective_used = Boolean(object.connective_used);
            return message;
        };

        /**
         * Creates a plain object from a Par message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Par
         * @static
         * @param {Par} message Par
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Par.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.sends = [];
                object.receives = [];
                object.news = [];
                object.exprs = [];
                object.matches = [];
                object.unforgeables = [];
                object.connectives = [];
                object.bundles = [];
            }
            if (options.defaults) {
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connective_used = false;
            }
            if (message.sends && message.sends.length) {
                object.sends = [];
                for (var j = 0; j < message.sends.length; ++j)
                    object.sends[j] = $root.Send.toObject(message.sends[j], options);
            }
            if (message.receives && message.receives.length) {
                object.receives = [];
                for (var j = 0; j < message.receives.length; ++j)
                    object.receives[j] = $root.Receive.toObject(message.receives[j], options);
            }
            if (message.news && message.news.length) {
                object.news = [];
                for (var j = 0; j < message.news.length; ++j)
                    object.news[j] = $root.New.toObject(message.news[j], options);
            }
            if (message.exprs && message.exprs.length) {
                object.exprs = [];
                for (var j = 0; j < message.exprs.length; ++j)
                    object.exprs[j] = $root.Expr.toObject(message.exprs[j], options);
            }
            if (message.matches && message.matches.length) {
                object.matches = [];
                for (var j = 0; j < message.matches.length; ++j)
                    object.matches[j] = $root.Match.toObject(message.matches[j], options);
            }
            if (message.unforgeables && message.unforgeables.length) {
                object.unforgeables = [];
                for (var j = 0; j < message.unforgeables.length; ++j)
                    object.unforgeables[j] = $root.GUnforgeable.toObject(message.unforgeables[j], options);
            }
            if (message.connectives && message.connectives.length) {
                object.connectives = [];
                for (var j = 0; j < message.connectives.length; ++j)
                    object.connectives[j] = $root.Connective.toObject(message.connectives[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                object.connective_used = message.connective_used;
            if (message.bundles && message.bundles.length) {
                object.bundles = [];
                for (var j = 0; j < message.bundles.length; ++j)
                    object.bundles[j] = $root.Bundle.toObject(message.bundles[j], options);
            }
            return object;
        };

        /**
         * Converts this Par to JSON.
         * @function toJSON
         * @memberof Par
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Par.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Par;
    })();

    $root.TaggedContinuation = (function() {

        /**
         * Properties of a TaggedContinuation.
         * @exports ITaggedContinuation
         * @interface ITaggedContinuation
         * @property {IParWithRandom|null} [par_body] TaggedContinuation par_body
         * @property {number|Long|null} [scala_body_ref] TaggedContinuation scala_body_ref
         */

        /**
         * Constructs a new TaggedContinuation.
         * @exports TaggedContinuation
         * @classdesc Either rholang code or code built in to the interpreter.
         * @implements ITaggedContinuation
         * @constructor
         * @param {ITaggedContinuation=} [properties] Properties to set
         */
        function TaggedContinuation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TaggedContinuation par_body.
         * @member {IParWithRandom|null|undefined} par_body
         * @memberof TaggedContinuation
         * @instance
         */
        TaggedContinuation.prototype.par_body = null;

        /**
         * TaggedContinuation scala_body_ref.
         * @member {number|Long} scala_body_ref
         * @memberof TaggedContinuation
         * @instance
         */
        TaggedContinuation.prototype.scala_body_ref = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * TaggedContinuation tagged_cont.
         * @member {"par_body"|"scala_body_ref"|undefined} tagged_cont
         * @memberof TaggedContinuation
         * @instance
         */
        Object.defineProperty(TaggedContinuation.prototype, "tagged_cont", {
            get: $util.oneOfGetter($oneOfFields = ["par_body", "scala_body_ref"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new TaggedContinuation instance using the specified properties.
         * @function create
         * @memberof TaggedContinuation
         * @static
         * @param {ITaggedContinuation=} [properties] Properties to set
         * @returns {TaggedContinuation} TaggedContinuation instance
         */
        TaggedContinuation.create = function create(properties) {
            return new TaggedContinuation(properties);
        };

        /**
         * Encodes the specified TaggedContinuation message. Does not implicitly {@link TaggedContinuation.verify|verify} messages.
         * @function encode
         * @memberof TaggedContinuation
         * @static
         * @param {ITaggedContinuation} message TaggedContinuation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaggedContinuation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.par_body != null && message.hasOwnProperty("par_body"))
                $root.ParWithRandom.encode(message.par_body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.scala_body_ref != null && message.hasOwnProperty("scala_body_ref"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.scala_body_ref);
            return writer;
        };

        /**
         * Encodes the specified TaggedContinuation message, length delimited. Does not implicitly {@link TaggedContinuation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof TaggedContinuation
         * @static
         * @param {ITaggedContinuation} message TaggedContinuation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TaggedContinuation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TaggedContinuation message from the specified reader or buffer.
         * @function decode
         * @memberof TaggedContinuation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {TaggedContinuation} TaggedContinuation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaggedContinuation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TaggedContinuation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.par_body = $root.ParWithRandom.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.scala_body_ref = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TaggedContinuation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof TaggedContinuation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {TaggedContinuation} TaggedContinuation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TaggedContinuation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TaggedContinuation message.
         * @function verify
         * @memberof TaggedContinuation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TaggedContinuation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.par_body != null && message.hasOwnProperty("par_body")) {
                properties.tagged_cont = 1;
                {
                    var error = $root.ParWithRandom.verify(message.par_body);
                    if (error)
                        return "par_body." + error;
                }
            }
            if (message.scala_body_ref != null && message.hasOwnProperty("scala_body_ref")) {
                if (properties.tagged_cont === 1)
                    return "tagged_cont: multiple values";
                properties.tagged_cont = 1;
                if (!$util.isInteger(message.scala_body_ref) && !(message.scala_body_ref && $util.isInteger(message.scala_body_ref.low) && $util.isInteger(message.scala_body_ref.high)))
                    return "scala_body_ref: integer|Long expected";
            }
            return null;
        };

        /**
         * Creates a TaggedContinuation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof TaggedContinuation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {TaggedContinuation} TaggedContinuation
         */
        TaggedContinuation.fromObject = function fromObject(object) {
            if (object instanceof $root.TaggedContinuation)
                return object;
            var message = new $root.TaggedContinuation();
            if (object.par_body != null) {
                if (typeof object.par_body !== "object")
                    throw TypeError(".TaggedContinuation.par_body: object expected");
                message.par_body = $root.ParWithRandom.fromObject(object.par_body);
            }
            if (object.scala_body_ref != null)
                if ($util.Long)
                    (message.scala_body_ref = $util.Long.fromValue(object.scala_body_ref)).unsigned = false;
                else if (typeof object.scala_body_ref === "string")
                    message.scala_body_ref = parseInt(object.scala_body_ref, 10);
                else if (typeof object.scala_body_ref === "number")
                    message.scala_body_ref = object.scala_body_ref;
                else if (typeof object.scala_body_ref === "object")
                    message.scala_body_ref = new $util.LongBits(object.scala_body_ref.low >>> 0, object.scala_body_ref.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a TaggedContinuation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof TaggedContinuation
         * @static
         * @param {TaggedContinuation} message TaggedContinuation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TaggedContinuation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.par_body != null && message.hasOwnProperty("par_body")) {
                object.par_body = $root.ParWithRandom.toObject(message.par_body, options);
                if (options.oneofs)
                    object.tagged_cont = "par_body";
            }
            if (message.scala_body_ref != null && message.hasOwnProperty("scala_body_ref")) {
                if (typeof message.scala_body_ref === "number")
                    object.scala_body_ref = options.longs === String ? String(message.scala_body_ref) : message.scala_body_ref;
                else
                    object.scala_body_ref = options.longs === String ? $util.Long.prototype.toString.call(message.scala_body_ref) : options.longs === Number ? new $util.LongBits(message.scala_body_ref.low >>> 0, message.scala_body_ref.high >>> 0).toNumber() : message.scala_body_ref;
                if (options.oneofs)
                    object.tagged_cont = "scala_body_ref";
            }
            return object;
        };

        /**
         * Converts this TaggedContinuation to JSON.
         * @function toJSON
         * @memberof TaggedContinuation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TaggedContinuation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TaggedContinuation;
    })();

    $root.ParWithRandom = (function() {

        /**
         * Properties of a ParWithRandom.
         * @exports IParWithRandom
         * @interface IParWithRandom
         * @property {IPar|null} [body] ParWithRandom body
         * @property {Uint8Array|null} [randomState] ParWithRandom randomState
         */

        /**
         * Constructs a new ParWithRandom.
         * @exports ParWithRandom
         * @classdesc Rholang code along with the state of a split random number
         * generator for generating new unforgeable names.
         * @implements IParWithRandom
         * @constructor
         * @param {IParWithRandom=} [properties] Properties to set
         */
        function ParWithRandom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ParWithRandom body.
         * @member {IPar|null|undefined} body
         * @memberof ParWithRandom
         * @instance
         */
        ParWithRandom.prototype.body = null;

        /**
         * ParWithRandom randomState.
         * @member {Uint8Array} randomState
         * @memberof ParWithRandom
         * @instance
         */
        ParWithRandom.prototype.randomState = $util.newBuffer([]);

        /**
         * Creates a new ParWithRandom instance using the specified properties.
         * @function create
         * @memberof ParWithRandom
         * @static
         * @param {IParWithRandom=} [properties] Properties to set
         * @returns {ParWithRandom} ParWithRandom instance
         */
        ParWithRandom.create = function create(properties) {
            return new ParWithRandom(properties);
        };

        /**
         * Encodes the specified ParWithRandom message. Does not implicitly {@link ParWithRandom.verify|verify} messages.
         * @function encode
         * @memberof ParWithRandom
         * @static
         * @param {IParWithRandom} message ParWithRandom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ParWithRandom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.body != null && message.hasOwnProperty("body"))
                $root.Par.encode(message.body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.randomState);
            return writer;
        };

        /**
         * Encodes the specified ParWithRandom message, length delimited. Does not implicitly {@link ParWithRandom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ParWithRandom
         * @static
         * @param {IParWithRandom} message ParWithRandom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ParWithRandom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ParWithRandom message from the specified reader or buffer.
         * @function decode
         * @memberof ParWithRandom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ParWithRandom} ParWithRandom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ParWithRandom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ParWithRandom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.body = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.randomState = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ParWithRandom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ParWithRandom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ParWithRandom} ParWithRandom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ParWithRandom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ParWithRandom message.
         * @function verify
         * @memberof ParWithRandom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ParWithRandom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.body != null && message.hasOwnProperty("body")) {
                var error = $root.Par.verify(message.body);
                if (error)
                    return "body." + error;
            }
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                if (!(message.randomState && typeof message.randomState.length === "number" || $util.isString(message.randomState)))
                    return "randomState: buffer expected";
            return null;
        };

        /**
         * Creates a ParWithRandom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ParWithRandom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ParWithRandom} ParWithRandom
         */
        ParWithRandom.fromObject = function fromObject(object) {
            if (object instanceof $root.ParWithRandom)
                return object;
            var message = new $root.ParWithRandom();
            if (object.body != null) {
                if (typeof object.body !== "object")
                    throw TypeError(".ParWithRandom.body: object expected");
                message.body = $root.Par.fromObject(object.body);
            }
            if (object.randomState != null)
                if (typeof object.randomState === "string")
                    $util.base64.decode(object.randomState, message.randomState = $util.newBuffer($util.base64.length(object.randomState)), 0);
                else if (object.randomState.length)
                    message.randomState = object.randomState;
            return message;
        };

        /**
         * Creates a plain object from a ParWithRandom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ParWithRandom
         * @static
         * @param {ParWithRandom} message ParWithRandom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ParWithRandom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.body = null;
                if (options.bytes === String)
                    object.randomState = "";
                else {
                    object.randomState = [];
                    if (options.bytes !== Array)
                        object.randomState = $util.newBuffer(object.randomState);
                }
            }
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = $root.Par.toObject(message.body, options);
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                object.randomState = options.bytes === String ? $util.base64.encode(message.randomState, 0, message.randomState.length) : options.bytes === Array ? Array.prototype.slice.call(message.randomState) : message.randomState;
            return object;
        };

        /**
         * Converts this ParWithRandom to JSON.
         * @function toJSON
         * @memberof ParWithRandom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ParWithRandom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ParWithRandom;
    })();

    $root.PCost = (function() {

        /**
         * Properties of a PCost.
         * @exports IPCost
         * @interface IPCost
         * @property {number|Long|null} [cost] PCost cost
         */

        /**
         * Constructs a new PCost.
         * @exports PCost
         * @classdesc Cost of the performed operations.
         * @implements IPCost
         * @constructor
         * @param {IPCost=} [properties] Properties to set
         */
        function PCost(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PCost cost.
         * @member {number|Long} cost
         * @memberof PCost
         * @instance
         */
        PCost.prototype.cost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new PCost instance using the specified properties.
         * @function create
         * @memberof PCost
         * @static
         * @param {IPCost=} [properties] Properties to set
         * @returns {PCost} PCost instance
         */
        PCost.create = function create(properties) {
            return new PCost(properties);
        };

        /**
         * Encodes the specified PCost message. Does not implicitly {@link PCost.verify|verify} messages.
         * @function encode
         * @memberof PCost
         * @static
         * @param {IPCost} message PCost message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PCost.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cost != null && message.hasOwnProperty("cost"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.cost);
            return writer;
        };

        /**
         * Encodes the specified PCost message, length delimited. Does not implicitly {@link PCost.verify|verify} messages.
         * @function encodeDelimited
         * @memberof PCost
         * @static
         * @param {IPCost} message PCost message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PCost.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PCost message from the specified reader or buffer.
         * @function decode
         * @memberof PCost
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {PCost} PCost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PCost.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PCost();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cost = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PCost message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof PCost
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {PCost} PCost
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PCost.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PCost message.
         * @function verify
         * @memberof PCost
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PCost.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cost != null && message.hasOwnProperty("cost"))
                if (!$util.isInteger(message.cost) && !(message.cost && $util.isInteger(message.cost.low) && $util.isInteger(message.cost.high)))
                    return "cost: integer|Long expected";
            return null;
        };

        /**
         * Creates a PCost message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof PCost
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {PCost} PCost
         */
        PCost.fromObject = function fromObject(object) {
            if (object instanceof $root.PCost)
                return object;
            var message = new $root.PCost();
            if (object.cost != null)
                if ($util.Long)
                    (message.cost = $util.Long.fromValue(object.cost)).unsigned = true;
                else if (typeof object.cost === "string")
                    message.cost = parseInt(object.cost, 10);
                else if (typeof object.cost === "number")
                    message.cost = object.cost;
                else if (typeof object.cost === "object")
                    message.cost = new $util.LongBits(object.cost.low >>> 0, object.cost.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a PCost message. Also converts values to other types if specified.
         * @function toObject
         * @memberof PCost
         * @static
         * @param {PCost} message PCost
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PCost.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.cost = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.cost = options.longs === String ? "0" : 0;
            if (message.cost != null && message.hasOwnProperty("cost"))
                if (typeof message.cost === "number")
                    object.cost = options.longs === String ? String(message.cost) : message.cost;
                else
                    object.cost = options.longs === String ? $util.Long.prototype.toString.call(message.cost) : options.longs === Number ? new $util.LongBits(message.cost.low >>> 0, message.cost.high >>> 0).toNumber(true) : message.cost;
            return object;
        };

        /**
         * Converts this PCost to JSON.
         * @function toJSON
         * @memberof PCost
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PCost.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PCost;
    })();

    $root.ListParWithRandom = (function() {

        /**
         * Properties of a ListParWithRandom.
         * @exports IListParWithRandom
         * @interface IListParWithRandom
         * @property {Array.<IPar>|null} [pars] ListParWithRandom pars
         * @property {Uint8Array|null} [randomState] ListParWithRandom randomState
         */

        /**
         * Constructs a new ListParWithRandom.
         * @exports ListParWithRandom
         * @classdesc Represents a ListParWithRandom.
         * @implements IListParWithRandom
         * @constructor
         * @param {IListParWithRandom=} [properties] Properties to set
         */
        function ListParWithRandom(properties) {
            this.pars = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ListParWithRandom pars.
         * @member {Array.<IPar>} pars
         * @memberof ListParWithRandom
         * @instance
         */
        ListParWithRandom.prototype.pars = $util.emptyArray;

        /**
         * ListParWithRandom randomState.
         * @member {Uint8Array} randomState
         * @memberof ListParWithRandom
         * @instance
         */
        ListParWithRandom.prototype.randomState = $util.newBuffer([]);

        /**
         * Creates a new ListParWithRandom instance using the specified properties.
         * @function create
         * @memberof ListParWithRandom
         * @static
         * @param {IListParWithRandom=} [properties] Properties to set
         * @returns {ListParWithRandom} ListParWithRandom instance
         */
        ListParWithRandom.create = function create(properties) {
            return new ListParWithRandom(properties);
        };

        /**
         * Encodes the specified ListParWithRandom message. Does not implicitly {@link ListParWithRandom.verify|verify} messages.
         * @function encode
         * @memberof ListParWithRandom
         * @static
         * @param {IListParWithRandom} message ListParWithRandom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ListParWithRandom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pars != null && message.pars.length)
                for (var i = 0; i < message.pars.length; ++i)
                    $root.Par.encode(message.pars[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.randomState);
            return writer;
        };

        /**
         * Encodes the specified ListParWithRandom message, length delimited. Does not implicitly {@link ListParWithRandom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ListParWithRandom
         * @static
         * @param {IListParWithRandom} message ListParWithRandom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ListParWithRandom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ListParWithRandom message from the specified reader or buffer.
         * @function decode
         * @memberof ListParWithRandom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ListParWithRandom} ListParWithRandom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ListParWithRandom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListParWithRandom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.pars && message.pars.length))
                        message.pars = [];
                    message.pars.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.randomState = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ListParWithRandom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ListParWithRandom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ListParWithRandom} ListParWithRandom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ListParWithRandom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ListParWithRandom message.
         * @function verify
         * @memberof ListParWithRandom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ListParWithRandom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pars != null && message.hasOwnProperty("pars")) {
                if (!Array.isArray(message.pars))
                    return "pars: array expected";
                for (var i = 0; i < message.pars.length; ++i) {
                    var error = $root.Par.verify(message.pars[i]);
                    if (error)
                        return "pars." + error;
                }
            }
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                if (!(message.randomState && typeof message.randomState.length === "number" || $util.isString(message.randomState)))
                    return "randomState: buffer expected";
            return null;
        };

        /**
         * Creates a ListParWithRandom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ListParWithRandom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ListParWithRandom} ListParWithRandom
         */
        ListParWithRandom.fromObject = function fromObject(object) {
            if (object instanceof $root.ListParWithRandom)
                return object;
            var message = new $root.ListParWithRandom();
            if (object.pars) {
                if (!Array.isArray(object.pars))
                    throw TypeError(".ListParWithRandom.pars: array expected");
                message.pars = [];
                for (var i = 0; i < object.pars.length; ++i) {
                    if (typeof object.pars[i] !== "object")
                        throw TypeError(".ListParWithRandom.pars: object expected");
                    message.pars[i] = $root.Par.fromObject(object.pars[i]);
                }
            }
            if (object.randomState != null)
                if (typeof object.randomState === "string")
                    $util.base64.decode(object.randomState, message.randomState = $util.newBuffer($util.base64.length(object.randomState)), 0);
                else if (object.randomState.length)
                    message.randomState = object.randomState;
            return message;
        };

        /**
         * Creates a plain object from a ListParWithRandom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ListParWithRandom
         * @static
         * @param {ListParWithRandom} message ListParWithRandom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ListParWithRandom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.pars = [];
            if (options.defaults)
                if (options.bytes === String)
                    object.randomState = "";
                else {
                    object.randomState = [];
                    if (options.bytes !== Array)
                        object.randomState = $util.newBuffer(object.randomState);
                }
            if (message.pars && message.pars.length) {
                object.pars = [];
                for (var j = 0; j < message.pars.length; ++j)
                    object.pars[j] = $root.Par.toObject(message.pars[j], options);
            }
            if (message.randomState != null && message.hasOwnProperty("randomState"))
                object.randomState = options.bytes === String ? $util.base64.encode(message.randomState, 0, message.randomState.length) : options.bytes === Array ? Array.prototype.slice.call(message.randomState) : message.randomState;
            return object;
        };

        /**
         * Converts this ListParWithRandom to JSON.
         * @function toJSON
         * @memberof ListParWithRandom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ListParWithRandom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ListParWithRandom;
    })();

    $root.Var = (function() {

        /**
         * Properties of a Var.
         * @exports IVar
         * @interface IVar
         * @property {number|null} [bound_var] Var bound_var
         * @property {number|null} [free_var] Var free_var
         * @property {Var.IWildcardMsg|null} [wildcard] Var wildcard
         */

        /**
         * Constructs a new Var.
         * @exports Var
         * @classdesc Represents a Var.
         * @implements IVar
         * @constructor
         * @param {IVar=} [properties] Properties to set
         */
        function Var(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Var bound_var.
         * @member {number} bound_var
         * @memberof Var
         * @instance
         */
        Var.prototype.bound_var = 0;

        /**
         * Var free_var.
         * @member {number} free_var
         * @memberof Var
         * @instance
         */
        Var.prototype.free_var = 0;

        /**
         * Var wildcard.
         * @member {Var.IWildcardMsg|null|undefined} wildcard
         * @memberof Var
         * @instance
         */
        Var.prototype.wildcard = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * Var var_instance.
         * @member {"bound_var"|"free_var"|"wildcard"|undefined} var_instance
         * @memberof Var
         * @instance
         */
        Object.defineProperty(Var.prototype, "var_instance", {
            get: $util.oneOfGetter($oneOfFields = ["bound_var", "free_var", "wildcard"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new Var instance using the specified properties.
         * @function create
         * @memberof Var
         * @static
         * @param {IVar=} [properties] Properties to set
         * @returns {Var} Var instance
         */
        Var.create = function create(properties) {
            return new Var(properties);
        };

        /**
         * Encodes the specified Var message. Does not implicitly {@link Var.verify|verify} messages.
         * @function encode
         * @memberof Var
         * @static
         * @param {IVar} message Var message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Var.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bound_var != null && message.hasOwnProperty("bound_var"))
                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.bound_var);
            if (message.free_var != null && message.hasOwnProperty("free_var"))
                writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.free_var);
            if (message.wildcard != null && message.hasOwnProperty("wildcard"))
                $root.Var.WildcardMsg.encode(message.wildcard, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Var message, length delimited. Does not implicitly {@link Var.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Var
         * @static
         * @param {IVar} message Var message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Var.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Var message from the specified reader or buffer.
         * @function decode
         * @memberof Var
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Var} Var
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Var.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Var();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bound_var = reader.sint32();
                    break;
                case 2:
                    message.free_var = reader.sint32();
                    break;
                case 3:
                    message.wildcard = $root.Var.WildcardMsg.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Var message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Var
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Var} Var
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Var.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Var message.
         * @function verify
         * @memberof Var
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Var.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.bound_var != null && message.hasOwnProperty("bound_var")) {
                properties.var_instance = 1;
                if (!$util.isInteger(message.bound_var))
                    return "bound_var: integer expected";
            }
            if (message.free_var != null && message.hasOwnProperty("free_var")) {
                if (properties.var_instance === 1)
                    return "var_instance: multiple values";
                properties.var_instance = 1;
                if (!$util.isInteger(message.free_var))
                    return "free_var: integer expected";
            }
            if (message.wildcard != null && message.hasOwnProperty("wildcard")) {
                if (properties.var_instance === 1)
                    return "var_instance: multiple values";
                properties.var_instance = 1;
                {
                    var error = $root.Var.WildcardMsg.verify(message.wildcard);
                    if (error)
                        return "wildcard." + error;
                }
            }
            return null;
        };

        /**
         * Creates a Var message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Var
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Var} Var
         */
        Var.fromObject = function fromObject(object) {
            if (object instanceof $root.Var)
                return object;
            var message = new $root.Var();
            if (object.bound_var != null)
                message.bound_var = object.bound_var | 0;
            if (object.free_var != null)
                message.free_var = object.free_var | 0;
            if (object.wildcard != null) {
                if (typeof object.wildcard !== "object")
                    throw TypeError(".Var.wildcard: object expected");
                message.wildcard = $root.Var.WildcardMsg.fromObject(object.wildcard);
            }
            return message;
        };

        /**
         * Creates a plain object from a Var message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Var
         * @static
         * @param {Var} message Var
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Var.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.bound_var != null && message.hasOwnProperty("bound_var")) {
                object.bound_var = message.bound_var;
                if (options.oneofs)
                    object.var_instance = "bound_var";
            }
            if (message.free_var != null && message.hasOwnProperty("free_var")) {
                object.free_var = message.free_var;
                if (options.oneofs)
                    object.var_instance = "free_var";
            }
            if (message.wildcard != null && message.hasOwnProperty("wildcard")) {
                object.wildcard = $root.Var.WildcardMsg.toObject(message.wildcard, options);
                if (options.oneofs)
                    object.var_instance = "wildcard";
            }
            return object;
        };

        /**
         * Converts this Var to JSON.
         * @function toJSON
         * @memberof Var
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Var.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        Var.WildcardMsg = (function() {

            /**
             * Properties of a WildcardMsg.
             * @memberof Var
             * @interface IWildcardMsg
             */

            /**
             * Constructs a new WildcardMsg.
             * @memberof Var
             * @classdesc Represents a WildcardMsg.
             * @implements IWildcardMsg
             * @constructor
             * @param {Var.IWildcardMsg=} [properties] Properties to set
             */
            function WildcardMsg(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new WildcardMsg instance using the specified properties.
             * @function create
             * @memberof Var.WildcardMsg
             * @static
             * @param {Var.IWildcardMsg=} [properties] Properties to set
             * @returns {Var.WildcardMsg} WildcardMsg instance
             */
            WildcardMsg.create = function create(properties) {
                return new WildcardMsg(properties);
            };

            /**
             * Encodes the specified WildcardMsg message. Does not implicitly {@link Var.WildcardMsg.verify|verify} messages.
             * @function encode
             * @memberof Var.WildcardMsg
             * @static
             * @param {Var.IWildcardMsg} message WildcardMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WildcardMsg.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified WildcardMsg message, length delimited. Does not implicitly {@link Var.WildcardMsg.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Var.WildcardMsg
             * @static
             * @param {Var.IWildcardMsg} message WildcardMsg message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WildcardMsg.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a WildcardMsg message from the specified reader or buffer.
             * @function decode
             * @memberof Var.WildcardMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Var.WildcardMsg} WildcardMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WildcardMsg.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Var.WildcardMsg();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a WildcardMsg message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Var.WildcardMsg
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Var.WildcardMsg} WildcardMsg
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WildcardMsg.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a WildcardMsg message.
             * @function verify
             * @memberof Var.WildcardMsg
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WildcardMsg.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a WildcardMsg message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Var.WildcardMsg
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Var.WildcardMsg} WildcardMsg
             */
            WildcardMsg.fromObject = function fromObject(object) {
                if (object instanceof $root.Var.WildcardMsg)
                    return object;
                return new $root.Var.WildcardMsg();
            };

            /**
             * Creates a plain object from a WildcardMsg message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Var.WildcardMsg
             * @static
             * @param {Var.WildcardMsg} message WildcardMsg
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WildcardMsg.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this WildcardMsg to JSON.
             * @function toJSON
             * @memberof Var.WildcardMsg
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WildcardMsg.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return WildcardMsg;
        })();

        return Var;
    })();

    $root.Bundle = (function() {

        /**
         * Properties of a Bundle.
         * @exports IBundle
         * @interface IBundle
         * @property {IPar|null} [body] Bundle body
         * @property {boolean|null} [writeFlag] Bundle writeFlag
         * @property {boolean|null} [readFlag] Bundle readFlag
         */

        /**
         * Constructs a new Bundle.
         * @exports Bundle
         * @classdesc Nothing can be received from a (quoted) bundle with `readFlag = false`.
         * Likeise nothing can be sent to a (quoted) bundle with `writeFlag = false`.
         * 
         * If both flags are set to false, bundle allows only for equivalance check.
         * @implements IBundle
         * @constructor
         * @param {IBundle=} [properties] Properties to set
         */
        function Bundle(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Bundle body.
         * @member {IPar|null|undefined} body
         * @memberof Bundle
         * @instance
         */
        Bundle.prototype.body = null;

        /**
         * Bundle writeFlag.
         * @member {boolean} writeFlag
         * @memberof Bundle
         * @instance
         */
        Bundle.prototype.writeFlag = false;

        /**
         * Bundle readFlag.
         * @member {boolean} readFlag
         * @memberof Bundle
         * @instance
         */
        Bundle.prototype.readFlag = false;

        /**
         * Creates a new Bundle instance using the specified properties.
         * @function create
         * @memberof Bundle
         * @static
         * @param {IBundle=} [properties] Properties to set
         * @returns {Bundle} Bundle instance
         */
        Bundle.create = function create(properties) {
            return new Bundle(properties);
        };

        /**
         * Encodes the specified Bundle message. Does not implicitly {@link Bundle.verify|verify} messages.
         * @function encode
         * @memberof Bundle
         * @static
         * @param {IBundle} message Bundle message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Bundle.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.body != null && message.hasOwnProperty("body"))
                $root.Par.encode(message.body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.writeFlag != null && message.hasOwnProperty("writeFlag"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.writeFlag);
            if (message.readFlag != null && message.hasOwnProperty("readFlag"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.readFlag);
            return writer;
        };

        /**
         * Encodes the specified Bundle message, length delimited. Does not implicitly {@link Bundle.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Bundle
         * @static
         * @param {IBundle} message Bundle message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Bundle.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Bundle message from the specified reader or buffer.
         * @function decode
         * @memberof Bundle
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Bundle} Bundle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Bundle.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Bundle();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.body = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.writeFlag = reader.bool();
                    break;
                case 3:
                    message.readFlag = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Bundle message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Bundle
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Bundle} Bundle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Bundle.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Bundle message.
         * @function verify
         * @memberof Bundle
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Bundle.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.body != null && message.hasOwnProperty("body")) {
                var error = $root.Par.verify(message.body);
                if (error)
                    return "body." + error;
            }
            if (message.writeFlag != null && message.hasOwnProperty("writeFlag"))
                if (typeof message.writeFlag !== "boolean")
                    return "writeFlag: boolean expected";
            if (message.readFlag != null && message.hasOwnProperty("readFlag"))
                if (typeof message.readFlag !== "boolean")
                    return "readFlag: boolean expected";
            return null;
        };

        /**
         * Creates a Bundle message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Bundle
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Bundle} Bundle
         */
        Bundle.fromObject = function fromObject(object) {
            if (object instanceof $root.Bundle)
                return object;
            var message = new $root.Bundle();
            if (object.body != null) {
                if (typeof object.body !== "object")
                    throw TypeError(".Bundle.body: object expected");
                message.body = $root.Par.fromObject(object.body);
            }
            if (object.writeFlag != null)
                message.writeFlag = Boolean(object.writeFlag);
            if (object.readFlag != null)
                message.readFlag = Boolean(object.readFlag);
            return message;
        };

        /**
         * Creates a plain object from a Bundle message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Bundle
         * @static
         * @param {Bundle} message Bundle
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Bundle.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.body = null;
                object.writeFlag = false;
                object.readFlag = false;
            }
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = $root.Par.toObject(message.body, options);
            if (message.writeFlag != null && message.hasOwnProperty("writeFlag"))
                object.writeFlag = message.writeFlag;
            if (message.readFlag != null && message.hasOwnProperty("readFlag"))
                object.readFlag = message.readFlag;
            return object;
        };

        /**
         * Converts this Bundle to JSON.
         * @function toJSON
         * @memberof Bundle
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Bundle.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Bundle;
    })();

    $root.Send = (function() {

        /**
         * Properties of a Send.
         * @exports ISend
         * @interface ISend
         * @property {IPar|null} [chan] Send chan
         * @property {Array.<IPar>|null} [data] Send data
         * @property {boolean|null} [persistent] Send persistent
         * @property {Uint8Array|null} [locallyFree] Send locallyFree
         * @property {boolean|null} [connective_used] Send connective_used
         */

        /**
         * Constructs a new Send.
         * @exports Send
         * @classdesc A send is written `chan!(data)` or `chan!!(data)` for a persistent send.
         * 
         * Upon send, all free variables in data are substituted with their values.
         * @implements ISend
         * @constructor
         * @param {ISend=} [properties] Properties to set
         */
        function Send(properties) {
            this.data = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Send chan.
         * @member {IPar|null|undefined} chan
         * @memberof Send
         * @instance
         */
        Send.prototype.chan = null;

        /**
         * Send data.
         * @member {Array.<IPar>} data
         * @memberof Send
         * @instance
         */
        Send.prototype.data = $util.emptyArray;

        /**
         * Send persistent.
         * @member {boolean} persistent
         * @memberof Send
         * @instance
         */
        Send.prototype.persistent = false;

        /**
         * Send locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof Send
         * @instance
         */
        Send.prototype.locallyFree = $util.newBuffer([]);

        /**
         * Send connective_used.
         * @member {boolean} connective_used
         * @memberof Send
         * @instance
         */
        Send.prototype.connective_used = false;

        /**
         * Creates a new Send instance using the specified properties.
         * @function create
         * @memberof Send
         * @static
         * @param {ISend=} [properties] Properties to set
         * @returns {Send} Send instance
         */
        Send.create = function create(properties) {
            return new Send(properties);
        };

        /**
         * Encodes the specified Send message. Does not implicitly {@link Send.verify|verify} messages.
         * @function encode
         * @memberof Send
         * @static
         * @param {ISend} message Send message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Send.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.chan != null && message.hasOwnProperty("chan"))
                $root.Par.encode(message.chan, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.data != null && message.data.length)
                for (var i = 0; i < message.data.length; ++i)
                    $root.Par.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.persistent);
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.locallyFree);
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.connective_used);
            return writer;
        };

        /**
         * Encodes the specified Send message, length delimited. Does not implicitly {@link Send.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Send
         * @static
         * @param {ISend} message Send message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Send.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Send message from the specified reader or buffer.
         * @function decode
         * @memberof Send
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Send} Send
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Send.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Send();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.chan = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.data && message.data.length))
                        message.data = [];
                    message.data.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.persistent = reader.bool();
                    break;
                case 5:
                    message.locallyFree = reader.bytes();
                    break;
                case 6:
                    message.connective_used = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Send message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Send
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Send} Send
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Send.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Send message.
         * @function verify
         * @memberof Send
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Send.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.chan != null && message.hasOwnProperty("chan")) {
                var error = $root.Par.verify(message.chan);
                if (error)
                    return "chan." + error;
            }
            if (message.data != null && message.hasOwnProperty("data")) {
                if (!Array.isArray(message.data))
                    return "data: array expected";
                for (var i = 0; i < message.data.length; ++i) {
                    var error = $root.Par.verify(message.data[i]);
                    if (error)
                        return "data." + error;
                }
            }
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                if (typeof message.persistent !== "boolean")
                    return "persistent: boolean expected";
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                if (typeof message.connective_used !== "boolean")
                    return "connective_used: boolean expected";
            return null;
        };

        /**
         * Creates a Send message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Send
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Send} Send
         */
        Send.fromObject = function fromObject(object) {
            if (object instanceof $root.Send)
                return object;
            var message = new $root.Send();
            if (object.chan != null) {
                if (typeof object.chan !== "object")
                    throw TypeError(".Send.chan: object expected");
                message.chan = $root.Par.fromObject(object.chan);
            }
            if (object.data) {
                if (!Array.isArray(object.data))
                    throw TypeError(".Send.data: array expected");
                message.data = [];
                for (var i = 0; i < object.data.length; ++i) {
                    if (typeof object.data[i] !== "object")
                        throw TypeError(".Send.data: object expected");
                    message.data[i] = $root.Par.fromObject(object.data[i]);
                }
            }
            if (object.persistent != null)
                message.persistent = Boolean(object.persistent);
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connective_used != null)
                message.connective_used = Boolean(object.connective_used);
            return message;
        };

        /**
         * Creates a plain object from a Send message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Send
         * @static
         * @param {Send} message Send
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Send.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.data = [];
            if (options.defaults) {
                object.chan = null;
                object.persistent = false;
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connective_used = false;
            }
            if (message.chan != null && message.hasOwnProperty("chan"))
                object.chan = $root.Par.toObject(message.chan, options);
            if (message.data && message.data.length) {
                object.data = [];
                for (var j = 0; j < message.data.length; ++j)
                    object.data[j] = $root.Par.toObject(message.data[j], options);
            }
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                object.persistent = message.persistent;
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                object.connective_used = message.connective_used;
            return object;
        };

        /**
         * Converts this Send to JSON.
         * @function toJSON
         * @memberof Send
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Send.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Send;
    })();

    $root.ReceiveBind = (function() {

        /**
         * Properties of a ReceiveBind.
         * @exports IReceiveBind
         * @interface IReceiveBind
         * @property {Array.<IPar>|null} [patterns] ReceiveBind patterns
         * @property {IPar|null} [source] ReceiveBind source
         * @property {IVar|null} [remainder] ReceiveBind remainder
         * @property {number|null} [freeCount] ReceiveBind freeCount
         */

        /**
         * Constructs a new ReceiveBind.
         * @exports ReceiveBind
         * @classdesc Represents a ReceiveBind.
         * @implements IReceiveBind
         * @constructor
         * @param {IReceiveBind=} [properties] Properties to set
         */
        function ReceiveBind(properties) {
            this.patterns = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ReceiveBind patterns.
         * @member {Array.<IPar>} patterns
         * @memberof ReceiveBind
         * @instance
         */
        ReceiveBind.prototype.patterns = $util.emptyArray;

        /**
         * ReceiveBind source.
         * @member {IPar|null|undefined} source
         * @memberof ReceiveBind
         * @instance
         */
        ReceiveBind.prototype.source = null;

        /**
         * ReceiveBind remainder.
         * @member {IVar|null|undefined} remainder
         * @memberof ReceiveBind
         * @instance
         */
        ReceiveBind.prototype.remainder = null;

        /**
         * ReceiveBind freeCount.
         * @member {number} freeCount
         * @memberof ReceiveBind
         * @instance
         */
        ReceiveBind.prototype.freeCount = 0;

        /**
         * Creates a new ReceiveBind instance using the specified properties.
         * @function create
         * @memberof ReceiveBind
         * @static
         * @param {IReceiveBind=} [properties] Properties to set
         * @returns {ReceiveBind} ReceiveBind instance
         */
        ReceiveBind.create = function create(properties) {
            return new ReceiveBind(properties);
        };

        /**
         * Encodes the specified ReceiveBind message. Does not implicitly {@link ReceiveBind.verify|verify} messages.
         * @function encode
         * @memberof ReceiveBind
         * @static
         * @param {IReceiveBind} message ReceiveBind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReceiveBind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.patterns != null && message.patterns.length)
                for (var i = 0; i < message.patterns.length; ++i)
                    $root.Par.encode(message.patterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.source != null && message.hasOwnProperty("source"))
                $root.Par.encode(message.source, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                $root.Var.encode(message.remainder, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.freeCount);
            return writer;
        };

        /**
         * Encodes the specified ReceiveBind message, length delimited. Does not implicitly {@link ReceiveBind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ReceiveBind
         * @static
         * @param {IReceiveBind} message ReceiveBind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReceiveBind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ReceiveBind message from the specified reader or buffer.
         * @function decode
         * @memberof ReceiveBind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ReceiveBind} ReceiveBind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReceiveBind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReceiveBind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.patterns && message.patterns.length))
                        message.patterns = [];
                    message.patterns.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.source = $root.Par.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.remainder = $root.Var.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.freeCount = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ReceiveBind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ReceiveBind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ReceiveBind} ReceiveBind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReceiveBind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ReceiveBind message.
         * @function verify
         * @memberof ReceiveBind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ReceiveBind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.patterns != null && message.hasOwnProperty("patterns")) {
                if (!Array.isArray(message.patterns))
                    return "patterns: array expected";
                for (var i = 0; i < message.patterns.length; ++i) {
                    var error = $root.Par.verify(message.patterns[i]);
                    if (error)
                        return "patterns." + error;
                }
            }
            if (message.source != null && message.hasOwnProperty("source")) {
                var error = $root.Par.verify(message.source);
                if (error)
                    return "source." + error;
            }
            if (message.remainder != null && message.hasOwnProperty("remainder")) {
                var error = $root.Var.verify(message.remainder);
                if (error)
                    return "remainder." + error;
            }
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                if (!$util.isInteger(message.freeCount))
                    return "freeCount: integer expected";
            return null;
        };

        /**
         * Creates a ReceiveBind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ReceiveBind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ReceiveBind} ReceiveBind
         */
        ReceiveBind.fromObject = function fromObject(object) {
            if (object instanceof $root.ReceiveBind)
                return object;
            var message = new $root.ReceiveBind();
            if (object.patterns) {
                if (!Array.isArray(object.patterns))
                    throw TypeError(".ReceiveBind.patterns: array expected");
                message.patterns = [];
                for (var i = 0; i < object.patterns.length; ++i) {
                    if (typeof object.patterns[i] !== "object")
                        throw TypeError(".ReceiveBind.patterns: object expected");
                    message.patterns[i] = $root.Par.fromObject(object.patterns[i]);
                }
            }
            if (object.source != null) {
                if (typeof object.source !== "object")
                    throw TypeError(".ReceiveBind.source: object expected");
                message.source = $root.Par.fromObject(object.source);
            }
            if (object.remainder != null) {
                if (typeof object.remainder !== "object")
                    throw TypeError(".ReceiveBind.remainder: object expected");
                message.remainder = $root.Var.fromObject(object.remainder);
            }
            if (object.freeCount != null)
                message.freeCount = object.freeCount | 0;
            return message;
        };

        /**
         * Creates a plain object from a ReceiveBind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ReceiveBind
         * @static
         * @param {ReceiveBind} message ReceiveBind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ReceiveBind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.patterns = [];
            if (options.defaults) {
                object.source = null;
                object.remainder = null;
                object.freeCount = 0;
            }
            if (message.patterns && message.patterns.length) {
                object.patterns = [];
                for (var j = 0; j < message.patterns.length; ++j)
                    object.patterns[j] = $root.Par.toObject(message.patterns[j], options);
            }
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = $root.Par.toObject(message.source, options);
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                object.remainder = $root.Var.toObject(message.remainder, options);
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                object.freeCount = message.freeCount;
            return object;
        };

        /**
         * Converts this ReceiveBind to JSON.
         * @function toJSON
         * @memberof ReceiveBind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ReceiveBind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ReceiveBind;
    })();

    $root.BindPattern = (function() {

        /**
         * Properties of a BindPattern.
         * @exports IBindPattern
         * @interface IBindPattern
         * @property {Array.<IPar>|null} [patterns] BindPattern patterns
         * @property {IVar|null} [remainder] BindPattern remainder
         * @property {number|null} [freeCount] BindPattern freeCount
         */

        /**
         * Constructs a new BindPattern.
         * @exports BindPattern
         * @classdesc Represents a BindPattern.
         * @implements IBindPattern
         * @constructor
         * @param {IBindPattern=} [properties] Properties to set
         */
        function BindPattern(properties) {
            this.patterns = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BindPattern patterns.
         * @member {Array.<IPar>} patterns
         * @memberof BindPattern
         * @instance
         */
        BindPattern.prototype.patterns = $util.emptyArray;

        /**
         * BindPattern remainder.
         * @member {IVar|null|undefined} remainder
         * @memberof BindPattern
         * @instance
         */
        BindPattern.prototype.remainder = null;

        /**
         * BindPattern freeCount.
         * @member {number} freeCount
         * @memberof BindPattern
         * @instance
         */
        BindPattern.prototype.freeCount = 0;

        /**
         * Creates a new BindPattern instance using the specified properties.
         * @function create
         * @memberof BindPattern
         * @static
         * @param {IBindPattern=} [properties] Properties to set
         * @returns {BindPattern} BindPattern instance
         */
        BindPattern.create = function create(properties) {
            return new BindPattern(properties);
        };

        /**
         * Encodes the specified BindPattern message. Does not implicitly {@link BindPattern.verify|verify} messages.
         * @function encode
         * @memberof BindPattern
         * @static
         * @param {IBindPattern} message BindPattern message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BindPattern.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.patterns != null && message.patterns.length)
                for (var i = 0; i < message.patterns.length; ++i)
                    $root.Par.encode(message.patterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                $root.Var.encode(message.remainder, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.freeCount);
            return writer;
        };

        /**
         * Encodes the specified BindPattern message, length delimited. Does not implicitly {@link BindPattern.verify|verify} messages.
         * @function encodeDelimited
         * @memberof BindPattern
         * @static
         * @param {IBindPattern} message BindPattern message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BindPattern.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BindPattern message from the specified reader or buffer.
         * @function decode
         * @memberof BindPattern
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {BindPattern} BindPattern
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BindPattern.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BindPattern();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.patterns && message.patterns.length))
                        message.patterns = [];
                    message.patterns.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.remainder = $root.Var.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.freeCount = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BindPattern message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof BindPattern
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {BindPattern} BindPattern
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BindPattern.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BindPattern message.
         * @function verify
         * @memberof BindPattern
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BindPattern.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.patterns != null && message.hasOwnProperty("patterns")) {
                if (!Array.isArray(message.patterns))
                    return "patterns: array expected";
                for (var i = 0; i < message.patterns.length; ++i) {
                    var error = $root.Par.verify(message.patterns[i]);
                    if (error)
                        return "patterns." + error;
                }
            }
            if (message.remainder != null && message.hasOwnProperty("remainder")) {
                var error = $root.Var.verify(message.remainder);
                if (error)
                    return "remainder." + error;
            }
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                if (!$util.isInteger(message.freeCount))
                    return "freeCount: integer expected";
            return null;
        };

        /**
         * Creates a BindPattern message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof BindPattern
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {BindPattern} BindPattern
         */
        BindPattern.fromObject = function fromObject(object) {
            if (object instanceof $root.BindPattern)
                return object;
            var message = new $root.BindPattern();
            if (object.patterns) {
                if (!Array.isArray(object.patterns))
                    throw TypeError(".BindPattern.patterns: array expected");
                message.patterns = [];
                for (var i = 0; i < object.patterns.length; ++i) {
                    if (typeof object.patterns[i] !== "object")
                        throw TypeError(".BindPattern.patterns: object expected");
                    message.patterns[i] = $root.Par.fromObject(object.patterns[i]);
                }
            }
            if (object.remainder != null) {
                if (typeof object.remainder !== "object")
                    throw TypeError(".BindPattern.remainder: object expected");
                message.remainder = $root.Var.fromObject(object.remainder);
            }
            if (object.freeCount != null)
                message.freeCount = object.freeCount | 0;
            return message;
        };

        /**
         * Creates a plain object from a BindPattern message. Also converts values to other types if specified.
         * @function toObject
         * @memberof BindPattern
         * @static
         * @param {BindPattern} message BindPattern
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BindPattern.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.patterns = [];
            if (options.defaults) {
                object.remainder = null;
                object.freeCount = 0;
            }
            if (message.patterns && message.patterns.length) {
                object.patterns = [];
                for (var j = 0; j < message.patterns.length; ++j)
                    object.patterns[j] = $root.Par.toObject(message.patterns[j], options);
            }
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                object.remainder = $root.Var.toObject(message.remainder, options);
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                object.freeCount = message.freeCount;
            return object;
        };

        /**
         * Converts this BindPattern to JSON.
         * @function toJSON
         * @memberof BindPattern
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BindPattern.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BindPattern;
    })();

    $root.ListBindPatterns = (function() {

        /**
         * Properties of a ListBindPatterns.
         * @exports IListBindPatterns
         * @interface IListBindPatterns
         * @property {Array.<IBindPattern>|null} [patterns] ListBindPatterns patterns
         */

        /**
         * Constructs a new ListBindPatterns.
         * @exports ListBindPatterns
         * @classdesc Represents a ListBindPatterns.
         * @implements IListBindPatterns
         * @constructor
         * @param {IListBindPatterns=} [properties] Properties to set
         */
        function ListBindPatterns(properties) {
            this.patterns = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ListBindPatterns patterns.
         * @member {Array.<IBindPattern>} patterns
         * @memberof ListBindPatterns
         * @instance
         */
        ListBindPatterns.prototype.patterns = $util.emptyArray;

        /**
         * Creates a new ListBindPatterns instance using the specified properties.
         * @function create
         * @memberof ListBindPatterns
         * @static
         * @param {IListBindPatterns=} [properties] Properties to set
         * @returns {ListBindPatterns} ListBindPatterns instance
         */
        ListBindPatterns.create = function create(properties) {
            return new ListBindPatterns(properties);
        };

        /**
         * Encodes the specified ListBindPatterns message. Does not implicitly {@link ListBindPatterns.verify|verify} messages.
         * @function encode
         * @memberof ListBindPatterns
         * @static
         * @param {IListBindPatterns} message ListBindPatterns message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ListBindPatterns.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.patterns != null && message.patterns.length)
                for (var i = 0; i < message.patterns.length; ++i)
                    $root.BindPattern.encode(message.patterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ListBindPatterns message, length delimited. Does not implicitly {@link ListBindPatterns.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ListBindPatterns
         * @static
         * @param {IListBindPatterns} message ListBindPatterns message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ListBindPatterns.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ListBindPatterns message from the specified reader or buffer.
         * @function decode
         * @memberof ListBindPatterns
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ListBindPatterns} ListBindPatterns
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ListBindPatterns.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListBindPatterns();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.patterns && message.patterns.length))
                        message.patterns = [];
                    message.patterns.push($root.BindPattern.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ListBindPatterns message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ListBindPatterns
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ListBindPatterns} ListBindPatterns
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ListBindPatterns.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ListBindPatterns message.
         * @function verify
         * @memberof ListBindPatterns
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ListBindPatterns.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.patterns != null && message.hasOwnProperty("patterns")) {
                if (!Array.isArray(message.patterns))
                    return "patterns: array expected";
                for (var i = 0; i < message.patterns.length; ++i) {
                    var error = $root.BindPattern.verify(message.patterns[i]);
                    if (error)
                        return "patterns." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ListBindPatterns message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ListBindPatterns
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ListBindPatterns} ListBindPatterns
         */
        ListBindPatterns.fromObject = function fromObject(object) {
            if (object instanceof $root.ListBindPatterns)
                return object;
            var message = new $root.ListBindPatterns();
            if (object.patterns) {
                if (!Array.isArray(object.patterns))
                    throw TypeError(".ListBindPatterns.patterns: array expected");
                message.patterns = [];
                for (var i = 0; i < object.patterns.length; ++i) {
                    if (typeof object.patterns[i] !== "object")
                        throw TypeError(".ListBindPatterns.patterns: object expected");
                    message.patterns[i] = $root.BindPattern.fromObject(object.patterns[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ListBindPatterns message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ListBindPatterns
         * @static
         * @param {ListBindPatterns} message ListBindPatterns
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ListBindPatterns.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.patterns = [];
            if (message.patterns && message.patterns.length) {
                object.patterns = [];
                for (var j = 0; j < message.patterns.length; ++j)
                    object.patterns[j] = $root.BindPattern.toObject(message.patterns[j], options);
            }
            return object;
        };

        /**
         * Converts this ListBindPatterns to JSON.
         * @function toJSON
         * @memberof ListBindPatterns
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ListBindPatterns.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ListBindPatterns;
    })();

    $root.Receive = (function() {

        /**
         * Properties of a Receive.
         * @exports IReceive
         * @interface IReceive
         * @property {Array.<IReceiveBind>|null} [binds] Receive binds
         * @property {IPar|null} [body] Receive body
         * @property {boolean|null} [persistent] Receive persistent
         * @property {boolean|null} [peek] Receive peek
         * @property {number|null} [bindCount] Receive bindCount
         * @property {Uint8Array|null} [locallyFree] Receive locallyFree
         * @property {boolean|null} [connective_used] Receive connective_used
         */

        /**
         * Constructs a new Receive.
         * @exports Receive
         * @classdesc A receive is written `for(binds) { body }`
         * i.e. `for(patterns <- source) { body }`
         * or for a persistent recieve: `for(patterns <= source) { body }`.
         * 
         * It's an error for free Variable to occur more than once in a pattern.
         * @implements IReceive
         * @constructor
         * @param {IReceive=} [properties] Properties to set
         */
        function Receive(properties) {
            this.binds = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Receive binds.
         * @member {Array.<IReceiveBind>} binds
         * @memberof Receive
         * @instance
         */
        Receive.prototype.binds = $util.emptyArray;

        /**
         * Receive body.
         * @member {IPar|null|undefined} body
         * @memberof Receive
         * @instance
         */
        Receive.prototype.body = null;

        /**
         * Receive persistent.
         * @member {boolean} persistent
         * @memberof Receive
         * @instance
         */
        Receive.prototype.persistent = false;

        /**
         * Receive peek.
         * @member {boolean} peek
         * @memberof Receive
         * @instance
         */
        Receive.prototype.peek = false;

        /**
         * Receive bindCount.
         * @member {number} bindCount
         * @memberof Receive
         * @instance
         */
        Receive.prototype.bindCount = 0;

        /**
         * Receive locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof Receive
         * @instance
         */
        Receive.prototype.locallyFree = $util.newBuffer([]);

        /**
         * Receive connective_used.
         * @member {boolean} connective_used
         * @memberof Receive
         * @instance
         */
        Receive.prototype.connective_used = false;

        /**
         * Creates a new Receive instance using the specified properties.
         * @function create
         * @memberof Receive
         * @static
         * @param {IReceive=} [properties] Properties to set
         * @returns {Receive} Receive instance
         */
        Receive.create = function create(properties) {
            return new Receive(properties);
        };

        /**
         * Encodes the specified Receive message. Does not implicitly {@link Receive.verify|verify} messages.
         * @function encode
         * @memberof Receive
         * @static
         * @param {IReceive} message Receive message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Receive.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.binds != null && message.binds.length)
                for (var i = 0; i < message.binds.length; ++i)
                    $root.ReceiveBind.encode(message.binds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.body != null && message.hasOwnProperty("body"))
                $root.Par.encode(message.body, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.persistent);
            if (message.peek != null && message.hasOwnProperty("peek"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.peek);
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.bindCount);
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.locallyFree);
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.connective_used);
            return writer;
        };

        /**
         * Encodes the specified Receive message, length delimited. Does not implicitly {@link Receive.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Receive
         * @static
         * @param {IReceive} message Receive message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Receive.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Receive message from the specified reader or buffer.
         * @function decode
         * @memberof Receive
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Receive} Receive
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Receive.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Receive();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.binds && message.binds.length))
                        message.binds = [];
                    message.binds.push($root.ReceiveBind.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.body = $root.Par.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.persistent = reader.bool();
                    break;
                case 4:
                    message.peek = reader.bool();
                    break;
                case 5:
                    message.bindCount = reader.int32();
                    break;
                case 6:
                    message.locallyFree = reader.bytes();
                    break;
                case 7:
                    message.connective_used = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Receive message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Receive
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Receive} Receive
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Receive.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Receive message.
         * @function verify
         * @memberof Receive
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Receive.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.binds != null && message.hasOwnProperty("binds")) {
                if (!Array.isArray(message.binds))
                    return "binds: array expected";
                for (var i = 0; i < message.binds.length; ++i) {
                    var error = $root.ReceiveBind.verify(message.binds[i]);
                    if (error)
                        return "binds." + error;
                }
            }
            if (message.body != null && message.hasOwnProperty("body")) {
                var error = $root.Par.verify(message.body);
                if (error)
                    return "body." + error;
            }
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                if (typeof message.persistent !== "boolean")
                    return "persistent: boolean expected";
            if (message.peek != null && message.hasOwnProperty("peek"))
                if (typeof message.peek !== "boolean")
                    return "peek: boolean expected";
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                if (!$util.isInteger(message.bindCount))
                    return "bindCount: integer expected";
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                if (typeof message.connective_used !== "boolean")
                    return "connective_used: boolean expected";
            return null;
        };

        /**
         * Creates a Receive message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Receive
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Receive} Receive
         */
        Receive.fromObject = function fromObject(object) {
            if (object instanceof $root.Receive)
                return object;
            var message = new $root.Receive();
            if (object.binds) {
                if (!Array.isArray(object.binds))
                    throw TypeError(".Receive.binds: array expected");
                message.binds = [];
                for (var i = 0; i < object.binds.length; ++i) {
                    if (typeof object.binds[i] !== "object")
                        throw TypeError(".Receive.binds: object expected");
                    message.binds[i] = $root.ReceiveBind.fromObject(object.binds[i]);
                }
            }
            if (object.body != null) {
                if (typeof object.body !== "object")
                    throw TypeError(".Receive.body: object expected");
                message.body = $root.Par.fromObject(object.body);
            }
            if (object.persistent != null)
                message.persistent = Boolean(object.persistent);
            if (object.peek != null)
                message.peek = Boolean(object.peek);
            if (object.bindCount != null)
                message.bindCount = object.bindCount | 0;
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connective_used != null)
                message.connective_used = Boolean(object.connective_used);
            return message;
        };

        /**
         * Creates a plain object from a Receive message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Receive
         * @static
         * @param {Receive} message Receive
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Receive.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.binds = [];
            if (options.defaults) {
                object.body = null;
                object.persistent = false;
                object.peek = false;
                object.bindCount = 0;
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connective_used = false;
            }
            if (message.binds && message.binds.length) {
                object.binds = [];
                for (var j = 0; j < message.binds.length; ++j)
                    object.binds[j] = $root.ReceiveBind.toObject(message.binds[j], options);
            }
            if (message.body != null && message.hasOwnProperty("body"))
                object.body = $root.Par.toObject(message.body, options);
            if (message.persistent != null && message.hasOwnProperty("persistent"))
                object.persistent = message.persistent;
            if (message.peek != null && message.hasOwnProperty("peek"))
                object.peek = message.peek;
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                object.bindCount = message.bindCount;
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                object.connective_used = message.connective_used;
            return object;
        };

        /**
         * Converts this Receive to JSON.
         * @function toJSON
         * @memberof Receive
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Receive.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Receive;
    })();

    $root.New = (function() {

        /**
         * Properties of a New.
         * @exports INew
         * @interface INew
         * @property {number|null} [bindCount] New bindCount
         * @property {IPar|null} [p] New p
         * @property {Array.<string>|null} [uri] New uri
         * @property {Object.<string,IPar>|null} [injections] New injections
         * @property {Uint8Array|null} [locallyFree] New locallyFree
         */

        /**
         * Constructs a new New.
         * @exports New
         * @classdesc Represents a New.
         * @implements INew
         * @constructor
         * @param {INew=} [properties] Properties to set
         */
        function New(properties) {
            this.uri = [];
            this.injections = {};
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * New bindCount.
         * @member {number} bindCount
         * @memberof New
         * @instance
         */
        New.prototype.bindCount = 0;

        /**
         * New p.
         * @member {IPar|null|undefined} p
         * @memberof New
         * @instance
         */
        New.prototype.p = null;

        /**
         * New uri.
         * @member {Array.<string>} uri
         * @memberof New
         * @instance
         */
        New.prototype.uri = $util.emptyArray;

        /**
         * New injections.
         * @member {Object.<string,IPar>} injections
         * @memberof New
         * @instance
         */
        New.prototype.injections = $util.emptyObject;

        /**
         * New locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof New
         * @instance
         */
        New.prototype.locallyFree = $util.newBuffer([]);

        /**
         * Creates a new New instance using the specified properties.
         * @function create
         * @memberof New
         * @static
         * @param {INew=} [properties] Properties to set
         * @returns {New} New instance
         */
        New.create = function create(properties) {
            return new New(properties);
        };

        /**
         * Encodes the specified New message. Does not implicitly {@link New.verify|verify} messages.
         * @function encode
         * @memberof New
         * @static
         * @param {INew} message New message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        New.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.bindCount);
            if (message.p != null && message.hasOwnProperty("p"))
                $root.Par.encode(message.p, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.uri != null && message.uri.length)
                for (var i = 0; i < message.uri.length; ++i)
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.uri[i]);
            if (message.injections != null && message.hasOwnProperty("injections"))
                for (var keys = Object.keys(message.injections), i = 0; i < keys.length; ++i) {
                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                    $root.Par.encode(message.injections[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.locallyFree);
            return writer;
        };

        /**
         * Encodes the specified New message, length delimited. Does not implicitly {@link New.verify|verify} messages.
         * @function encodeDelimited
         * @memberof New
         * @static
         * @param {INew} message New message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        New.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a New message from the specified reader or buffer.
         * @function decode
         * @memberof New
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {New} New
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        New.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.New(), key;
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.bindCount = reader.sint32();
                    break;
                case 2:
                    message.p = $root.Par.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.uri && message.uri.length))
                        message.uri = [];
                    message.uri.push(reader.string());
                    break;
                case 4:
                    reader.skip().pos++;
                    if (message.injections === $util.emptyObject)
                        message.injections = {};
                    key = reader.string();
                    reader.pos++;
                    message.injections[key] = $root.Par.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.locallyFree = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a New message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof New
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {New} New
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        New.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a New message.
         * @function verify
         * @memberof New
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        New.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                if (!$util.isInteger(message.bindCount))
                    return "bindCount: integer expected";
            if (message.p != null && message.hasOwnProperty("p")) {
                var error = $root.Par.verify(message.p);
                if (error)
                    return "p." + error;
            }
            if (message.uri != null && message.hasOwnProperty("uri")) {
                if (!Array.isArray(message.uri))
                    return "uri: array expected";
                for (var i = 0; i < message.uri.length; ++i)
                    if (!$util.isString(message.uri[i]))
                        return "uri: string[] expected";
            }
            if (message.injections != null && message.hasOwnProperty("injections")) {
                if (!$util.isObject(message.injections))
                    return "injections: object expected";
                var key = Object.keys(message.injections);
                for (var i = 0; i < key.length; ++i) {
                    var error = $root.Par.verify(message.injections[key[i]]);
                    if (error)
                        return "injections." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            return null;
        };

        /**
         * Creates a New message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof New
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {New} New
         */
        New.fromObject = function fromObject(object) {
            if (object instanceof $root.New)
                return object;
            var message = new $root.New();
            if (object.bindCount != null)
                message.bindCount = object.bindCount | 0;
            if (object.p != null) {
                if (typeof object.p !== "object")
                    throw TypeError(".New.p: object expected");
                message.p = $root.Par.fromObject(object.p);
            }
            if (object.uri) {
                if (!Array.isArray(object.uri))
                    throw TypeError(".New.uri: array expected");
                message.uri = [];
                for (var i = 0; i < object.uri.length; ++i)
                    message.uri[i] = String(object.uri[i]);
            }
            if (object.injections) {
                if (typeof object.injections !== "object")
                    throw TypeError(".New.injections: object expected");
                message.injections = {};
                for (var keys = Object.keys(object.injections), i = 0; i < keys.length; ++i) {
                    if (typeof object.injections[keys[i]] !== "object")
                        throw TypeError(".New.injections: object expected");
                    message.injections[keys[i]] = $root.Par.fromObject(object.injections[keys[i]]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            return message;
        };

        /**
         * Creates a plain object from a New message. Also converts values to other types if specified.
         * @function toObject
         * @memberof New
         * @static
         * @param {New} message New
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        New.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.uri = [];
            if (options.objects || options.defaults)
                object.injections = {};
            if (options.defaults) {
                object.bindCount = 0;
                object.p = null;
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
            }
            if (message.bindCount != null && message.hasOwnProperty("bindCount"))
                object.bindCount = message.bindCount;
            if (message.p != null && message.hasOwnProperty("p"))
                object.p = $root.Par.toObject(message.p, options);
            if (message.uri && message.uri.length) {
                object.uri = [];
                for (var j = 0; j < message.uri.length; ++j)
                    object.uri[j] = message.uri[j];
            }
            var keys2;
            if (message.injections && (keys2 = Object.keys(message.injections)).length) {
                object.injections = {};
                for (var j = 0; j < keys2.length; ++j)
                    object.injections[keys2[j]] = $root.Par.toObject(message.injections[keys2[j]], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            return object;
        };

        /**
         * Converts this New to JSON.
         * @function toJSON
         * @memberof New
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        New.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return New;
    })();

    $root.MatchCase = (function() {

        /**
         * Properties of a MatchCase.
         * @exports IMatchCase
         * @interface IMatchCase
         * @property {IPar|null} [pattern] MatchCase pattern
         * @property {IPar|null} [source] MatchCase source
         * @property {number|null} [freeCount] MatchCase freeCount
         */

        /**
         * Constructs a new MatchCase.
         * @exports MatchCase
         * @classdesc Represents a MatchCase.
         * @implements IMatchCase
         * @constructor
         * @param {IMatchCase=} [properties] Properties to set
         */
        function MatchCase(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MatchCase pattern.
         * @member {IPar|null|undefined} pattern
         * @memberof MatchCase
         * @instance
         */
        MatchCase.prototype.pattern = null;

        /**
         * MatchCase source.
         * @member {IPar|null|undefined} source
         * @memberof MatchCase
         * @instance
         */
        MatchCase.prototype.source = null;

        /**
         * MatchCase freeCount.
         * @member {number} freeCount
         * @memberof MatchCase
         * @instance
         */
        MatchCase.prototype.freeCount = 0;

        /**
         * Creates a new MatchCase instance using the specified properties.
         * @function create
         * @memberof MatchCase
         * @static
         * @param {IMatchCase=} [properties] Properties to set
         * @returns {MatchCase} MatchCase instance
         */
        MatchCase.create = function create(properties) {
            return new MatchCase(properties);
        };

        /**
         * Encodes the specified MatchCase message. Does not implicitly {@link MatchCase.verify|verify} messages.
         * @function encode
         * @memberof MatchCase
         * @static
         * @param {IMatchCase} message MatchCase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MatchCase.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                $root.Par.encode(message.pattern, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.source != null && message.hasOwnProperty("source"))
                $root.Par.encode(message.source, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.freeCount);
            return writer;
        };

        /**
         * Encodes the specified MatchCase message, length delimited. Does not implicitly {@link MatchCase.verify|verify} messages.
         * @function encodeDelimited
         * @memberof MatchCase
         * @static
         * @param {IMatchCase} message MatchCase message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MatchCase.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MatchCase message from the specified reader or buffer.
         * @function decode
         * @memberof MatchCase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {MatchCase} MatchCase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MatchCase.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MatchCase();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.pattern = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.source = $root.Par.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.freeCount = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MatchCase message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof MatchCase
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {MatchCase} MatchCase
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MatchCase.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MatchCase message.
         * @function verify
         * @memberof MatchCase
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MatchCase.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.pattern != null && message.hasOwnProperty("pattern")) {
                var error = $root.Par.verify(message.pattern);
                if (error)
                    return "pattern." + error;
            }
            if (message.source != null && message.hasOwnProperty("source")) {
                var error = $root.Par.verify(message.source);
                if (error)
                    return "source." + error;
            }
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                if (!$util.isInteger(message.freeCount))
                    return "freeCount: integer expected";
            return null;
        };

        /**
         * Creates a MatchCase message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof MatchCase
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {MatchCase} MatchCase
         */
        MatchCase.fromObject = function fromObject(object) {
            if (object instanceof $root.MatchCase)
                return object;
            var message = new $root.MatchCase();
            if (object.pattern != null) {
                if (typeof object.pattern !== "object")
                    throw TypeError(".MatchCase.pattern: object expected");
                message.pattern = $root.Par.fromObject(object.pattern);
            }
            if (object.source != null) {
                if (typeof object.source !== "object")
                    throw TypeError(".MatchCase.source: object expected");
                message.source = $root.Par.fromObject(object.source);
            }
            if (object.freeCount != null)
                message.freeCount = object.freeCount | 0;
            return message;
        };

        /**
         * Creates a plain object from a MatchCase message. Also converts values to other types if specified.
         * @function toObject
         * @memberof MatchCase
         * @static
         * @param {MatchCase} message MatchCase
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MatchCase.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.pattern = null;
                object.source = null;
                object.freeCount = 0;
            }
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                object.pattern = $root.Par.toObject(message.pattern, options);
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = $root.Par.toObject(message.source, options);
            if (message.freeCount != null && message.hasOwnProperty("freeCount"))
                object.freeCount = message.freeCount;
            return object;
        };

        /**
         * Converts this MatchCase to JSON.
         * @function toJSON
         * @memberof MatchCase
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MatchCase.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MatchCase;
    })();

    $root.Match = (function() {

        /**
         * Properties of a Match.
         * @exports IMatch
         * @interface IMatch
         * @property {IPar|null} [target] Match target
         * @property {Array.<IMatchCase>|null} [cases] Match cases
         * @property {Uint8Array|null} [locallyFree] Match locallyFree
         * @property {boolean|null} [connective_used] Match connective_used
         */

        /**
         * Constructs a new Match.
         * @exports Match
         * @classdesc Represents a Match.
         * @implements IMatch
         * @constructor
         * @param {IMatch=} [properties] Properties to set
         */
        function Match(properties) {
            this.cases = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Match target.
         * @member {IPar|null|undefined} target
         * @memberof Match
         * @instance
         */
        Match.prototype.target = null;

        /**
         * Match cases.
         * @member {Array.<IMatchCase>} cases
         * @memberof Match
         * @instance
         */
        Match.prototype.cases = $util.emptyArray;

        /**
         * Match locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof Match
         * @instance
         */
        Match.prototype.locallyFree = $util.newBuffer([]);

        /**
         * Match connective_used.
         * @member {boolean} connective_used
         * @memberof Match
         * @instance
         */
        Match.prototype.connective_used = false;

        /**
         * Creates a new Match instance using the specified properties.
         * @function create
         * @memberof Match
         * @static
         * @param {IMatch=} [properties] Properties to set
         * @returns {Match} Match instance
         */
        Match.create = function create(properties) {
            return new Match(properties);
        };

        /**
         * Encodes the specified Match message. Does not implicitly {@link Match.verify|verify} messages.
         * @function encode
         * @memberof Match
         * @static
         * @param {IMatch} message Match message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Match.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.target != null && message.hasOwnProperty("target"))
                $root.Par.encode(message.target, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.cases != null && message.cases.length)
                for (var i = 0; i < message.cases.length; ++i)
                    $root.MatchCase.encode(message.cases[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.locallyFree);
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.connective_used);
            return writer;
        };

        /**
         * Encodes the specified Match message, length delimited. Does not implicitly {@link Match.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Match
         * @static
         * @param {IMatch} message Match message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Match.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Match message from the specified reader or buffer.
         * @function decode
         * @memberof Match
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Match} Match
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Match.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Match();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.target = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.cases && message.cases.length))
                        message.cases = [];
                    message.cases.push($root.MatchCase.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.locallyFree = reader.bytes();
                    break;
                case 5:
                    message.connective_used = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Match message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Match
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Match} Match
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Match.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Match message.
         * @function verify
         * @memberof Match
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Match.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.target != null && message.hasOwnProperty("target")) {
                var error = $root.Par.verify(message.target);
                if (error)
                    return "target." + error;
            }
            if (message.cases != null && message.hasOwnProperty("cases")) {
                if (!Array.isArray(message.cases))
                    return "cases: array expected";
                for (var i = 0; i < message.cases.length; ++i) {
                    var error = $root.MatchCase.verify(message.cases[i]);
                    if (error)
                        return "cases." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                if (typeof message.connective_used !== "boolean")
                    return "connective_used: boolean expected";
            return null;
        };

        /**
         * Creates a Match message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Match
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Match} Match
         */
        Match.fromObject = function fromObject(object) {
            if (object instanceof $root.Match)
                return object;
            var message = new $root.Match();
            if (object.target != null) {
                if (typeof object.target !== "object")
                    throw TypeError(".Match.target: object expected");
                message.target = $root.Par.fromObject(object.target);
            }
            if (object.cases) {
                if (!Array.isArray(object.cases))
                    throw TypeError(".Match.cases: array expected");
                message.cases = [];
                for (var i = 0; i < object.cases.length; ++i) {
                    if (typeof object.cases[i] !== "object")
                        throw TypeError(".Match.cases: object expected");
                    message.cases[i] = $root.MatchCase.fromObject(object.cases[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connective_used != null)
                message.connective_used = Boolean(object.connective_used);
            return message;
        };

        /**
         * Creates a plain object from a Match message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Match
         * @static
         * @param {Match} message Match
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Match.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.cases = [];
            if (options.defaults) {
                object.target = null;
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connective_used = false;
            }
            if (message.target != null && message.hasOwnProperty("target"))
                object.target = $root.Par.toObject(message.target, options);
            if (message.cases && message.cases.length) {
                object.cases = [];
                for (var j = 0; j < message.cases.length; ++j)
                    object.cases[j] = $root.MatchCase.toObject(message.cases[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                object.connective_used = message.connective_used;
            return object;
        };

        /**
         * Converts this Match to JSON.
         * @function toJSON
         * @memberof Match
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Match.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Match;
    })();

    $root.Expr = (function() {

        /**
         * Properties of an Expr.
         * @exports IExpr
         * @interface IExpr
         * @property {boolean|null} [g_bool] Expr g_bool
         * @property {number|Long|null} [g_int] Expr g_int
         * @property {string|null} [g_string] Expr g_string
         * @property {string|null} [g_uri] Expr g_uri
         * @property {Uint8Array|null} [g_byte_array] Expr g_byte_array
         * @property {IENot|null} [e_not_body] Expr e_not_body
         * @property {IENeg|null} [e_neg_body] Expr e_neg_body
         * @property {IEMult|null} [e_mult_body] Expr e_mult_body
         * @property {IEDiv|null} [e_div_body] Expr e_div_body
         * @property {IEPlus|null} [e_plus_body] Expr e_plus_body
         * @property {IEMinus|null} [e_minus_body] Expr e_minus_body
         * @property {IELt|null} [e_lt_body] Expr e_lt_body
         * @property {IELte|null} [e_lte_body] Expr e_lte_body
         * @property {IEGt|null} [e_gt_body] Expr e_gt_body
         * @property {IEGte|null} [e_gte_body] Expr e_gte_body
         * @property {IEEq|null} [e_eq_body] Expr e_eq_body
         * @property {IENeq|null} [e_neq_body] Expr e_neq_body
         * @property {IEAnd|null} [e_and_body] Expr e_and_body
         * @property {IEOr|null} [e_or_body] Expr e_or_body
         * @property {IEVar|null} [e_var_body] Expr e_var_body
         * @property {IEList|null} [e_list_body] Expr e_list_body
         * @property {IETuple|null} [e_tuple_body] Expr e_tuple_body
         * @property {IESet|null} [e_set_body] Expr e_set_body
         * @property {IEMap|null} [e_map_body] Expr e_map_body
         * @property {IEMethod|null} [e_method_body] Expr e_method_body
         * @property {IEMatches|null} [e_matches_body] Expr e_matches_body
         * @property {IEPercentPercent|null} [e_percent_percent_body] Expr e_percent_percent_body
         * @property {IEPlusPlus|null} [e_plus_plus_body] Expr e_plus_plus_body
         * @property {IEMinusMinus|null} [e_minus_minus_body] Expr e_minus_minus_body
         * @property {IEMod|null} [e_mod_body] Expr e_mod_body
         */

        /**
         * Constructs a new Expr.
         * @exports Expr
         * @classdesc Represents an Expr.
         * @implements IExpr
         * @constructor
         * @param {IExpr=} [properties] Properties to set
         */
        function Expr(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Expr g_bool.
         * @member {boolean} g_bool
         * @memberof Expr
         * @instance
         */
        Expr.prototype.g_bool = false;

        /**
         * Expr g_int.
         * @member {number|Long} g_int
         * @memberof Expr
         * @instance
         */
        Expr.prototype.g_int = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Expr g_string.
         * @member {string} g_string
         * @memberof Expr
         * @instance
         */
        Expr.prototype.g_string = "";

        /**
         * Expr g_uri.
         * @member {string} g_uri
         * @memberof Expr
         * @instance
         */
        Expr.prototype.g_uri = "";

        /**
         * Expr g_byte_array.
         * @member {Uint8Array} g_byte_array
         * @memberof Expr
         * @instance
         */
        Expr.prototype.g_byte_array = $util.newBuffer([]);

        /**
         * Expr e_not_body.
         * @member {IENot|null|undefined} e_not_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_not_body = null;

        /**
         * Expr e_neg_body.
         * @member {IENeg|null|undefined} e_neg_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_neg_body = null;

        /**
         * Expr e_mult_body.
         * @member {IEMult|null|undefined} e_mult_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_mult_body = null;

        /**
         * Expr e_div_body.
         * @member {IEDiv|null|undefined} e_div_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_div_body = null;

        /**
         * Expr e_plus_body.
         * @member {IEPlus|null|undefined} e_plus_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_plus_body = null;

        /**
         * Expr e_minus_body.
         * @member {IEMinus|null|undefined} e_minus_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_minus_body = null;

        /**
         * Expr e_lt_body.
         * @member {IELt|null|undefined} e_lt_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_lt_body = null;

        /**
         * Expr e_lte_body.
         * @member {IELte|null|undefined} e_lte_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_lte_body = null;

        /**
         * Expr e_gt_body.
         * @member {IEGt|null|undefined} e_gt_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_gt_body = null;

        /**
         * Expr e_gte_body.
         * @member {IEGte|null|undefined} e_gte_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_gte_body = null;

        /**
         * Expr e_eq_body.
         * @member {IEEq|null|undefined} e_eq_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_eq_body = null;

        /**
         * Expr e_neq_body.
         * @member {IENeq|null|undefined} e_neq_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_neq_body = null;

        /**
         * Expr e_and_body.
         * @member {IEAnd|null|undefined} e_and_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_and_body = null;

        /**
         * Expr e_or_body.
         * @member {IEOr|null|undefined} e_or_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_or_body = null;

        /**
         * Expr e_var_body.
         * @member {IEVar|null|undefined} e_var_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_var_body = null;

        /**
         * Expr e_list_body.
         * @member {IEList|null|undefined} e_list_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_list_body = null;

        /**
         * Expr e_tuple_body.
         * @member {IETuple|null|undefined} e_tuple_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_tuple_body = null;

        /**
         * Expr e_set_body.
         * @member {IESet|null|undefined} e_set_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_set_body = null;

        /**
         * Expr e_map_body.
         * @member {IEMap|null|undefined} e_map_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_map_body = null;

        /**
         * Expr e_method_body.
         * @member {IEMethod|null|undefined} e_method_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_method_body = null;

        /**
         * Expr e_matches_body.
         * @member {IEMatches|null|undefined} e_matches_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_matches_body = null;

        /**
         * Expr e_percent_percent_body.
         * @member {IEPercentPercent|null|undefined} e_percent_percent_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_percent_percent_body = null;

        /**
         * Expr e_plus_plus_body.
         * @member {IEPlusPlus|null|undefined} e_plus_plus_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_plus_plus_body = null;

        /**
         * Expr e_minus_minus_body.
         * @member {IEMinusMinus|null|undefined} e_minus_minus_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_minus_minus_body = null;

        /**
         * Expr e_mod_body.
         * @member {IEMod|null|undefined} e_mod_body
         * @memberof Expr
         * @instance
         */
        Expr.prototype.e_mod_body = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * Expr expr_instance.
         * @member {"g_bool"|"g_int"|"g_string"|"g_uri"|"g_byte_array"|"e_not_body"|"e_neg_body"|"e_mult_body"|"e_div_body"|"e_plus_body"|"e_minus_body"|"e_lt_body"|"e_lte_body"|"e_gt_body"|"e_gte_body"|"e_eq_body"|"e_neq_body"|"e_and_body"|"e_or_body"|"e_var_body"|"e_list_body"|"e_tuple_body"|"e_set_body"|"e_map_body"|"e_method_body"|"e_matches_body"|"e_percent_percent_body"|"e_plus_plus_body"|"e_minus_minus_body"|"e_mod_body"|undefined} expr_instance
         * @memberof Expr
         * @instance
         */
        Object.defineProperty(Expr.prototype, "expr_instance", {
            get: $util.oneOfGetter($oneOfFields = ["g_bool", "g_int", "g_string", "g_uri", "g_byte_array", "e_not_body", "e_neg_body", "e_mult_body", "e_div_body", "e_plus_body", "e_minus_body", "e_lt_body", "e_lte_body", "e_gt_body", "e_gte_body", "e_eq_body", "e_neq_body", "e_and_body", "e_or_body", "e_var_body", "e_list_body", "e_tuple_body", "e_set_body", "e_map_body", "e_method_body", "e_matches_body", "e_percent_percent_body", "e_plus_plus_body", "e_minus_minus_body", "e_mod_body"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new Expr instance using the specified properties.
         * @function create
         * @memberof Expr
         * @static
         * @param {IExpr=} [properties] Properties to set
         * @returns {Expr} Expr instance
         */
        Expr.create = function create(properties) {
            return new Expr(properties);
        };

        /**
         * Encodes the specified Expr message. Does not implicitly {@link Expr.verify|verify} messages.
         * @function encode
         * @memberof Expr
         * @static
         * @param {IExpr} message Expr message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Expr.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.g_bool != null && message.hasOwnProperty("g_bool"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.g_bool);
            if (message.g_int != null && message.hasOwnProperty("g_int"))
                writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.g_int);
            if (message.g_string != null && message.hasOwnProperty("g_string"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.g_string);
            if (message.g_uri != null && message.hasOwnProperty("g_uri"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.g_uri);
            if (message.e_not_body != null && message.hasOwnProperty("e_not_body"))
                $root.ENot.encode(message.e_not_body, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.e_neg_body != null && message.hasOwnProperty("e_neg_body"))
                $root.ENeg.encode(message.e_neg_body, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.e_mult_body != null && message.hasOwnProperty("e_mult_body"))
                $root.EMult.encode(message.e_mult_body, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.e_div_body != null && message.hasOwnProperty("e_div_body"))
                $root.EDiv.encode(message.e_div_body, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.e_plus_body != null && message.hasOwnProperty("e_plus_body"))
                $root.EPlus.encode(message.e_plus_body, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.e_minus_body != null && message.hasOwnProperty("e_minus_body"))
                $root.EMinus.encode(message.e_minus_body, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.e_lt_body != null && message.hasOwnProperty("e_lt_body"))
                $root.ELt.encode(message.e_lt_body, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.e_lte_body != null && message.hasOwnProperty("e_lte_body"))
                $root.ELte.encode(message.e_lte_body, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.e_gt_body != null && message.hasOwnProperty("e_gt_body"))
                $root.EGt.encode(message.e_gt_body, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.e_gte_body != null && message.hasOwnProperty("e_gte_body"))
                $root.EGte.encode(message.e_gte_body, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.e_eq_body != null && message.hasOwnProperty("e_eq_body"))
                $root.EEq.encode(message.e_eq_body, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            if (message.e_neq_body != null && message.hasOwnProperty("e_neq_body"))
                $root.ENeq.encode(message.e_neq_body, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
            if (message.e_and_body != null && message.hasOwnProperty("e_and_body"))
                $root.EAnd.encode(message.e_and_body, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
            if (message.e_or_body != null && message.hasOwnProperty("e_or_body"))
                $root.EOr.encode(message.e_or_body, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
            if (message.e_var_body != null && message.hasOwnProperty("e_var_body"))
                $root.EVar.encode(message.e_var_body, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
            if (message.e_list_body != null && message.hasOwnProperty("e_list_body"))
                $root.EList.encode(message.e_list_body, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
            if (message.e_tuple_body != null && message.hasOwnProperty("e_tuple_body"))
                $root.ETuple.encode(message.e_tuple_body, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
            if (message.e_set_body != null && message.hasOwnProperty("e_set_body"))
                $root.ESet.encode(message.e_set_body, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
            if (message.e_map_body != null && message.hasOwnProperty("e_map_body"))
                $root.EMap.encode(message.e_map_body, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
            if (message.e_method_body != null && message.hasOwnProperty("e_method_body"))
                $root.EMethod.encode(message.e_method_body, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
            if (message.g_byte_array != null && message.hasOwnProperty("g_byte_array"))
                writer.uint32(/* id 25, wireType 2 =*/202).bytes(message.g_byte_array);
            if (message.e_matches_body != null && message.hasOwnProperty("e_matches_body"))
                $root.EMatches.encode(message.e_matches_body, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
            if (message.e_percent_percent_body != null && message.hasOwnProperty("e_percent_percent_body"))
                $root.EPercentPercent.encode(message.e_percent_percent_body, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
            if (message.e_plus_plus_body != null && message.hasOwnProperty("e_plus_plus_body"))
                $root.EPlusPlus.encode(message.e_plus_plus_body, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();
            if (message.e_minus_minus_body != null && message.hasOwnProperty("e_minus_minus_body"))
                $root.EMinusMinus.encode(message.e_minus_minus_body, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
            if (message.e_mod_body != null && message.hasOwnProperty("e_mod_body"))
                $root.EMod.encode(message.e_mod_body, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Expr message, length delimited. Does not implicitly {@link Expr.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Expr
         * @static
         * @param {IExpr} message Expr message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Expr.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Expr message from the specified reader or buffer.
         * @function decode
         * @memberof Expr
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Expr} Expr
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Expr.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Expr();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.g_bool = reader.bool();
                    break;
                case 2:
                    message.g_int = reader.sint64();
                    break;
                case 3:
                    message.g_string = reader.string();
                    break;
                case 4:
                    message.g_uri = reader.string();
                    break;
                case 25:
                    message.g_byte_array = reader.bytes();
                    break;
                case 5:
                    message.e_not_body = $root.ENot.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.e_neg_body = $root.ENeg.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.e_mult_body = $root.EMult.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.e_div_body = $root.EDiv.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.e_plus_body = $root.EPlus.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.e_minus_body = $root.EMinus.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.e_lt_body = $root.ELt.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.e_lte_body = $root.ELte.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.e_gt_body = $root.EGt.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.e_gte_body = $root.EGte.decode(reader, reader.uint32());
                    break;
                case 15:
                    message.e_eq_body = $root.EEq.decode(reader, reader.uint32());
                    break;
                case 16:
                    message.e_neq_body = $root.ENeq.decode(reader, reader.uint32());
                    break;
                case 17:
                    message.e_and_body = $root.EAnd.decode(reader, reader.uint32());
                    break;
                case 18:
                    message.e_or_body = $root.EOr.decode(reader, reader.uint32());
                    break;
                case 19:
                    message.e_var_body = $root.EVar.decode(reader, reader.uint32());
                    break;
                case 20:
                    message.e_list_body = $root.EList.decode(reader, reader.uint32());
                    break;
                case 21:
                    message.e_tuple_body = $root.ETuple.decode(reader, reader.uint32());
                    break;
                case 22:
                    message.e_set_body = $root.ESet.decode(reader, reader.uint32());
                    break;
                case 23:
                    message.e_map_body = $root.EMap.decode(reader, reader.uint32());
                    break;
                case 24:
                    message.e_method_body = $root.EMethod.decode(reader, reader.uint32());
                    break;
                case 27:
                    message.e_matches_body = $root.EMatches.decode(reader, reader.uint32());
                    break;
                case 28:
                    message.e_percent_percent_body = $root.EPercentPercent.decode(reader, reader.uint32());
                    break;
                case 29:
                    message.e_plus_plus_body = $root.EPlusPlus.decode(reader, reader.uint32());
                    break;
                case 30:
                    message.e_minus_minus_body = $root.EMinusMinus.decode(reader, reader.uint32());
                    break;
                case 31:
                    message.e_mod_body = $root.EMod.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Expr message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Expr
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Expr} Expr
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Expr.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Expr message.
         * @function verify
         * @memberof Expr
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Expr.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.g_bool != null && message.hasOwnProperty("g_bool")) {
                properties.expr_instance = 1;
                if (typeof message.g_bool !== "boolean")
                    return "g_bool: boolean expected";
            }
            if (message.g_int != null && message.hasOwnProperty("g_int")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                if (!$util.isInteger(message.g_int) && !(message.g_int && $util.isInteger(message.g_int.low) && $util.isInteger(message.g_int.high)))
                    return "g_int: integer|Long expected";
            }
            if (message.g_string != null && message.hasOwnProperty("g_string")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                if (!$util.isString(message.g_string))
                    return "g_string: string expected";
            }
            if (message.g_uri != null && message.hasOwnProperty("g_uri")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                if (!$util.isString(message.g_uri))
                    return "g_uri: string expected";
            }
            if (message.g_byte_array != null && message.hasOwnProperty("g_byte_array")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                if (!(message.g_byte_array && typeof message.g_byte_array.length === "number" || $util.isString(message.g_byte_array)))
                    return "g_byte_array: buffer expected";
            }
            if (message.e_not_body != null && message.hasOwnProperty("e_not_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.ENot.verify(message.e_not_body);
                    if (error)
                        return "e_not_body." + error;
                }
            }
            if (message.e_neg_body != null && message.hasOwnProperty("e_neg_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.ENeg.verify(message.e_neg_body);
                    if (error)
                        return "e_neg_body." + error;
                }
            }
            if (message.e_mult_body != null && message.hasOwnProperty("e_mult_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EMult.verify(message.e_mult_body);
                    if (error)
                        return "e_mult_body." + error;
                }
            }
            if (message.e_div_body != null && message.hasOwnProperty("e_div_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EDiv.verify(message.e_div_body);
                    if (error)
                        return "e_div_body." + error;
                }
            }
            if (message.e_plus_body != null && message.hasOwnProperty("e_plus_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EPlus.verify(message.e_plus_body);
                    if (error)
                        return "e_plus_body." + error;
                }
            }
            if (message.e_minus_body != null && message.hasOwnProperty("e_minus_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EMinus.verify(message.e_minus_body);
                    if (error)
                        return "e_minus_body." + error;
                }
            }
            if (message.e_lt_body != null && message.hasOwnProperty("e_lt_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.ELt.verify(message.e_lt_body);
                    if (error)
                        return "e_lt_body." + error;
                }
            }
            if (message.e_lte_body != null && message.hasOwnProperty("e_lte_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.ELte.verify(message.e_lte_body);
                    if (error)
                        return "e_lte_body." + error;
                }
            }
            if (message.e_gt_body != null && message.hasOwnProperty("e_gt_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EGt.verify(message.e_gt_body);
                    if (error)
                        return "e_gt_body." + error;
                }
            }
            if (message.e_gte_body != null && message.hasOwnProperty("e_gte_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EGte.verify(message.e_gte_body);
                    if (error)
                        return "e_gte_body." + error;
                }
            }
            if (message.e_eq_body != null && message.hasOwnProperty("e_eq_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EEq.verify(message.e_eq_body);
                    if (error)
                        return "e_eq_body." + error;
                }
            }
            if (message.e_neq_body != null && message.hasOwnProperty("e_neq_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.ENeq.verify(message.e_neq_body);
                    if (error)
                        return "e_neq_body." + error;
                }
            }
            if (message.e_and_body != null && message.hasOwnProperty("e_and_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EAnd.verify(message.e_and_body);
                    if (error)
                        return "e_and_body." + error;
                }
            }
            if (message.e_or_body != null && message.hasOwnProperty("e_or_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EOr.verify(message.e_or_body);
                    if (error)
                        return "e_or_body." + error;
                }
            }
            if (message.e_var_body != null && message.hasOwnProperty("e_var_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EVar.verify(message.e_var_body);
                    if (error)
                        return "e_var_body." + error;
                }
            }
            if (message.e_list_body != null && message.hasOwnProperty("e_list_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EList.verify(message.e_list_body);
                    if (error)
                        return "e_list_body." + error;
                }
            }
            if (message.e_tuple_body != null && message.hasOwnProperty("e_tuple_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.ETuple.verify(message.e_tuple_body);
                    if (error)
                        return "e_tuple_body." + error;
                }
            }
            if (message.e_set_body != null && message.hasOwnProperty("e_set_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.ESet.verify(message.e_set_body);
                    if (error)
                        return "e_set_body." + error;
                }
            }
            if (message.e_map_body != null && message.hasOwnProperty("e_map_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EMap.verify(message.e_map_body);
                    if (error)
                        return "e_map_body." + error;
                }
            }
            if (message.e_method_body != null && message.hasOwnProperty("e_method_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EMethod.verify(message.e_method_body);
                    if (error)
                        return "e_method_body." + error;
                }
            }
            if (message.e_matches_body != null && message.hasOwnProperty("e_matches_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EMatches.verify(message.e_matches_body);
                    if (error)
                        return "e_matches_body." + error;
                }
            }
            if (message.e_percent_percent_body != null && message.hasOwnProperty("e_percent_percent_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EPercentPercent.verify(message.e_percent_percent_body);
                    if (error)
                        return "e_percent_percent_body." + error;
                }
            }
            if (message.e_plus_plus_body != null && message.hasOwnProperty("e_plus_plus_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EPlusPlus.verify(message.e_plus_plus_body);
                    if (error)
                        return "e_plus_plus_body." + error;
                }
            }
            if (message.e_minus_minus_body != null && message.hasOwnProperty("e_minus_minus_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EMinusMinus.verify(message.e_minus_minus_body);
                    if (error)
                        return "e_minus_minus_body." + error;
                }
            }
            if (message.e_mod_body != null && message.hasOwnProperty("e_mod_body")) {
                if (properties.expr_instance === 1)
                    return "expr_instance: multiple values";
                properties.expr_instance = 1;
                {
                    var error = $root.EMod.verify(message.e_mod_body);
                    if (error)
                        return "e_mod_body." + error;
                }
            }
            return null;
        };

        /**
         * Creates an Expr message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Expr
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Expr} Expr
         */
        Expr.fromObject = function fromObject(object) {
            if (object instanceof $root.Expr)
                return object;
            var message = new $root.Expr();
            if (object.g_bool != null)
                message.g_bool = Boolean(object.g_bool);
            if (object.g_int != null)
                if ($util.Long)
                    (message.g_int = $util.Long.fromValue(object.g_int)).unsigned = false;
                else if (typeof object.g_int === "string")
                    message.g_int = parseInt(object.g_int, 10);
                else if (typeof object.g_int === "number")
                    message.g_int = object.g_int;
                else if (typeof object.g_int === "object")
                    message.g_int = new $util.LongBits(object.g_int.low >>> 0, object.g_int.high >>> 0).toNumber();
            if (object.g_string != null)
                message.g_string = String(object.g_string);
            if (object.g_uri != null)
                message.g_uri = String(object.g_uri);
            if (object.g_byte_array != null)
                if (typeof object.g_byte_array === "string")
                    $util.base64.decode(object.g_byte_array, message.g_byte_array = $util.newBuffer($util.base64.length(object.g_byte_array)), 0);
                else if (object.g_byte_array.length)
                    message.g_byte_array = object.g_byte_array;
            if (object.e_not_body != null) {
                if (typeof object.e_not_body !== "object")
                    throw TypeError(".Expr.e_not_body: object expected");
                message.e_not_body = $root.ENot.fromObject(object.e_not_body);
            }
            if (object.e_neg_body != null) {
                if (typeof object.e_neg_body !== "object")
                    throw TypeError(".Expr.e_neg_body: object expected");
                message.e_neg_body = $root.ENeg.fromObject(object.e_neg_body);
            }
            if (object.e_mult_body != null) {
                if (typeof object.e_mult_body !== "object")
                    throw TypeError(".Expr.e_mult_body: object expected");
                message.e_mult_body = $root.EMult.fromObject(object.e_mult_body);
            }
            if (object.e_div_body != null) {
                if (typeof object.e_div_body !== "object")
                    throw TypeError(".Expr.e_div_body: object expected");
                message.e_div_body = $root.EDiv.fromObject(object.e_div_body);
            }
            if (object.e_plus_body != null) {
                if (typeof object.e_plus_body !== "object")
                    throw TypeError(".Expr.e_plus_body: object expected");
                message.e_plus_body = $root.EPlus.fromObject(object.e_plus_body);
            }
            if (object.e_minus_body != null) {
                if (typeof object.e_minus_body !== "object")
                    throw TypeError(".Expr.e_minus_body: object expected");
                message.e_minus_body = $root.EMinus.fromObject(object.e_minus_body);
            }
            if (object.e_lt_body != null) {
                if (typeof object.e_lt_body !== "object")
                    throw TypeError(".Expr.e_lt_body: object expected");
                message.e_lt_body = $root.ELt.fromObject(object.e_lt_body);
            }
            if (object.e_lte_body != null) {
                if (typeof object.e_lte_body !== "object")
                    throw TypeError(".Expr.e_lte_body: object expected");
                message.e_lte_body = $root.ELte.fromObject(object.e_lte_body);
            }
            if (object.e_gt_body != null) {
                if (typeof object.e_gt_body !== "object")
                    throw TypeError(".Expr.e_gt_body: object expected");
                message.e_gt_body = $root.EGt.fromObject(object.e_gt_body);
            }
            if (object.e_gte_body != null) {
                if (typeof object.e_gte_body !== "object")
                    throw TypeError(".Expr.e_gte_body: object expected");
                message.e_gte_body = $root.EGte.fromObject(object.e_gte_body);
            }
            if (object.e_eq_body != null) {
                if (typeof object.e_eq_body !== "object")
                    throw TypeError(".Expr.e_eq_body: object expected");
                message.e_eq_body = $root.EEq.fromObject(object.e_eq_body);
            }
            if (object.e_neq_body != null) {
                if (typeof object.e_neq_body !== "object")
                    throw TypeError(".Expr.e_neq_body: object expected");
                message.e_neq_body = $root.ENeq.fromObject(object.e_neq_body);
            }
            if (object.e_and_body != null) {
                if (typeof object.e_and_body !== "object")
                    throw TypeError(".Expr.e_and_body: object expected");
                message.e_and_body = $root.EAnd.fromObject(object.e_and_body);
            }
            if (object.e_or_body != null) {
                if (typeof object.e_or_body !== "object")
                    throw TypeError(".Expr.e_or_body: object expected");
                message.e_or_body = $root.EOr.fromObject(object.e_or_body);
            }
            if (object.e_var_body != null) {
                if (typeof object.e_var_body !== "object")
                    throw TypeError(".Expr.e_var_body: object expected");
                message.e_var_body = $root.EVar.fromObject(object.e_var_body);
            }
            if (object.e_list_body != null) {
                if (typeof object.e_list_body !== "object")
                    throw TypeError(".Expr.e_list_body: object expected");
                message.e_list_body = $root.EList.fromObject(object.e_list_body);
            }
            if (object.e_tuple_body != null) {
                if (typeof object.e_tuple_body !== "object")
                    throw TypeError(".Expr.e_tuple_body: object expected");
                message.e_tuple_body = $root.ETuple.fromObject(object.e_tuple_body);
            }
            if (object.e_set_body != null) {
                if (typeof object.e_set_body !== "object")
                    throw TypeError(".Expr.e_set_body: object expected");
                message.e_set_body = $root.ESet.fromObject(object.e_set_body);
            }
            if (object.e_map_body != null) {
                if (typeof object.e_map_body !== "object")
                    throw TypeError(".Expr.e_map_body: object expected");
                message.e_map_body = $root.EMap.fromObject(object.e_map_body);
            }
            if (object.e_method_body != null) {
                if (typeof object.e_method_body !== "object")
                    throw TypeError(".Expr.e_method_body: object expected");
                message.e_method_body = $root.EMethod.fromObject(object.e_method_body);
            }
            if (object.e_matches_body != null) {
                if (typeof object.e_matches_body !== "object")
                    throw TypeError(".Expr.e_matches_body: object expected");
                message.e_matches_body = $root.EMatches.fromObject(object.e_matches_body);
            }
            if (object.e_percent_percent_body != null) {
                if (typeof object.e_percent_percent_body !== "object")
                    throw TypeError(".Expr.e_percent_percent_body: object expected");
                message.e_percent_percent_body = $root.EPercentPercent.fromObject(object.e_percent_percent_body);
            }
            if (object.e_plus_plus_body != null) {
                if (typeof object.e_plus_plus_body !== "object")
                    throw TypeError(".Expr.e_plus_plus_body: object expected");
                message.e_plus_plus_body = $root.EPlusPlus.fromObject(object.e_plus_plus_body);
            }
            if (object.e_minus_minus_body != null) {
                if (typeof object.e_minus_minus_body !== "object")
                    throw TypeError(".Expr.e_minus_minus_body: object expected");
                message.e_minus_minus_body = $root.EMinusMinus.fromObject(object.e_minus_minus_body);
            }
            if (object.e_mod_body != null) {
                if (typeof object.e_mod_body !== "object")
                    throw TypeError(".Expr.e_mod_body: object expected");
                message.e_mod_body = $root.EMod.fromObject(object.e_mod_body);
            }
            return message;
        };

        /**
         * Creates a plain object from an Expr message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Expr
         * @static
         * @param {Expr} message Expr
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Expr.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.g_bool != null && message.hasOwnProperty("g_bool")) {
                object.g_bool = message.g_bool;
                if (options.oneofs)
                    object.expr_instance = "g_bool";
            }
            if (message.g_int != null && message.hasOwnProperty("g_int")) {
                if (typeof message.g_int === "number")
                    object.g_int = options.longs === String ? String(message.g_int) : message.g_int;
                else
                    object.g_int = options.longs === String ? $util.Long.prototype.toString.call(message.g_int) : options.longs === Number ? new $util.LongBits(message.g_int.low >>> 0, message.g_int.high >>> 0).toNumber() : message.g_int;
                if (options.oneofs)
                    object.expr_instance = "g_int";
            }
            if (message.g_string != null && message.hasOwnProperty("g_string")) {
                object.g_string = message.g_string;
                if (options.oneofs)
                    object.expr_instance = "g_string";
            }
            if (message.g_uri != null && message.hasOwnProperty("g_uri")) {
                object.g_uri = message.g_uri;
                if (options.oneofs)
                    object.expr_instance = "g_uri";
            }
            if (message.e_not_body != null && message.hasOwnProperty("e_not_body")) {
                object.e_not_body = $root.ENot.toObject(message.e_not_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_not_body";
            }
            if (message.e_neg_body != null && message.hasOwnProperty("e_neg_body")) {
                object.e_neg_body = $root.ENeg.toObject(message.e_neg_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_neg_body";
            }
            if (message.e_mult_body != null && message.hasOwnProperty("e_mult_body")) {
                object.e_mult_body = $root.EMult.toObject(message.e_mult_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_mult_body";
            }
            if (message.e_div_body != null && message.hasOwnProperty("e_div_body")) {
                object.e_div_body = $root.EDiv.toObject(message.e_div_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_div_body";
            }
            if (message.e_plus_body != null && message.hasOwnProperty("e_plus_body")) {
                object.e_plus_body = $root.EPlus.toObject(message.e_plus_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_plus_body";
            }
            if (message.e_minus_body != null && message.hasOwnProperty("e_minus_body")) {
                object.e_minus_body = $root.EMinus.toObject(message.e_minus_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_minus_body";
            }
            if (message.e_lt_body != null && message.hasOwnProperty("e_lt_body")) {
                object.e_lt_body = $root.ELt.toObject(message.e_lt_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_lt_body";
            }
            if (message.e_lte_body != null && message.hasOwnProperty("e_lte_body")) {
                object.e_lte_body = $root.ELte.toObject(message.e_lte_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_lte_body";
            }
            if (message.e_gt_body != null && message.hasOwnProperty("e_gt_body")) {
                object.e_gt_body = $root.EGt.toObject(message.e_gt_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_gt_body";
            }
            if (message.e_gte_body != null && message.hasOwnProperty("e_gte_body")) {
                object.e_gte_body = $root.EGte.toObject(message.e_gte_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_gte_body";
            }
            if (message.e_eq_body != null && message.hasOwnProperty("e_eq_body")) {
                object.e_eq_body = $root.EEq.toObject(message.e_eq_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_eq_body";
            }
            if (message.e_neq_body != null && message.hasOwnProperty("e_neq_body")) {
                object.e_neq_body = $root.ENeq.toObject(message.e_neq_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_neq_body";
            }
            if (message.e_and_body != null && message.hasOwnProperty("e_and_body")) {
                object.e_and_body = $root.EAnd.toObject(message.e_and_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_and_body";
            }
            if (message.e_or_body != null && message.hasOwnProperty("e_or_body")) {
                object.e_or_body = $root.EOr.toObject(message.e_or_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_or_body";
            }
            if (message.e_var_body != null && message.hasOwnProperty("e_var_body")) {
                object.e_var_body = $root.EVar.toObject(message.e_var_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_var_body";
            }
            if (message.e_list_body != null && message.hasOwnProperty("e_list_body")) {
                object.e_list_body = $root.EList.toObject(message.e_list_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_list_body";
            }
            if (message.e_tuple_body != null && message.hasOwnProperty("e_tuple_body")) {
                object.e_tuple_body = $root.ETuple.toObject(message.e_tuple_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_tuple_body";
            }
            if (message.e_set_body != null && message.hasOwnProperty("e_set_body")) {
                object.e_set_body = $root.ESet.toObject(message.e_set_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_set_body";
            }
            if (message.e_map_body != null && message.hasOwnProperty("e_map_body")) {
                object.e_map_body = $root.EMap.toObject(message.e_map_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_map_body";
            }
            if (message.e_method_body != null && message.hasOwnProperty("e_method_body")) {
                object.e_method_body = $root.EMethod.toObject(message.e_method_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_method_body";
            }
            if (message.g_byte_array != null && message.hasOwnProperty("g_byte_array")) {
                object.g_byte_array = options.bytes === String ? $util.base64.encode(message.g_byte_array, 0, message.g_byte_array.length) : options.bytes === Array ? Array.prototype.slice.call(message.g_byte_array) : message.g_byte_array;
                if (options.oneofs)
                    object.expr_instance = "g_byte_array";
            }
            if (message.e_matches_body != null && message.hasOwnProperty("e_matches_body")) {
                object.e_matches_body = $root.EMatches.toObject(message.e_matches_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_matches_body";
            }
            if (message.e_percent_percent_body != null && message.hasOwnProperty("e_percent_percent_body")) {
                object.e_percent_percent_body = $root.EPercentPercent.toObject(message.e_percent_percent_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_percent_percent_body";
            }
            if (message.e_plus_plus_body != null && message.hasOwnProperty("e_plus_plus_body")) {
                object.e_plus_plus_body = $root.EPlusPlus.toObject(message.e_plus_plus_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_plus_plus_body";
            }
            if (message.e_minus_minus_body != null && message.hasOwnProperty("e_minus_minus_body")) {
                object.e_minus_minus_body = $root.EMinusMinus.toObject(message.e_minus_minus_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_minus_minus_body";
            }
            if (message.e_mod_body != null && message.hasOwnProperty("e_mod_body")) {
                object.e_mod_body = $root.EMod.toObject(message.e_mod_body, options);
                if (options.oneofs)
                    object.expr_instance = "e_mod_body";
            }
            return object;
        };

        /**
         * Converts this Expr to JSON.
         * @function toJSON
         * @memberof Expr
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Expr.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Expr;
    })();

    $root.EList = (function() {

        /**
         * Properties of a EList.
         * @exports IEList
         * @interface IEList
         * @property {Array.<IPar>|null} [ps] EList ps
         * @property {Uint8Array|null} [locallyFree] EList locallyFree
         * @property {boolean|null} [connective_used] EList connective_used
         * @property {IVar|null} [remainder] EList remainder
         */

        /**
         * Constructs a new EList.
         * @exports EList
         * @classdesc Represents a EList.
         * @implements IEList
         * @constructor
         * @param {IEList=} [properties] Properties to set
         */
        function EList(properties) {
            this.ps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EList ps.
         * @member {Array.<IPar>} ps
         * @memberof EList
         * @instance
         */
        EList.prototype.ps = $util.emptyArray;

        /**
         * EList locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof EList
         * @instance
         */
        EList.prototype.locallyFree = $util.newBuffer([]);

        /**
         * EList connective_used.
         * @member {boolean} connective_used
         * @memberof EList
         * @instance
         */
        EList.prototype.connective_used = false;

        /**
         * EList remainder.
         * @member {IVar|null|undefined} remainder
         * @memberof EList
         * @instance
         */
        EList.prototype.remainder = null;

        /**
         * Creates a new EList instance using the specified properties.
         * @function create
         * @memberof EList
         * @static
         * @param {IEList=} [properties] Properties to set
         * @returns {EList} EList instance
         */
        EList.create = function create(properties) {
            return new EList(properties);
        };

        /**
         * Encodes the specified EList message. Does not implicitly {@link EList.verify|verify} messages.
         * @function encode
         * @memberof EList
         * @static
         * @param {IEList} message EList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ps != null && message.ps.length)
                for (var i = 0; i < message.ps.length; ++i)
                    $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connective_used);
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                $root.Var.encode(message.remainder, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EList message, length delimited. Does not implicitly {@link EList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EList
         * @static
         * @param {IEList} message EList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EList message from the specified reader or buffer.
         * @function decode
         * @memberof EList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EList} EList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ps && message.ps.length))
                        message.ps = [];
                    message.ps.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.locallyFree = reader.bytes();
                    break;
                case 4:
                    message.connective_used = reader.bool();
                    break;
                case 5:
                    message.remainder = $root.Var.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EList} EList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EList message.
         * @function verify
         * @memberof EList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ps != null && message.hasOwnProperty("ps")) {
                if (!Array.isArray(message.ps))
                    return "ps: array expected";
                for (var i = 0; i < message.ps.length; ++i) {
                    var error = $root.Par.verify(message.ps[i]);
                    if (error)
                        return "ps." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                if (typeof message.connective_used !== "boolean")
                    return "connective_used: boolean expected";
            if (message.remainder != null && message.hasOwnProperty("remainder")) {
                var error = $root.Var.verify(message.remainder);
                if (error)
                    return "remainder." + error;
            }
            return null;
        };

        /**
         * Creates a EList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EList} EList
         */
        EList.fromObject = function fromObject(object) {
            if (object instanceof $root.EList)
                return object;
            var message = new $root.EList();
            if (object.ps) {
                if (!Array.isArray(object.ps))
                    throw TypeError(".EList.ps: array expected");
                message.ps = [];
                for (var i = 0; i < object.ps.length; ++i) {
                    if (typeof object.ps[i] !== "object")
                        throw TypeError(".EList.ps: object expected");
                    message.ps[i] = $root.Par.fromObject(object.ps[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connective_used != null)
                message.connective_used = Boolean(object.connective_used);
            if (object.remainder != null) {
                if (typeof object.remainder !== "object")
                    throw TypeError(".EList.remainder: object expected");
                message.remainder = $root.Var.fromObject(object.remainder);
            }
            return message;
        };

        /**
         * Creates a plain object from a EList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EList
         * @static
         * @param {EList} message EList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ps = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connective_used = false;
                object.remainder = null;
            }
            if (message.ps && message.ps.length) {
                object.ps = [];
                for (var j = 0; j < message.ps.length; ++j)
                    object.ps[j] = $root.Par.toObject(message.ps[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                object.connective_used = message.connective_used;
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                object.remainder = $root.Var.toObject(message.remainder, options);
            return object;
        };

        /**
         * Converts this EList to JSON.
         * @function toJSON
         * @memberof EList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EList;
    })();

    $root.ETuple = (function() {

        /**
         * Properties of a ETuple.
         * @exports IETuple
         * @interface IETuple
         * @property {Array.<IPar>|null} [ps] ETuple ps
         * @property {Uint8Array|null} [locallyFree] ETuple locallyFree
         * @property {boolean|null} [connective_used] ETuple connective_used
         */

        /**
         * Constructs a new ETuple.
         * @exports ETuple
         * @classdesc Represents a ETuple.
         * @implements IETuple
         * @constructor
         * @param {IETuple=} [properties] Properties to set
         */
        function ETuple(properties) {
            this.ps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ETuple ps.
         * @member {Array.<IPar>} ps
         * @memberof ETuple
         * @instance
         */
        ETuple.prototype.ps = $util.emptyArray;

        /**
         * ETuple locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof ETuple
         * @instance
         */
        ETuple.prototype.locallyFree = $util.newBuffer([]);

        /**
         * ETuple connective_used.
         * @member {boolean} connective_used
         * @memberof ETuple
         * @instance
         */
        ETuple.prototype.connective_used = false;

        /**
         * Creates a new ETuple instance using the specified properties.
         * @function create
         * @memberof ETuple
         * @static
         * @param {IETuple=} [properties] Properties to set
         * @returns {ETuple} ETuple instance
         */
        ETuple.create = function create(properties) {
            return new ETuple(properties);
        };

        /**
         * Encodes the specified ETuple message. Does not implicitly {@link ETuple.verify|verify} messages.
         * @function encode
         * @memberof ETuple
         * @static
         * @param {IETuple} message ETuple message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ETuple.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ps != null && message.ps.length)
                for (var i = 0; i < message.ps.length; ++i)
                    $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connective_used);
            return writer;
        };

        /**
         * Encodes the specified ETuple message, length delimited. Does not implicitly {@link ETuple.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ETuple
         * @static
         * @param {IETuple} message ETuple message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ETuple.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ETuple message from the specified reader or buffer.
         * @function decode
         * @memberof ETuple
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ETuple} ETuple
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ETuple.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ETuple();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ps && message.ps.length))
                        message.ps = [];
                    message.ps.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.locallyFree = reader.bytes();
                    break;
                case 4:
                    message.connective_used = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ETuple message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ETuple
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ETuple} ETuple
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ETuple.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ETuple message.
         * @function verify
         * @memberof ETuple
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ETuple.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ps != null && message.hasOwnProperty("ps")) {
                if (!Array.isArray(message.ps))
                    return "ps: array expected";
                for (var i = 0; i < message.ps.length; ++i) {
                    var error = $root.Par.verify(message.ps[i]);
                    if (error)
                        return "ps." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                if (typeof message.connective_used !== "boolean")
                    return "connective_used: boolean expected";
            return null;
        };

        /**
         * Creates a ETuple message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ETuple
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ETuple} ETuple
         */
        ETuple.fromObject = function fromObject(object) {
            if (object instanceof $root.ETuple)
                return object;
            var message = new $root.ETuple();
            if (object.ps) {
                if (!Array.isArray(object.ps))
                    throw TypeError(".ETuple.ps: array expected");
                message.ps = [];
                for (var i = 0; i < object.ps.length; ++i) {
                    if (typeof object.ps[i] !== "object")
                        throw TypeError(".ETuple.ps: object expected");
                    message.ps[i] = $root.Par.fromObject(object.ps[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connective_used != null)
                message.connective_used = Boolean(object.connective_used);
            return message;
        };

        /**
         * Creates a plain object from a ETuple message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ETuple
         * @static
         * @param {ETuple} message ETuple
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ETuple.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ps = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connective_used = false;
            }
            if (message.ps && message.ps.length) {
                object.ps = [];
                for (var j = 0; j < message.ps.length; ++j)
                    object.ps[j] = $root.Par.toObject(message.ps[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                object.connective_used = message.connective_used;
            return object;
        };

        /**
         * Converts this ETuple to JSON.
         * @function toJSON
         * @memberof ETuple
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ETuple.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ETuple;
    })();

    $root.ESet = (function() {

        /**
         * Properties of a ESet.
         * @exports IESet
         * @interface IESet
         * @property {Array.<IPar>|null} [ps] ESet ps
         * @property {Uint8Array|null} [locallyFree] ESet locallyFree
         * @property {boolean|null} [connective_used] ESet connective_used
         * @property {IVar|null} [remainder] ESet remainder
         */

        /**
         * Constructs a new ESet.
         * @exports ESet
         * @classdesc Represents a ESet.
         * @implements IESet
         * @constructor
         * @param {IESet=} [properties] Properties to set
         */
        function ESet(properties) {
            this.ps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESet ps.
         * @member {Array.<IPar>} ps
         * @memberof ESet
         * @instance
         */
        ESet.prototype.ps = $util.emptyArray;

        /**
         * ESet locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof ESet
         * @instance
         */
        ESet.prototype.locallyFree = $util.newBuffer([]);

        /**
         * ESet connective_used.
         * @member {boolean} connective_used
         * @memberof ESet
         * @instance
         */
        ESet.prototype.connective_used = false;

        /**
         * ESet remainder.
         * @member {IVar|null|undefined} remainder
         * @memberof ESet
         * @instance
         */
        ESet.prototype.remainder = null;

        /**
         * Creates a new ESet instance using the specified properties.
         * @function create
         * @memberof ESet
         * @static
         * @param {IESet=} [properties] Properties to set
         * @returns {ESet} ESet instance
         */
        ESet.create = function create(properties) {
            return new ESet(properties);
        };

        /**
         * Encodes the specified ESet message. Does not implicitly {@link ESet.verify|verify} messages.
         * @function encode
         * @memberof ESet
         * @static
         * @param {IESet} message ESet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESet.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ps != null && message.ps.length)
                for (var i = 0; i < message.ps.length; ++i)
                    $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connective_used);
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                $root.Var.encode(message.remainder, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESet message, length delimited. Does not implicitly {@link ESet.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ESet
         * @static
         * @param {IESet} message ESet message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESet.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESet message from the specified reader or buffer.
         * @function decode
         * @memberof ESet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ESet} ESet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESet.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ESet();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ps && message.ps.length))
                        message.ps = [];
                    message.ps.push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.locallyFree = reader.bytes();
                    break;
                case 4:
                    message.connective_used = reader.bool();
                    break;
                case 5:
                    message.remainder = $root.Var.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESet message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ESet
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ESet} ESet
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESet.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESet message.
         * @function verify
         * @memberof ESet
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESet.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ps != null && message.hasOwnProperty("ps")) {
                if (!Array.isArray(message.ps))
                    return "ps: array expected";
                for (var i = 0; i < message.ps.length; ++i) {
                    var error = $root.Par.verify(message.ps[i]);
                    if (error)
                        return "ps." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                if (typeof message.connective_used !== "boolean")
                    return "connective_used: boolean expected";
            if (message.remainder != null && message.hasOwnProperty("remainder")) {
                var error = $root.Var.verify(message.remainder);
                if (error)
                    return "remainder." + error;
            }
            return null;
        };

        /**
         * Creates a ESet message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ESet
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ESet} ESet
         */
        ESet.fromObject = function fromObject(object) {
            if (object instanceof $root.ESet)
                return object;
            var message = new $root.ESet();
            if (object.ps) {
                if (!Array.isArray(object.ps))
                    throw TypeError(".ESet.ps: array expected");
                message.ps = [];
                for (var i = 0; i < object.ps.length; ++i) {
                    if (typeof object.ps[i] !== "object")
                        throw TypeError(".ESet.ps: object expected");
                    message.ps[i] = $root.Par.fromObject(object.ps[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connective_used != null)
                message.connective_used = Boolean(object.connective_used);
            if (object.remainder != null) {
                if (typeof object.remainder !== "object")
                    throw TypeError(".ESet.remainder: object expected");
                message.remainder = $root.Var.fromObject(object.remainder);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESet message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ESet
         * @static
         * @param {ESet} message ESet
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESet.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ps = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connective_used = false;
                object.remainder = null;
            }
            if (message.ps && message.ps.length) {
                object.ps = [];
                for (var j = 0; j < message.ps.length; ++j)
                    object.ps[j] = $root.Par.toObject(message.ps[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                object.connective_used = message.connective_used;
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                object.remainder = $root.Var.toObject(message.remainder, options);
            return object;
        };

        /**
         * Converts this ESet to JSON.
         * @function toJSON
         * @memberof ESet
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESet.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESet;
    })();

    $root.EMap = (function() {

        /**
         * Properties of a EMap.
         * @exports IEMap
         * @interface IEMap
         * @property {Array.<IKeyValuePair>|null} [kvs] EMap kvs
         * @property {Uint8Array|null} [locallyFree] EMap locallyFree
         * @property {boolean|null} [connective_used] EMap connective_used
         * @property {IVar|null} [remainder] EMap remainder
         */

        /**
         * Constructs a new EMap.
         * @exports EMap
         * @classdesc Represents a EMap.
         * @implements IEMap
         * @constructor
         * @param {IEMap=} [properties] Properties to set
         */
        function EMap(properties) {
            this.kvs = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EMap kvs.
         * @member {Array.<IKeyValuePair>} kvs
         * @memberof EMap
         * @instance
         */
        EMap.prototype.kvs = $util.emptyArray;

        /**
         * EMap locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof EMap
         * @instance
         */
        EMap.prototype.locallyFree = $util.newBuffer([]);

        /**
         * EMap connective_used.
         * @member {boolean} connective_used
         * @memberof EMap
         * @instance
         */
        EMap.prototype.connective_used = false;

        /**
         * EMap remainder.
         * @member {IVar|null|undefined} remainder
         * @memberof EMap
         * @instance
         */
        EMap.prototype.remainder = null;

        /**
         * Creates a new EMap instance using the specified properties.
         * @function create
         * @memberof EMap
         * @static
         * @param {IEMap=} [properties] Properties to set
         * @returns {EMap} EMap instance
         */
        EMap.create = function create(properties) {
            return new EMap(properties);
        };

        /**
         * Encodes the specified EMap message. Does not implicitly {@link EMap.verify|verify} messages.
         * @function encode
         * @memberof EMap
         * @static
         * @param {IEMap} message EMap message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMap.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.kvs != null && message.kvs.length)
                for (var i = 0; i < message.kvs.length; ++i)
                    $root.KeyValuePair.encode(message.kvs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connective_used);
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                $root.Var.encode(message.remainder, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EMap message, length delimited. Does not implicitly {@link EMap.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMap
         * @static
         * @param {IEMap} message EMap message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMap.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EMap message from the specified reader or buffer.
         * @function decode
         * @memberof EMap
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMap} EMap
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMap.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMap();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.kvs && message.kvs.length))
                        message.kvs = [];
                    message.kvs.push($root.KeyValuePair.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.locallyFree = reader.bytes();
                    break;
                case 4:
                    message.connective_used = reader.bool();
                    break;
                case 5:
                    message.remainder = $root.Var.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EMap message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMap
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMap} EMap
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMap.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EMap message.
         * @function verify
         * @memberof EMap
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMap.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.kvs != null && message.hasOwnProperty("kvs")) {
                if (!Array.isArray(message.kvs))
                    return "kvs: array expected";
                for (var i = 0; i < message.kvs.length; ++i) {
                    var error = $root.KeyValuePair.verify(message.kvs[i]);
                    if (error)
                        return "kvs." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                if (typeof message.connective_used !== "boolean")
                    return "connective_used: boolean expected";
            if (message.remainder != null && message.hasOwnProperty("remainder")) {
                var error = $root.Var.verify(message.remainder);
                if (error)
                    return "remainder." + error;
            }
            return null;
        };

        /**
         * Creates a EMap message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMap
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMap} EMap
         */
        EMap.fromObject = function fromObject(object) {
            if (object instanceof $root.EMap)
                return object;
            var message = new $root.EMap();
            if (object.kvs) {
                if (!Array.isArray(object.kvs))
                    throw TypeError(".EMap.kvs: array expected");
                message.kvs = [];
                for (var i = 0; i < object.kvs.length; ++i) {
                    if (typeof object.kvs[i] !== "object")
                        throw TypeError(".EMap.kvs: object expected");
                    message.kvs[i] = $root.KeyValuePair.fromObject(object.kvs[i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connective_used != null)
                message.connective_used = Boolean(object.connective_used);
            if (object.remainder != null) {
                if (typeof object.remainder !== "object")
                    throw TypeError(".EMap.remainder: object expected");
                message.remainder = $root.Var.fromObject(object.remainder);
            }
            return message;
        };

        /**
         * Creates a plain object from a EMap message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMap
         * @static
         * @param {EMap} message EMap
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMap.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.kvs = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connective_used = false;
                object.remainder = null;
            }
            if (message.kvs && message.kvs.length) {
                object.kvs = [];
                for (var j = 0; j < message.kvs.length; ++j)
                    object.kvs[j] = $root.KeyValuePair.toObject(message.kvs[j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                object.connective_used = message.connective_used;
            if (message.remainder != null && message.hasOwnProperty("remainder"))
                object.remainder = $root.Var.toObject(message.remainder, options);
            return object;
        };

        /**
         * Converts this EMap to JSON.
         * @function toJSON
         * @memberof EMap
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMap.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EMap;
    })();

    $root.EMethod = (function() {

        /**
         * Properties of a EMethod.
         * @exports IEMethod
         * @interface IEMethod
         * @property {string|null} [methodName] EMethod methodName
         * @property {IPar|null} [target] EMethod target
         * @property {Array.<IPar>|null} ["arguments"] EMethod arguments
         * @property {Uint8Array|null} [locallyFree] EMethod locallyFree
         * @property {boolean|null} [connective_used] EMethod connective_used
         */

        /**
         * Constructs a new EMethod.
         * @exports EMethod
         * @classdesc `target.method(arguments)`
         * @implements IEMethod
         * @constructor
         * @param {IEMethod=} [properties] Properties to set
         */
        function EMethod(properties) {
            this["arguments"] = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EMethod methodName.
         * @member {string} methodName
         * @memberof EMethod
         * @instance
         */
        EMethod.prototype.methodName = "";

        /**
         * EMethod target.
         * @member {IPar|null|undefined} target
         * @memberof EMethod
         * @instance
         */
        EMethod.prototype.target = null;

        /**
         * EMethod arguments.
         * @member {Array.<IPar>} arguments
         * @memberof EMethod
         * @instance
         */
        EMethod.prototype["arguments"] = $util.emptyArray;

        /**
         * EMethod locallyFree.
         * @member {Uint8Array} locallyFree
         * @memberof EMethod
         * @instance
         */
        EMethod.prototype.locallyFree = $util.newBuffer([]);

        /**
         * EMethod connective_used.
         * @member {boolean} connective_used
         * @memberof EMethod
         * @instance
         */
        EMethod.prototype.connective_used = false;

        /**
         * Creates a new EMethod instance using the specified properties.
         * @function create
         * @memberof EMethod
         * @static
         * @param {IEMethod=} [properties] Properties to set
         * @returns {EMethod} EMethod instance
         */
        EMethod.create = function create(properties) {
            return new EMethod(properties);
        };

        /**
         * Encodes the specified EMethod message. Does not implicitly {@link EMethod.verify|verify} messages.
         * @function encode
         * @memberof EMethod
         * @static
         * @param {IEMethod} message EMethod message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMethod.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.methodName != null && message.hasOwnProperty("methodName"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.methodName);
            if (message.target != null && message.hasOwnProperty("target"))
                $root.Par.encode(message.target, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message["arguments"] != null && message["arguments"].length)
                for (var i = 0; i < message["arguments"].length; ++i)
                    $root.Par.encode(message["arguments"][i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.locallyFree);
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.connective_used);
            return writer;
        };

        /**
         * Encodes the specified EMethod message, length delimited. Does not implicitly {@link EMethod.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMethod
         * @static
         * @param {IEMethod} message EMethod message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMethod.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EMethod message from the specified reader or buffer.
         * @function decode
         * @memberof EMethod
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMethod} EMethod
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMethod.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMethod();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.methodName = reader.string();
                    break;
                case 2:
                    message.target = $root.Par.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message["arguments"] && message["arguments"].length))
                        message["arguments"] = [];
                    message["arguments"].push($root.Par.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.locallyFree = reader.bytes();
                    break;
                case 6:
                    message.connective_used = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EMethod message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMethod
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMethod} EMethod
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMethod.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EMethod message.
         * @function verify
         * @memberof EMethod
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMethod.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.methodName != null && message.hasOwnProperty("methodName"))
                if (!$util.isString(message.methodName))
                    return "methodName: string expected";
            if (message.target != null && message.hasOwnProperty("target")) {
                var error = $root.Par.verify(message.target);
                if (error)
                    return "target." + error;
            }
            if (message["arguments"] != null && message.hasOwnProperty("arguments")) {
                if (!Array.isArray(message["arguments"]))
                    return "arguments: array expected";
                for (var i = 0; i < message["arguments"].length; ++i) {
                    var error = $root.Par.verify(message["arguments"][i]);
                    if (error)
                        return "arguments." + error;
                }
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                if (!(message.locallyFree && typeof message.locallyFree.length === "number" || $util.isString(message.locallyFree)))
                    return "locallyFree: buffer expected";
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                if (typeof message.connective_used !== "boolean")
                    return "connective_used: boolean expected";
            return null;
        };

        /**
         * Creates a EMethod message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMethod
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMethod} EMethod
         */
        EMethod.fromObject = function fromObject(object) {
            if (object instanceof $root.EMethod)
                return object;
            var message = new $root.EMethod();
            if (object.methodName != null)
                message.methodName = String(object.methodName);
            if (object.target != null) {
                if (typeof object.target !== "object")
                    throw TypeError(".EMethod.target: object expected");
                message.target = $root.Par.fromObject(object.target);
            }
            if (object["arguments"]) {
                if (!Array.isArray(object["arguments"]))
                    throw TypeError(".EMethod.arguments: array expected");
                message["arguments"] = [];
                for (var i = 0; i < object["arguments"].length; ++i) {
                    if (typeof object["arguments"][i] !== "object")
                        throw TypeError(".EMethod.arguments: object expected");
                    message["arguments"][i] = $root.Par.fromObject(object["arguments"][i]);
                }
            }
            if (object.locallyFree != null)
                if (typeof object.locallyFree === "string")
                    $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);
                else if (object.locallyFree.length)
                    message.locallyFree = object.locallyFree;
            if (object.connective_used != null)
                message.connective_used = Boolean(object.connective_used);
            return message;
        };

        /**
         * Creates a plain object from a EMethod message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMethod
         * @static
         * @param {EMethod} message EMethod
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMethod.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object["arguments"] = [];
            if (options.defaults) {
                object.methodName = "";
                object.target = null;
                if (options.bytes === String)
                    object.locallyFree = "";
                else {
                    object.locallyFree = [];
                    if (options.bytes !== Array)
                        object.locallyFree = $util.newBuffer(object.locallyFree);
                }
                object.connective_used = false;
            }
            if (message.methodName != null && message.hasOwnProperty("methodName"))
                object.methodName = message.methodName;
            if (message.target != null && message.hasOwnProperty("target"))
                object.target = $root.Par.toObject(message.target, options);
            if (message["arguments"] && message["arguments"].length) {
                object["arguments"] = [];
                for (var j = 0; j < message["arguments"].length; ++j)
                    object["arguments"][j] = $root.Par.toObject(message["arguments"][j], options);
            }
            if (message.locallyFree != null && message.hasOwnProperty("locallyFree"))
                object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;
            if (message.connective_used != null && message.hasOwnProperty("connective_used"))
                object.connective_used = message.connective_used;
            return object;
        };

        /**
         * Converts this EMethod to JSON.
         * @function toJSON
         * @memberof EMethod
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMethod.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EMethod;
    })();

    $root.KeyValuePair = (function() {

        /**
         * Properties of a KeyValuePair.
         * @exports IKeyValuePair
         * @interface IKeyValuePair
         * @property {IPar|null} [key] KeyValuePair key
         * @property {IPar|null} [value] KeyValuePair value
         */

        /**
         * Constructs a new KeyValuePair.
         * @exports KeyValuePair
         * @classdesc Represents a KeyValuePair.
         * @implements IKeyValuePair
         * @constructor
         * @param {IKeyValuePair=} [properties] Properties to set
         */
        function KeyValuePair(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * KeyValuePair key.
         * @member {IPar|null|undefined} key
         * @memberof KeyValuePair
         * @instance
         */
        KeyValuePair.prototype.key = null;

        /**
         * KeyValuePair value.
         * @member {IPar|null|undefined} value
         * @memberof KeyValuePair
         * @instance
         */
        KeyValuePair.prototype.value = null;

        /**
         * Creates a new KeyValuePair instance using the specified properties.
         * @function create
         * @memberof KeyValuePair
         * @static
         * @param {IKeyValuePair=} [properties] Properties to set
         * @returns {KeyValuePair} KeyValuePair instance
         */
        KeyValuePair.create = function create(properties) {
            return new KeyValuePair(properties);
        };

        /**
         * Encodes the specified KeyValuePair message. Does not implicitly {@link KeyValuePair.verify|verify} messages.
         * @function encode
         * @memberof KeyValuePair
         * @static
         * @param {IKeyValuePair} message KeyValuePair message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        KeyValuePair.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && message.hasOwnProperty("key"))
                $root.Par.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.value != null && message.hasOwnProperty("value"))
                $root.Par.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified KeyValuePair message, length delimited. Does not implicitly {@link KeyValuePair.verify|verify} messages.
         * @function encodeDelimited
         * @memberof KeyValuePair
         * @static
         * @param {IKeyValuePair} message KeyValuePair message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        KeyValuePair.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a KeyValuePair message from the specified reader or buffer.
         * @function decode
         * @memberof KeyValuePair
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {KeyValuePair} KeyValuePair
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        KeyValuePair.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.KeyValuePair();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.value = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a KeyValuePair message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof KeyValuePair
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {KeyValuePair} KeyValuePair
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        KeyValuePair.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a KeyValuePair message.
         * @function verify
         * @memberof KeyValuePair
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        KeyValuePair.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key")) {
                var error = $root.Par.verify(message.key);
                if (error)
                    return "key." + error;
            }
            if (message.value != null && message.hasOwnProperty("value")) {
                var error = $root.Par.verify(message.value);
                if (error)
                    return "value." + error;
            }
            return null;
        };

        /**
         * Creates a KeyValuePair message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof KeyValuePair
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {KeyValuePair} KeyValuePair
         */
        KeyValuePair.fromObject = function fromObject(object) {
            if (object instanceof $root.KeyValuePair)
                return object;
            var message = new $root.KeyValuePair();
            if (object.key != null) {
                if (typeof object.key !== "object")
                    throw TypeError(".KeyValuePair.key: object expected");
                message.key = $root.Par.fromObject(object.key);
            }
            if (object.value != null) {
                if (typeof object.value !== "object")
                    throw TypeError(".KeyValuePair.value: object expected");
                message.value = $root.Par.fromObject(object.value);
            }
            return message;
        };

        /**
         * Creates a plain object from a KeyValuePair message. Also converts values to other types if specified.
         * @function toObject
         * @memberof KeyValuePair
         * @static
         * @param {KeyValuePair} message KeyValuePair
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        KeyValuePair.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.key = null;
                object.value = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = $root.Par.toObject(message.key, options);
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = $root.Par.toObject(message.value, options);
            return object;
        };

        /**
         * Converts this KeyValuePair to JSON.
         * @function toJSON
         * @memberof KeyValuePair
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        KeyValuePair.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return KeyValuePair;
    })();

    $root.EVar = (function() {

        /**
         * Properties of a EVar.
         * @exports IEVar
         * @interface IEVar
         * @property {IVar|null} [v] EVar v
         */

        /**
         * Constructs a new EVar.
         * @exports EVar
         * @classdesc Represents a EVar.
         * @implements IEVar
         * @constructor
         * @param {IEVar=} [properties] Properties to set
         */
        function EVar(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EVar v.
         * @member {IVar|null|undefined} v
         * @memberof EVar
         * @instance
         */
        EVar.prototype.v = null;

        /**
         * Creates a new EVar instance using the specified properties.
         * @function create
         * @memberof EVar
         * @static
         * @param {IEVar=} [properties] Properties to set
         * @returns {EVar} EVar instance
         */
        EVar.create = function create(properties) {
            return new EVar(properties);
        };

        /**
         * Encodes the specified EVar message. Does not implicitly {@link EVar.verify|verify} messages.
         * @function encode
         * @memberof EVar
         * @static
         * @param {IEVar} message EVar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EVar.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.v != null && message.hasOwnProperty("v"))
                $root.Var.encode(message.v, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EVar message, length delimited. Does not implicitly {@link EVar.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EVar
         * @static
         * @param {IEVar} message EVar message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EVar.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EVar message from the specified reader or buffer.
         * @function decode
         * @memberof EVar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EVar} EVar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EVar.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EVar();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.v = $root.Var.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EVar message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EVar
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EVar} EVar
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EVar.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EVar message.
         * @function verify
         * @memberof EVar
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EVar.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.v != null && message.hasOwnProperty("v")) {
                var error = $root.Var.verify(message.v);
                if (error)
                    return "v." + error;
            }
            return null;
        };

        /**
         * Creates a EVar message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EVar
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EVar} EVar
         */
        EVar.fromObject = function fromObject(object) {
            if (object instanceof $root.EVar)
                return object;
            var message = new $root.EVar();
            if (object.v != null) {
                if (typeof object.v !== "object")
                    throw TypeError(".EVar.v: object expected");
                message.v = $root.Var.fromObject(object.v);
            }
            return message;
        };

        /**
         * Creates a plain object from a EVar message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EVar
         * @static
         * @param {EVar} message EVar
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EVar.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.v = null;
            if (message.v != null && message.hasOwnProperty("v"))
                object.v = $root.Var.toObject(message.v, options);
            return object;
        };

        /**
         * Converts this EVar to JSON.
         * @function toJSON
         * @memberof EVar
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EVar.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EVar;
    })();

    $root.ENot = (function() {

        /**
         * Properties of a ENot.
         * @exports IENot
         * @interface IENot
         * @property {IPar|null} [p] ENot p
         */

        /**
         * Constructs a new ENot.
         * @exports ENot
         * @classdesc Represents a ENot.
         * @implements IENot
         * @constructor
         * @param {IENot=} [properties] Properties to set
         */
        function ENot(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENot p.
         * @member {IPar|null|undefined} p
         * @memberof ENot
         * @instance
         */
        ENot.prototype.p = null;

        /**
         * Creates a new ENot instance using the specified properties.
         * @function create
         * @memberof ENot
         * @static
         * @param {IENot=} [properties] Properties to set
         * @returns {ENot} ENot instance
         */
        ENot.create = function create(properties) {
            return new ENot(properties);
        };

        /**
         * Encodes the specified ENot message. Does not implicitly {@link ENot.verify|verify} messages.
         * @function encode
         * @memberof ENot
         * @static
         * @param {IENot} message ENot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENot.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p != null && message.hasOwnProperty("p"))
                $root.Par.encode(message.p, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ENot message, length delimited. Does not implicitly {@link ENot.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ENot
         * @static
         * @param {IENot} message ENot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENot.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENot message from the specified reader or buffer.
         * @function decode
         * @memberof ENot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ENot} ENot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENot.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ENot();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENot message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ENot
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ENot} ENot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENot.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENot message.
         * @function verify
         * @memberof ENot
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENot.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p != null && message.hasOwnProperty("p")) {
                var error = $root.Par.verify(message.p);
                if (error)
                    return "p." + error;
            }
            return null;
        };

        /**
         * Creates a ENot message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ENot
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ENot} ENot
         */
        ENot.fromObject = function fromObject(object) {
            if (object instanceof $root.ENot)
                return object;
            var message = new $root.ENot();
            if (object.p != null) {
                if (typeof object.p !== "object")
                    throw TypeError(".ENot.p: object expected");
                message.p = $root.Par.fromObject(object.p);
            }
            return message;
        };

        /**
         * Creates a plain object from a ENot message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ENot
         * @static
         * @param {ENot} message ENot
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENot.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.p = null;
            if (message.p != null && message.hasOwnProperty("p"))
                object.p = $root.Par.toObject(message.p, options);
            return object;
        };

        /**
         * Converts this ENot to JSON.
         * @function toJSON
         * @memberof ENot
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENot.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENot;
    })();

    $root.ENeg = (function() {

        /**
         * Properties of a ENeg.
         * @exports IENeg
         * @interface IENeg
         * @property {IPar|null} [p] ENeg p
         */

        /**
         * Constructs a new ENeg.
         * @exports ENeg
         * @classdesc Represents a ENeg.
         * @implements IENeg
         * @constructor
         * @param {IENeg=} [properties] Properties to set
         */
        function ENeg(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENeg p.
         * @member {IPar|null|undefined} p
         * @memberof ENeg
         * @instance
         */
        ENeg.prototype.p = null;

        /**
         * Creates a new ENeg instance using the specified properties.
         * @function create
         * @memberof ENeg
         * @static
         * @param {IENeg=} [properties] Properties to set
         * @returns {ENeg} ENeg instance
         */
        ENeg.create = function create(properties) {
            return new ENeg(properties);
        };

        /**
         * Encodes the specified ENeg message. Does not implicitly {@link ENeg.verify|verify} messages.
         * @function encode
         * @memberof ENeg
         * @static
         * @param {IENeg} message ENeg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENeg.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p != null && message.hasOwnProperty("p"))
                $root.Par.encode(message.p, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ENeg message, length delimited. Does not implicitly {@link ENeg.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ENeg
         * @static
         * @param {IENeg} message ENeg message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENeg.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENeg message from the specified reader or buffer.
         * @function decode
         * @memberof ENeg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ENeg} ENeg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENeg.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ENeg();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENeg message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ENeg
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ENeg} ENeg
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENeg.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENeg message.
         * @function verify
         * @memberof ENeg
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENeg.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p != null && message.hasOwnProperty("p")) {
                var error = $root.Par.verify(message.p);
                if (error)
                    return "p." + error;
            }
            return null;
        };

        /**
         * Creates a ENeg message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ENeg
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ENeg} ENeg
         */
        ENeg.fromObject = function fromObject(object) {
            if (object instanceof $root.ENeg)
                return object;
            var message = new $root.ENeg();
            if (object.p != null) {
                if (typeof object.p !== "object")
                    throw TypeError(".ENeg.p: object expected");
                message.p = $root.Par.fromObject(object.p);
            }
            return message;
        };

        /**
         * Creates a plain object from a ENeg message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ENeg
         * @static
         * @param {ENeg} message ENeg
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENeg.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.p = null;
            if (message.p != null && message.hasOwnProperty("p"))
                object.p = $root.Par.toObject(message.p, options);
            return object;
        };

        /**
         * Converts this ENeg to JSON.
         * @function toJSON
         * @memberof ENeg
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENeg.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENeg;
    })();

    $root.EMult = (function() {

        /**
         * Properties of a EMult.
         * @exports IEMult
         * @interface IEMult
         * @property {IPar|null} [p1] EMult p1
         * @property {IPar|null} [p2] EMult p2
         */

        /**
         * Constructs a new EMult.
         * @exports EMult
         * @classdesc Represents a EMult.
         * @implements IEMult
         * @constructor
         * @param {IEMult=} [properties] Properties to set
         */
        function EMult(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EMult p1.
         * @member {IPar|null|undefined} p1
         * @memberof EMult
         * @instance
         */
        EMult.prototype.p1 = null;

        /**
         * EMult p2.
         * @member {IPar|null|undefined} p2
         * @memberof EMult
         * @instance
         */
        EMult.prototype.p2 = null;

        /**
         * Creates a new EMult instance using the specified properties.
         * @function create
         * @memberof EMult
         * @static
         * @param {IEMult=} [properties] Properties to set
         * @returns {EMult} EMult instance
         */
        EMult.create = function create(properties) {
            return new EMult(properties);
        };

        /**
         * Encodes the specified EMult message. Does not implicitly {@link EMult.verify|verify} messages.
         * @function encode
         * @memberof EMult
         * @static
         * @param {IEMult} message EMult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMult.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EMult message, length delimited. Does not implicitly {@link EMult.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMult
         * @static
         * @param {IEMult} message EMult message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMult.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EMult message from the specified reader or buffer.
         * @function decode
         * @memberof EMult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMult} EMult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMult.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMult();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EMult message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMult
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMult} EMult
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMult.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EMult message.
         * @function verify
         * @memberof EMult
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMult.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EMult message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMult
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMult} EMult
         */
        EMult.fromObject = function fromObject(object) {
            if (object instanceof $root.EMult)
                return object;
            var message = new $root.EMult();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EMult.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EMult.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EMult message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMult
         * @static
         * @param {EMult} message EMult
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMult.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EMult to JSON.
         * @function toJSON
         * @memberof EMult
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMult.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EMult;
    })();

    $root.EDiv = (function() {

        /**
         * Properties of a EDiv.
         * @exports IEDiv
         * @interface IEDiv
         * @property {IPar|null} [p1] EDiv p1
         * @property {IPar|null} [p2] EDiv p2
         */

        /**
         * Constructs a new EDiv.
         * @exports EDiv
         * @classdesc Represents a EDiv.
         * @implements IEDiv
         * @constructor
         * @param {IEDiv=} [properties] Properties to set
         */
        function EDiv(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EDiv p1.
         * @member {IPar|null|undefined} p1
         * @memberof EDiv
         * @instance
         */
        EDiv.prototype.p1 = null;

        /**
         * EDiv p2.
         * @member {IPar|null|undefined} p2
         * @memberof EDiv
         * @instance
         */
        EDiv.prototype.p2 = null;

        /**
         * Creates a new EDiv instance using the specified properties.
         * @function create
         * @memberof EDiv
         * @static
         * @param {IEDiv=} [properties] Properties to set
         * @returns {EDiv} EDiv instance
         */
        EDiv.create = function create(properties) {
            return new EDiv(properties);
        };

        /**
         * Encodes the specified EDiv message. Does not implicitly {@link EDiv.verify|verify} messages.
         * @function encode
         * @memberof EDiv
         * @static
         * @param {IEDiv} message EDiv message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EDiv.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EDiv message, length delimited. Does not implicitly {@link EDiv.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EDiv
         * @static
         * @param {IEDiv} message EDiv message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EDiv.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EDiv message from the specified reader or buffer.
         * @function decode
         * @memberof EDiv
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EDiv} EDiv
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EDiv.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EDiv();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EDiv message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EDiv
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EDiv} EDiv
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EDiv.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EDiv message.
         * @function verify
         * @memberof EDiv
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EDiv.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EDiv message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EDiv
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EDiv} EDiv
         */
        EDiv.fromObject = function fromObject(object) {
            if (object instanceof $root.EDiv)
                return object;
            var message = new $root.EDiv();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EDiv.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EDiv.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EDiv message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EDiv
         * @static
         * @param {EDiv} message EDiv
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EDiv.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EDiv to JSON.
         * @function toJSON
         * @memberof EDiv
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EDiv.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EDiv;
    })();

    $root.EMod = (function() {

        /**
         * Properties of a EMod.
         * @exports IEMod
         * @interface IEMod
         * @property {IPar|null} [p1] EMod p1
         * @property {IPar|null} [p2] EMod p2
         */

        /**
         * Constructs a new EMod.
         * @exports EMod
         * @classdesc Represents a EMod.
         * @implements IEMod
         * @constructor
         * @param {IEMod=} [properties] Properties to set
         */
        function EMod(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EMod p1.
         * @member {IPar|null|undefined} p1
         * @memberof EMod
         * @instance
         */
        EMod.prototype.p1 = null;

        /**
         * EMod p2.
         * @member {IPar|null|undefined} p2
         * @memberof EMod
         * @instance
         */
        EMod.prototype.p2 = null;

        /**
         * Creates a new EMod instance using the specified properties.
         * @function create
         * @memberof EMod
         * @static
         * @param {IEMod=} [properties] Properties to set
         * @returns {EMod} EMod instance
         */
        EMod.create = function create(properties) {
            return new EMod(properties);
        };

        /**
         * Encodes the specified EMod message. Does not implicitly {@link EMod.verify|verify} messages.
         * @function encode
         * @memberof EMod
         * @static
         * @param {IEMod} message EMod message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMod.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EMod message, length delimited. Does not implicitly {@link EMod.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMod
         * @static
         * @param {IEMod} message EMod message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMod.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EMod message from the specified reader or buffer.
         * @function decode
         * @memberof EMod
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMod} EMod
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMod.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMod();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EMod message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMod
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMod} EMod
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMod.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EMod message.
         * @function verify
         * @memberof EMod
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMod.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EMod message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMod
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMod} EMod
         */
        EMod.fromObject = function fromObject(object) {
            if (object instanceof $root.EMod)
                return object;
            var message = new $root.EMod();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EMod.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EMod.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EMod message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMod
         * @static
         * @param {EMod} message EMod
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMod.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EMod to JSON.
         * @function toJSON
         * @memberof EMod
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMod.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EMod;
    })();

    $root.EPlus = (function() {

        /**
         * Properties of a EPlus.
         * @exports IEPlus
         * @interface IEPlus
         * @property {IPar|null} [p1] EPlus p1
         * @property {IPar|null} [p2] EPlus p2
         */

        /**
         * Constructs a new EPlus.
         * @exports EPlus
         * @classdesc Represents a EPlus.
         * @implements IEPlus
         * @constructor
         * @param {IEPlus=} [properties] Properties to set
         */
        function EPlus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EPlus p1.
         * @member {IPar|null|undefined} p1
         * @memberof EPlus
         * @instance
         */
        EPlus.prototype.p1 = null;

        /**
         * EPlus p2.
         * @member {IPar|null|undefined} p2
         * @memberof EPlus
         * @instance
         */
        EPlus.prototype.p2 = null;

        /**
         * Creates a new EPlus instance using the specified properties.
         * @function create
         * @memberof EPlus
         * @static
         * @param {IEPlus=} [properties] Properties to set
         * @returns {EPlus} EPlus instance
         */
        EPlus.create = function create(properties) {
            return new EPlus(properties);
        };

        /**
         * Encodes the specified EPlus message. Does not implicitly {@link EPlus.verify|verify} messages.
         * @function encode
         * @memberof EPlus
         * @static
         * @param {IEPlus} message EPlus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPlus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EPlus message, length delimited. Does not implicitly {@link EPlus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EPlus
         * @static
         * @param {IEPlus} message EPlus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPlus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EPlus message from the specified reader or buffer.
         * @function decode
         * @memberof EPlus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EPlus} EPlus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPlus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EPlus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EPlus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EPlus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EPlus} EPlus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPlus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EPlus message.
         * @function verify
         * @memberof EPlus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EPlus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EPlus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EPlus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EPlus} EPlus
         */
        EPlus.fromObject = function fromObject(object) {
            if (object instanceof $root.EPlus)
                return object;
            var message = new $root.EPlus();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EPlus.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EPlus.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EPlus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EPlus
         * @static
         * @param {EPlus} message EPlus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EPlus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EPlus to JSON.
         * @function toJSON
         * @memberof EPlus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EPlus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EPlus;
    })();

    $root.EMinus = (function() {

        /**
         * Properties of a EMinus.
         * @exports IEMinus
         * @interface IEMinus
         * @property {IPar|null} [p1] EMinus p1
         * @property {IPar|null} [p2] EMinus p2
         */

        /**
         * Constructs a new EMinus.
         * @exports EMinus
         * @classdesc Represents a EMinus.
         * @implements IEMinus
         * @constructor
         * @param {IEMinus=} [properties] Properties to set
         */
        function EMinus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EMinus p1.
         * @member {IPar|null|undefined} p1
         * @memberof EMinus
         * @instance
         */
        EMinus.prototype.p1 = null;

        /**
         * EMinus p2.
         * @member {IPar|null|undefined} p2
         * @memberof EMinus
         * @instance
         */
        EMinus.prototype.p2 = null;

        /**
         * Creates a new EMinus instance using the specified properties.
         * @function create
         * @memberof EMinus
         * @static
         * @param {IEMinus=} [properties] Properties to set
         * @returns {EMinus} EMinus instance
         */
        EMinus.create = function create(properties) {
            return new EMinus(properties);
        };

        /**
         * Encodes the specified EMinus message. Does not implicitly {@link EMinus.verify|verify} messages.
         * @function encode
         * @memberof EMinus
         * @static
         * @param {IEMinus} message EMinus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMinus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EMinus message, length delimited. Does not implicitly {@link EMinus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMinus
         * @static
         * @param {IEMinus} message EMinus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMinus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EMinus message from the specified reader or buffer.
         * @function decode
         * @memberof EMinus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMinus} EMinus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMinus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMinus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EMinus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMinus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMinus} EMinus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMinus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EMinus message.
         * @function verify
         * @memberof EMinus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMinus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EMinus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMinus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMinus} EMinus
         */
        EMinus.fromObject = function fromObject(object) {
            if (object instanceof $root.EMinus)
                return object;
            var message = new $root.EMinus();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EMinus.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EMinus.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EMinus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMinus
         * @static
         * @param {EMinus} message EMinus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMinus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EMinus to JSON.
         * @function toJSON
         * @memberof EMinus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMinus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EMinus;
    })();

    $root.ELt = (function() {

        /**
         * Properties of a ELt.
         * @exports IELt
         * @interface IELt
         * @property {IPar|null} [p1] ELt p1
         * @property {IPar|null} [p2] ELt p2
         */

        /**
         * Constructs a new ELt.
         * @exports ELt
         * @classdesc Represents a ELt.
         * @implements IELt
         * @constructor
         * @param {IELt=} [properties] Properties to set
         */
        function ELt(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ELt p1.
         * @member {IPar|null|undefined} p1
         * @memberof ELt
         * @instance
         */
        ELt.prototype.p1 = null;

        /**
         * ELt p2.
         * @member {IPar|null|undefined} p2
         * @memberof ELt
         * @instance
         */
        ELt.prototype.p2 = null;

        /**
         * Creates a new ELt instance using the specified properties.
         * @function create
         * @memberof ELt
         * @static
         * @param {IELt=} [properties] Properties to set
         * @returns {ELt} ELt instance
         */
        ELt.create = function create(properties) {
            return new ELt(properties);
        };

        /**
         * Encodes the specified ELt message. Does not implicitly {@link ELt.verify|verify} messages.
         * @function encode
         * @memberof ELt
         * @static
         * @param {IELt} message ELt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ELt.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ELt message, length delimited. Does not implicitly {@link ELt.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ELt
         * @static
         * @param {IELt} message ELt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ELt.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ELt message from the specified reader or buffer.
         * @function decode
         * @memberof ELt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ELt} ELt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ELt.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ELt();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ELt message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ELt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ELt} ELt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ELt.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ELt message.
         * @function verify
         * @memberof ELt
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ELt.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a ELt message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ELt
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ELt} ELt
         */
        ELt.fromObject = function fromObject(object) {
            if (object instanceof $root.ELt)
                return object;
            var message = new $root.ELt();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".ELt.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".ELt.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a ELt message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ELt
         * @static
         * @param {ELt} message ELt
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ELt.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this ELt to JSON.
         * @function toJSON
         * @memberof ELt
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ELt.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ELt;
    })();

    $root.ELte = (function() {

        /**
         * Properties of a ELte.
         * @exports IELte
         * @interface IELte
         * @property {IPar|null} [p1] ELte p1
         * @property {IPar|null} [p2] ELte p2
         */

        /**
         * Constructs a new ELte.
         * @exports ELte
         * @classdesc Represents a ELte.
         * @implements IELte
         * @constructor
         * @param {IELte=} [properties] Properties to set
         */
        function ELte(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ELte p1.
         * @member {IPar|null|undefined} p1
         * @memberof ELte
         * @instance
         */
        ELte.prototype.p1 = null;

        /**
         * ELte p2.
         * @member {IPar|null|undefined} p2
         * @memberof ELte
         * @instance
         */
        ELte.prototype.p2 = null;

        /**
         * Creates a new ELte instance using the specified properties.
         * @function create
         * @memberof ELte
         * @static
         * @param {IELte=} [properties] Properties to set
         * @returns {ELte} ELte instance
         */
        ELte.create = function create(properties) {
            return new ELte(properties);
        };

        /**
         * Encodes the specified ELte message. Does not implicitly {@link ELte.verify|verify} messages.
         * @function encode
         * @memberof ELte
         * @static
         * @param {IELte} message ELte message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ELte.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ELte message, length delimited. Does not implicitly {@link ELte.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ELte
         * @static
         * @param {IELte} message ELte message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ELte.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ELte message from the specified reader or buffer.
         * @function decode
         * @memberof ELte
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ELte} ELte
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ELte.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ELte();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ELte message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ELte
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ELte} ELte
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ELte.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ELte message.
         * @function verify
         * @memberof ELte
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ELte.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a ELte message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ELte
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ELte} ELte
         */
        ELte.fromObject = function fromObject(object) {
            if (object instanceof $root.ELte)
                return object;
            var message = new $root.ELte();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".ELte.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".ELte.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a ELte message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ELte
         * @static
         * @param {ELte} message ELte
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ELte.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this ELte to JSON.
         * @function toJSON
         * @memberof ELte
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ELte.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ELte;
    })();

    $root.EGt = (function() {

        /**
         * Properties of a EGt.
         * @exports IEGt
         * @interface IEGt
         * @property {IPar|null} [p1] EGt p1
         * @property {IPar|null} [p2] EGt p2
         */

        /**
         * Constructs a new EGt.
         * @exports EGt
         * @classdesc Represents a EGt.
         * @implements IEGt
         * @constructor
         * @param {IEGt=} [properties] Properties to set
         */
        function EGt(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EGt p1.
         * @member {IPar|null|undefined} p1
         * @memberof EGt
         * @instance
         */
        EGt.prototype.p1 = null;

        /**
         * EGt p2.
         * @member {IPar|null|undefined} p2
         * @memberof EGt
         * @instance
         */
        EGt.prototype.p2 = null;

        /**
         * Creates a new EGt instance using the specified properties.
         * @function create
         * @memberof EGt
         * @static
         * @param {IEGt=} [properties] Properties to set
         * @returns {EGt} EGt instance
         */
        EGt.create = function create(properties) {
            return new EGt(properties);
        };

        /**
         * Encodes the specified EGt message. Does not implicitly {@link EGt.verify|verify} messages.
         * @function encode
         * @memberof EGt
         * @static
         * @param {IEGt} message EGt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EGt.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EGt message, length delimited. Does not implicitly {@link EGt.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EGt
         * @static
         * @param {IEGt} message EGt message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EGt.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EGt message from the specified reader or buffer.
         * @function decode
         * @memberof EGt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EGt} EGt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EGt.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EGt();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EGt message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EGt
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EGt} EGt
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EGt.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EGt message.
         * @function verify
         * @memberof EGt
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EGt.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EGt message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EGt
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EGt} EGt
         */
        EGt.fromObject = function fromObject(object) {
            if (object instanceof $root.EGt)
                return object;
            var message = new $root.EGt();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EGt.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EGt.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EGt message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EGt
         * @static
         * @param {EGt} message EGt
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EGt.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EGt to JSON.
         * @function toJSON
         * @memberof EGt
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EGt.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EGt;
    })();

    $root.EGte = (function() {

        /**
         * Properties of a EGte.
         * @exports IEGte
         * @interface IEGte
         * @property {IPar|null} [p1] EGte p1
         * @property {IPar|null} [p2] EGte p2
         */

        /**
         * Constructs a new EGte.
         * @exports EGte
         * @classdesc Represents a EGte.
         * @implements IEGte
         * @constructor
         * @param {IEGte=} [properties] Properties to set
         */
        function EGte(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EGte p1.
         * @member {IPar|null|undefined} p1
         * @memberof EGte
         * @instance
         */
        EGte.prototype.p1 = null;

        /**
         * EGte p2.
         * @member {IPar|null|undefined} p2
         * @memberof EGte
         * @instance
         */
        EGte.prototype.p2 = null;

        /**
         * Creates a new EGte instance using the specified properties.
         * @function create
         * @memberof EGte
         * @static
         * @param {IEGte=} [properties] Properties to set
         * @returns {EGte} EGte instance
         */
        EGte.create = function create(properties) {
            return new EGte(properties);
        };

        /**
         * Encodes the specified EGte message. Does not implicitly {@link EGte.verify|verify} messages.
         * @function encode
         * @memberof EGte
         * @static
         * @param {IEGte} message EGte message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EGte.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EGte message, length delimited. Does not implicitly {@link EGte.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EGte
         * @static
         * @param {IEGte} message EGte message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EGte.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EGte message from the specified reader or buffer.
         * @function decode
         * @memberof EGte
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EGte} EGte
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EGte.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EGte();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EGte message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EGte
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EGte} EGte
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EGte.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EGte message.
         * @function verify
         * @memberof EGte
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EGte.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EGte message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EGte
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EGte} EGte
         */
        EGte.fromObject = function fromObject(object) {
            if (object instanceof $root.EGte)
                return object;
            var message = new $root.EGte();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EGte.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EGte.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EGte message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EGte
         * @static
         * @param {EGte} message EGte
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EGte.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EGte to JSON.
         * @function toJSON
         * @memberof EGte
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EGte.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EGte;
    })();

    $root.EEq = (function() {

        /**
         * Properties of a EEq.
         * @exports IEEq
         * @interface IEEq
         * @property {IPar|null} [p1] EEq p1
         * @property {IPar|null} [p2] EEq p2
         */

        /**
         * Constructs a new EEq.
         * @exports EEq
         * @classdesc Represents a EEq.
         * @implements IEEq
         * @constructor
         * @param {IEEq=} [properties] Properties to set
         */
        function EEq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EEq p1.
         * @member {IPar|null|undefined} p1
         * @memberof EEq
         * @instance
         */
        EEq.prototype.p1 = null;

        /**
         * EEq p2.
         * @member {IPar|null|undefined} p2
         * @memberof EEq
         * @instance
         */
        EEq.prototype.p2 = null;

        /**
         * Creates a new EEq instance using the specified properties.
         * @function create
         * @memberof EEq
         * @static
         * @param {IEEq=} [properties] Properties to set
         * @returns {EEq} EEq instance
         */
        EEq.create = function create(properties) {
            return new EEq(properties);
        };

        /**
         * Encodes the specified EEq message. Does not implicitly {@link EEq.verify|verify} messages.
         * @function encode
         * @memberof EEq
         * @static
         * @param {IEEq} message EEq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EEq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EEq message, length delimited. Does not implicitly {@link EEq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EEq
         * @static
         * @param {IEEq} message EEq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EEq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EEq message from the specified reader or buffer.
         * @function decode
         * @memberof EEq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EEq} EEq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EEq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EEq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EEq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EEq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EEq} EEq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EEq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EEq message.
         * @function verify
         * @memberof EEq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EEq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EEq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EEq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EEq} EEq
         */
        EEq.fromObject = function fromObject(object) {
            if (object instanceof $root.EEq)
                return object;
            var message = new $root.EEq();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EEq.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EEq.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EEq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EEq
         * @static
         * @param {EEq} message EEq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EEq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EEq to JSON.
         * @function toJSON
         * @memberof EEq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EEq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EEq;
    })();

    $root.ENeq = (function() {

        /**
         * Properties of a ENeq.
         * @exports IENeq
         * @interface IENeq
         * @property {IPar|null} [p1] ENeq p1
         * @property {IPar|null} [p2] ENeq p2
         */

        /**
         * Constructs a new ENeq.
         * @exports ENeq
         * @classdesc Represents a ENeq.
         * @implements IENeq
         * @constructor
         * @param {IENeq=} [properties] Properties to set
         */
        function ENeq(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENeq p1.
         * @member {IPar|null|undefined} p1
         * @memberof ENeq
         * @instance
         */
        ENeq.prototype.p1 = null;

        /**
         * ENeq p2.
         * @member {IPar|null|undefined} p2
         * @memberof ENeq
         * @instance
         */
        ENeq.prototype.p2 = null;

        /**
         * Creates a new ENeq instance using the specified properties.
         * @function create
         * @memberof ENeq
         * @static
         * @param {IENeq=} [properties] Properties to set
         * @returns {ENeq} ENeq instance
         */
        ENeq.create = function create(properties) {
            return new ENeq(properties);
        };

        /**
         * Encodes the specified ENeq message. Does not implicitly {@link ENeq.verify|verify} messages.
         * @function encode
         * @memberof ENeq
         * @static
         * @param {IENeq} message ENeq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENeq.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ENeq message, length delimited. Does not implicitly {@link ENeq.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ENeq
         * @static
         * @param {IENeq} message ENeq message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENeq.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENeq message from the specified reader or buffer.
         * @function decode
         * @memberof ENeq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ENeq} ENeq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENeq.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ENeq();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENeq message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ENeq
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ENeq} ENeq
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENeq.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENeq message.
         * @function verify
         * @memberof ENeq
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENeq.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a ENeq message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ENeq
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ENeq} ENeq
         */
        ENeq.fromObject = function fromObject(object) {
            if (object instanceof $root.ENeq)
                return object;
            var message = new $root.ENeq();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".ENeq.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".ENeq.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a ENeq message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ENeq
         * @static
         * @param {ENeq} message ENeq
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENeq.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this ENeq to JSON.
         * @function toJSON
         * @memberof ENeq
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENeq.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENeq;
    })();

    $root.EAnd = (function() {

        /**
         * Properties of a EAnd.
         * @exports IEAnd
         * @interface IEAnd
         * @property {IPar|null} [p1] EAnd p1
         * @property {IPar|null} [p2] EAnd p2
         */

        /**
         * Constructs a new EAnd.
         * @exports EAnd
         * @classdesc Represents a EAnd.
         * @implements IEAnd
         * @constructor
         * @param {IEAnd=} [properties] Properties to set
         */
        function EAnd(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EAnd p1.
         * @member {IPar|null|undefined} p1
         * @memberof EAnd
         * @instance
         */
        EAnd.prototype.p1 = null;

        /**
         * EAnd p2.
         * @member {IPar|null|undefined} p2
         * @memberof EAnd
         * @instance
         */
        EAnd.prototype.p2 = null;

        /**
         * Creates a new EAnd instance using the specified properties.
         * @function create
         * @memberof EAnd
         * @static
         * @param {IEAnd=} [properties] Properties to set
         * @returns {EAnd} EAnd instance
         */
        EAnd.create = function create(properties) {
            return new EAnd(properties);
        };

        /**
         * Encodes the specified EAnd message. Does not implicitly {@link EAnd.verify|verify} messages.
         * @function encode
         * @memberof EAnd
         * @static
         * @param {IEAnd} message EAnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EAnd.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EAnd message, length delimited. Does not implicitly {@link EAnd.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EAnd
         * @static
         * @param {IEAnd} message EAnd message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EAnd.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EAnd message from the specified reader or buffer.
         * @function decode
         * @memberof EAnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EAnd} EAnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EAnd.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EAnd();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EAnd message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EAnd
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EAnd} EAnd
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EAnd.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EAnd message.
         * @function verify
         * @memberof EAnd
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EAnd.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EAnd message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EAnd
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EAnd} EAnd
         */
        EAnd.fromObject = function fromObject(object) {
            if (object instanceof $root.EAnd)
                return object;
            var message = new $root.EAnd();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EAnd.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EAnd.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EAnd message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EAnd
         * @static
         * @param {EAnd} message EAnd
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EAnd.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EAnd to JSON.
         * @function toJSON
         * @memberof EAnd
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EAnd.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EAnd;
    })();

    $root.EOr = (function() {

        /**
         * Properties of a EOr.
         * @exports IEOr
         * @interface IEOr
         * @property {IPar|null} [p1] EOr p1
         * @property {IPar|null} [p2] EOr p2
         */

        /**
         * Constructs a new EOr.
         * @exports EOr
         * @classdesc Represents a EOr.
         * @implements IEOr
         * @constructor
         * @param {IEOr=} [properties] Properties to set
         */
        function EOr(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EOr p1.
         * @member {IPar|null|undefined} p1
         * @memberof EOr
         * @instance
         */
        EOr.prototype.p1 = null;

        /**
         * EOr p2.
         * @member {IPar|null|undefined} p2
         * @memberof EOr
         * @instance
         */
        EOr.prototype.p2 = null;

        /**
         * Creates a new EOr instance using the specified properties.
         * @function create
         * @memberof EOr
         * @static
         * @param {IEOr=} [properties] Properties to set
         * @returns {EOr} EOr instance
         */
        EOr.create = function create(properties) {
            return new EOr(properties);
        };

        /**
         * Encodes the specified EOr message. Does not implicitly {@link EOr.verify|verify} messages.
         * @function encode
         * @memberof EOr
         * @static
         * @param {IEOr} message EOr message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EOr.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EOr message, length delimited. Does not implicitly {@link EOr.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EOr
         * @static
         * @param {IEOr} message EOr message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EOr.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EOr message from the specified reader or buffer.
         * @function decode
         * @memberof EOr
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EOr} EOr
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EOr.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EOr();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EOr message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EOr
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EOr} EOr
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EOr.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EOr message.
         * @function verify
         * @memberof EOr
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EOr.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EOr message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EOr
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EOr} EOr
         */
        EOr.fromObject = function fromObject(object) {
            if (object instanceof $root.EOr)
                return object;
            var message = new $root.EOr();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EOr.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EOr.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EOr message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EOr
         * @static
         * @param {EOr} message EOr
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EOr.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EOr to JSON.
         * @function toJSON
         * @memberof EOr
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EOr.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EOr;
    })();

    $root.EMatches = (function() {

        /**
         * Properties of a EMatches.
         * @exports IEMatches
         * @interface IEMatches
         * @property {IPar|null} [target] EMatches target
         * @property {IPar|null} [pattern] EMatches pattern
         */

        /**
         * Constructs a new EMatches.
         * @exports EMatches
         * @classdesc Represents a EMatches.
         * @implements IEMatches
         * @constructor
         * @param {IEMatches=} [properties] Properties to set
         */
        function EMatches(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EMatches target.
         * @member {IPar|null|undefined} target
         * @memberof EMatches
         * @instance
         */
        EMatches.prototype.target = null;

        /**
         * EMatches pattern.
         * @member {IPar|null|undefined} pattern
         * @memberof EMatches
         * @instance
         */
        EMatches.prototype.pattern = null;

        /**
         * Creates a new EMatches instance using the specified properties.
         * @function create
         * @memberof EMatches
         * @static
         * @param {IEMatches=} [properties] Properties to set
         * @returns {EMatches} EMatches instance
         */
        EMatches.create = function create(properties) {
            return new EMatches(properties);
        };

        /**
         * Encodes the specified EMatches message. Does not implicitly {@link EMatches.verify|verify} messages.
         * @function encode
         * @memberof EMatches
         * @static
         * @param {IEMatches} message EMatches message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMatches.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.target != null && message.hasOwnProperty("target"))
                $root.Par.encode(message.target, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                $root.Par.encode(message.pattern, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EMatches message, length delimited. Does not implicitly {@link EMatches.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMatches
         * @static
         * @param {IEMatches} message EMatches message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMatches.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EMatches message from the specified reader or buffer.
         * @function decode
         * @memberof EMatches
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMatches} EMatches
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMatches.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMatches();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.target = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.pattern = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EMatches message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMatches
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMatches} EMatches
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMatches.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EMatches message.
         * @function verify
         * @memberof EMatches
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMatches.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.target != null && message.hasOwnProperty("target")) {
                var error = $root.Par.verify(message.target);
                if (error)
                    return "target." + error;
            }
            if (message.pattern != null && message.hasOwnProperty("pattern")) {
                var error = $root.Par.verify(message.pattern);
                if (error)
                    return "pattern." + error;
            }
            return null;
        };

        /**
         * Creates a EMatches message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMatches
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMatches} EMatches
         */
        EMatches.fromObject = function fromObject(object) {
            if (object instanceof $root.EMatches)
                return object;
            var message = new $root.EMatches();
            if (object.target != null) {
                if (typeof object.target !== "object")
                    throw TypeError(".EMatches.target: object expected");
                message.target = $root.Par.fromObject(object.target);
            }
            if (object.pattern != null) {
                if (typeof object.pattern !== "object")
                    throw TypeError(".EMatches.pattern: object expected");
                message.pattern = $root.Par.fromObject(object.pattern);
            }
            return message;
        };

        /**
         * Creates a plain object from a EMatches message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMatches
         * @static
         * @param {EMatches} message EMatches
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMatches.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.target = null;
                object.pattern = null;
            }
            if (message.target != null && message.hasOwnProperty("target"))
                object.target = $root.Par.toObject(message.target, options);
            if (message.pattern != null && message.hasOwnProperty("pattern"))
                object.pattern = $root.Par.toObject(message.pattern, options);
            return object;
        };

        /**
         * Converts this EMatches to JSON.
         * @function toJSON
         * @memberof EMatches
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMatches.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EMatches;
    })();

    $root.EPercentPercent = (function() {

        /**
         * Properties of a EPercentPercent.
         * @exports IEPercentPercent
         * @interface IEPercentPercent
         * @property {IPar|null} [p1] EPercentPercent p1
         * @property {IPar|null} [p2] EPercentPercent p2
         */

        /**
         * Constructs a new EPercentPercent.
         * @exports EPercentPercent
         * @classdesc String interpolation
         * 
         * `"Hello, {name}" %% {"name": "Bob"}` denotes `"Hello, Bob"`
         * @implements IEPercentPercent
         * @constructor
         * @param {IEPercentPercent=} [properties] Properties to set
         */
        function EPercentPercent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EPercentPercent p1.
         * @member {IPar|null|undefined} p1
         * @memberof EPercentPercent
         * @instance
         */
        EPercentPercent.prototype.p1 = null;

        /**
         * EPercentPercent p2.
         * @member {IPar|null|undefined} p2
         * @memberof EPercentPercent
         * @instance
         */
        EPercentPercent.prototype.p2 = null;

        /**
         * Creates a new EPercentPercent instance using the specified properties.
         * @function create
         * @memberof EPercentPercent
         * @static
         * @param {IEPercentPercent=} [properties] Properties to set
         * @returns {EPercentPercent} EPercentPercent instance
         */
        EPercentPercent.create = function create(properties) {
            return new EPercentPercent(properties);
        };

        /**
         * Encodes the specified EPercentPercent message. Does not implicitly {@link EPercentPercent.verify|verify} messages.
         * @function encode
         * @memberof EPercentPercent
         * @static
         * @param {IEPercentPercent} message EPercentPercent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPercentPercent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EPercentPercent message, length delimited. Does not implicitly {@link EPercentPercent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EPercentPercent
         * @static
         * @param {IEPercentPercent} message EPercentPercent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPercentPercent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EPercentPercent message from the specified reader or buffer.
         * @function decode
         * @memberof EPercentPercent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EPercentPercent} EPercentPercent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPercentPercent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EPercentPercent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EPercentPercent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EPercentPercent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EPercentPercent} EPercentPercent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPercentPercent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EPercentPercent message.
         * @function verify
         * @memberof EPercentPercent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EPercentPercent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EPercentPercent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EPercentPercent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EPercentPercent} EPercentPercent
         */
        EPercentPercent.fromObject = function fromObject(object) {
            if (object instanceof $root.EPercentPercent)
                return object;
            var message = new $root.EPercentPercent();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EPercentPercent.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EPercentPercent.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EPercentPercent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EPercentPercent
         * @static
         * @param {EPercentPercent} message EPercentPercent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EPercentPercent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EPercentPercent to JSON.
         * @function toJSON
         * @memberof EPercentPercent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EPercentPercent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EPercentPercent;
    })();

    $root.EPlusPlus = (function() {

        /**
         * Properties of a EPlusPlus.
         * @exports IEPlusPlus
         * @interface IEPlusPlus
         * @property {IPar|null} [p1] EPlusPlus p1
         * @property {IPar|null} [p2] EPlusPlus p2
         */

        /**
         * Constructs a new EPlusPlus.
         * @exports EPlusPlus
         * @classdesc Represents a EPlusPlus.
         * @implements IEPlusPlus
         * @constructor
         * @param {IEPlusPlus=} [properties] Properties to set
         */
        function EPlusPlus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EPlusPlus p1.
         * @member {IPar|null|undefined} p1
         * @memberof EPlusPlus
         * @instance
         */
        EPlusPlus.prototype.p1 = null;

        /**
         * EPlusPlus p2.
         * @member {IPar|null|undefined} p2
         * @memberof EPlusPlus
         * @instance
         */
        EPlusPlus.prototype.p2 = null;

        /**
         * Creates a new EPlusPlus instance using the specified properties.
         * @function create
         * @memberof EPlusPlus
         * @static
         * @param {IEPlusPlus=} [properties] Properties to set
         * @returns {EPlusPlus} EPlusPlus instance
         */
        EPlusPlus.create = function create(properties) {
            return new EPlusPlus(properties);
        };

        /**
         * Encodes the specified EPlusPlus message. Does not implicitly {@link EPlusPlus.verify|verify} messages.
         * @function encode
         * @memberof EPlusPlus
         * @static
         * @param {IEPlusPlus} message EPlusPlus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPlusPlus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EPlusPlus message, length delimited. Does not implicitly {@link EPlusPlus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EPlusPlus
         * @static
         * @param {IEPlusPlus} message EPlusPlus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EPlusPlus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EPlusPlus message from the specified reader or buffer.
         * @function decode
         * @memberof EPlusPlus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EPlusPlus} EPlusPlus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPlusPlus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EPlusPlus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EPlusPlus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EPlusPlus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EPlusPlus} EPlusPlus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EPlusPlus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EPlusPlus message.
         * @function verify
         * @memberof EPlusPlus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EPlusPlus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EPlusPlus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EPlusPlus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EPlusPlus} EPlusPlus
         */
        EPlusPlus.fromObject = function fromObject(object) {
            if (object instanceof $root.EPlusPlus)
                return object;
            var message = new $root.EPlusPlus();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EPlusPlus.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EPlusPlus.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EPlusPlus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EPlusPlus
         * @static
         * @param {EPlusPlus} message EPlusPlus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EPlusPlus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EPlusPlus to JSON.
         * @function toJSON
         * @memberof EPlusPlus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EPlusPlus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EPlusPlus;
    })();

    $root.EMinusMinus = (function() {

        /**
         * Properties of a EMinusMinus.
         * @exports IEMinusMinus
         * @interface IEMinusMinus
         * @property {IPar|null} [p1] EMinusMinus p1
         * @property {IPar|null} [p2] EMinusMinus p2
         */

        /**
         * Constructs a new EMinusMinus.
         * @exports EMinusMinus
         * @classdesc Represents a EMinusMinus.
         * @implements IEMinusMinus
         * @constructor
         * @param {IEMinusMinus=} [properties] Properties to set
         */
        function EMinusMinus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EMinusMinus p1.
         * @member {IPar|null|undefined} p1
         * @memberof EMinusMinus
         * @instance
         */
        EMinusMinus.prototype.p1 = null;

        /**
         * EMinusMinus p2.
         * @member {IPar|null|undefined} p2
         * @memberof EMinusMinus
         * @instance
         */
        EMinusMinus.prototype.p2 = null;

        /**
         * Creates a new EMinusMinus instance using the specified properties.
         * @function create
         * @memberof EMinusMinus
         * @static
         * @param {IEMinusMinus=} [properties] Properties to set
         * @returns {EMinusMinus} EMinusMinus instance
         */
        EMinusMinus.create = function create(properties) {
            return new EMinusMinus(properties);
        };

        /**
         * Encodes the specified EMinusMinus message. Does not implicitly {@link EMinusMinus.verify|verify} messages.
         * @function encode
         * @memberof EMinusMinus
         * @static
         * @param {IEMinusMinus} message EMinusMinus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMinusMinus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.p1 != null && message.hasOwnProperty("p1"))
                $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.p2 != null && message.hasOwnProperty("p2"))
                $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EMinusMinus message, length delimited. Does not implicitly {@link EMinusMinus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof EMinusMinus
         * @static
         * @param {IEMinusMinus} message EMinusMinus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EMinusMinus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a EMinusMinus message from the specified reader or buffer.
         * @function decode
         * @memberof EMinusMinus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {EMinusMinus} EMinusMinus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMinusMinus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMinusMinus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.p1 = $root.Par.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.p2 = $root.Par.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a EMinusMinus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof EMinusMinus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {EMinusMinus} EMinusMinus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EMinusMinus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a EMinusMinus message.
         * @function verify
         * @memberof EMinusMinus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EMinusMinus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.p1 != null && message.hasOwnProperty("p1")) {
                var error = $root.Par.verify(message.p1);
                if (error)
                    return "p1." + error;
            }
            if (message.p2 != null && message.hasOwnProperty("p2")) {
                var error = $root.Par.verify(message.p2);
                if (error)
                    return "p2." + error;
            }
            return null;
        };

        /**
         * Creates a EMinusMinus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof EMinusMinus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {EMinusMinus} EMinusMinus
         */
        EMinusMinus.fromObject = function fromObject(object) {
            if (object instanceof $root.EMinusMinus)
                return object;
            var message = new $root.EMinusMinus();
            if (object.p1 != null) {
                if (typeof object.p1 !== "object")
                    throw TypeError(".EMinusMinus.p1: object expected");
                message.p1 = $root.Par.fromObject(object.p1);
            }
            if (object.p2 != null) {
                if (typeof object.p2 !== "object")
                    throw TypeError(".EMinusMinus.p2: object expected");
                message.p2 = $root.Par.fromObject(object.p2);
            }
            return message;
        };

        /**
         * Creates a plain object from a EMinusMinus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof EMinusMinus
         * @static
         * @param {EMinusMinus} message EMinusMinus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EMinusMinus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.p1 = null;
                object.p2 = null;
            }
            if (message.p1 != null && message.hasOwnProperty("p1"))
                object.p1 = $root.Par.toObject(message.p1, options);
            if (message.p2 != null && message.hasOwnProperty("p2"))
                object.p2 = $root.Par.toObject(message.p2, options);
            return object;
        };

        /**
         * Converts this EMinusMinus to JSON.
         * @function toJSON
         * @memberof EMinusMinus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EMinusMinus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EMinusMinus;
    })();

    $root.Connective = (function() {

        /**
         * Properties of a Connective.
         * @exports IConnective
         * @interface IConnective
         * @property {IConnectiveBody|null} [conn_and_body] Connective conn_and_body
         * @property {IConnectiveBody|null} [conn_or_body] Connective conn_or_body
         * @property {IPar|null} [conn_not_body] Connective conn_not_body
         * @property {IVarRef|null} [var_ref_body] Connective var_ref_body
         * @property {boolean|null} [conn_bool] Connective conn_bool
         * @property {boolean|null} [conn_int] Connective conn_int
         * @property {boolean|null} [conn_string] Connective conn_string
         * @property {boolean|null} [conn_uri] Connective conn_uri
         * @property {boolean|null} [conn_byte_array] Connective conn_byte_array
         */

        /**
         * Constructs a new Connective.
         * @exports Connective
         * @classdesc Represents a Connective.
         * @implements IConnective
         * @constructor
         * @param {IConnective=} [properties] Properties to set
         */
        function Connective(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Connective conn_and_body.
         * @member {IConnectiveBody|null|undefined} conn_and_body
         * @memberof Connective
         * @instance
         */
        Connective.prototype.conn_and_body = null;

        /**
         * Connective conn_or_body.
         * @member {IConnectiveBody|null|undefined} conn_or_body
         * @memberof Connective
         * @instance
         */
        Connective.prototype.conn_or_body = null;

        /**
         * Connective conn_not_body.
         * @member {IPar|null|undefined} conn_not_body
         * @memberof Connective
         * @instance
         */
        Connective.prototype.conn_not_body = null;

        /**
         * Connective var_ref_body.
         * @member {IVarRef|null|undefined} var_ref_body
         * @memberof Connective
         * @instance
         */
        Connective.prototype.var_ref_body = null;

        /**
         * Connective conn_bool.
         * @member {boolean} conn_bool
         * @memberof Connective
         * @instance
         */
        Connective.prototype.conn_bool = false;

        /**
         * Connective conn_int.
         * @member {boolean} conn_int
         * @memberof Connective
         * @instance
         */
        Connective.prototype.conn_int = false;

        /**
         * Connective conn_string.
         * @member {boolean} conn_string
         * @memberof Connective
         * @instance
         */
        Connective.prototype.conn_string = false;

        /**
         * Connective conn_uri.
         * @member {boolean} conn_uri
         * @memberof Connective
         * @instance
         */
        Connective.prototype.conn_uri = false;

        /**
         * Connective conn_byte_array.
         * @member {boolean} conn_byte_array
         * @memberof Connective
         * @instance
         */
        Connective.prototype.conn_byte_array = false;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * Connective connective_instance.
         * @member {"conn_and_body"|"conn_or_body"|"conn_not_body"|"var_ref_body"|"conn_bool"|"conn_int"|"conn_string"|"conn_uri"|"conn_byte_array"|undefined} connective_instance
         * @memberof Connective
         * @instance
         */
        Object.defineProperty(Connective.prototype, "connective_instance", {
            get: $util.oneOfGetter($oneOfFields = ["conn_and_body", "conn_or_body", "conn_not_body", "var_ref_body", "conn_bool", "conn_int", "conn_string", "conn_uri", "conn_byte_array"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new Connective instance using the specified properties.
         * @function create
         * @memberof Connective
         * @static
         * @param {IConnective=} [properties] Properties to set
         * @returns {Connective} Connective instance
         */
        Connective.create = function create(properties) {
            return new Connective(properties);
        };

        /**
         * Encodes the specified Connective message. Does not implicitly {@link Connective.verify|verify} messages.
         * @function encode
         * @memberof Connective
         * @static
         * @param {IConnective} message Connective message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Connective.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conn_and_body != null && message.hasOwnProperty("conn_and_body"))
                $root.ConnectiveBody.encode(message.conn_and_body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.conn_or_body != null && message.hasOwnProperty("conn_or_body"))
                $root.ConnectiveBody.encode(message.conn_or_body, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.conn_not_body != null && message.hasOwnProperty("conn_not_body"))
                $root.Par.encode(message.conn_not_body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.var_ref_body != null && message.hasOwnProperty("var_ref_body"))
                $root.VarRef.encode(message.var_ref_body, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.conn_bool != null && message.hasOwnProperty("conn_bool"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.conn_bool);
            if (message.conn_int != null && message.hasOwnProperty("conn_int"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.conn_int);
            if (message.conn_string != null && message.hasOwnProperty("conn_string"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.conn_string);
            if (message.conn_uri != null && message.hasOwnProperty("conn_uri"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.conn_uri);
            if (message.conn_byte_array != null && message.hasOwnProperty("conn_byte_array"))
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.conn_byte_array);
            return writer;
        };

        /**
         * Encodes the specified Connective message, length delimited. Does not implicitly {@link Connective.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Connective
         * @static
         * @param {IConnective} message Connective message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Connective.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Connective message from the specified reader or buffer.
         * @function decode
         * @memberof Connective
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Connective} Connective
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Connective.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Connective();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conn_and_body = $root.ConnectiveBody.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.conn_or_body = $root.ConnectiveBody.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.conn_not_body = $root.Par.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.var_ref_body = $root.VarRef.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.conn_bool = reader.bool();
                    break;
                case 6:
                    message.conn_int = reader.bool();
                    break;
                case 7:
                    message.conn_string = reader.bool();
                    break;
                case 8:
                    message.conn_uri = reader.bool();
                    break;
                case 9:
                    message.conn_byte_array = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Connective message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Connective
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Connective} Connective
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Connective.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Connective message.
         * @function verify
         * @memberof Connective
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Connective.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.conn_and_body != null && message.hasOwnProperty("conn_and_body")) {
                properties.connective_instance = 1;
                {
                    var error = $root.ConnectiveBody.verify(message.conn_and_body);
                    if (error)
                        return "conn_and_body." + error;
                }
            }
            if (message.conn_or_body != null && message.hasOwnProperty("conn_or_body")) {
                if (properties.connective_instance === 1)
                    return "connective_instance: multiple values";
                properties.connective_instance = 1;
                {
                    var error = $root.ConnectiveBody.verify(message.conn_or_body);
                    if (error)
                        return "conn_or_body." + error;
                }
            }
            if (message.conn_not_body != null && message.hasOwnProperty("conn_not_body")) {
                if (properties.connective_instance === 1)
                    return "connective_instance: multiple values";
                properties.connective_instance = 1;
                {
                    var error = $root.Par.verify(message.conn_not_body);
                    if (error)
                        return "conn_not_body." + error;
                }
            }
            if (message.var_ref_body != null && message.hasOwnProperty("var_ref_body")) {
                if (properties.connective_instance === 1)
                    return "connective_instance: multiple values";
                properties.connective_instance = 1;
                {
                    var error = $root.VarRef.verify(message.var_ref_body);
                    if (error)
                        return "var_ref_body." + error;
                }
            }
            if (message.conn_bool != null && message.hasOwnProperty("conn_bool")) {
                if (properties.connective_instance === 1)
                    return "connective_instance: multiple values";
                properties.connective_instance = 1;
                if (typeof message.conn_bool !== "boolean")
                    return "conn_bool: boolean expected";
            }
            if (message.conn_int != null && message.hasOwnProperty("conn_int")) {
                if (properties.connective_instance === 1)
                    return "connective_instance: multiple values";
                properties.connective_instance = 1;
                if (typeof message.conn_int !== "boolean")
                    return "conn_int: boolean expected";
            }
            if (message.conn_string != null && message.hasOwnProperty("conn_string")) {
                if (properties.connective_instance === 1)
                    return "connective_instance: multiple values";
                properties.connective_instance = 1;
                if (typeof message.conn_string !== "boolean")
                    return "conn_string: boolean expected";
            }
            if (message.conn_uri != null && message.hasOwnProperty("conn_uri")) {
                if (properties.connective_instance === 1)
                    return "connective_instance: multiple values";
                properties.connective_instance = 1;
                if (typeof message.conn_uri !== "boolean")
                    return "conn_uri: boolean expected";
            }
            if (message.conn_byte_array != null && message.hasOwnProperty("conn_byte_array")) {
                if (properties.connective_instance === 1)
                    return "connective_instance: multiple values";
                properties.connective_instance = 1;
                if (typeof message.conn_byte_array !== "boolean")
                    return "conn_byte_array: boolean expected";
            }
            return null;
        };

        /**
         * Creates a Connective message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Connective
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Connective} Connective
         */
        Connective.fromObject = function fromObject(object) {
            if (object instanceof $root.Connective)
                return object;
            var message = new $root.Connective();
            if (object.conn_and_body != null) {
                if (typeof object.conn_and_body !== "object")
                    throw TypeError(".Connective.conn_and_body: object expected");
                message.conn_and_body = $root.ConnectiveBody.fromObject(object.conn_and_body);
            }
            if (object.conn_or_body != null) {
                if (typeof object.conn_or_body !== "object")
                    throw TypeError(".Connective.conn_or_body: object expected");
                message.conn_or_body = $root.ConnectiveBody.fromObject(object.conn_or_body);
            }
            if (object.conn_not_body != null) {
                if (typeof object.conn_not_body !== "object")
                    throw TypeError(".Connective.conn_not_body: object expected");
                message.conn_not_body = $root.Par.fromObject(object.conn_not_body);
            }
            if (object.var_ref_body != null) {
                if (typeof object.var_ref_body !== "object")
                    throw TypeError(".Connective.var_ref_body: object expected");
                message.var_ref_body = $root.VarRef.fromObject(object.var_ref_body);
            }
            if (object.conn_bool != null)
                message.conn_bool = Boolean(object.conn_bool);
            if (object.conn_int != null)
                message.conn_int = Boolean(object.conn_int);
            if (object.conn_string != null)
                message.conn_string = Boolean(object.conn_string);
            if (object.conn_uri != null)
                message.conn_uri = Boolean(object.conn_uri);
            if (object.conn_byte_array != null)
                message.conn_byte_array = Boolean(object.conn_byte_array);
            return message;
        };

        /**
         * Creates a plain object from a Connective message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Connective
         * @static
         * @param {Connective} message Connective
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Connective.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.conn_and_body != null && message.hasOwnProperty("conn_and_body")) {
                object.conn_and_body = $root.ConnectiveBody.toObject(message.conn_and_body, options);
                if (options.oneofs)
                    object.connective_instance = "conn_and_body";
            }
            if (message.conn_or_body != null && message.hasOwnProperty("conn_or_body")) {
                object.conn_or_body = $root.ConnectiveBody.toObject(message.conn_or_body, options);
                if (options.oneofs)
                    object.connective_instance = "conn_or_body";
            }
            if (message.conn_not_body != null && message.hasOwnProperty("conn_not_body")) {
                object.conn_not_body = $root.Par.toObject(message.conn_not_body, options);
                if (options.oneofs)
                    object.connective_instance = "conn_not_body";
            }
            if (message.var_ref_body != null && message.hasOwnProperty("var_ref_body")) {
                object.var_ref_body = $root.VarRef.toObject(message.var_ref_body, options);
                if (options.oneofs)
                    object.connective_instance = "var_ref_body";
            }
            if (message.conn_bool != null && message.hasOwnProperty("conn_bool")) {
                object.conn_bool = message.conn_bool;
                if (options.oneofs)
                    object.connective_instance = "conn_bool";
            }
            if (message.conn_int != null && message.hasOwnProperty("conn_int")) {
                object.conn_int = message.conn_int;
                if (options.oneofs)
                    object.connective_instance = "conn_int";
            }
            if (message.conn_string != null && message.hasOwnProperty("conn_string")) {
                object.conn_string = message.conn_string;
                if (options.oneofs)
                    object.connective_instance = "conn_string";
            }
            if (message.conn_uri != null && message.hasOwnProperty("conn_uri")) {
                object.conn_uri = message.conn_uri;
                if (options.oneofs)
                    object.connective_instance = "conn_uri";
            }
            if (message.conn_byte_array != null && message.hasOwnProperty("conn_byte_array")) {
                object.conn_byte_array = message.conn_byte_array;
                if (options.oneofs)
                    object.connective_instance = "conn_byte_array";
            }
            return object;
        };

        /**
         * Converts this Connective to JSON.
         * @function toJSON
         * @memberof Connective
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Connective.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Connective;
    })();

    $root.VarRef = (function() {

        /**
         * Properties of a VarRef.
         * @exports IVarRef
         * @interface IVarRef
         * @property {number|null} [index] VarRef index
         * @property {number|null} [depth] VarRef depth
         */

        /**
         * Constructs a new VarRef.
         * @exports VarRef
         * @classdesc Represents a VarRef.
         * @implements IVarRef
         * @constructor
         * @param {IVarRef=} [properties] Properties to set
         */
        function VarRef(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * VarRef index.
         * @member {number} index
         * @memberof VarRef
         * @instance
         */
        VarRef.prototype.index = 0;

        /**
         * VarRef depth.
         * @member {number} depth
         * @memberof VarRef
         * @instance
         */
        VarRef.prototype.depth = 0;

        /**
         * Creates a new VarRef instance using the specified properties.
         * @function create
         * @memberof VarRef
         * @static
         * @param {IVarRef=} [properties] Properties to set
         * @returns {VarRef} VarRef instance
         */
        VarRef.create = function create(properties) {
            return new VarRef(properties);
        };

        /**
         * Encodes the specified VarRef message. Does not implicitly {@link VarRef.verify|verify} messages.
         * @function encode
         * @memberof VarRef
         * @static
         * @param {IVarRef} message VarRef message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VarRef.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.index != null && message.hasOwnProperty("index"))
                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.index);
            if (message.depth != null && message.hasOwnProperty("depth"))
                writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.depth);
            return writer;
        };

        /**
         * Encodes the specified VarRef message, length delimited. Does not implicitly {@link VarRef.verify|verify} messages.
         * @function encodeDelimited
         * @memberof VarRef
         * @static
         * @param {IVarRef} message VarRef message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VarRef.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a VarRef message from the specified reader or buffer.
         * @function decode
         * @memberof VarRef
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {VarRef} VarRef
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VarRef.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VarRef();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.index = reader.sint32();
                    break;
                case 2:
                    message.depth = reader.sint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a VarRef message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof VarRef
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {VarRef} VarRef
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VarRef.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a VarRef message.
         * @function verify
         * @memberof VarRef
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VarRef.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.depth != null && message.hasOwnProperty("depth"))
                if (!$util.isInteger(message.depth))
                    return "depth: integer expected";
            return null;
        };

        /**
         * Creates a VarRef message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof VarRef
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {VarRef} VarRef
         */
        VarRef.fromObject = function fromObject(object) {
            if (object instanceof $root.VarRef)
                return object;
            var message = new $root.VarRef();
            if (object.index != null)
                message.index = object.index | 0;
            if (object.depth != null)
                message.depth = object.depth | 0;
            return message;
        };

        /**
         * Creates a plain object from a VarRef message. Also converts values to other types if specified.
         * @function toObject
         * @memberof VarRef
         * @static
         * @param {VarRef} message VarRef
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VarRef.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.index = 0;
                object.depth = 0;
            }
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.depth != null && message.hasOwnProperty("depth"))
                object.depth = message.depth;
            return object;
        };

        /**
         * Converts this VarRef to JSON.
         * @function toJSON
         * @memberof VarRef
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VarRef.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VarRef;
    })();

    $root.ConnectiveBody = (function() {

        /**
         * Properties of a ConnectiveBody.
         * @exports IConnectiveBody
         * @interface IConnectiveBody
         * @property {Array.<IPar>|null} [ps] ConnectiveBody ps
         */

        /**
         * Constructs a new ConnectiveBody.
         * @exports ConnectiveBody
         * @classdesc Represents a ConnectiveBody.
         * @implements IConnectiveBody
         * @constructor
         * @param {IConnectiveBody=} [properties] Properties to set
         */
        function ConnectiveBody(properties) {
            this.ps = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ConnectiveBody ps.
         * @member {Array.<IPar>} ps
         * @memberof ConnectiveBody
         * @instance
         */
        ConnectiveBody.prototype.ps = $util.emptyArray;

        /**
         * Creates a new ConnectiveBody instance using the specified properties.
         * @function create
         * @memberof ConnectiveBody
         * @static
         * @param {IConnectiveBody=} [properties] Properties to set
         * @returns {ConnectiveBody} ConnectiveBody instance
         */
        ConnectiveBody.create = function create(properties) {
            return new ConnectiveBody(properties);
        };

        /**
         * Encodes the specified ConnectiveBody message. Does not implicitly {@link ConnectiveBody.verify|verify} messages.
         * @function encode
         * @memberof ConnectiveBody
         * @static
         * @param {IConnectiveBody} message ConnectiveBody message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConnectiveBody.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ps != null && message.ps.length)
                for (var i = 0; i < message.ps.length; ++i)
                    $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ConnectiveBody message, length delimited. Does not implicitly {@link ConnectiveBody.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ConnectiveBody
         * @static
         * @param {IConnectiveBody} message ConnectiveBody message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConnectiveBody.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ConnectiveBody message from the specified reader or buffer.
         * @function decode
         * @memberof ConnectiveBody
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ConnectiveBody} ConnectiveBody
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConnectiveBody.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ConnectiveBody();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.ps && message.ps.length))
                        message.ps = [];
                    message.ps.push($root.Par.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ConnectiveBody message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ConnectiveBody
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ConnectiveBody} ConnectiveBody
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConnectiveBody.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ConnectiveBody message.
         * @function verify
         * @memberof ConnectiveBody
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ConnectiveBody.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ps != null && message.hasOwnProperty("ps")) {
                if (!Array.isArray(message.ps))
                    return "ps: array expected";
                for (var i = 0; i < message.ps.length; ++i) {
                    var error = $root.Par.verify(message.ps[i]);
                    if (error)
                        return "ps." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ConnectiveBody message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ConnectiveBody
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ConnectiveBody} ConnectiveBody
         */
        ConnectiveBody.fromObject = function fromObject(object) {
            if (object instanceof $root.ConnectiveBody)
                return object;
            var message = new $root.ConnectiveBody();
            if (object.ps) {
                if (!Array.isArray(object.ps))
                    throw TypeError(".ConnectiveBody.ps: array expected");
                message.ps = [];
                for (var i = 0; i < object.ps.length; ++i) {
                    if (typeof object.ps[i] !== "object")
                        throw TypeError(".ConnectiveBody.ps: object expected");
                    message.ps[i] = $root.Par.fromObject(object.ps[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ConnectiveBody message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ConnectiveBody
         * @static
         * @param {ConnectiveBody} message ConnectiveBody
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ConnectiveBody.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.ps = [];
            if (message.ps && message.ps.length) {
                object.ps = [];
                for (var j = 0; j < message.ps.length; ++j)
                    object.ps[j] = $root.Par.toObject(message.ps[j], options);
            }
            return object;
        };

        /**
         * Converts this ConnectiveBody to JSON.
         * @function toJSON
         * @memberof ConnectiveBody
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ConnectiveBody.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ConnectiveBody;
    })();

    $root.DeployId = (function() {

        /**
         * Properties of a DeployId.
         * @exports IDeployId
         * @interface IDeployId
         * @property {Uint8Array|null} [sig] DeployId sig
         */

        /**
         * Constructs a new DeployId.
         * @exports DeployId
         * @classdesc Represents a DeployId.
         * @implements IDeployId
         * @constructor
         * @param {IDeployId=} [properties] Properties to set
         */
        function DeployId(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeployId sig.
         * @member {Uint8Array} sig
         * @memberof DeployId
         * @instance
         */
        DeployId.prototype.sig = $util.newBuffer([]);

        /**
         * Creates a new DeployId instance using the specified properties.
         * @function create
         * @memberof DeployId
         * @static
         * @param {IDeployId=} [properties] Properties to set
         * @returns {DeployId} DeployId instance
         */
        DeployId.create = function create(properties) {
            return new DeployId(properties);
        };

        /**
         * Encodes the specified DeployId message. Does not implicitly {@link DeployId.verify|verify} messages.
         * @function encode
         * @memberof DeployId
         * @static
         * @param {IDeployId} message DeployId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeployId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sig != null && message.hasOwnProperty("sig"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.sig);
            return writer;
        };

        /**
         * Encodes the specified DeployId message, length delimited. Does not implicitly {@link DeployId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DeployId
         * @static
         * @param {IDeployId} message DeployId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeployId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeployId message from the specified reader or buffer.
         * @function decode
         * @memberof DeployId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DeployId} DeployId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeployId.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DeployId();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sig = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeployId message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DeployId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DeployId} DeployId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeployId.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeployId message.
         * @function verify
         * @memberof DeployId
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeployId.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sig != null && message.hasOwnProperty("sig"))
                if (!(message.sig && typeof message.sig.length === "number" || $util.isString(message.sig)))
                    return "sig: buffer expected";
            return null;
        };

        /**
         * Creates a DeployId message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DeployId
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DeployId} DeployId
         */
        DeployId.fromObject = function fromObject(object) {
            if (object instanceof $root.DeployId)
                return object;
            var message = new $root.DeployId();
            if (object.sig != null)
                if (typeof object.sig === "string")
                    $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);
                else if (object.sig.length)
                    message.sig = object.sig;
            return message;
        };

        /**
         * Creates a plain object from a DeployId message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DeployId
         * @static
         * @param {DeployId} message DeployId
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeployId.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.sig = "";
                else {
                    object.sig = [];
                    if (options.bytes !== Array)
                        object.sig = $util.newBuffer(object.sig);
                }
            if (message.sig != null && message.hasOwnProperty("sig"))
                object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;
            return object;
        };

        /**
         * Converts this DeployId to JSON.
         * @function toJSON
         * @memberof DeployId
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeployId.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DeployId;
    })();

    $root.DeployerId = (function() {

        /**
         * Properties of a DeployerId.
         * @exports IDeployerId
         * @interface IDeployerId
         * @property {Uint8Array|null} [publicKey] DeployerId publicKey
         */

        /**
         * Constructs a new DeployerId.
         * @exports DeployerId
         * @classdesc Represents a DeployerId.
         * @implements IDeployerId
         * @constructor
         * @param {IDeployerId=} [properties] Properties to set
         */
        function DeployerId(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeployerId publicKey.
         * @member {Uint8Array} publicKey
         * @memberof DeployerId
         * @instance
         */
        DeployerId.prototype.publicKey = $util.newBuffer([]);

        /**
         * Creates a new DeployerId instance using the specified properties.
         * @function create
         * @memberof DeployerId
         * @static
         * @param {IDeployerId=} [properties] Properties to set
         * @returns {DeployerId} DeployerId instance
         */
        DeployerId.create = function create(properties) {
            return new DeployerId(properties);
        };

        /**
         * Encodes the specified DeployerId message. Does not implicitly {@link DeployerId.verify|verify} messages.
         * @function encode
         * @memberof DeployerId
         * @static
         * @param {IDeployerId} message DeployerId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeployerId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.publicKey);
            return writer;
        };

        /**
         * Encodes the specified DeployerId message, length delimited. Does not implicitly {@link DeployerId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof DeployerId
         * @static
         * @param {IDeployerId} message DeployerId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeployerId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeployerId message from the specified reader or buffer.
         * @function decode
         * @memberof DeployerId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {DeployerId} DeployerId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeployerId.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DeployerId();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.publicKey = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeployerId message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof DeployerId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {DeployerId} DeployerId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeployerId.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeployerId message.
         * @function verify
         * @memberof DeployerId
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeployerId.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                if (!(message.publicKey && typeof message.publicKey.length === "number" || $util.isString(message.publicKey)))
                    return "publicKey: buffer expected";
            return null;
        };

        /**
         * Creates a DeployerId message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof DeployerId
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {DeployerId} DeployerId
         */
        DeployerId.fromObject = function fromObject(object) {
            if (object instanceof $root.DeployerId)
                return object;
            var message = new $root.DeployerId();
            if (object.publicKey != null)
                if (typeof object.publicKey === "string")
                    $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);
                else if (object.publicKey.length)
                    message.publicKey = object.publicKey;
            return message;
        };

        /**
         * Creates a plain object from a DeployerId message. Also converts values to other types if specified.
         * @function toObject
         * @memberof DeployerId
         * @static
         * @param {DeployerId} message DeployerId
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeployerId.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.publicKey = "";
                else {
                    object.publicKey = [];
                    if (options.bytes !== Array)
                        object.publicKey = $util.newBuffer(object.publicKey);
                }
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                object.publicKey = options.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;
            return object;
        };

        /**
         * Converts this DeployerId to JSON.
         * @function toJSON
         * @memberof DeployerId
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeployerId.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DeployerId;
    })();

    $root.GUnforgeable = (function() {

        /**
         * Properties of a GUnforgeable.
         * @exports IGUnforgeable
         * @interface IGUnforgeable
         * @property {IGPrivate|null} [g_private_body] GUnforgeable g_private_body
         * @property {IGDeployId|null} [g_deploy_id_body] GUnforgeable g_deploy_id_body
         * @property {IGDeployerId|null} [g_deployer_id_body] GUnforgeable g_deployer_id_body
         * @property {IGSysAuthToken|null} [g_sys_auth_token_body] GUnforgeable g_sys_auth_token_body
         */

        /**
         * Constructs a new GUnforgeable.
         * @exports GUnforgeable
         * @classdesc Represents a GUnforgeable.
         * @implements IGUnforgeable
         * @constructor
         * @param {IGUnforgeable=} [properties] Properties to set
         */
        function GUnforgeable(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GUnforgeable g_private_body.
         * @member {IGPrivate|null|undefined} g_private_body
         * @memberof GUnforgeable
         * @instance
         */
        GUnforgeable.prototype.g_private_body = null;

        /**
         * GUnforgeable g_deploy_id_body.
         * @member {IGDeployId|null|undefined} g_deploy_id_body
         * @memberof GUnforgeable
         * @instance
         */
        GUnforgeable.prototype.g_deploy_id_body = null;

        /**
         * GUnforgeable g_deployer_id_body.
         * @member {IGDeployerId|null|undefined} g_deployer_id_body
         * @memberof GUnforgeable
         * @instance
         */
        GUnforgeable.prototype.g_deployer_id_body = null;

        /**
         * GUnforgeable g_sys_auth_token_body.
         * @member {IGSysAuthToken|null|undefined} g_sys_auth_token_body
         * @memberof GUnforgeable
         * @instance
         */
        GUnforgeable.prototype.g_sys_auth_token_body = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * GUnforgeable unf_instance.
         * @member {"g_private_body"|"g_deploy_id_body"|"g_deployer_id_body"|"g_sys_auth_token_body"|undefined} unf_instance
         * @memberof GUnforgeable
         * @instance
         */
        Object.defineProperty(GUnforgeable.prototype, "unf_instance", {
            get: $util.oneOfGetter($oneOfFields = ["g_private_body", "g_deploy_id_body", "g_deployer_id_body", "g_sys_auth_token_body"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new GUnforgeable instance using the specified properties.
         * @function create
         * @memberof GUnforgeable
         * @static
         * @param {IGUnforgeable=} [properties] Properties to set
         * @returns {GUnforgeable} GUnforgeable instance
         */
        GUnforgeable.create = function create(properties) {
            return new GUnforgeable(properties);
        };

        /**
         * Encodes the specified GUnforgeable message. Does not implicitly {@link GUnforgeable.verify|verify} messages.
         * @function encode
         * @memberof GUnforgeable
         * @static
         * @param {IGUnforgeable} message GUnforgeable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GUnforgeable.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.g_private_body != null && message.hasOwnProperty("g_private_body"))
                $root.GPrivate.encode(message.g_private_body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.g_deploy_id_body != null && message.hasOwnProperty("g_deploy_id_body"))
                $root.GDeployId.encode(message.g_deploy_id_body, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.g_deployer_id_body != null && message.hasOwnProperty("g_deployer_id_body"))
                $root.GDeployerId.encode(message.g_deployer_id_body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.g_sys_auth_token_body != null && message.hasOwnProperty("g_sys_auth_token_body"))
                $root.GSysAuthToken.encode(message.g_sys_auth_token_body, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GUnforgeable message, length delimited. Does not implicitly {@link GUnforgeable.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GUnforgeable
         * @static
         * @param {IGUnforgeable} message GUnforgeable message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GUnforgeable.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GUnforgeable message from the specified reader or buffer.
         * @function decode
         * @memberof GUnforgeable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GUnforgeable} GUnforgeable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GUnforgeable.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GUnforgeable();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.g_private_body = $root.GPrivate.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.g_deploy_id_body = $root.GDeployId.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.g_deployer_id_body = $root.GDeployerId.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.g_sys_auth_token_body = $root.GSysAuthToken.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GUnforgeable message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GUnforgeable
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GUnforgeable} GUnforgeable
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GUnforgeable.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GUnforgeable message.
         * @function verify
         * @memberof GUnforgeable
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GUnforgeable.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.g_private_body != null && message.hasOwnProperty("g_private_body")) {
                properties.unf_instance = 1;
                {
                    var error = $root.GPrivate.verify(message.g_private_body);
                    if (error)
                        return "g_private_body." + error;
                }
            }
            if (message.g_deploy_id_body != null && message.hasOwnProperty("g_deploy_id_body")) {
                if (properties.unf_instance === 1)
                    return "unf_instance: multiple values";
                properties.unf_instance = 1;
                {
                    var error = $root.GDeployId.verify(message.g_deploy_id_body);
                    if (error)
                        return "g_deploy_id_body." + error;
                }
            }
            if (message.g_deployer_id_body != null && message.hasOwnProperty("g_deployer_id_body")) {
                if (properties.unf_instance === 1)
                    return "unf_instance: multiple values";
                properties.unf_instance = 1;
                {
                    var error = $root.GDeployerId.verify(message.g_deployer_id_body);
                    if (error)
                        return "g_deployer_id_body." + error;
                }
            }
            if (message.g_sys_auth_token_body != null && message.hasOwnProperty("g_sys_auth_token_body")) {
                if (properties.unf_instance === 1)
                    return "unf_instance: multiple values";
                properties.unf_instance = 1;
                {
                    var error = $root.GSysAuthToken.verify(message.g_sys_auth_token_body);
                    if (error)
                        return "g_sys_auth_token_body." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GUnforgeable message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GUnforgeable
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GUnforgeable} GUnforgeable
         */
        GUnforgeable.fromObject = function fromObject(object) {
            if (object instanceof $root.GUnforgeable)
                return object;
            var message = new $root.GUnforgeable();
            if (object.g_private_body != null) {
                if (typeof object.g_private_body !== "object")
                    throw TypeError(".GUnforgeable.g_private_body: object expected");
                message.g_private_body = $root.GPrivate.fromObject(object.g_private_body);
            }
            if (object.g_deploy_id_body != null) {
                if (typeof object.g_deploy_id_body !== "object")
                    throw TypeError(".GUnforgeable.g_deploy_id_body: object expected");
                message.g_deploy_id_body = $root.GDeployId.fromObject(object.g_deploy_id_body);
            }
            if (object.g_deployer_id_body != null) {
                if (typeof object.g_deployer_id_body !== "object")
                    throw TypeError(".GUnforgeable.g_deployer_id_body: object expected");
                message.g_deployer_id_body = $root.GDeployerId.fromObject(object.g_deployer_id_body);
            }
            if (object.g_sys_auth_token_body != null) {
                if (typeof object.g_sys_auth_token_body !== "object")
                    throw TypeError(".GUnforgeable.g_sys_auth_token_body: object expected");
                message.g_sys_auth_token_body = $root.GSysAuthToken.fromObject(object.g_sys_auth_token_body);
            }
            return message;
        };

        /**
         * Creates a plain object from a GUnforgeable message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GUnforgeable
         * @static
         * @param {GUnforgeable} message GUnforgeable
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GUnforgeable.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.g_private_body != null && message.hasOwnProperty("g_private_body")) {
                object.g_private_body = $root.GPrivate.toObject(message.g_private_body, options);
                if (options.oneofs)
                    object.unf_instance = "g_private_body";
            }
            if (message.g_deploy_id_body != null && message.hasOwnProperty("g_deploy_id_body")) {
                object.g_deploy_id_body = $root.GDeployId.toObject(message.g_deploy_id_body, options);
                if (options.oneofs)
                    object.unf_instance = "g_deploy_id_body";
            }
            if (message.g_deployer_id_body != null && message.hasOwnProperty("g_deployer_id_body")) {
                object.g_deployer_id_body = $root.GDeployerId.toObject(message.g_deployer_id_body, options);
                if (options.oneofs)
                    object.unf_instance = "g_deployer_id_body";
            }
            if (message.g_sys_auth_token_body != null && message.hasOwnProperty("g_sys_auth_token_body")) {
                object.g_sys_auth_token_body = $root.GSysAuthToken.toObject(message.g_sys_auth_token_body, options);
                if (options.oneofs)
                    object.unf_instance = "g_sys_auth_token_body";
            }
            return object;
        };

        /**
         * Converts this GUnforgeable to JSON.
         * @function toJSON
         * @memberof GUnforgeable
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GUnforgeable.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GUnforgeable;
    })();

    $root.GPrivate = (function() {

        /**
         * Properties of a GPrivate.
         * @exports IGPrivate
         * @interface IGPrivate
         * @property {Uint8Array|null} [id] GPrivate id
         */

        /**
         * Constructs a new GPrivate.
         * @exports GPrivate
         * @classdesc Represents a GPrivate.
         * @implements IGPrivate
         * @constructor
         * @param {IGPrivate=} [properties] Properties to set
         */
        function GPrivate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GPrivate id.
         * @member {Uint8Array} id
         * @memberof GPrivate
         * @instance
         */
        GPrivate.prototype.id = $util.newBuffer([]);

        /**
         * Creates a new GPrivate instance using the specified properties.
         * @function create
         * @memberof GPrivate
         * @static
         * @param {IGPrivate=} [properties] Properties to set
         * @returns {GPrivate} GPrivate instance
         */
        GPrivate.create = function create(properties) {
            return new GPrivate(properties);
        };

        /**
         * Encodes the specified GPrivate message. Does not implicitly {@link GPrivate.verify|verify} messages.
         * @function encode
         * @memberof GPrivate
         * @static
         * @param {IGPrivate} message GPrivate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GPrivate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.id);
            return writer;
        };

        /**
         * Encodes the specified GPrivate message, length delimited. Does not implicitly {@link GPrivate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GPrivate
         * @static
         * @param {IGPrivate} message GPrivate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GPrivate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GPrivate message from the specified reader or buffer.
         * @function decode
         * @memberof GPrivate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GPrivate} GPrivate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GPrivate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GPrivate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GPrivate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GPrivate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GPrivate} GPrivate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GPrivate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GPrivate message.
         * @function verify
         * @memberof GPrivate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GPrivate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!(message.id && typeof message.id.length === "number" || $util.isString(message.id)))
                    return "id: buffer expected";
            return null;
        };

        /**
         * Creates a GPrivate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GPrivate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GPrivate} GPrivate
         */
        GPrivate.fromObject = function fromObject(object) {
            if (object instanceof $root.GPrivate)
                return object;
            var message = new $root.GPrivate();
            if (object.id != null)
                if (typeof object.id === "string")
                    $util.base64.decode(object.id, message.id = $util.newBuffer($util.base64.length(object.id)), 0);
                else if (object.id.length)
                    message.id = object.id;
            return message;
        };

        /**
         * Creates a plain object from a GPrivate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GPrivate
         * @static
         * @param {GPrivate} message GPrivate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GPrivate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.id = "";
                else {
                    object.id = [];
                    if (options.bytes !== Array)
                        object.id = $util.newBuffer(object.id);
                }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = options.bytes === String ? $util.base64.encode(message.id, 0, message.id.length) : options.bytes === Array ? Array.prototype.slice.call(message.id) : message.id;
            return object;
        };

        /**
         * Converts this GPrivate to JSON.
         * @function toJSON
         * @memberof GPrivate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GPrivate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GPrivate;
    })();

    $root.GDeployId = (function() {

        /**
         * Properties of a GDeployId.
         * @exports IGDeployId
         * @interface IGDeployId
         * @property {Uint8Array|null} [sig] GDeployId sig
         */

        /**
         * Constructs a new GDeployId.
         * @exports GDeployId
         * @classdesc Represents a GDeployId.
         * @implements IGDeployId
         * @constructor
         * @param {IGDeployId=} [properties] Properties to set
         */
        function GDeployId(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GDeployId sig.
         * @member {Uint8Array} sig
         * @memberof GDeployId
         * @instance
         */
        GDeployId.prototype.sig = $util.newBuffer([]);

        /**
         * Creates a new GDeployId instance using the specified properties.
         * @function create
         * @memberof GDeployId
         * @static
         * @param {IGDeployId=} [properties] Properties to set
         * @returns {GDeployId} GDeployId instance
         */
        GDeployId.create = function create(properties) {
            return new GDeployId(properties);
        };

        /**
         * Encodes the specified GDeployId message. Does not implicitly {@link GDeployId.verify|verify} messages.
         * @function encode
         * @memberof GDeployId
         * @static
         * @param {IGDeployId} message GDeployId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GDeployId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.sig != null && message.hasOwnProperty("sig"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.sig);
            return writer;
        };

        /**
         * Encodes the specified GDeployId message, length delimited. Does not implicitly {@link GDeployId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GDeployId
         * @static
         * @param {IGDeployId} message GDeployId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GDeployId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GDeployId message from the specified reader or buffer.
         * @function decode
         * @memberof GDeployId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GDeployId} GDeployId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GDeployId.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GDeployId();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.sig = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GDeployId message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GDeployId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GDeployId} GDeployId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GDeployId.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GDeployId message.
         * @function verify
         * @memberof GDeployId
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GDeployId.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.sig != null && message.hasOwnProperty("sig"))
                if (!(message.sig && typeof message.sig.length === "number" || $util.isString(message.sig)))
                    return "sig: buffer expected";
            return null;
        };

        /**
         * Creates a GDeployId message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GDeployId
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GDeployId} GDeployId
         */
        GDeployId.fromObject = function fromObject(object) {
            if (object instanceof $root.GDeployId)
                return object;
            var message = new $root.GDeployId();
            if (object.sig != null)
                if (typeof object.sig === "string")
                    $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);
                else if (object.sig.length)
                    message.sig = object.sig;
            return message;
        };

        /**
         * Creates a plain object from a GDeployId message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GDeployId
         * @static
         * @param {GDeployId} message GDeployId
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GDeployId.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.sig = "";
                else {
                    object.sig = [];
                    if (options.bytes !== Array)
                        object.sig = $util.newBuffer(object.sig);
                }
            if (message.sig != null && message.hasOwnProperty("sig"))
                object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;
            return object;
        };

        /**
         * Converts this GDeployId to JSON.
         * @function toJSON
         * @memberof GDeployId
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GDeployId.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GDeployId;
    })();

    $root.GDeployerId = (function() {

        /**
         * Properties of a GDeployerId.
         * @exports IGDeployerId
         * @interface IGDeployerId
         * @property {Uint8Array|null} [publicKey] GDeployerId publicKey
         */

        /**
         * Constructs a new GDeployerId.
         * @exports GDeployerId
         * @classdesc Represents a GDeployerId.
         * @implements IGDeployerId
         * @constructor
         * @param {IGDeployerId=} [properties] Properties to set
         */
        function GDeployerId(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GDeployerId publicKey.
         * @member {Uint8Array} publicKey
         * @memberof GDeployerId
         * @instance
         */
        GDeployerId.prototype.publicKey = $util.newBuffer([]);

        /**
         * Creates a new GDeployerId instance using the specified properties.
         * @function create
         * @memberof GDeployerId
         * @static
         * @param {IGDeployerId=} [properties] Properties to set
         * @returns {GDeployerId} GDeployerId instance
         */
        GDeployerId.create = function create(properties) {
            return new GDeployerId(properties);
        };

        /**
         * Encodes the specified GDeployerId message. Does not implicitly {@link GDeployerId.verify|verify} messages.
         * @function encode
         * @memberof GDeployerId
         * @static
         * @param {IGDeployerId} message GDeployerId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GDeployerId.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.publicKey);
            return writer;
        };

        /**
         * Encodes the specified GDeployerId message, length delimited. Does not implicitly {@link GDeployerId.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GDeployerId
         * @static
         * @param {IGDeployerId} message GDeployerId message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GDeployerId.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GDeployerId message from the specified reader or buffer.
         * @function decode
         * @memberof GDeployerId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GDeployerId} GDeployerId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GDeployerId.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GDeployerId();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.publicKey = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GDeployerId message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GDeployerId
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GDeployerId} GDeployerId
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GDeployerId.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GDeployerId message.
         * @function verify
         * @memberof GDeployerId
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GDeployerId.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                if (!(message.publicKey && typeof message.publicKey.length === "number" || $util.isString(message.publicKey)))
                    return "publicKey: buffer expected";
            return null;
        };

        /**
         * Creates a GDeployerId message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GDeployerId
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GDeployerId} GDeployerId
         */
        GDeployerId.fromObject = function fromObject(object) {
            if (object instanceof $root.GDeployerId)
                return object;
            var message = new $root.GDeployerId();
            if (object.publicKey != null)
                if (typeof object.publicKey === "string")
                    $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);
                else if (object.publicKey.length)
                    message.publicKey = object.publicKey;
            return message;
        };

        /**
         * Creates a plain object from a GDeployerId message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GDeployerId
         * @static
         * @param {GDeployerId} message GDeployerId
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GDeployerId.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                if (options.bytes === String)
                    object.publicKey = "";
                else {
                    object.publicKey = [];
                    if (options.bytes !== Array)
                        object.publicKey = $util.newBuffer(object.publicKey);
                }
            if (message.publicKey != null && message.hasOwnProperty("publicKey"))
                object.publicKey = options.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;
            return object;
        };

        /**
         * Converts this GDeployerId to JSON.
         * @function toJSON
         * @memberof GDeployerId
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GDeployerId.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GDeployerId;
    })();

    $root.GSysAuthToken = (function() {

        /**
         * Properties of a GSysAuthToken.
         * @exports IGSysAuthToken
         * @interface IGSysAuthToken
         */

        /**
         * Constructs a new GSysAuthToken.
         * @exports GSysAuthToken
         * @classdesc Represents a GSysAuthToken.
         * @implements IGSysAuthToken
         * @constructor
         * @param {IGSysAuthToken=} [properties] Properties to set
         */
        function GSysAuthToken(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new GSysAuthToken instance using the specified properties.
         * @function create
         * @memberof GSysAuthToken
         * @static
         * @param {IGSysAuthToken=} [properties] Properties to set
         * @returns {GSysAuthToken} GSysAuthToken instance
         */
        GSysAuthToken.create = function create(properties) {
            return new GSysAuthToken(properties);
        };

        /**
         * Encodes the specified GSysAuthToken message. Does not implicitly {@link GSysAuthToken.verify|verify} messages.
         * @function encode
         * @memberof GSysAuthToken
         * @static
         * @param {IGSysAuthToken} message GSysAuthToken message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GSysAuthToken.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified GSysAuthToken message, length delimited. Does not implicitly {@link GSysAuthToken.verify|verify} messages.
         * @function encodeDelimited
         * @memberof GSysAuthToken
         * @static
         * @param {IGSysAuthToken} message GSysAuthToken message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GSysAuthToken.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GSysAuthToken message from the specified reader or buffer.
         * @function decode
         * @memberof GSysAuthToken
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {GSysAuthToken} GSysAuthToken
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GSysAuthToken.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GSysAuthToken();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GSysAuthToken message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof GSysAuthToken
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {GSysAuthToken} GSysAuthToken
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GSysAuthToken.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GSysAuthToken message.
         * @function verify
         * @memberof GSysAuthToken
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GSysAuthToken.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a GSysAuthToken message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof GSysAuthToken
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {GSysAuthToken} GSysAuthToken
         */
        GSysAuthToken.fromObject = function fromObject(object) {
            if (object instanceof $root.GSysAuthToken)
                return object;
            return new $root.GSysAuthToken();
        };

        /**
         * Creates a plain object from a GSysAuthToken message. Also converts values to other types if specified.
         * @function toObject
         * @memberof GSysAuthToken
         * @static
         * @param {GSysAuthToken} message GSysAuthToken
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GSysAuthToken.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this GSysAuthToken to JSON.
         * @function toJSON
         * @memberof GSysAuthToken
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GSysAuthToken.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GSysAuthToken;
    })();

    $root.ServiceError = (function() {

        /**
         * Properties of a ServiceError.
         * @exports IServiceError
         * @interface IServiceError
         * @property {Array.<string>|null} [messages] ServiceError messages
         */

        /**
         * Constructs a new ServiceError.
         * @exports ServiceError
         * @classdesc Represents a ServiceError.
         * @implements IServiceError
         * @constructor
         * @param {IServiceError=} [properties] Properties to set
         */
        function ServiceError(properties) {
            this.messages = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ServiceError messages.
         * @member {Array.<string>} messages
         * @memberof ServiceError
         * @instance
         */
        ServiceError.prototype.messages = $util.emptyArray;

        /**
         * Creates a new ServiceError instance using the specified properties.
         * @function create
         * @memberof ServiceError
         * @static
         * @param {IServiceError=} [properties] Properties to set
         * @returns {ServiceError} ServiceError instance
         */
        ServiceError.create = function create(properties) {
            return new ServiceError(properties);
        };

        /**
         * Encodes the specified ServiceError message. Does not implicitly {@link ServiceError.verify|verify} messages.
         * @function encode
         * @memberof ServiceError
         * @static
         * @param {IServiceError} message ServiceError message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServiceError.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messages != null && message.messages.length)
                for (var i = 0; i < message.messages.length; ++i)
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.messages[i]);
            return writer;
        };

        /**
         * Encodes the specified ServiceError message, length delimited. Does not implicitly {@link ServiceError.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ServiceError
         * @static
         * @param {IServiceError} message ServiceError message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServiceError.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ServiceError message from the specified reader or buffer.
         * @function decode
         * @memberof ServiceError
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ServiceError} ServiceError
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServiceError.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ServiceError();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.messages && message.messages.length))
                        message.messages = [];
                    message.messages.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ServiceError message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ServiceError
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ServiceError} ServiceError
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServiceError.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ServiceError message.
         * @function verify
         * @memberof ServiceError
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ServiceError.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messages != null && message.hasOwnProperty("messages")) {
                if (!Array.isArray(message.messages))
                    return "messages: array expected";
                for (var i = 0; i < message.messages.length; ++i)
                    if (!$util.isString(message.messages[i]))
                        return "messages: string[] expected";
            }
            return null;
        };

        /**
         * Creates a ServiceError message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ServiceError
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ServiceError} ServiceError
         */
        ServiceError.fromObject = function fromObject(object) {
            if (object instanceof $root.ServiceError)
                return object;
            var message = new $root.ServiceError();
            if (object.messages) {
                if (!Array.isArray(object.messages))
                    throw TypeError(".ServiceError.messages: array expected");
                message.messages = [];
                for (var i = 0; i < object.messages.length; ++i)
                    message.messages[i] = String(object.messages[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a ServiceError message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ServiceError
         * @static
         * @param {ServiceError} message ServiceError
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ServiceError.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.messages = [];
            if (message.messages && message.messages.length) {
                object.messages = [];
                for (var j = 0; j < message.messages.length; ++j)
                    object.messages[j] = message.messages[j];
            }
            return object;
        };

        /**
         * Converts this ServiceError to JSON.
         * @function toJSON
         * @memberof ServiceError
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ServiceError.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ServiceError;
    })();

    $root.routing = (function() {

        /**
         * Namespace routing.
         * @exports routing
         * @namespace
         */
        var routing = {};

        routing.Node = (function() {

            /**
             * Properties of a Node.
             * @memberof routing
             * @interface INode
             * @property {Uint8Array|null} [id] Node id
             * @property {Uint8Array|null} [host] Node host
             * @property {number|null} [tcp_port] Node tcp_port
             * @property {number|null} [udp_port] Node udp_port
             */

            /**
             * Constructs a new Node.
             * @memberof routing
             * @classdesc Represents a Node.
             * @implements INode
             * @constructor
             * @param {routing.INode=} [properties] Properties to set
             */
            function Node(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Node id.
             * @member {Uint8Array} id
             * @memberof routing.Node
             * @instance
             */
            Node.prototype.id = $util.newBuffer([]);

            /**
             * Node host.
             * @member {Uint8Array} host
             * @memberof routing.Node
             * @instance
             */
            Node.prototype.host = $util.newBuffer([]);

            /**
             * Node tcp_port.
             * @member {number} tcp_port
             * @memberof routing.Node
             * @instance
             */
            Node.prototype.tcp_port = 0;

            /**
             * Node udp_port.
             * @member {number} udp_port
             * @memberof routing.Node
             * @instance
             */
            Node.prototype.udp_port = 0;

            /**
             * Creates a new Node instance using the specified properties.
             * @function create
             * @memberof routing.Node
             * @static
             * @param {routing.INode=} [properties] Properties to set
             * @returns {routing.Node} Node instance
             */
            Node.create = function create(properties) {
                return new Node(properties);
            };

            /**
             * Encodes the specified Node message. Does not implicitly {@link routing.Node.verify|verify} messages.
             * @function encode
             * @memberof routing.Node
             * @static
             * @param {routing.INode} message Node message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Node.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && message.hasOwnProperty("id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.id);
                if (message.host != null && message.hasOwnProperty("host"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.host);
                if (message.tcp_port != null && message.hasOwnProperty("tcp_port"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tcp_port);
                if (message.udp_port != null && message.hasOwnProperty("udp_port"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.udp_port);
                return writer;
            };

            /**
             * Encodes the specified Node message, length delimited. Does not implicitly {@link routing.Node.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.Node
             * @static
             * @param {routing.INode} message Node message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Node.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Node message from the specified reader or buffer.
             * @function decode
             * @memberof routing.Node
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.Node} Node
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Node.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Node();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.id = reader.bytes();
                        break;
                    case 2:
                        message.host = reader.bytes();
                        break;
                    case 3:
                        message.tcp_port = reader.uint32();
                        break;
                    case 4:
                        message.udp_port = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Node message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.Node
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.Node} Node
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Node.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Node message.
             * @function verify
             * @memberof routing.Node
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Node.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!(message.id && typeof message.id.length === "number" || $util.isString(message.id)))
                        return "id: buffer expected";
                if (message.host != null && message.hasOwnProperty("host"))
                    if (!(message.host && typeof message.host.length === "number" || $util.isString(message.host)))
                        return "host: buffer expected";
                if (message.tcp_port != null && message.hasOwnProperty("tcp_port"))
                    if (!$util.isInteger(message.tcp_port))
                        return "tcp_port: integer expected";
                if (message.udp_port != null && message.hasOwnProperty("udp_port"))
                    if (!$util.isInteger(message.udp_port))
                        return "udp_port: integer expected";
                return null;
            };

            /**
             * Creates a Node message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.Node
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.Node} Node
             */
            Node.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.Node)
                    return object;
                var message = new $root.routing.Node();
                if (object.id != null)
                    if (typeof object.id === "string")
                        $util.base64.decode(object.id, message.id = $util.newBuffer($util.base64.length(object.id)), 0);
                    else if (object.id.length)
                        message.id = object.id;
                if (object.host != null)
                    if (typeof object.host === "string")
                        $util.base64.decode(object.host, message.host = $util.newBuffer($util.base64.length(object.host)), 0);
                    else if (object.host.length)
                        message.host = object.host;
                if (object.tcp_port != null)
                    message.tcp_port = object.tcp_port >>> 0;
                if (object.udp_port != null)
                    message.udp_port = object.udp_port >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a Node message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.Node
             * @static
             * @param {routing.Node} message Node
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Node.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.id = "";
                    else {
                        object.id = [];
                        if (options.bytes !== Array)
                            object.id = $util.newBuffer(object.id);
                    }
                    if (options.bytes === String)
                        object.host = "";
                    else {
                        object.host = [];
                        if (options.bytes !== Array)
                            object.host = $util.newBuffer(object.host);
                    }
                    object.tcp_port = 0;
                    object.udp_port = 0;
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = options.bytes === String ? $util.base64.encode(message.id, 0, message.id.length) : options.bytes === Array ? Array.prototype.slice.call(message.id) : message.id;
                if (message.host != null && message.hasOwnProperty("host"))
                    object.host = options.bytes === String ? $util.base64.encode(message.host, 0, message.host.length) : options.bytes === Array ? Array.prototype.slice.call(message.host) : message.host;
                if (message.tcp_port != null && message.hasOwnProperty("tcp_port"))
                    object.tcp_port = message.tcp_port;
                if (message.udp_port != null && message.hasOwnProperty("udp_port"))
                    object.udp_port = message.udp_port;
                return object;
            };

            /**
             * Converts this Node to JSON.
             * @function toJSON
             * @memberof routing.Node
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Node.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Node;
        })();

        routing.Header = (function() {

            /**
             * Properties of a Header.
             * @memberof routing
             * @interface IHeader
             * @property {routing.INode|null} [sender] Header sender
             * @property {string|null} [networkId] Header networkId
             */

            /**
             * Constructs a new Header.
             * @memberof routing
             * @classdesc Represents a Header.
             * @implements IHeader
             * @constructor
             * @param {routing.IHeader=} [properties] Properties to set
             */
            function Header(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Header sender.
             * @member {routing.INode|null|undefined} sender
             * @memberof routing.Header
             * @instance
             */
            Header.prototype.sender = null;

            /**
             * Header networkId.
             * @member {string} networkId
             * @memberof routing.Header
             * @instance
             */
            Header.prototype.networkId = "";

            /**
             * Creates a new Header instance using the specified properties.
             * @function create
             * @memberof routing.Header
             * @static
             * @param {routing.IHeader=} [properties] Properties to set
             * @returns {routing.Header} Header instance
             */
            Header.create = function create(properties) {
                return new Header(properties);
            };

            /**
             * Encodes the specified Header message. Does not implicitly {@link routing.Header.verify|verify} messages.
             * @function encode
             * @memberof routing.Header
             * @static
             * @param {routing.IHeader} message Header message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Header.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && message.hasOwnProperty("sender"))
                    $root.routing.Node.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.networkId != null && message.hasOwnProperty("networkId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.networkId);
                return writer;
            };

            /**
             * Encodes the specified Header message, length delimited. Does not implicitly {@link routing.Header.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.Header
             * @static
             * @param {routing.IHeader} message Header message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Header.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Header message from the specified reader or buffer.
             * @function decode
             * @memberof routing.Header
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.Header} Header
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Header.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Header();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = $root.routing.Node.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.networkId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Header message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.Header
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.Header} Header
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Header.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Header message.
             * @function verify
             * @memberof routing.Header
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Header.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender")) {
                    var error = $root.routing.Node.verify(message.sender);
                    if (error)
                        return "sender." + error;
                }
                if (message.networkId != null && message.hasOwnProperty("networkId"))
                    if (!$util.isString(message.networkId))
                        return "networkId: string expected";
                return null;
            };

            /**
             * Creates a Header message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.Header
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.Header} Header
             */
            Header.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.Header)
                    return object;
                var message = new $root.routing.Header();
                if (object.sender != null) {
                    if (typeof object.sender !== "object")
                        throw TypeError(".routing.Header.sender: object expected");
                    message.sender = $root.routing.Node.fromObject(object.sender);
                }
                if (object.networkId != null)
                    message.networkId = String(object.networkId);
                return message;
            };

            /**
             * Creates a plain object from a Header message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.Header
             * @static
             * @param {routing.Header} message Header
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Header.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.sender = null;
                    object.networkId = "";
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = $root.routing.Node.toObject(message.sender, options);
                if (message.networkId != null && message.hasOwnProperty("networkId"))
                    object.networkId = message.networkId;
                return object;
            };

            /**
             * Converts this Header to JSON.
             * @function toJSON
             * @memberof routing.Header
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Header.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Header;
        })();

        routing.Heartbeat = (function() {

            /**
             * Properties of a Heartbeat.
             * @memberof routing
             * @interface IHeartbeat
             */

            /**
             * Constructs a new Heartbeat.
             * @memberof routing
             * @classdesc Represents a Heartbeat.
             * @implements IHeartbeat
             * @constructor
             * @param {routing.IHeartbeat=} [properties] Properties to set
             */
            function Heartbeat(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Heartbeat instance using the specified properties.
             * @function create
             * @memberof routing.Heartbeat
             * @static
             * @param {routing.IHeartbeat=} [properties] Properties to set
             * @returns {routing.Heartbeat} Heartbeat instance
             */
            Heartbeat.create = function create(properties) {
                return new Heartbeat(properties);
            };

            /**
             * Encodes the specified Heartbeat message. Does not implicitly {@link routing.Heartbeat.verify|verify} messages.
             * @function encode
             * @memberof routing.Heartbeat
             * @static
             * @param {routing.IHeartbeat} message Heartbeat message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Heartbeat.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Heartbeat message, length delimited. Does not implicitly {@link routing.Heartbeat.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.Heartbeat
             * @static
             * @param {routing.IHeartbeat} message Heartbeat message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Heartbeat.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Heartbeat message from the specified reader or buffer.
             * @function decode
             * @memberof routing.Heartbeat
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.Heartbeat} Heartbeat
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Heartbeat.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Heartbeat();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Heartbeat message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.Heartbeat
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.Heartbeat} Heartbeat
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Heartbeat.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Heartbeat message.
             * @function verify
             * @memberof routing.Heartbeat
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Heartbeat.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a Heartbeat message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.Heartbeat
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.Heartbeat} Heartbeat
             */
            Heartbeat.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.Heartbeat)
                    return object;
                return new $root.routing.Heartbeat();
            };

            /**
             * Creates a plain object from a Heartbeat message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.Heartbeat
             * @static
             * @param {routing.Heartbeat} message Heartbeat
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Heartbeat.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Heartbeat to JSON.
             * @function toJSON
             * @memberof routing.Heartbeat
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Heartbeat.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Heartbeat;
        })();

        routing.HeartbeatResponse = (function() {

            /**
             * Properties of a HeartbeatResponse.
             * @memberof routing
             * @interface IHeartbeatResponse
             */

            /**
             * Constructs a new HeartbeatResponse.
             * @memberof routing
             * @classdesc Represents a HeartbeatResponse.
             * @implements IHeartbeatResponse
             * @constructor
             * @param {routing.IHeartbeatResponse=} [properties] Properties to set
             */
            function HeartbeatResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new HeartbeatResponse instance using the specified properties.
             * @function create
             * @memberof routing.HeartbeatResponse
             * @static
             * @param {routing.IHeartbeatResponse=} [properties] Properties to set
             * @returns {routing.HeartbeatResponse} HeartbeatResponse instance
             */
            HeartbeatResponse.create = function create(properties) {
                return new HeartbeatResponse(properties);
            };

            /**
             * Encodes the specified HeartbeatResponse message. Does not implicitly {@link routing.HeartbeatResponse.verify|verify} messages.
             * @function encode
             * @memberof routing.HeartbeatResponse
             * @static
             * @param {routing.IHeartbeatResponse} message HeartbeatResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HeartbeatResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified HeartbeatResponse message, length delimited. Does not implicitly {@link routing.HeartbeatResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.HeartbeatResponse
             * @static
             * @param {routing.IHeartbeatResponse} message HeartbeatResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HeartbeatResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HeartbeatResponse message from the specified reader or buffer.
             * @function decode
             * @memberof routing.HeartbeatResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.HeartbeatResponse} HeartbeatResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HeartbeatResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.HeartbeatResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HeartbeatResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.HeartbeatResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.HeartbeatResponse} HeartbeatResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HeartbeatResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HeartbeatResponse message.
             * @function verify
             * @memberof routing.HeartbeatResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HeartbeatResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a HeartbeatResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.HeartbeatResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.HeartbeatResponse} HeartbeatResponse
             */
            HeartbeatResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.HeartbeatResponse)
                    return object;
                return new $root.routing.HeartbeatResponse();
            };

            /**
             * Creates a plain object from a HeartbeatResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.HeartbeatResponse
             * @static
             * @param {routing.HeartbeatResponse} message HeartbeatResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HeartbeatResponse.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this HeartbeatResponse to JSON.
             * @function toJSON
             * @memberof routing.HeartbeatResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HeartbeatResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HeartbeatResponse;
        })();

        routing.ProtocolHandshake = (function() {

            /**
             * Properties of a ProtocolHandshake.
             * @memberof routing
             * @interface IProtocolHandshake
             * @property {Uint8Array|null} [nonce] ProtocolHandshake nonce
             */

            /**
             * Constructs a new ProtocolHandshake.
             * @memberof routing
             * @classdesc Represents a ProtocolHandshake.
             * @implements IProtocolHandshake
             * @constructor
             * @param {routing.IProtocolHandshake=} [properties] Properties to set
             */
            function ProtocolHandshake(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProtocolHandshake nonce.
             * @member {Uint8Array} nonce
             * @memberof routing.ProtocolHandshake
             * @instance
             */
            ProtocolHandshake.prototype.nonce = $util.newBuffer([]);

            /**
             * Creates a new ProtocolHandshake instance using the specified properties.
             * @function create
             * @memberof routing.ProtocolHandshake
             * @static
             * @param {routing.IProtocolHandshake=} [properties] Properties to set
             * @returns {routing.ProtocolHandshake} ProtocolHandshake instance
             */
            ProtocolHandshake.create = function create(properties) {
                return new ProtocolHandshake(properties);
            };

            /**
             * Encodes the specified ProtocolHandshake message. Does not implicitly {@link routing.ProtocolHandshake.verify|verify} messages.
             * @function encode
             * @memberof routing.ProtocolHandshake
             * @static
             * @param {routing.IProtocolHandshake} message ProtocolHandshake message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProtocolHandshake.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified ProtocolHandshake message, length delimited. Does not implicitly {@link routing.ProtocolHandshake.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.ProtocolHandshake
             * @static
             * @param {routing.IProtocolHandshake} message ProtocolHandshake message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProtocolHandshake.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProtocolHandshake message from the specified reader or buffer.
             * @function decode
             * @memberof routing.ProtocolHandshake
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.ProtocolHandshake} ProtocolHandshake
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProtocolHandshake.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.ProtocolHandshake();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProtocolHandshake message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.ProtocolHandshake
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.ProtocolHandshake} ProtocolHandshake
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProtocolHandshake.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProtocolHandshake message.
             * @function verify
             * @memberof routing.ProtocolHandshake
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProtocolHandshake.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!(message.nonce && typeof message.nonce.length === "number" || $util.isString(message.nonce)))
                        return "nonce: buffer expected";
                return null;
            };

            /**
             * Creates a ProtocolHandshake message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.ProtocolHandshake
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.ProtocolHandshake} ProtocolHandshake
             */
            ProtocolHandshake.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.ProtocolHandshake)
                    return object;
                var message = new $root.routing.ProtocolHandshake();
                if (object.nonce != null)
                    if (typeof object.nonce === "string")
                        $util.base64.decode(object.nonce, message.nonce = $util.newBuffer($util.base64.length(object.nonce)), 0);
                    else if (object.nonce.length)
                        message.nonce = object.nonce;
                return message;
            };

            /**
             * Creates a plain object from a ProtocolHandshake message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.ProtocolHandshake
             * @static
             * @param {routing.ProtocolHandshake} message ProtocolHandshake
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProtocolHandshake.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.nonce = "";
                    else {
                        object.nonce = [];
                        if (options.bytes !== Array)
                            object.nonce = $util.newBuffer(object.nonce);
                    }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = options.bytes === String ? $util.base64.encode(message.nonce, 0, message.nonce.length) : options.bytes === Array ? Array.prototype.slice.call(message.nonce) : message.nonce;
                return object;
            };

            /**
             * Converts this ProtocolHandshake to JSON.
             * @function toJSON
             * @memberof routing.ProtocolHandshake
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProtocolHandshake.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProtocolHandshake;
        })();

        routing.ProtocolHandshakeResponse = (function() {

            /**
             * Properties of a ProtocolHandshakeResponse.
             * @memberof routing
             * @interface IProtocolHandshakeResponse
             * @property {Uint8Array|null} [nonce] ProtocolHandshakeResponse nonce
             */

            /**
             * Constructs a new ProtocolHandshakeResponse.
             * @memberof routing
             * @classdesc Represents a ProtocolHandshakeResponse.
             * @implements IProtocolHandshakeResponse
             * @constructor
             * @param {routing.IProtocolHandshakeResponse=} [properties] Properties to set
             */
            function ProtocolHandshakeResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProtocolHandshakeResponse nonce.
             * @member {Uint8Array} nonce
             * @memberof routing.ProtocolHandshakeResponse
             * @instance
             */
            ProtocolHandshakeResponse.prototype.nonce = $util.newBuffer([]);

            /**
             * Creates a new ProtocolHandshakeResponse instance using the specified properties.
             * @function create
             * @memberof routing.ProtocolHandshakeResponse
             * @static
             * @param {routing.IProtocolHandshakeResponse=} [properties] Properties to set
             * @returns {routing.ProtocolHandshakeResponse} ProtocolHandshakeResponse instance
             */
            ProtocolHandshakeResponse.create = function create(properties) {
                return new ProtocolHandshakeResponse(properties);
            };

            /**
             * Encodes the specified ProtocolHandshakeResponse message. Does not implicitly {@link routing.ProtocolHandshakeResponse.verify|verify} messages.
             * @function encode
             * @memberof routing.ProtocolHandshakeResponse
             * @static
             * @param {routing.IProtocolHandshakeResponse} message ProtocolHandshakeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProtocolHandshakeResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.nonce);
                return writer;
            };

            /**
             * Encodes the specified ProtocolHandshakeResponse message, length delimited. Does not implicitly {@link routing.ProtocolHandshakeResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.ProtocolHandshakeResponse
             * @static
             * @param {routing.IProtocolHandshakeResponse} message ProtocolHandshakeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProtocolHandshakeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProtocolHandshakeResponse message from the specified reader or buffer.
             * @function decode
             * @memberof routing.ProtocolHandshakeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.ProtocolHandshakeResponse} ProtocolHandshakeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProtocolHandshakeResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.ProtocolHandshakeResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.nonce = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProtocolHandshakeResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.ProtocolHandshakeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.ProtocolHandshakeResponse} ProtocolHandshakeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProtocolHandshakeResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProtocolHandshakeResponse message.
             * @function verify
             * @memberof routing.ProtocolHandshakeResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProtocolHandshakeResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    if (!(message.nonce && typeof message.nonce.length === "number" || $util.isString(message.nonce)))
                        return "nonce: buffer expected";
                return null;
            };

            /**
             * Creates a ProtocolHandshakeResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.ProtocolHandshakeResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.ProtocolHandshakeResponse} ProtocolHandshakeResponse
             */
            ProtocolHandshakeResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.ProtocolHandshakeResponse)
                    return object;
                var message = new $root.routing.ProtocolHandshakeResponse();
                if (object.nonce != null)
                    if (typeof object.nonce === "string")
                        $util.base64.decode(object.nonce, message.nonce = $util.newBuffer($util.base64.length(object.nonce)), 0);
                    else if (object.nonce.length)
                        message.nonce = object.nonce;
                return message;
            };

            /**
             * Creates a plain object from a ProtocolHandshakeResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.ProtocolHandshakeResponse
             * @static
             * @param {routing.ProtocolHandshakeResponse} message ProtocolHandshakeResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProtocolHandshakeResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.nonce = "";
                    else {
                        object.nonce = [];
                        if (options.bytes !== Array)
                            object.nonce = $util.newBuffer(object.nonce);
                    }
                if (message.nonce != null && message.hasOwnProperty("nonce"))
                    object.nonce = options.bytes === String ? $util.base64.encode(message.nonce, 0, message.nonce.length) : options.bytes === Array ? Array.prototype.slice.call(message.nonce) : message.nonce;
                return object;
            };

            /**
             * Converts this ProtocolHandshakeResponse to JSON.
             * @function toJSON
             * @memberof routing.ProtocolHandshakeResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProtocolHandshakeResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProtocolHandshakeResponse;
        })();

        routing.Packet = (function() {

            /**
             * Properties of a Packet.
             * @memberof routing
             * @interface IPacket
             * @property {string|null} [typeId] Packet typeId
             * @property {Uint8Array|null} [content] Packet content
             */

            /**
             * Constructs a new Packet.
             * @memberof routing
             * @classdesc Represents a Packet.
             * @implements IPacket
             * @constructor
             * @param {routing.IPacket=} [properties] Properties to set
             */
            function Packet(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Packet typeId.
             * @member {string} typeId
             * @memberof routing.Packet
             * @instance
             */
            Packet.prototype.typeId = "";

            /**
             * Packet content.
             * @member {Uint8Array} content
             * @memberof routing.Packet
             * @instance
             */
            Packet.prototype.content = $util.newBuffer([]);

            /**
             * Creates a new Packet instance using the specified properties.
             * @function create
             * @memberof routing.Packet
             * @static
             * @param {routing.IPacket=} [properties] Properties to set
             * @returns {routing.Packet} Packet instance
             */
            Packet.create = function create(properties) {
                return new Packet(properties);
            };

            /**
             * Encodes the specified Packet message. Does not implicitly {@link routing.Packet.verify|verify} messages.
             * @function encode
             * @memberof routing.Packet
             * @static
             * @param {routing.IPacket} message Packet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Packet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.typeId != null && message.hasOwnProperty("typeId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.typeId);
                if (message.content != null && message.hasOwnProperty("content"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.content);
                return writer;
            };

            /**
             * Encodes the specified Packet message, length delimited. Does not implicitly {@link routing.Packet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.Packet
             * @static
             * @param {routing.IPacket} message Packet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Packet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Packet message from the specified reader or buffer.
             * @function decode
             * @memberof routing.Packet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.Packet} Packet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Packet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Packet();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.typeId = reader.string();
                        break;
                    case 2:
                        message.content = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Packet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.Packet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.Packet} Packet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Packet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Packet message.
             * @function verify
             * @memberof routing.Packet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Packet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.typeId != null && message.hasOwnProperty("typeId"))
                    if (!$util.isString(message.typeId))
                        return "typeId: string expected";
                if (message.content != null && message.hasOwnProperty("content"))
                    if (!(message.content && typeof message.content.length === "number" || $util.isString(message.content)))
                        return "content: buffer expected";
                return null;
            };

            /**
             * Creates a Packet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.Packet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.Packet} Packet
             */
            Packet.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.Packet)
                    return object;
                var message = new $root.routing.Packet();
                if (object.typeId != null)
                    message.typeId = String(object.typeId);
                if (object.content != null)
                    if (typeof object.content === "string")
                        $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);
                    else if (object.content.length)
                        message.content = object.content;
                return message;
            };

            /**
             * Creates a plain object from a Packet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.Packet
             * @static
             * @param {routing.Packet} message Packet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Packet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.typeId = "";
                    if (options.bytes === String)
                        object.content = "";
                    else {
                        object.content = [];
                        if (options.bytes !== Array)
                            object.content = $util.newBuffer(object.content);
                    }
                }
                if (message.typeId != null && message.hasOwnProperty("typeId"))
                    object.typeId = message.typeId;
                if (message.content != null && message.hasOwnProperty("content"))
                    object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;
                return object;
            };

            /**
             * Converts this Packet to JSON.
             * @function toJSON
             * @memberof routing.Packet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Packet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Packet;
        })();

        routing.Disconnect = (function() {

            /**
             * Properties of a Disconnect.
             * @memberof routing
             * @interface IDisconnect
             */

            /**
             * Constructs a new Disconnect.
             * @memberof routing
             * @classdesc Represents a Disconnect.
             * @implements IDisconnect
             * @constructor
             * @param {routing.IDisconnect=} [properties] Properties to set
             */
            function Disconnect(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Disconnect instance using the specified properties.
             * @function create
             * @memberof routing.Disconnect
             * @static
             * @param {routing.IDisconnect=} [properties] Properties to set
             * @returns {routing.Disconnect} Disconnect instance
             */
            Disconnect.create = function create(properties) {
                return new Disconnect(properties);
            };

            /**
             * Encodes the specified Disconnect message. Does not implicitly {@link routing.Disconnect.verify|verify} messages.
             * @function encode
             * @memberof routing.Disconnect
             * @static
             * @param {routing.IDisconnect} message Disconnect message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Disconnect.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Disconnect message, length delimited. Does not implicitly {@link routing.Disconnect.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.Disconnect
             * @static
             * @param {routing.IDisconnect} message Disconnect message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Disconnect.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Disconnect message from the specified reader or buffer.
             * @function decode
             * @memberof routing.Disconnect
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.Disconnect} Disconnect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Disconnect.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Disconnect();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Disconnect message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.Disconnect
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.Disconnect} Disconnect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Disconnect.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Disconnect message.
             * @function verify
             * @memberof routing.Disconnect
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Disconnect.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a Disconnect message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.Disconnect
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.Disconnect} Disconnect
             */
            Disconnect.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.Disconnect)
                    return object;
                return new $root.routing.Disconnect();
            };

            /**
             * Creates a plain object from a Disconnect message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.Disconnect
             * @static
             * @param {routing.Disconnect} message Disconnect
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Disconnect.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Disconnect to JSON.
             * @function toJSON
             * @memberof routing.Disconnect
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Disconnect.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Disconnect;
        })();

        routing.Protocol = (function() {

            /**
             * Properties of a Protocol.
             * @memberof routing
             * @interface IProtocol
             * @property {routing.IHeader|null} [header] Protocol header
             * @property {routing.IHeartbeat|null} [heartbeat] Protocol heartbeat
             * @property {routing.IProtocolHandshake|null} [protocol_handshake] Protocol protocol_handshake
             * @property {routing.IProtocolHandshakeResponse|null} [protocol_handshake_response] Protocol protocol_handshake_response
             * @property {routing.IPacket|null} [packet] Protocol packet
             * @property {routing.IDisconnect|null} [disconnect] Protocol disconnect
             */

            /**
             * Constructs a new Protocol.
             * @memberof routing
             * @classdesc Represents a Protocol.
             * @implements IProtocol
             * @constructor
             * @param {routing.IProtocol=} [properties] Properties to set
             */
            function Protocol(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Protocol header.
             * @member {routing.IHeader|null|undefined} header
             * @memberof routing.Protocol
             * @instance
             */
            Protocol.prototype.header = null;

            /**
             * Protocol heartbeat.
             * @member {routing.IHeartbeat|null|undefined} heartbeat
             * @memberof routing.Protocol
             * @instance
             */
            Protocol.prototype.heartbeat = null;

            /**
             * Protocol protocol_handshake.
             * @member {routing.IProtocolHandshake|null|undefined} protocol_handshake
             * @memberof routing.Protocol
             * @instance
             */
            Protocol.prototype.protocol_handshake = null;

            /**
             * Protocol protocol_handshake_response.
             * @member {routing.IProtocolHandshakeResponse|null|undefined} protocol_handshake_response
             * @memberof routing.Protocol
             * @instance
             */
            Protocol.prototype.protocol_handshake_response = null;

            /**
             * Protocol packet.
             * @member {routing.IPacket|null|undefined} packet
             * @memberof routing.Protocol
             * @instance
             */
            Protocol.prototype.packet = null;

            /**
             * Protocol disconnect.
             * @member {routing.IDisconnect|null|undefined} disconnect
             * @memberof routing.Protocol
             * @instance
             */
            Protocol.prototype.disconnect = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * Protocol message.
             * @member {"heartbeat"|"protocol_handshake"|"protocol_handshake_response"|"packet"|"disconnect"|undefined} message
             * @memberof routing.Protocol
             * @instance
             */
            Object.defineProperty(Protocol.prototype, "message", {
                get: $util.oneOfGetter($oneOfFields = ["heartbeat", "protocol_handshake", "protocol_handshake_response", "packet", "disconnect"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Protocol instance using the specified properties.
             * @function create
             * @memberof routing.Protocol
             * @static
             * @param {routing.IProtocol=} [properties] Properties to set
             * @returns {routing.Protocol} Protocol instance
             */
            Protocol.create = function create(properties) {
                return new Protocol(properties);
            };

            /**
             * Encodes the specified Protocol message. Does not implicitly {@link routing.Protocol.verify|verify} messages.
             * @function encode
             * @memberof routing.Protocol
             * @static
             * @param {routing.IProtocol} message Protocol message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Protocol.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.header != null && message.hasOwnProperty("header"))
                    $root.routing.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.heartbeat != null && message.hasOwnProperty("heartbeat"))
                    $root.routing.Heartbeat.encode(message.heartbeat, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.protocol_handshake != null && message.hasOwnProperty("protocol_handshake"))
                    $root.routing.ProtocolHandshake.encode(message.protocol_handshake, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.protocol_handshake_response != null && message.hasOwnProperty("protocol_handshake_response"))
                    $root.routing.ProtocolHandshakeResponse.encode(message.protocol_handshake_response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.packet != null && message.hasOwnProperty("packet"))
                    $root.routing.Packet.encode(message.packet, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.disconnect != null && message.hasOwnProperty("disconnect"))
                    $root.routing.Disconnect.encode(message.disconnect, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Protocol message, length delimited. Does not implicitly {@link routing.Protocol.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.Protocol
             * @static
             * @param {routing.IProtocol} message Protocol message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Protocol.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Protocol message from the specified reader or buffer.
             * @function decode
             * @memberof routing.Protocol
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.Protocol} Protocol
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Protocol.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Protocol();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.header = $root.routing.Header.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.heartbeat = $root.routing.Heartbeat.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.protocol_handshake = $root.routing.ProtocolHandshake.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.protocol_handshake_response = $root.routing.ProtocolHandshakeResponse.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.packet = $root.routing.Packet.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.disconnect = $root.routing.Disconnect.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Protocol message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.Protocol
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.Protocol} Protocol
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Protocol.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Protocol message.
             * @function verify
             * @memberof routing.Protocol
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Protocol.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.header != null && message.hasOwnProperty("header")) {
                    var error = $root.routing.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.heartbeat != null && message.hasOwnProperty("heartbeat")) {
                    properties.message = 1;
                    {
                        var error = $root.routing.Heartbeat.verify(message.heartbeat);
                        if (error)
                            return "heartbeat." + error;
                    }
                }
                if (message.protocol_handshake != null && message.hasOwnProperty("protocol_handshake")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.routing.ProtocolHandshake.verify(message.protocol_handshake);
                        if (error)
                            return "protocol_handshake." + error;
                    }
                }
                if (message.protocol_handshake_response != null && message.hasOwnProperty("protocol_handshake_response")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.routing.ProtocolHandshakeResponse.verify(message.protocol_handshake_response);
                        if (error)
                            return "protocol_handshake_response." + error;
                    }
                }
                if (message.packet != null && message.hasOwnProperty("packet")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.routing.Packet.verify(message.packet);
                        if (error)
                            return "packet." + error;
                    }
                }
                if (message.disconnect != null && message.hasOwnProperty("disconnect")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.routing.Disconnect.verify(message.disconnect);
                        if (error)
                            return "disconnect." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Protocol message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.Protocol
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.Protocol} Protocol
             */
            Protocol.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.Protocol)
                    return object;
                var message = new $root.routing.Protocol();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".routing.Protocol.header: object expected");
                    message.header = $root.routing.Header.fromObject(object.header);
                }
                if (object.heartbeat != null) {
                    if (typeof object.heartbeat !== "object")
                        throw TypeError(".routing.Protocol.heartbeat: object expected");
                    message.heartbeat = $root.routing.Heartbeat.fromObject(object.heartbeat);
                }
                if (object.protocol_handshake != null) {
                    if (typeof object.protocol_handshake !== "object")
                        throw TypeError(".routing.Protocol.protocol_handshake: object expected");
                    message.protocol_handshake = $root.routing.ProtocolHandshake.fromObject(object.protocol_handshake);
                }
                if (object.protocol_handshake_response != null) {
                    if (typeof object.protocol_handshake_response !== "object")
                        throw TypeError(".routing.Protocol.protocol_handshake_response: object expected");
                    message.protocol_handshake_response = $root.routing.ProtocolHandshakeResponse.fromObject(object.protocol_handshake_response);
                }
                if (object.packet != null) {
                    if (typeof object.packet !== "object")
                        throw TypeError(".routing.Protocol.packet: object expected");
                    message.packet = $root.routing.Packet.fromObject(object.packet);
                }
                if (object.disconnect != null) {
                    if (typeof object.disconnect !== "object")
                        throw TypeError(".routing.Protocol.disconnect: object expected");
                    message.disconnect = $root.routing.Disconnect.fromObject(object.disconnect);
                }
                return message;
            };

            /**
             * Creates a plain object from a Protocol message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.Protocol
             * @static
             * @param {routing.Protocol} message Protocol
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Protocol.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.header = null;
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.routing.Header.toObject(message.header, options);
                if (message.heartbeat != null && message.hasOwnProperty("heartbeat")) {
                    object.heartbeat = $root.routing.Heartbeat.toObject(message.heartbeat, options);
                    if (options.oneofs)
                        object.message = "heartbeat";
                }
                if (message.protocol_handshake != null && message.hasOwnProperty("protocol_handshake")) {
                    object.protocol_handshake = $root.routing.ProtocolHandshake.toObject(message.protocol_handshake, options);
                    if (options.oneofs)
                        object.message = "protocol_handshake";
                }
                if (message.protocol_handshake_response != null && message.hasOwnProperty("protocol_handshake_response")) {
                    object.protocol_handshake_response = $root.routing.ProtocolHandshakeResponse.toObject(message.protocol_handshake_response, options);
                    if (options.oneofs)
                        object.message = "protocol_handshake_response";
                }
                if (message.packet != null && message.hasOwnProperty("packet")) {
                    object.packet = $root.routing.Packet.toObject(message.packet, options);
                    if (options.oneofs)
                        object.message = "packet";
                }
                if (message.disconnect != null && message.hasOwnProperty("disconnect")) {
                    object.disconnect = $root.routing.Disconnect.toObject(message.disconnect, options);
                    if (options.oneofs)
                        object.message = "disconnect";
                }
                return object;
            };

            /**
             * Converts this Protocol to JSON.
             * @function toJSON
             * @memberof routing.Protocol
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Protocol.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Protocol;
        })();

        routing.TransportLayer = (function() {

            /**
             * Constructs a new TransportLayer service.
             * @memberof routing
             * @classdesc Represents a TransportLayer
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function TransportLayer(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (TransportLayer.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TransportLayer;

            /**
             * Creates new TransportLayer service using the specified rpc implementation.
             * @function create
             * @memberof routing.TransportLayer
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {TransportLayer} RPC service. Useful where requests and/or responses are streamed.
             */
            TransportLayer.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link routing.TransportLayer#send}.
             * @memberof routing.TransportLayer
             * @typedef SendCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {routing.TLResponse} [response] TLResponse
             */

            /**
             * Calls Send.
             * @function send
             * @memberof routing.TransportLayer
             * @instance
             * @param {routing.ITLRequest} request TLRequest message or plain object
             * @param {routing.TransportLayer.SendCallback} callback Node-style callback called with the error, if any, and TLResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TransportLayer.prototype.send = function send(request, callback) {
                return this.rpcCall(send, $root.routing.TLRequest, $root.routing.TLResponse, request, callback);
            }, "name", { value: "Send" });

            /**
             * Calls Send.
             * @function send
             * @memberof routing.TransportLayer
             * @instance
             * @param {routing.ITLRequest} request TLRequest message or plain object
             * @returns {Promise<routing.TLResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link routing.TransportLayer#stream}.
             * @memberof routing.TransportLayer
             * @typedef StreamCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {routing.TLResponse} [response] TLResponse
             */

            /**
             * Calls Stream.
             * @function stream
             * @memberof routing.TransportLayer
             * @instance
             * @param {routing.IChunk} request Chunk message or plain object
             * @param {routing.TransportLayer.StreamCallback} callback Node-style callback called with the error, if any, and TLResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(TransportLayer.prototype.stream = function stream(request, callback) {
                return this.rpcCall(stream, $root.routing.Chunk, $root.routing.TLResponse, request, callback);
            }, "name", { value: "Stream" });

            /**
             * Calls Stream.
             * @function stream
             * @memberof routing.TransportLayer
             * @instance
             * @param {routing.IChunk} request Chunk message or plain object
             * @returns {Promise<routing.TLResponse>} Promise
             * @variation 2
             */

            return TransportLayer;
        })();

        routing.TLRequest = (function() {

            /**
             * Properties of a TLRequest.
             * @memberof routing
             * @interface ITLRequest
             * @property {routing.IProtocol|null} [protocol] TLRequest protocol
             */

            /**
             * Constructs a new TLRequest.
             * @memberof routing
             * @classdesc Represents a TLRequest.
             * @implements ITLRequest
             * @constructor
             * @param {routing.ITLRequest=} [properties] Properties to set
             */
            function TLRequest(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TLRequest protocol.
             * @member {routing.IProtocol|null|undefined} protocol
             * @memberof routing.TLRequest
             * @instance
             */
            TLRequest.prototype.protocol = null;

            /**
             * Creates a new TLRequest instance using the specified properties.
             * @function create
             * @memberof routing.TLRequest
             * @static
             * @param {routing.ITLRequest=} [properties] Properties to set
             * @returns {routing.TLRequest} TLRequest instance
             */
            TLRequest.create = function create(properties) {
                return new TLRequest(properties);
            };

            /**
             * Encodes the specified TLRequest message. Does not implicitly {@link routing.TLRequest.verify|verify} messages.
             * @function encode
             * @memberof routing.TLRequest
             * @static
             * @param {routing.ITLRequest} message TLRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TLRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    $root.routing.Protocol.encode(message.protocol, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TLRequest message, length delimited. Does not implicitly {@link routing.TLRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.TLRequest
             * @static
             * @param {routing.ITLRequest} message TLRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TLRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TLRequest message from the specified reader or buffer.
             * @function decode
             * @memberof routing.TLRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.TLRequest} TLRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TLRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.TLRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.protocol = $root.routing.Protocol.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TLRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.TLRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.TLRequest} TLRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TLRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TLRequest message.
             * @function verify
             * @memberof routing.TLRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TLRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.protocol != null && message.hasOwnProperty("protocol")) {
                    var error = $root.routing.Protocol.verify(message.protocol);
                    if (error)
                        return "protocol." + error;
                }
                return null;
            };

            /**
             * Creates a TLRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.TLRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.TLRequest} TLRequest
             */
            TLRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.TLRequest)
                    return object;
                var message = new $root.routing.TLRequest();
                if (object.protocol != null) {
                    if (typeof object.protocol !== "object")
                        throw TypeError(".routing.TLRequest.protocol: object expected");
                    message.protocol = $root.routing.Protocol.fromObject(object.protocol);
                }
                return message;
            };

            /**
             * Creates a plain object from a TLRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.TLRequest
             * @static
             * @param {routing.TLRequest} message TLRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TLRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.protocol = null;
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    object.protocol = $root.routing.Protocol.toObject(message.protocol, options);
                return object;
            };

            /**
             * Converts this TLRequest to JSON.
             * @function toJSON
             * @memberof routing.TLRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TLRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TLRequest;
        })();

        routing.InternalServerError = (function() {

            /**
             * Properties of an InternalServerError.
             * @memberof routing
             * @interface IInternalServerError
             * @property {Uint8Array|null} [error] InternalServerError error
             */

            /**
             * Constructs a new InternalServerError.
             * @memberof routing
             * @classdesc Represents an InternalServerError.
             * @implements IInternalServerError
             * @constructor
             * @param {routing.IInternalServerError=} [properties] Properties to set
             */
            function InternalServerError(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * InternalServerError error.
             * @member {Uint8Array} error
             * @memberof routing.InternalServerError
             * @instance
             */
            InternalServerError.prototype.error = $util.newBuffer([]);

            /**
             * Creates a new InternalServerError instance using the specified properties.
             * @function create
             * @memberof routing.InternalServerError
             * @static
             * @param {routing.IInternalServerError=} [properties] Properties to set
             * @returns {routing.InternalServerError} InternalServerError instance
             */
            InternalServerError.create = function create(properties) {
                return new InternalServerError(properties);
            };

            /**
             * Encodes the specified InternalServerError message. Does not implicitly {@link routing.InternalServerError.verify|verify} messages.
             * @function encode
             * @memberof routing.InternalServerError
             * @static
             * @param {routing.IInternalServerError} message InternalServerError message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InternalServerError.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.error != null && message.hasOwnProperty("error"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.error);
                return writer;
            };

            /**
             * Encodes the specified InternalServerError message, length delimited. Does not implicitly {@link routing.InternalServerError.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.InternalServerError
             * @static
             * @param {routing.IInternalServerError} message InternalServerError message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InternalServerError.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an InternalServerError message from the specified reader or buffer.
             * @function decode
             * @memberof routing.InternalServerError
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.InternalServerError} InternalServerError
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InternalServerError.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.InternalServerError();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.error = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an InternalServerError message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.InternalServerError
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.InternalServerError} InternalServerError
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InternalServerError.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an InternalServerError message.
             * @function verify
             * @memberof routing.InternalServerError
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InternalServerError.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.error != null && message.hasOwnProperty("error"))
                    if (!(message.error && typeof message.error.length === "number" || $util.isString(message.error)))
                        return "error: buffer expected";
                return null;
            };

            /**
             * Creates an InternalServerError message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.InternalServerError
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.InternalServerError} InternalServerError
             */
            InternalServerError.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.InternalServerError)
                    return object;
                var message = new $root.routing.InternalServerError();
                if (object.error != null)
                    if (typeof object.error === "string")
                        $util.base64.decode(object.error, message.error = $util.newBuffer($util.base64.length(object.error)), 0);
                    else if (object.error.length)
                        message.error = object.error;
                return message;
            };

            /**
             * Creates a plain object from an InternalServerError message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.InternalServerError
             * @static
             * @param {routing.InternalServerError} message InternalServerError
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InternalServerError.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.error = "";
                    else {
                        object.error = [];
                        if (options.bytes !== Array)
                            object.error = $util.newBuffer(object.error);
                    }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.bytes === String ? $util.base64.encode(message.error, 0, message.error.length) : options.bytes === Array ? Array.prototype.slice.call(message.error) : message.error;
                return object;
            };

            /**
             * Converts this InternalServerError to JSON.
             * @function toJSON
             * @memberof routing.InternalServerError
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InternalServerError.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return InternalServerError;
        })();

        routing.Ack = (function() {

            /**
             * Properties of an Ack.
             * @memberof routing
             * @interface IAck
             * @property {routing.IHeader|null} [header] Ack header
             */

            /**
             * Constructs a new Ack.
             * @memberof routing
             * @classdesc Represents an Ack.
             * @implements IAck
             * @constructor
             * @param {routing.IAck=} [properties] Properties to set
             */
            function Ack(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Ack header.
             * @member {routing.IHeader|null|undefined} header
             * @memberof routing.Ack
             * @instance
             */
            Ack.prototype.header = null;

            /**
             * Creates a new Ack instance using the specified properties.
             * @function create
             * @memberof routing.Ack
             * @static
             * @param {routing.IAck=} [properties] Properties to set
             * @returns {routing.Ack} Ack instance
             */
            Ack.create = function create(properties) {
                return new Ack(properties);
            };

            /**
             * Encodes the specified Ack message. Does not implicitly {@link routing.Ack.verify|verify} messages.
             * @function encode
             * @memberof routing.Ack
             * @static
             * @param {routing.IAck} message Ack message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Ack.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.header != null && message.hasOwnProperty("header"))
                    $root.routing.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Ack message, length delimited. Does not implicitly {@link routing.Ack.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.Ack
             * @static
             * @param {routing.IAck} message Ack message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Ack.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Ack message from the specified reader or buffer.
             * @function decode
             * @memberof routing.Ack
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.Ack} Ack
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Ack.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Ack();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.header = $root.routing.Header.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Ack message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.Ack
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.Ack} Ack
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Ack.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Ack message.
             * @function verify
             * @memberof routing.Ack
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Ack.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    var error = $root.routing.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                return null;
            };

            /**
             * Creates an Ack message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.Ack
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.Ack} Ack
             */
            Ack.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.Ack)
                    return object;
                var message = new $root.routing.Ack();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".routing.Ack.header: object expected");
                    message.header = $root.routing.Header.fromObject(object.header);
                }
                return message;
            };

            /**
             * Creates a plain object from an Ack message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.Ack
             * @static
             * @param {routing.Ack} message Ack
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Ack.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.header = null;
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.routing.Header.toObject(message.header, options);
                return object;
            };

            /**
             * Converts this Ack to JSON.
             * @function toJSON
             * @memberof routing.Ack
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Ack.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Ack;
        })();

        routing.TLResponse = (function() {

            /**
             * Properties of a TLResponse.
             * @memberof routing
             * @interface ITLResponse
             * @property {routing.IAck|null} [ack] TLResponse ack
             * @property {routing.IInternalServerError|null} [internalServerError] TLResponse internalServerError
             */

            /**
             * Constructs a new TLResponse.
             * @memberof routing
             * @classdesc Represents a TLResponse.
             * @implements ITLResponse
             * @constructor
             * @param {routing.ITLResponse=} [properties] Properties to set
             */
            function TLResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TLResponse ack.
             * @member {routing.IAck|null|undefined} ack
             * @memberof routing.TLResponse
             * @instance
             */
            TLResponse.prototype.ack = null;

            /**
             * TLResponse internalServerError.
             * @member {routing.IInternalServerError|null|undefined} internalServerError
             * @memberof routing.TLResponse
             * @instance
             */
            TLResponse.prototype.internalServerError = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * TLResponse payload.
             * @member {"ack"|"internalServerError"|undefined} payload
             * @memberof routing.TLResponse
             * @instance
             */
            Object.defineProperty(TLResponse.prototype, "payload", {
                get: $util.oneOfGetter($oneOfFields = ["ack", "internalServerError"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new TLResponse instance using the specified properties.
             * @function create
             * @memberof routing.TLResponse
             * @static
             * @param {routing.ITLResponse=} [properties] Properties to set
             * @returns {routing.TLResponse} TLResponse instance
             */
            TLResponse.create = function create(properties) {
                return new TLResponse(properties);
            };

            /**
             * Encodes the specified TLResponse message. Does not implicitly {@link routing.TLResponse.verify|verify} messages.
             * @function encode
             * @memberof routing.TLResponse
             * @static
             * @param {routing.ITLResponse} message TLResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TLResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ack != null && message.hasOwnProperty("ack"))
                    $root.routing.Ack.encode(message.ack, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.internalServerError != null && message.hasOwnProperty("internalServerError"))
                    $root.routing.InternalServerError.encode(message.internalServerError, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TLResponse message, length delimited. Does not implicitly {@link routing.TLResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.TLResponse
             * @static
             * @param {routing.ITLResponse} message TLResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TLResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TLResponse message from the specified reader or buffer.
             * @function decode
             * @memberof routing.TLResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.TLResponse} TLResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TLResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.TLResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ack = $root.routing.Ack.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.internalServerError = $root.routing.InternalServerError.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TLResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.TLResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.TLResponse} TLResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TLResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TLResponse message.
             * @function verify
             * @memberof routing.TLResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TLResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.ack != null && message.hasOwnProperty("ack")) {
                    properties.payload = 1;
                    {
                        var error = $root.routing.Ack.verify(message.ack);
                        if (error)
                            return "ack." + error;
                    }
                }
                if (message.internalServerError != null && message.hasOwnProperty("internalServerError")) {
                    if (properties.payload === 1)
                        return "payload: multiple values";
                    properties.payload = 1;
                    {
                        var error = $root.routing.InternalServerError.verify(message.internalServerError);
                        if (error)
                            return "internalServerError." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a TLResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.TLResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.TLResponse} TLResponse
             */
            TLResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.TLResponse)
                    return object;
                var message = new $root.routing.TLResponse();
                if (object.ack != null) {
                    if (typeof object.ack !== "object")
                        throw TypeError(".routing.TLResponse.ack: object expected");
                    message.ack = $root.routing.Ack.fromObject(object.ack);
                }
                if (object.internalServerError != null) {
                    if (typeof object.internalServerError !== "object")
                        throw TypeError(".routing.TLResponse.internalServerError: object expected");
                    message.internalServerError = $root.routing.InternalServerError.fromObject(object.internalServerError);
                }
                return message;
            };

            /**
             * Creates a plain object from a TLResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.TLResponse
             * @static
             * @param {routing.TLResponse} message TLResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TLResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.ack != null && message.hasOwnProperty("ack")) {
                    object.ack = $root.routing.Ack.toObject(message.ack, options);
                    if (options.oneofs)
                        object.payload = "ack";
                }
                if (message.internalServerError != null && message.hasOwnProperty("internalServerError")) {
                    object.internalServerError = $root.routing.InternalServerError.toObject(message.internalServerError, options);
                    if (options.oneofs)
                        object.payload = "internalServerError";
                }
                return object;
            };

            /**
             * Converts this TLResponse to JSON.
             * @function toJSON
             * @memberof routing.TLResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TLResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TLResponse;
        })();

        routing.ChunkHeader = (function() {

            /**
             * Properties of a ChunkHeader.
             * @memberof routing
             * @interface IChunkHeader
             * @property {routing.INode|null} [sender] ChunkHeader sender
             * @property {string|null} [typeId] ChunkHeader typeId
             * @property {boolean|null} [compressed] ChunkHeader compressed
             * @property {number|null} [contentLength] ChunkHeader contentLength
             * @property {string|null} [networkId] ChunkHeader networkId
             */

            /**
             * Constructs a new ChunkHeader.
             * @memberof routing
             * @classdesc Represents a ChunkHeader.
             * @implements IChunkHeader
             * @constructor
             * @param {routing.IChunkHeader=} [properties] Properties to set
             */
            function ChunkHeader(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ChunkHeader sender.
             * @member {routing.INode|null|undefined} sender
             * @memberof routing.ChunkHeader
             * @instance
             */
            ChunkHeader.prototype.sender = null;

            /**
             * ChunkHeader typeId.
             * @member {string} typeId
             * @memberof routing.ChunkHeader
             * @instance
             */
            ChunkHeader.prototype.typeId = "";

            /**
             * ChunkHeader compressed.
             * @member {boolean} compressed
             * @memberof routing.ChunkHeader
             * @instance
             */
            ChunkHeader.prototype.compressed = false;

            /**
             * ChunkHeader contentLength.
             * @member {number} contentLength
             * @memberof routing.ChunkHeader
             * @instance
             */
            ChunkHeader.prototype.contentLength = 0;

            /**
             * ChunkHeader networkId.
             * @member {string} networkId
             * @memberof routing.ChunkHeader
             * @instance
             */
            ChunkHeader.prototype.networkId = "";

            /**
             * Creates a new ChunkHeader instance using the specified properties.
             * @function create
             * @memberof routing.ChunkHeader
             * @static
             * @param {routing.IChunkHeader=} [properties] Properties to set
             * @returns {routing.ChunkHeader} ChunkHeader instance
             */
            ChunkHeader.create = function create(properties) {
                return new ChunkHeader(properties);
            };

            /**
             * Encodes the specified ChunkHeader message. Does not implicitly {@link routing.ChunkHeader.verify|verify} messages.
             * @function encode
             * @memberof routing.ChunkHeader
             * @static
             * @param {routing.IChunkHeader} message ChunkHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChunkHeader.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sender != null && message.hasOwnProperty("sender"))
                    $root.routing.Node.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.typeId != null && message.hasOwnProperty("typeId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.typeId);
                if (message.compressed != null && message.hasOwnProperty("compressed"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.compressed);
                if (message.contentLength != null && message.hasOwnProperty("contentLength"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.contentLength);
                if (message.networkId != null && message.hasOwnProperty("networkId"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.networkId);
                return writer;
            };

            /**
             * Encodes the specified ChunkHeader message, length delimited. Does not implicitly {@link routing.ChunkHeader.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.ChunkHeader
             * @static
             * @param {routing.IChunkHeader} message ChunkHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChunkHeader.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ChunkHeader message from the specified reader or buffer.
             * @function decode
             * @memberof routing.ChunkHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.ChunkHeader} ChunkHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChunkHeader.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.ChunkHeader();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sender = $root.routing.Node.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.typeId = reader.string();
                        break;
                    case 3:
                        message.compressed = reader.bool();
                        break;
                    case 4:
                        message.contentLength = reader.int32();
                        break;
                    case 5:
                        message.networkId = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ChunkHeader message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.ChunkHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.ChunkHeader} ChunkHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChunkHeader.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ChunkHeader message.
             * @function verify
             * @memberof routing.ChunkHeader
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ChunkHeader.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sender != null && message.hasOwnProperty("sender")) {
                    var error = $root.routing.Node.verify(message.sender);
                    if (error)
                        return "sender." + error;
                }
                if (message.typeId != null && message.hasOwnProperty("typeId"))
                    if (!$util.isString(message.typeId))
                        return "typeId: string expected";
                if (message.compressed != null && message.hasOwnProperty("compressed"))
                    if (typeof message.compressed !== "boolean")
                        return "compressed: boolean expected";
                if (message.contentLength != null && message.hasOwnProperty("contentLength"))
                    if (!$util.isInteger(message.contentLength))
                        return "contentLength: integer expected";
                if (message.networkId != null && message.hasOwnProperty("networkId"))
                    if (!$util.isString(message.networkId))
                        return "networkId: string expected";
                return null;
            };

            /**
             * Creates a ChunkHeader message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.ChunkHeader
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.ChunkHeader} ChunkHeader
             */
            ChunkHeader.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.ChunkHeader)
                    return object;
                var message = new $root.routing.ChunkHeader();
                if (object.sender != null) {
                    if (typeof object.sender !== "object")
                        throw TypeError(".routing.ChunkHeader.sender: object expected");
                    message.sender = $root.routing.Node.fromObject(object.sender);
                }
                if (object.typeId != null)
                    message.typeId = String(object.typeId);
                if (object.compressed != null)
                    message.compressed = Boolean(object.compressed);
                if (object.contentLength != null)
                    message.contentLength = object.contentLength | 0;
                if (object.networkId != null)
                    message.networkId = String(object.networkId);
                return message;
            };

            /**
             * Creates a plain object from a ChunkHeader message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.ChunkHeader
             * @static
             * @param {routing.ChunkHeader} message ChunkHeader
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ChunkHeader.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.sender = null;
                    object.typeId = "";
                    object.compressed = false;
                    object.contentLength = 0;
                    object.networkId = "";
                }
                if (message.sender != null && message.hasOwnProperty("sender"))
                    object.sender = $root.routing.Node.toObject(message.sender, options);
                if (message.typeId != null && message.hasOwnProperty("typeId"))
                    object.typeId = message.typeId;
                if (message.compressed != null && message.hasOwnProperty("compressed"))
                    object.compressed = message.compressed;
                if (message.contentLength != null && message.hasOwnProperty("contentLength"))
                    object.contentLength = message.contentLength;
                if (message.networkId != null && message.hasOwnProperty("networkId"))
                    object.networkId = message.networkId;
                return object;
            };

            /**
             * Converts this ChunkHeader to JSON.
             * @function toJSON
             * @memberof routing.ChunkHeader
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ChunkHeader.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ChunkHeader;
        })();

        routing.ChunkData = (function() {

            /**
             * Properties of a ChunkData.
             * @memberof routing
             * @interface IChunkData
             * @property {Uint8Array|null} [contentData] ChunkData contentData
             */

            /**
             * Constructs a new ChunkData.
             * @memberof routing
             * @classdesc Represents a ChunkData.
             * @implements IChunkData
             * @constructor
             * @param {routing.IChunkData=} [properties] Properties to set
             */
            function ChunkData(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ChunkData contentData.
             * @member {Uint8Array} contentData
             * @memberof routing.ChunkData
             * @instance
             */
            ChunkData.prototype.contentData = $util.newBuffer([]);

            /**
             * Creates a new ChunkData instance using the specified properties.
             * @function create
             * @memberof routing.ChunkData
             * @static
             * @param {routing.IChunkData=} [properties] Properties to set
             * @returns {routing.ChunkData} ChunkData instance
             */
            ChunkData.create = function create(properties) {
                return new ChunkData(properties);
            };

            /**
             * Encodes the specified ChunkData message. Does not implicitly {@link routing.ChunkData.verify|verify} messages.
             * @function encode
             * @memberof routing.ChunkData
             * @static
             * @param {routing.IChunkData} message ChunkData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChunkData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.contentData != null && message.hasOwnProperty("contentData"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.contentData);
                return writer;
            };

            /**
             * Encodes the specified ChunkData message, length delimited. Does not implicitly {@link routing.ChunkData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.ChunkData
             * @static
             * @param {routing.IChunkData} message ChunkData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChunkData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ChunkData message from the specified reader or buffer.
             * @function decode
             * @memberof routing.ChunkData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.ChunkData} ChunkData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChunkData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.ChunkData();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.contentData = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ChunkData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.ChunkData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.ChunkData} ChunkData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChunkData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ChunkData message.
             * @function verify
             * @memberof routing.ChunkData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ChunkData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.contentData != null && message.hasOwnProperty("contentData"))
                    if (!(message.contentData && typeof message.contentData.length === "number" || $util.isString(message.contentData)))
                        return "contentData: buffer expected";
                return null;
            };

            /**
             * Creates a ChunkData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.ChunkData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.ChunkData} ChunkData
             */
            ChunkData.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.ChunkData)
                    return object;
                var message = new $root.routing.ChunkData();
                if (object.contentData != null)
                    if (typeof object.contentData === "string")
                        $util.base64.decode(object.contentData, message.contentData = $util.newBuffer($util.base64.length(object.contentData)), 0);
                    else if (object.contentData.length)
                        message.contentData = object.contentData;
                return message;
            };

            /**
             * Creates a plain object from a ChunkData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.ChunkData
             * @static
             * @param {routing.ChunkData} message ChunkData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ChunkData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.contentData = "";
                    else {
                        object.contentData = [];
                        if (options.bytes !== Array)
                            object.contentData = $util.newBuffer(object.contentData);
                    }
                if (message.contentData != null && message.hasOwnProperty("contentData"))
                    object.contentData = options.bytes === String ? $util.base64.encode(message.contentData, 0, message.contentData.length) : options.bytes === Array ? Array.prototype.slice.call(message.contentData) : message.contentData;
                return object;
            };

            /**
             * Converts this ChunkData to JSON.
             * @function toJSON
             * @memberof routing.ChunkData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ChunkData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ChunkData;
        })();

        routing.Chunk = (function() {

            /**
             * Properties of a Chunk.
             * @memberof routing
             * @interface IChunk
             * @property {routing.IChunkHeader|null} [header] Chunk header
             * @property {routing.IChunkData|null} [data] Chunk data
             */

            /**
             * Constructs a new Chunk.
             * @memberof routing
             * @classdesc Represents a Chunk.
             * @implements IChunk
             * @constructor
             * @param {routing.IChunk=} [properties] Properties to set
             */
            function Chunk(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Chunk header.
             * @member {routing.IChunkHeader|null|undefined} header
             * @memberof routing.Chunk
             * @instance
             */
            Chunk.prototype.header = null;

            /**
             * Chunk data.
             * @member {routing.IChunkData|null|undefined} data
             * @memberof routing.Chunk
             * @instance
             */
            Chunk.prototype.data = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * Chunk content.
             * @member {"header"|"data"|undefined} content
             * @memberof routing.Chunk
             * @instance
             */
            Object.defineProperty(Chunk.prototype, "content", {
                get: $util.oneOfGetter($oneOfFields = ["header", "data"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Chunk instance using the specified properties.
             * @function create
             * @memberof routing.Chunk
             * @static
             * @param {routing.IChunk=} [properties] Properties to set
             * @returns {routing.Chunk} Chunk instance
             */
            Chunk.create = function create(properties) {
                return new Chunk(properties);
            };

            /**
             * Encodes the specified Chunk message. Does not implicitly {@link routing.Chunk.verify|verify} messages.
             * @function encode
             * @memberof routing.Chunk
             * @static
             * @param {routing.IChunk} message Chunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Chunk.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.header != null && message.hasOwnProperty("header"))
                    $root.routing.ChunkHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.data != null && message.hasOwnProperty("data"))
                    $root.routing.ChunkData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Chunk message, length delimited. Does not implicitly {@link routing.Chunk.verify|verify} messages.
             * @function encodeDelimited
             * @memberof routing.Chunk
             * @static
             * @param {routing.IChunk} message Chunk message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Chunk.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Chunk message from the specified reader or buffer.
             * @function decode
             * @memberof routing.Chunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {routing.Chunk} Chunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Chunk.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Chunk();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.header = $root.routing.ChunkHeader.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.data = $root.routing.ChunkData.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Chunk message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof routing.Chunk
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {routing.Chunk} Chunk
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Chunk.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Chunk message.
             * @function verify
             * @memberof routing.Chunk
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Chunk.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.header != null && message.hasOwnProperty("header")) {
                    properties.content = 1;
                    {
                        var error = $root.routing.ChunkHeader.verify(message.header);
                        if (error)
                            return "header." + error;
                    }
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (properties.content === 1)
                        return "content: multiple values";
                    properties.content = 1;
                    {
                        var error = $root.routing.ChunkData.verify(message.data);
                        if (error)
                            return "data." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Chunk message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof routing.Chunk
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {routing.Chunk} Chunk
             */
            Chunk.fromObject = function fromObject(object) {
                if (object instanceof $root.routing.Chunk)
                    return object;
                var message = new $root.routing.Chunk();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".routing.Chunk.header: object expected");
                    message.header = $root.routing.ChunkHeader.fromObject(object.header);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".routing.Chunk.data: object expected");
                    message.data = $root.routing.ChunkData.fromObject(object.data);
                }
                return message;
            };

            /**
             * Creates a plain object from a Chunk message. Also converts values to other types if specified.
             * @function toObject
             * @memberof routing.Chunk
             * @static
             * @param {routing.Chunk} message Chunk
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Chunk.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.header != null && message.hasOwnProperty("header")) {
                    object.header = $root.routing.ChunkHeader.toObject(message.header, options);
                    if (options.oneofs)
                        object.content = "header";
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    object.data = $root.routing.ChunkData.toObject(message.data, options);
                    if (options.oneofs)
                        object.content = "data";
                }
                return object;
            };

            /**
             * Converts this Chunk to JSON.
             * @function toJSON
             * @memberof routing.Chunk
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Chunk.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Chunk;
        })();

        return routing;
    })();

    var rnodeProtos = $root;

    var getDeployData = function (timestamp, term, phloPrice, phloLimit, validAfterBlockNumber) {
        if (phloPrice === void 0) { phloPrice = 1; }
        if (phloLimit === void 0) { phloLimit = 10000000; }
        if (validAfterBlockNumber === void 0) { validAfterBlockNumber = 0; }
        return {
            timestamp: timestamp,
            term: term,
            phloLimit: phloLimit,
            phloPrice: phloPrice,
            validAfterBlockNumber: validAfterBlockNumber,
        };
    };

    var getDeployDataToSign = function (payment) {
        return rnodeProtos.casper.DeployDataProto.encode(payment).finish();
    };

    const ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array';

    // For convenience, let people hash a string, not just a Uint8Array
    function normalizeInput (input) {
      let ret;
      if (input instanceof Uint8Array) {
        ret = input;
      } else if (input instanceof Buffer) {
        ret = new Uint8Array(input);
      } else if (typeof input === 'string') {
        ret = new Uint8Array(Buffer.from(input, 'utf8'));
      } else {
        throw new Error(ERROR_MSG_INPUT)
      }
      return ret
    }

    // Converts a Uint8Array to a hexadecimal string
    // For example, toHex([255, 0, 255]) returns "ff00ff"
    function toHex (bytes) {
      return Array.prototype.map
        .call(bytes, function (n) {
          return (n < 16 ? '0' : '') + n.toString(16)
        })
        .join('')
    }

    // Converts any value in [0...2^32-1] to an 8-character hex string
    function uint32ToHex (val) {
      return (0x100000000 + val).toString(16).substring(1)
    }

    // For debugging: prints out hash state in the same format as the RFC
    // sample computation exactly, so that you can diff
    function debugPrint (label, arr, size) {
      let msg = '\n' + label + ' = ';
      for (let i = 0; i < arr.length; i += 2) {
        if (size === 32) {
          msg += uint32ToHex(arr[i]).toUpperCase();
          msg += ' ';
          msg += uint32ToHex(arr[i + 1]).toUpperCase();
        } else if (size === 64) {
          msg += uint32ToHex(arr[i + 1]).toUpperCase();
          msg += uint32ToHex(arr[i]).toUpperCase();
        } else throw new Error('Invalid size ' + size)
        if (i % 6 === 4) {
          msg += '\n' + new Array(label.length + 4).join(' ');
        } else if (i < arr.length - 2) {
          msg += ' ';
        }
      }
      console.log(msg);
    }

    // For performance testing: generates N bytes of input, hashes M times
    // Measures and prints MB/second hash performance each time
    function testSpeed (hashFn, N, M) {
      let startMs = new Date().getTime();

      const input = new Uint8Array(N);
      for (let i = 0; i < N; i++) {
        input[i] = i % 256;
      }
      const genMs = new Date().getTime();
      console.log('Generated random input in ' + (genMs - startMs) + 'ms');
      startMs = genMs;

      for (let i = 0; i < M; i++) {
        const hashHex = hashFn(input);
        const hashMs = new Date().getTime();
        const ms = hashMs - startMs;
        startMs = hashMs;
        console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...');
        console.log(
          Math.round((N / (1 << 20) / (ms / 1000)) * 100) / 100 + ' MB PER SECOND'
        );
      }
    }

    var util$2 = {
      normalizeInput: normalizeInput,
      toHex: toHex,
      debugPrint: debugPrint,
      testSpeed: testSpeed
    };

    // Blake2B in pure Javascript
    // Adapted from the reference implementation in RFC7693
    // Ported to Javascript by DC - https://github.com/dcposch

    const util$1 = util$2;

    // 64-bit unsigned addition
    // Sets v[a,a+1] += v[b,b+1]
    // v should be a Uint32Array
    function ADD64AA (v, a, b) {
      const o0 = v[a] + v[b];
      let o1 = v[a + 1] + v[b + 1];
      if (o0 >= 0x100000000) {
        o1++;
      }
      v[a] = o0;
      v[a + 1] = o1;
    }

    // 64-bit unsigned addition
    // Sets v[a,a+1] += b
    // b0 is the low 32 bits of b, b1 represents the high 32 bits
    function ADD64AC (v, a, b0, b1) {
      let o0 = v[a] + b0;
      if (b0 < 0) {
        o0 += 0x100000000;
      }
      let o1 = v[a + 1] + b1;
      if (o0 >= 0x100000000) {
        o1++;
      }
      v[a] = o0;
      v[a + 1] = o1;
    }

    // Little-endian byte access
    function B2B_GET32 (arr, i) {
      return arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)
    }

    // G Mixing function
    // The ROTRs are inlined for speed
    function B2B_G (a, b, c, d, ix, iy) {
      const x0 = m$1[ix];
      const x1 = m$1[ix + 1];
      const y0 = m$1[iy];
      const y1 = m$1[iy + 1];

      ADD64AA(v$1, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s
      ADD64AC(v$1, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits

      // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits
      let xor0 = v$1[d] ^ v$1[a];
      let xor1 = v$1[d + 1] ^ v$1[a + 1];
      v$1[d] = xor1;
      v$1[d + 1] = xor0;

      ADD64AA(v$1, c, d);

      // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits
      xor0 = v$1[b] ^ v$1[c];
      xor1 = v$1[b + 1] ^ v$1[c + 1];
      v$1[b] = (xor0 >>> 24) ^ (xor1 << 8);
      v$1[b + 1] = (xor1 >>> 24) ^ (xor0 << 8);

      ADD64AA(v$1, a, b);
      ADD64AC(v$1, a, y0, y1);

      // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits
      xor0 = v$1[d] ^ v$1[a];
      xor1 = v$1[d + 1] ^ v$1[a + 1];
      v$1[d] = (xor0 >>> 16) ^ (xor1 << 16);
      v$1[d + 1] = (xor1 >>> 16) ^ (xor0 << 16);

      ADD64AA(v$1, c, d);

      // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits
      xor0 = v$1[b] ^ v$1[c];
      xor1 = v$1[b + 1] ^ v$1[c + 1];
      v$1[b] = (xor1 >>> 31) ^ (xor0 << 1);
      v$1[b + 1] = (xor0 >>> 31) ^ (xor1 << 1);
    }

    // Initialization Vector
    const BLAKE2B_IV32 = new Uint32Array([
      0xf3bcc908,
      0x6a09e667,
      0x84caa73b,
      0xbb67ae85,
      0xfe94f82b,
      0x3c6ef372,
      0x5f1d36f1,
      0xa54ff53a,
      0xade682d1,
      0x510e527f,
      0x2b3e6c1f,
      0x9b05688c,
      0xfb41bd6b,
      0x1f83d9ab,
      0x137e2179,
      0x5be0cd19
    ]);

    const SIGMA8 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0,
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3
    ];

    // These are offsets into a uint64 buffer.
    // Multiply them all by 2 to make them offsets into a uint32 buffer,
    // because this is Javascript and we don't have uint64s
    const SIGMA82 = new Uint8Array(
      SIGMA8.map(function (x) {
        return x * 2
      })
    );

    // Compression function. 'last' flag indicates last block.
    // Note we're representing 16 uint64s as 32 uint32s
    const v$1 = new Uint32Array(32);
    const m$1 = new Uint32Array(32);
    function blake2bCompress (ctx, last) {
      let i = 0;

      // init work variables
      for (i = 0; i < 16; i++) {
        v$1[i] = ctx.h[i];
        v$1[i + 16] = BLAKE2B_IV32[i];
      }

      // low 64 bits of offset
      v$1[24] = v$1[24] ^ ctx.t;
      v$1[25] = v$1[25] ^ (ctx.t / 0x100000000);
      // high 64 bits not supported, offset may not be higher than 2**53-1

      // last block flag set ?
      if (last) {
        v$1[28] = ~v$1[28];
        v$1[29] = ~v$1[29];
      }

      // get little-endian words
      for (i = 0; i < 32; i++) {
        m$1[i] = B2B_GET32(ctx.b, 4 * i);
      }

      // twelve rounds of mixing
      // uncomment the DebugPrint calls to log the computation
      // and match the RFC sample documentation
      // util.debugPrint('          m[16]', m, 64)
      for (i = 0; i < 12; i++) {
        // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)
        B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
      }
      // util.debugPrint('   (i=12) v[16]', v, 64)

      for (i = 0; i < 16; i++) {
        ctx.h[i] = ctx.h[i] ^ v$1[i] ^ v$1[i + 16];
      }
      // util.debugPrint('h[8]', ctx.h, 64)
    }

    // Creates a BLAKE2b hashing context
    // Requires an output length between 1 and 64 bytes
    // Takes an optional Uint8Array key
    function blake2bInit (outlen, key) {
      if (outlen === 0 || outlen > 64) {
        throw new Error('Illegal output length, expected 0 < length <= 64')
      }
      if (key && key.length > 64) {
        throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')
      }

      // state, 'param block'
      const ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0, // input count
        c: 0, // pointer within buffer
        outlen: outlen // output length in bytes
      };

      // initialize hash state
      for (let i = 0; i < 16; i++) {
        ctx.h[i] = BLAKE2B_IV32[i];
      }
      const keylen = key ? key.length : 0;
      ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;

      // key the hash, if applicable
      if (key) {
        blake2bUpdate(ctx, key);
        // at the end
        ctx.c = 128;
      }

      return ctx
    }

    // Updates a BLAKE2b streaming hash
    // Requires hash context and Uint8Array (byte array)
    function blake2bUpdate (ctx, input) {
      for (let i = 0; i < input.length; i++) {
        if (ctx.c === 128) {
          // buffer full ?
          ctx.t += ctx.c; // add counters
          blake2bCompress(ctx, false); // compress (not last)
          ctx.c = 0; // counter to zero
        }
        ctx.b[ctx.c++] = input[i];
      }
    }

    // Completes a BLAKE2b streaming hash
    // Returns a Uint8Array containing the message digest
    function blake2bFinal (ctx) {
      ctx.t += ctx.c; // mark last block offset

      while (ctx.c < 128) {
        // fill up with zeros
        ctx.b[ctx.c++] = 0;
      }
      blake2bCompress(ctx, true); // final block flag = 1

      // little endian convert and store
      const out = new Uint8Array(ctx.outlen);
      for (let i = 0; i < ctx.outlen; i++) {
        out[i] = ctx.h[i >> 2] >> (8 * (i & 3));
      }
      return out
    }

    // Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array
    //
    // Returns a n-byte Uint8Array
    //
    // Parameters:
    // - input - the input bytes, as a string, Buffer or Uint8Array
    // - key - optional key Uint8Array, up to 64 bytes
    // - outlen - optional output length in bytes, default 64
    function blake2b (input, key, outlen) {
      // preprocess inputs
      outlen = outlen || 64;
      input = util$1.normalizeInput(input);

      // do the math
      const ctx = blake2bInit(outlen, key);
      blake2bUpdate(ctx, input);
      return blake2bFinal(ctx)
    }

    // Computes the BLAKE2B hash of a string or byte array
    //
    // Returns an n-byte hash in hex, all lowercase
    //
    // Parameters:
    // - input - the input bytes, as a string, Buffer, or Uint8Array
    // - key - optional key Uint8Array, up to 64 bytes
    // - outlen - optional output length in bytes, default 64
    function blake2bHex (input, key, outlen) {
      const output = blake2b(input, key, outlen);
      return util$1.toHex(output)
    }

    var blake2b_1 = {
      blake2b: blake2b,
      blake2bHex: blake2bHex,
      blake2bInit: blake2bInit,
      blake2bUpdate: blake2bUpdate,
      blake2bFinal: blake2bFinal
    };

    // BLAKE2s hash function in pure Javascript
    // Adapted from the reference implementation in RFC7693
    // Ported to Javascript by DC - https://github.com/dcposch

    const util = util$2;

    // Little-endian byte access.
    // Expects a Uint8Array and an index
    // Returns the little-endian uint32 at v[i..i+3]
    function B2S_GET32 (v, i) {
      return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)
    }

    // Mixing function G.
    function B2S_G (a, b, c, d, x, y) {
      v[a] = v[a] + v[b] + x;
      v[d] = ROTR32(v[d] ^ v[a], 16);
      v[c] = v[c] + v[d];
      v[b] = ROTR32(v[b] ^ v[c], 12);
      v[a] = v[a] + v[b] + y;
      v[d] = ROTR32(v[d] ^ v[a], 8);
      v[c] = v[c] + v[d];
      v[b] = ROTR32(v[b] ^ v[c], 7);
    }

    // 32-bit right rotation
    // x should be a uint32
    // y must be between 1 and 31, inclusive
    function ROTR32 (x, y) {
      return (x >>> y) ^ (x << (32 - y))
    }

    // Initialization Vector.
    const BLAKE2S_IV = new Uint32Array([
      0x6a09e667,
      0xbb67ae85,
      0x3c6ef372,
      0xa54ff53a,
      0x510e527f,
      0x9b05688c,
      0x1f83d9ab,
      0x5be0cd19
    ]);

    const SIGMA = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      14,
      10,
      4,
      8,
      9,
      15,
      13,
      6,
      1,
      12,
      0,
      2,
      11,
      7,
      5,
      3,
      11,
      8,
      12,
      0,
      5,
      2,
      15,
      13,
      10,
      14,
      3,
      6,
      7,
      1,
      9,
      4,
      7,
      9,
      3,
      1,
      13,
      12,
      11,
      14,
      2,
      6,
      5,
      10,
      4,
      0,
      15,
      8,
      9,
      0,
      5,
      7,
      2,
      4,
      10,
      15,
      14,
      1,
      11,
      12,
      6,
      8,
      3,
      13,
      2,
      12,
      6,
      10,
      0,
      11,
      8,
      3,
      4,
      13,
      7,
      5,
      15,
      14,
      1,
      9,
      12,
      5,
      1,
      15,
      14,
      13,
      4,
      10,
      0,
      7,
      6,
      3,
      9,
      2,
      8,
      11,
      13,
      11,
      7,
      14,
      12,
      1,
      3,
      9,
      5,
      0,
      15,
      4,
      8,
      6,
      2,
      10,
      6,
      15,
      14,
      9,
      11,
      3,
      0,
      8,
      12,
      2,
      13,
      7,
      1,
      4,
      10,
      5,
      10,
      2,
      8,
      4,
      7,
      6,
      1,
      5,
      15,
      11,
      9,
      14,
      3,
      12,
      13,
      0
    ]);

    // Compression function. "last" flag indicates last block
    const v = new Uint32Array(16);
    const m = new Uint32Array(16);
    function blake2sCompress (ctx, last) {
      let i = 0;
      for (i = 0; i < 8; i++) {
        // init work variables
        v[i] = ctx.h[i];
        v[i + 8] = BLAKE2S_IV[i];
      }

      v[12] ^= ctx.t; // low 32 bits of offset
      v[13] ^= ctx.t / 0x100000000; // high 32 bits
      if (last) {
        // last block flag set ?
        v[14] = ~v[14];
      }

      for (i = 0; i < 16; i++) {
        // get little-endian words
        m[i] = B2S_GET32(ctx.b, 4 * i);
      }

      // ten rounds of mixing
      // uncomment the DebugPrint calls to log the computation
      // and match the RFC sample documentation
      // util.debugPrint('          m[16]', m, 32)
      for (i = 0; i < 10; i++) {
        // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)
        B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);
        B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);
        B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);
        B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);
        B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);
        B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);
        B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);
        B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);
      }
      // util.debugPrint('   (i=10) v[16]', v, 32)

      for (i = 0; i < 8; i++) {
        ctx.h[i] ^= v[i] ^ v[i + 8];
      }
      // util.debugPrint('h[8]', ctx.h, 32)
    }

    // Creates a BLAKE2s hashing context
    // Requires an output length between 1 and 32 bytes
    // Takes an optional Uint8Array key
    function blake2sInit (outlen, key) {
      if (!(outlen > 0 && outlen <= 32)) {
        throw new Error('Incorrect output length, should be in [1, 32]')
      }
      const keylen = key ? key.length : 0;
      if (key && !(keylen > 0 && keylen <= 32)) {
        throw new Error('Incorrect key length, should be in [1, 32]')
      }

      const ctx = {
        h: new Uint32Array(BLAKE2S_IV), // hash state
        b: new Uint8Array(64), // input block
        c: 0, // pointer within block
        t: 0, // input count
        outlen: outlen // output length in bytes
      };
      ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;

      if (keylen > 0) {
        blake2sUpdate(ctx, key);
        ctx.c = 64; // at the end
      }

      return ctx
    }

    // Updates a BLAKE2s streaming hash
    // Requires hash context and Uint8Array (byte array)
    function blake2sUpdate (ctx, input) {
      for (let i = 0; i < input.length; i++) {
        if (ctx.c === 64) {
          // buffer full ?
          ctx.t += ctx.c; // add counters
          blake2sCompress(ctx, false); // compress (not last)
          ctx.c = 0; // counter to zero
        }
        ctx.b[ctx.c++] = input[i];
      }
    }

    // Completes a BLAKE2s streaming hash
    // Returns a Uint8Array containing the message digest
    function blake2sFinal (ctx) {
      ctx.t += ctx.c; // mark last block offset
      while (ctx.c < 64) {
        // fill up with zeros
        ctx.b[ctx.c++] = 0;
      }
      blake2sCompress(ctx, true); // final block flag = 1

      // little endian convert and store
      const out = new Uint8Array(ctx.outlen);
      for (let i = 0; i < ctx.outlen; i++) {
        out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xff;
      }
      return out
    }

    // Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array
    //
    // Returns a n-byte Uint8Array
    //
    // Parameters:
    // - input - the input bytes, as a string, Buffer, or Uint8Array
    // - key - optional key Uint8Array, up to 32 bytes
    // - outlen - optional output length in bytes, default 64
    function blake2s (input, key, outlen) {
      // preprocess inputs
      outlen = outlen || 32;
      input = util.normalizeInput(input);

      // do the math
      const ctx = blake2sInit(outlen, key);
      blake2sUpdate(ctx, input);
      return blake2sFinal(ctx)
    }

    // Computes the BLAKE2S hash of a string or byte array
    //
    // Returns an n-byte hash in hex, all lowercase
    //
    // Parameters:
    // - input - the input bytes, as a string, Buffer, or Uint8Array
    // - key - optional key Uint8Array, up to 32 bytes
    // - outlen - optional output length in bytes, default 64
    function blake2sHex (input, key, outlen) {
      const output = blake2s(input, key, outlen);
      return util.toHex(output)
    }

    var blake2s_1 = {
      blake2s: blake2s,
      blake2sHex: blake2sHex,
      blake2sInit: blake2sInit,
      blake2sUpdate: blake2sUpdate,
      blake2sFinal: blake2sFinal
    };

    const b2b = blake2b_1;
    const b2s = blake2s_1;

    var blakejs = {
      blake2b: b2b.blake2b,
      blake2bHex: b2b.blake2bHex,
      blake2bInit: b2b.blake2bInit,
      blake2bUpdate: b2b.blake2bUpdate,
      blake2bFinal: b2b.blake2bFinal,
      blake2s: b2s.blake2s,
      blake2sHex: b2s.blake2sHex,
      blake2sInit: b2s.blake2sInit,
      blake2sUpdate: b2s.blake2sUpdate,
      blake2sFinal: b2s.blake2sFinal
    };

    var getBlake2Hash = function (toHash, length) {
        if (length === void 0) { length = 32; }
        var context = blakejs.blake2bInit(length, null);
        blakejs.blake2bUpdate(context, toHash);
        return blakejs.blake2bFinal(context);
    };

    var rhoUnforgeableToJs = function (expr) {
        var unforgeable = {};
        Object.keys(expr.ExprUnforg.data).forEach(function (u) {
            if (u === "UnforgPrivate") {
                unforgeable.UnforgPrivate = expr.ExprUnforg.data[u].data;
            }
            else if (u === "UnforgDeploy") {
                unforgeable.UnforgDeploy = expr.ExprUnforg.data[u].data;
            }
            else if (u === "UnforgDeployer") {
                unforgeable.UnforgDeployer = expr.ExprUnforg.data[u].data;
            }
        });
        return unforgeable;
    };
    var rholangMapToJsObject = function (expr) {
        var obj = {};
        Object.keys(expr.ExprMap.data).forEach(function (k) {
            obj[k] = rhoValToJs(expr.ExprMap.data[k]);
        });
        return obj;
    };
    var rhoExprStringToJs = function (expr) {
        return expr.ExprString.data;
    };
    var rhoExprUriToJs = function (expr) {
        return expr.ExprUri.data;
    };
    var rhoExprBoolToJs = function (expr) {
        return expr.ExprBool.data;
    };
    var rhoExprIntToJs = function (expr) {
        return expr.ExprInt.data;
    };
    var rhoExprListToJs = function (expr) {
        return expr.ExprList.data.map(function (e) { return rhoValToJs(e); });
    };
    var rhoExprTupleToJs = function (expr) {
        return expr.ExprTuple.data.map(function (e) { return rhoValToJs(e); });
    };
    var rhoExprSetToJs = function (expr) {
        return expr.ExprSet.data.map(function (e) { return rhoValToJs(e); });
    };
    var rhoValToJs = function (expr) {
        /* if (val.ids && val.ids[0]) {
              return rhoIdsToJs(val.ids);
            } else  */
        if (expr.ExprUnforg) {
            return rhoUnforgeableToJs(expr);
        }
        else if (expr.ExprMap) {
            return rholangMapToJsObject(expr);
        }
        else if (expr.ExprString) {
            return rhoExprStringToJs(expr);
        }
        else if (expr.ExprUri) {
            return rhoExprUriToJs(expr);
        }
        else if (expr.ExprBool) {
            return rhoExprBoolToJs(expr);
        }
        else if (expr.ExprInt) {
            return rhoExprIntToJs(expr);
        }
        else if (expr.ExprList) {
            return rhoExprListToJs(expr);
        }
        else if (expr.ExprTuple) {
            return rhoExprTupleToJs(expr);
        }
        else if (expr.ExprSet) {
            return rhoExprSetToJs(expr);
        }
        else {
            console.warn("Not implemented", expr);
            return null;
        }
    };

    /*
      converts expr received by decoding buffers
      and decoding Par to javascript variables
    */
    var rhoExprToVar = function (a
    //a: rnodeProtos.IExpr
    ) {
        if (a.g_string) {
            return a.g_string;
        }
        else if (a.g_uri) {
            return a.g_uri;
        }
        else if (a.g_int) {
            return parseInt(a.g_int, 10);
        }
        else if (a.g_bool) {
            return a.g_bool;
        }
        else if (a.e_list_body) {
            if (a.e_list_body && a.e_list_body.ps) {
                return a.e_list_body.ps.map(function (ps) {
                    if (ps.exprs && ps.exprs[0]) {
                        return rhoExprToVar(ps.exprs[0]);
                    }
                    else {
                        return null;
                    }
                });
            }
            else {
                return [];
            }
        }
        else if (a.e_tuple_body) {
            if (a.e_tuple_body && a.e_tuple_body.ps) {
                return a.e_tuple_body.ps.map(function (ps) {
                    if (ps.exprs && ps.exprs[0]) {
                        return rhoExprToVar(ps.exprs[0]);
                    }
                    else {
                        return null;
                    }
                });
            }
            else {
                return [];
            }
        }
        else if (a.e_set_body) {
            if (a.e_set_body && a.e_set_body.ps) {
                return a.e_set_body.ps.map(function (ps) {
                    if (ps.exprs && ps.exprs[0]) {
                        return rhoExprToVar(ps.exprs[0]);
                    }
                    else {
                        return null;
                    }
                });
            }
            else {
                return [];
            }
        }
        else if (a.e_map_body) {
            var obj_1 = {};
            if (a.e_map_body.kvs) {
                a.e_map_body.kvs.forEach(function (kv) {
                    if (kv.key && kv.key.exprs && kv.key.exprs[0]) {
                        if (kv.value && kv.value.exprs && kv.value.exprs[0]) {
                            obj_1[rhoExprToVar(kv.key.exprs[0])] = rhoExprToVar(kv.value.exprs[0]);
                        }
                        else {
                            obj_1[rhoExprToVar(kv.key.exprs[0])] = null;
                        }
                    }
                });
                return obj_1;
            }
            else {
                return {};
            }
        }
        else {
            console.warn("Not implemented", a);
            return null;
        }
    };

    var decodePar = function (par) {
        var a = rnodeProtos.Par.decode(par);
        return a.toJSON();
    };

    var sha3 = {exports: {}};

    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */

    (function (module) {
    	/*jslint bitwise: true */
    	(function () {

    	  var INPUT_ERROR = 'input is invalid type';
    	  var FINALIZE_ERROR = 'finalize already called';
    	  var WINDOW = typeof window === 'object';
    	  var root = WINDOW ? window : {};
    	  if (root.JS_SHA3_NO_WINDOW) {
    	    WINDOW = false;
    	  }
    	  var WEB_WORKER = !WINDOW && typeof self === 'object';
    	  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
    	  if (NODE_JS) {
    	    root = commonjsGlobal;
    	  } else if (WEB_WORKER) {
    	    root = self;
    	  }
    	  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
    	  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    	  var HEX_CHARS = '0123456789abcdef'.split('');
    	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
    	  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
    	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
    	  var PADDING = [6, 1536, 393216, 100663296];
    	  var SHIFT = [0, 8, 16, 24];
    	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
    	    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
    	    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
    	    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
    	    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    	  var BITS = [224, 256, 384, 512];
    	  var SHAKE_BITS = [128, 256];
    	  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
    	  var CSHAKE_BYTEPAD = {
    	    '128': 168,
    	    '256': 136
    	  };

    	  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    	    Array.isArray = function (obj) {
    	      return Object.prototype.toString.call(obj) === '[object Array]';
    	    };
    	  }

    	  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    	    ArrayBuffer.isView = function (obj) {
    	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    	    };
    	  }

    	  var createOutputMethod = function (bits, padding, outputType) {
    	    return function (message) {
    	      return new Keccak(bits, padding, bits).update(message)[outputType]();
    	    };
    	  };

    	  var createShakeOutputMethod = function (bits, padding, outputType) {
    	    return function (message, outputBits) {
    	      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    	    };
    	  };

    	  var createCshakeOutputMethod = function (bits, padding, outputType) {
    	    return function (message, outputBits, n, s) {
    	      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    	    };
    	  };

    	  var createKmacOutputMethod = function (bits, padding, outputType) {
    	    return function (key, message, outputBits, s) {
    	      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    	    };
    	  };

    	  var createOutputMethods = function (method, createMethod, bits, padding) {
    	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
    	      var type = OUTPUT_TYPES[i];
    	      method[type] = createMethod(bits, padding, type);
    	    }
    	    return method;
    	  };

    	  var createMethod = function (bits, padding) {
    	    var method = createOutputMethod(bits, padding, 'hex');
    	    method.create = function () {
    	      return new Keccak(bits, padding, bits);
    	    };
    	    method.update = function (message) {
    	      return method.create().update(message);
    	    };
    	    return createOutputMethods(method, createOutputMethod, bits, padding);
    	  };

    	  var createShakeMethod = function (bits, padding) {
    	    var method = createShakeOutputMethod(bits, padding, 'hex');
    	    method.create = function (outputBits) {
    	      return new Keccak(bits, padding, outputBits);
    	    };
    	    method.update = function (message, outputBits) {
    	      return method.create(outputBits).update(message);
    	    };
    	    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
    	  };

    	  var createCshakeMethod = function (bits, padding) {
    	    var w = CSHAKE_BYTEPAD[bits];
    	    var method = createCshakeOutputMethod(bits, padding, 'hex');
    	    method.create = function (outputBits, n, s) {
    	      if (!n && !s) {
    	        return methods['shake' + bits].create(outputBits);
    	      } else {
    	        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
    	      }
    	    };
    	    method.update = function (message, outputBits, n, s) {
    	      return method.create(outputBits, n, s).update(message);
    	    };
    	    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
    	  };

    	  var createKmacMethod = function (bits, padding) {
    	    var w = CSHAKE_BYTEPAD[bits];
    	    var method = createKmacOutputMethod(bits, padding, 'hex');
    	    method.create = function (key, outputBits, s) {
    	      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    	    };
    	    method.update = function (key, message, outputBits, s) {
    	      return method.create(key, outputBits, s).update(message);
    	    };
    	    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
    	  };

    	  var algorithms = [
    	    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
    	    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
    	    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
    	    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
    	    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
    	  ];

    	  var methods = {}, methodNames = [];

    	  for (var i = 0; i < algorithms.length; ++i) {
    	    var algorithm = algorithms[i];
    	    var bits = algorithm.bits;
    	    for (var j = 0; j < bits.length; ++j) {
    	      var methodName = algorithm.name + '_' + bits[j];
    	      methodNames.push(methodName);
    	      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
    	      if (algorithm.name !== 'sha3') {
    	        var newMethodName = algorithm.name + bits[j];
    	        methodNames.push(newMethodName);
    	        methods[newMethodName] = methods[methodName];
    	      }
    	    }
    	  }

    	  function Keccak(bits, padding, outputBits) {
    	    this.blocks = [];
    	    this.s = [];
    	    this.padding = padding;
    	    this.outputBits = outputBits;
    	    this.reset = true;
    	    this.finalized = false;
    	    this.block = 0;
    	    this.start = 0;
    	    this.blockCount = (1600 - (bits << 1)) >> 5;
    	    this.byteCount = this.blockCount << 2;
    	    this.outputBlocks = outputBits >> 5;
    	    this.extraBytes = (outputBits & 31) >> 3;

    	    for (var i = 0; i < 50; ++i) {
    	      this.s[i] = 0;
    	    }
    	  }

    	  Keccak.prototype.update = function (message) {
    	    if (this.finalized) {
    	      throw new Error(FINALIZE_ERROR);
    	    }
    	    var notString, type = typeof message;
    	    if (type !== 'string') {
    	      if (type === 'object') {
    	        if (message === null) {
    	          throw new Error(INPUT_ERROR);
    	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
    	          message = new Uint8Array(message);
    	        } else if (!Array.isArray(message)) {
    	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
    	            throw new Error(INPUT_ERROR);
    	          }
    	        }
    	      } else {
    	        throw new Error(INPUT_ERROR);
    	      }
    	      notString = true;
    	    }
    	    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
    	      blockCount = this.blockCount, index = 0, s = this.s, i, code;

    	    while (index < length) {
    	      if (this.reset) {
    	        this.reset = false;
    	        blocks[0] = this.block;
    	        for (i = 1; i < blockCount + 1; ++i) {
    	          blocks[i] = 0;
    	        }
    	      }
    	      if (notString) {
    	        for (i = this.start; index < length && i < byteCount; ++index) {
    	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
    	        }
    	      } else {
    	        for (i = this.start; index < length && i < byteCount; ++index) {
    	          code = message.charCodeAt(index);
    	          if (code < 0x80) {
    	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
    	          } else if (code < 0x800) {
    	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
    	          } else if (code < 0xd800 || code >= 0xe000) {
    	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
    	          } else {
    	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
    	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
    	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
    	          }
    	        }
    	      }
    	      this.lastByteIndex = i;
    	      if (i >= byteCount) {
    	        this.start = i - byteCount;
    	        this.block = blocks[blockCount];
    	        for (i = 0; i < blockCount; ++i) {
    	          s[i] ^= blocks[i];
    	        }
    	        f(s);
    	        this.reset = true;
    	      } else {
    	        this.start = i;
    	      }
    	    }
    	    return this;
    	  };

    	  Keccak.prototype.encode = function (x, right) {
    	    var o = x & 255, n = 1;
    	    var bytes = [o];
    	    x = x >> 8;
    	    o = x & 255;
    	    while (o > 0) {
    	      bytes.unshift(o);
    	      x = x >> 8;
    	      o = x & 255;
    	      ++n;
    	    }
    	    if (right) {
    	      bytes.push(n);
    	    } else {
    	      bytes.unshift(n);
    	    }
    	    this.update(bytes);
    	    return bytes.length;
    	  };

    	  Keccak.prototype.encodeString = function (str) {
    	    var notString, type = typeof str;
    	    if (type !== 'string') {
    	      if (type === 'object') {
    	        if (str === null) {
    	          throw new Error(INPUT_ERROR);
    	        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
    	          str = new Uint8Array(str);
    	        } else if (!Array.isArray(str)) {
    	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
    	            throw new Error(INPUT_ERROR);
    	          }
    	        }
    	      } else {
    	        throw new Error(INPUT_ERROR);
    	      }
    	      notString = true;
    	    }
    	    var bytes = 0, length = str.length;
    	    if (notString) {
    	      bytes = length;
    	    } else {
    	      for (var i = 0; i < str.length; ++i) {
    	        var code = str.charCodeAt(i);
    	        if (code < 0x80) {
    	          bytes += 1;
    	        } else if (code < 0x800) {
    	          bytes += 2;
    	        } else if (code < 0xd800 || code >= 0xe000) {
    	          bytes += 3;
    	        } else {
    	          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
    	          bytes += 4;
    	        }
    	      }
    	    }
    	    bytes += this.encode(bytes * 8);
    	    this.update(str);
    	    return bytes;
    	  };

    	  Keccak.prototype.bytepad = function (strs, w) {
    	    var bytes = this.encode(w);
    	    for (var i = 0; i < strs.length; ++i) {
    	      bytes += this.encodeString(strs[i]);
    	    }
    	    var paddingBytes = w - bytes % w;
    	    var zeros = [];
    	    zeros.length = paddingBytes;
    	    this.update(zeros);
    	    return this;
    	  };

    	  Keccak.prototype.finalize = function () {
    	    if (this.finalized) {
    	      return;
    	    }
    	    this.finalized = true;
    	    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    	    blocks[i >> 2] |= this.padding[i & 3];
    	    if (this.lastByteIndex === this.byteCount) {
    	      blocks[0] = blocks[blockCount];
    	      for (i = 1; i < blockCount + 1; ++i) {
    	        blocks[i] = 0;
    	      }
    	    }
    	    blocks[blockCount - 1] |= 0x80000000;
    	    for (i = 0; i < blockCount; ++i) {
    	      s[i] ^= blocks[i];
    	    }
    	    f(s);
    	  };

    	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    	    this.finalize();

    	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
    	      extraBytes = this.extraBytes, i = 0, j = 0;
    	    var hex = '', block;
    	    while (j < outputBlocks) {
    	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
    	        block = s[i];
    	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
    	          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
    	          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
    	          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
    	      }
    	      if (j % blockCount === 0) {
    	        f(s);
    	        i = 0;
    	      }
    	    }
    	    if (extraBytes) {
    	      block = s[i];
    	      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
    	      if (extraBytes > 1) {
    	        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
    	      }
    	      if (extraBytes > 2) {
    	        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
    	      }
    	    }
    	    return hex;
    	  };

    	  Keccak.prototype.arrayBuffer = function () {
    	    this.finalize();

    	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
    	      extraBytes = this.extraBytes, i = 0, j = 0;
    	    var bytes = this.outputBits >> 3;
    	    var buffer;
    	    if (extraBytes) {
    	      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    	    } else {
    	      buffer = new ArrayBuffer(bytes);
    	    }
    	    var array = new Uint32Array(buffer);
    	    while (j < outputBlocks) {
    	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
    	        array[j] = s[i];
    	      }
    	      if (j % blockCount === 0) {
    	        f(s);
    	      }
    	    }
    	    if (extraBytes) {
    	      array[i] = s[i];
    	      buffer = buffer.slice(0, bytes);
    	    }
    	    return buffer;
    	  };

    	  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

    	  Keccak.prototype.digest = Keccak.prototype.array = function () {
    	    this.finalize();

    	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
    	      extraBytes = this.extraBytes, i = 0, j = 0;
    	    var array = [], offset, block;
    	    while (j < outputBlocks) {
    	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
    	        offset = j << 2;
    	        block = s[i];
    	        array[offset] = block & 0xFF;
    	        array[offset + 1] = (block >> 8) & 0xFF;
    	        array[offset + 2] = (block >> 16) & 0xFF;
    	        array[offset + 3] = (block >> 24) & 0xFF;
    	      }
    	      if (j % blockCount === 0) {
    	        f(s);
    	      }
    	    }
    	    if (extraBytes) {
    	      offset = j << 2;
    	      block = s[i];
    	      array[offset] = block & 0xFF;
    	      if (extraBytes > 1) {
    	        array[offset + 1] = (block >> 8) & 0xFF;
    	      }
    	      if (extraBytes > 2) {
    	        array[offset + 2] = (block >> 16) & 0xFF;
    	      }
    	    }
    	    return array;
    	  };

    	  function Kmac(bits, padding, outputBits) {
    	    Keccak.call(this, bits, padding, outputBits);
    	  }

    	  Kmac.prototype = new Keccak();

    	  Kmac.prototype.finalize = function () {
    	    this.encode(this.outputBits, true);
    	    return Keccak.prototype.finalize.call(this);
    	  };

    	  var f = function (s) {
    	    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
    	      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
    	      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
    	      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    	    for (n = 0; n < 48; n += 2) {
    	      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
    	      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
    	      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
    	      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
    	      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
    	      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
    	      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
    	      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
    	      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
    	      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

    	      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
    	      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
    	      s[0] ^= h;
    	      s[1] ^= l;
    	      s[10] ^= h;
    	      s[11] ^= l;
    	      s[20] ^= h;
    	      s[21] ^= l;
    	      s[30] ^= h;
    	      s[31] ^= l;
    	      s[40] ^= h;
    	      s[41] ^= l;
    	      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
    	      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
    	      s[2] ^= h;
    	      s[3] ^= l;
    	      s[12] ^= h;
    	      s[13] ^= l;
    	      s[22] ^= h;
    	      s[23] ^= l;
    	      s[32] ^= h;
    	      s[33] ^= l;
    	      s[42] ^= h;
    	      s[43] ^= l;
    	      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
    	      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
    	      s[4] ^= h;
    	      s[5] ^= l;
    	      s[14] ^= h;
    	      s[15] ^= l;
    	      s[24] ^= h;
    	      s[25] ^= l;
    	      s[34] ^= h;
    	      s[35] ^= l;
    	      s[44] ^= h;
    	      s[45] ^= l;
    	      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
    	      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
    	      s[6] ^= h;
    	      s[7] ^= l;
    	      s[16] ^= h;
    	      s[17] ^= l;
    	      s[26] ^= h;
    	      s[27] ^= l;
    	      s[36] ^= h;
    	      s[37] ^= l;
    	      s[46] ^= h;
    	      s[47] ^= l;
    	      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
    	      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
    	      s[8] ^= h;
    	      s[9] ^= l;
    	      s[18] ^= h;
    	      s[19] ^= l;
    	      s[28] ^= h;
    	      s[29] ^= l;
    	      s[38] ^= h;
    	      s[39] ^= l;
    	      s[48] ^= h;
    	      s[49] ^= l;

    	      b0 = s[0];
    	      b1 = s[1];
    	      b32 = (s[11] << 4) | (s[10] >>> 28);
    	      b33 = (s[10] << 4) | (s[11] >>> 28);
    	      b14 = (s[20] << 3) | (s[21] >>> 29);
    	      b15 = (s[21] << 3) | (s[20] >>> 29);
    	      b46 = (s[31] << 9) | (s[30] >>> 23);
    	      b47 = (s[30] << 9) | (s[31] >>> 23);
    	      b28 = (s[40] << 18) | (s[41] >>> 14);
    	      b29 = (s[41] << 18) | (s[40] >>> 14);
    	      b20 = (s[2] << 1) | (s[3] >>> 31);
    	      b21 = (s[3] << 1) | (s[2] >>> 31);
    	      b2 = (s[13] << 12) | (s[12] >>> 20);
    	      b3 = (s[12] << 12) | (s[13] >>> 20);
    	      b34 = (s[22] << 10) | (s[23] >>> 22);
    	      b35 = (s[23] << 10) | (s[22] >>> 22);
    	      b16 = (s[33] << 13) | (s[32] >>> 19);
    	      b17 = (s[32] << 13) | (s[33] >>> 19);
    	      b48 = (s[42] << 2) | (s[43] >>> 30);
    	      b49 = (s[43] << 2) | (s[42] >>> 30);
    	      b40 = (s[5] << 30) | (s[4] >>> 2);
    	      b41 = (s[4] << 30) | (s[5] >>> 2);
    	      b22 = (s[14] << 6) | (s[15] >>> 26);
    	      b23 = (s[15] << 6) | (s[14] >>> 26);
    	      b4 = (s[25] << 11) | (s[24] >>> 21);
    	      b5 = (s[24] << 11) | (s[25] >>> 21);
    	      b36 = (s[34] << 15) | (s[35] >>> 17);
    	      b37 = (s[35] << 15) | (s[34] >>> 17);
    	      b18 = (s[45] << 29) | (s[44] >>> 3);
    	      b19 = (s[44] << 29) | (s[45] >>> 3);
    	      b10 = (s[6] << 28) | (s[7] >>> 4);
    	      b11 = (s[7] << 28) | (s[6] >>> 4);
    	      b42 = (s[17] << 23) | (s[16] >>> 9);
    	      b43 = (s[16] << 23) | (s[17] >>> 9);
    	      b24 = (s[26] << 25) | (s[27] >>> 7);
    	      b25 = (s[27] << 25) | (s[26] >>> 7);
    	      b6 = (s[36] << 21) | (s[37] >>> 11);
    	      b7 = (s[37] << 21) | (s[36] >>> 11);
    	      b38 = (s[47] << 24) | (s[46] >>> 8);
    	      b39 = (s[46] << 24) | (s[47] >>> 8);
    	      b30 = (s[8] << 27) | (s[9] >>> 5);
    	      b31 = (s[9] << 27) | (s[8] >>> 5);
    	      b12 = (s[18] << 20) | (s[19] >>> 12);
    	      b13 = (s[19] << 20) | (s[18] >>> 12);
    	      b44 = (s[29] << 7) | (s[28] >>> 25);
    	      b45 = (s[28] << 7) | (s[29] >>> 25);
    	      b26 = (s[38] << 8) | (s[39] >>> 24);
    	      b27 = (s[39] << 8) | (s[38] >>> 24);
    	      b8 = (s[48] << 14) | (s[49] >>> 18);
    	      b9 = (s[49] << 14) | (s[48] >>> 18);

    	      s[0] = b0 ^ (~b2 & b4);
    	      s[1] = b1 ^ (~b3 & b5);
    	      s[10] = b10 ^ (~b12 & b14);
    	      s[11] = b11 ^ (~b13 & b15);
    	      s[20] = b20 ^ (~b22 & b24);
    	      s[21] = b21 ^ (~b23 & b25);
    	      s[30] = b30 ^ (~b32 & b34);
    	      s[31] = b31 ^ (~b33 & b35);
    	      s[40] = b40 ^ (~b42 & b44);
    	      s[41] = b41 ^ (~b43 & b45);
    	      s[2] = b2 ^ (~b4 & b6);
    	      s[3] = b3 ^ (~b5 & b7);
    	      s[12] = b12 ^ (~b14 & b16);
    	      s[13] = b13 ^ (~b15 & b17);
    	      s[22] = b22 ^ (~b24 & b26);
    	      s[23] = b23 ^ (~b25 & b27);
    	      s[32] = b32 ^ (~b34 & b36);
    	      s[33] = b33 ^ (~b35 & b37);
    	      s[42] = b42 ^ (~b44 & b46);
    	      s[43] = b43 ^ (~b45 & b47);
    	      s[4] = b4 ^ (~b6 & b8);
    	      s[5] = b5 ^ (~b7 & b9);
    	      s[14] = b14 ^ (~b16 & b18);
    	      s[15] = b15 ^ (~b17 & b19);
    	      s[24] = b24 ^ (~b26 & b28);
    	      s[25] = b25 ^ (~b27 & b29);
    	      s[34] = b34 ^ (~b36 & b38);
    	      s[35] = b35 ^ (~b37 & b39);
    	      s[44] = b44 ^ (~b46 & b48);
    	      s[45] = b45 ^ (~b47 & b49);
    	      s[6] = b6 ^ (~b8 & b0);
    	      s[7] = b7 ^ (~b9 & b1);
    	      s[16] = b16 ^ (~b18 & b10);
    	      s[17] = b17 ^ (~b19 & b11);
    	      s[26] = b26 ^ (~b28 & b20);
    	      s[27] = b27 ^ (~b29 & b21);
    	      s[36] = b36 ^ (~b38 & b30);
    	      s[37] = b37 ^ (~b39 & b31);
    	      s[46] = b46 ^ (~b48 & b40);
    	      s[47] = b47 ^ (~b49 & b41);
    	      s[8] = b8 ^ (~b0 & b2);
    	      s[9] = b9 ^ (~b1 & b3);
    	      s[18] = b18 ^ (~b10 & b12);
    	      s[19] = b19 ^ (~b11 & b13);
    	      s[28] = b28 ^ (~b20 & b22);
    	      s[29] = b29 ^ (~b21 & b23);
    	      s[38] = b38 ^ (~b30 & b32);
    	      s[39] = b39 ^ (~b31 & b33);
    	      s[48] = b48 ^ (~b40 & b42);
    	      s[49] = b49 ^ (~b41 & b43);

    	      s[0] ^= RC[n];
    	      s[1] ^= RC[n + 1];
    	    }
    	  };

    	  if (COMMON_JS) {
    	    module.exports = methods;
    	  } else {
    	    for (i = 0; i < methodNames.length; ++i) {
    	      root[methodNames[i]] = methods[methodNames[i]];
    	    }
    	  }
    	})();
    } (sha3));

    // https://github.com/45678/Base58/blob/master/Base58.js
    var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    var encode = function (buffer) {
        var carry, digits;
        if (buffer.length === 0) {
            return "";
        }
        digits = [0];
        var i = 0;
        while (i < buffer.length) {
            var j_1 = 0;
            while (j_1 < digits.length) {
                digits[j_1] <<= 8;
                j_1++;
            }
            digits[0] += buffer[i];
            carry = 0;
            j_1 = 0;
            while (j_1 < digits.length) {
                digits[j_1] += carry;
                carry = (digits[j_1] / 58) | 0;
                digits[j_1] %= 58;
                ++j_1;
            }
            while (carry) {
                digits.push(carry % 58);
                carry = (carry / 58) | 0;
            }
            i++;
        }
        i = 0;
        while (buffer[i] === 0 && i < buffer.length - 1) {
            digits.push(0);
            i++;
        }
        return digits
            .reverse()
            .map(function (digit) {
            return ALPHABET[digit];
        })
            .join("");
    };

    var bytesFromHex = function (hexStr) {
        var byte2hex = function (_a, x) {
            var arr = _a[0], bhi = _a[1];
            return bhi ? [__spreadArray(__spreadArray([], arr, true), [parseInt("".concat(bhi).concat(x), 16)], false)] : [arr, x];
        };
        // @ts-ignore
        var resArr = Array.from(hexStr).reduce(byte2hex, [[]])[0];
        // @ts-ignore
        return Uint8Array.from(resArr);
    };

    //import * as keccak256_ from "keccak256";
    var ethAddressFromPublicKey = function (publicKey) {
        if (!publicKey || publicKey.length !== 130) {
            throw new Error("Public key must contain 130 characters");
        }
        var pubKeyBytes = bytesFromHex(publicKey);
        var pkHash = sha3.exports.keccak256(Buffer.from(pubKeyBytes.slice(1))); // .toString("hex");
        return "0x".concat(pkHash.slice(-40).toLowerCase());
    };

    //import * as keccak256_ from "keccak256";
    var toBase58 = function (hexStr) {
        var bytes = bytesFromHex(hexStr);
        return encode(bytes);
    };
    // Address and public key
    // Algorithm to generate ETH and REV address is taken from RNode source
    // https://github.com/rchain/rchain/blob/bf7a30e1d388d46aa9e5f4b8c04089fc8e31d771/rholang/src/main/scala/coop/rchain/rholang/interpreter/util/AddressTools.scala#L47
    // Prefix as defined in https://github.com/rchain/rchain/blob/c6721a6/rholang/src/main/scala/coop/rchain/rholang/interpreter/util/RevAddress.scala#L13
    var prefix = { coinId: "000000", version: "00" };
    var getAddrFromEth = function (ethAddr) {
        if (!ethAddr || ethAddr.length !== 40) {
            throw new Error("ETH address must contain 130 characters");
        }
        // Hash ETH address
        var ethAddrBytes = bytesFromHex(ethAddr);
        var ethHash = sha3.exports.keccak256(Buffer.from(ethAddrBytes)); // .toString("hex");
        // Add prefix with hash and calculate checksum (blake2b-256 hash)
        var payload = "".concat(prefix.coinId).concat(prefix.version).concat(ethHash);
        var payloadBytes = bytesFromHex(payload);
        var checksum = blakejs.blake2bHex(payloadBytes, void 666, 32).slice(0, 8);
        // Return REV address
        return toBase58("".concat(payload).concat(checksum));
    };
    var revAddressFromPublicKey = function (publicKey) {
        var ethAddressWithoutPrefix = ethAddressFromPublicKey(publicKey).slice(2);
        return getAddrFromEth(ethAddressWithoutPrefix);
    };

    var getFirstBlock = function (blockInfo) {
        return blockInfo[0];
    };
    var getValueFromBlocks = function (blockInfo) {
        for (var i = 0; i < blockInfo.length; i += 1) {
            var block = blockInfo[i];
            if (block.postBlockData) {
                for (var j = 0; j < block.postBlockData.length; j += 1) {
                    var data = block.postBlockData[j];
                    if (data) {
                        return data;
                    }
                }
            }
        }
        throw new Error("Not data found in any block");
    };
    var unforgeableWithId = function (id) {
        return id.toString("hex");
    };
    var stringToRhoRepr = function (a) {
        return { g_string: a };
    };
    var intToRhoRepr = function (a) {
        return { g_int: a };
    };
    var boolToRhoRepr = function (a) {
        return { g_bool: a };
    };
    var listToRhoRepr = function (a) {
        return {
            ps: a.map(function (e) { return ({ exprs: [varToRhoExpr(e)] }); }),
        };
    };
    var mapToRhoRepr = function (a) {
        var map = {
            kvs: [],
        };
        Object.keys(a)
            .sort() // alphabetical
            .forEach(function (key) {
            if (typeof a[key] !== "undefined" && a[key] !== null) {
                map.kvs.push({
                    key: { exprs: [varToRhoExpr(key)] },
                    value: { exprs: [varToRhoExpr(a[key])] },
                });
            }
            else {
                map.kvs.push({
                    key: { exprs: [varToRhoExpr(key)] },
                });
            }
        });
        return map;
    };
    var varToRhoExpr = function (a) {
        if (typeof a === "boolean") {
            return boolToRhoRepr(a);
        }
        if (typeof a === "string") {
            return stringToRhoRepr(a);
        }
        if (typeof a === "number") {
            return intToRhoRepr(a);
        }
        if (Array.isArray(a)) {
            return { e_list_body: listToRhoRepr(a) };
        }
        if (typeof a === "object" && a !== null) {
            return { e_map_body: mapToRhoRepr(a) };
        }
        throw new Error("Unknown variable type");
    };
    var toByteArray = function (a) {
        var expr = varToRhoExpr(a);
        return rnodeProtos.Par.encode({
            exprs: [expr],
        }).finish();
    };
    var verifyPrivateAndPublicKey = function (privateKey, publicKey) {
        var ec = new elliptic.ec("secp256k1");
        var keyPair = ec.keyFromPrivate(privateKey);
        if (keyPair.getPublic().encode("hex", false) !== publicKey) {
            throw new Error("Private key and public key do not match");
        }
    };
    var signSecp256k1 = function (hash, privateKey) {
        var ec = new elliptic.ec("secp256k1");
        var keyPair = ec.keyFromPrivate(privateKey);
        var signature = keyPair.sign((Buffer || Buffer).from(hash), {
            canonical: true,
        });
        var derSign = signature.toDER();
        if (!ec.verify(Buffer.from(hash), signature, keyPair, "hex")) {
            throw new Error("Failed to verify signature");
        }
        return new Uint8Array(derSign);
    };
    var transferRevTerm = function (a) {
        if (typeof a.from !== "string") {
            throw new Error("from must be a REV address");
        }
        if (typeof a.to !== "string") {
            throw new Error("to must be a REV address");
        }
        if (typeof a.amount !== "number") {
            throw new Error("amount must be a number");
        }
        return "new\n  rl(`rho:registry:lookup`),\n  RevVaultCh,\n  stdout(`rho:io:stdout`)\nin {\n\nrl!(`rho:rchain:revVault`, *RevVaultCh) |\nfor (@(_, RevVault) <- RevVaultCh) {\n\n  match (\n    \"".concat(a.from, "\",\n    \"").concat(a.to, "\",\n    ").concat(a.amount, "\n  ) {\n    (from, to, amount) => {\n\n      new vaultCh, revVaultkeyCh, deployerId(`rho:rchain:deployerId`) in {\n        @RevVault!(\"findOrCreate\", from, *vaultCh) |\n        @RevVault!(\"deployerAuthKey\", *deployerId, *revVaultkeyCh) |\n        for (@(true, vault) <- vaultCh; key <- revVaultkeyCh) {\n\n          stdout!((\"Beginning transfer of \", amount, \"REV from\", from, \"to\", to)) |\n\n          new resultCh in {\n            @vault!(\"transfer\", to, amount, *key, *resultCh) |\n            for (@result <- resultCh) {\n              stdout!((\"Finished transfer of \", amount, \"REV to\", to, \"result was:\", result))\n            }\n          }\n        }\n      }\n    }\n  }\n}\n}");
    };
    var getDeployOptions = function (sigAlgorithm, timestamp, term, privateKey, publicKey, phloPrice, phloLimit, validAfterBlockNumber) {
        if (phloPrice === void 0) { phloPrice = 1; }
        if (phloLimit === void 0) { phloLimit = 10000; }
        if (validAfterBlockNumber === void 0) { validAfterBlockNumber = -1; }
        var deployData = getDeployData(timestamp, term, phloPrice, phloLimit, validAfterBlockNumber || -1);
        var toSign = getDeployDataToSign(deployData);
        var hash = getBlake2Hash(toSign);
        var signature;
        signature = signSecp256k1(hash, privateKey);
        return {
            data: deployData,
            deployer: publicKey,
            signature: Buffer.from(new Uint8Array(signature)).toString("hex"),
            sigAlgorithm: sigAlgorithm,
        };
    };
    // Address and public key
    // Algorithm to generate ETH and REV address is taken from RNode source
    // https://github.com/rchain/rchain/blob/bf7a30e1d388d46aa9e5f4b8c04089fc8e31d771/rholang/src/main/scala/coop/rchain/rholang/interpreter/util/AddressTools.scala#L47
    var publicKeyFromPrivateKey = function (privateKey) {
        var ec = new elliptic.ec("secp256k1");
        var keyPair = ec.keyFromPrivate(privateKey);
        return keyPair.getPublic().encode("hex", false);
    };

    var _utils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getFirstBlock: getFirstBlock,
        getValueFromBlocks: getValueFromBlocks,
        unforgeableWithId: unforgeableWithId,
        mapToRhoRepr: mapToRhoRepr,
        varToRhoExpr: varToRhoExpr,
        toByteArray: toByteArray,
        verifyPrivateAndPublicKey: verifyPrivateAndPublicKey,
        signSecp256k1: signSecp256k1,
        transferRevTerm: transferRevTerm,
        getDeployOptions: getDeployOptions,
        publicKeyFromPrivateKey: publicKeyFromPrivateKey,
        rhoValToJs: rhoValToJs,
        rhoExprToVar: rhoExprToVar,
        decodePar: decodePar,
        getBlake2Hash: getBlake2Hash,
        getDeployData: getDeployData,
        getDeployDataToSign: getDeployDataToSign,
        revAddressFromPublicKey: revAddressFromPublicKey,
        ethAddressFromPublicKey: ethAddressFromPublicKey
    });

    var dist = {exports: {}};

    /**
     * Returns a `Buffer` instance from the given data URI `uri`.
     *
     * @param {String} uri Data URI to turn into a Buffer instance
     * @return {Buffer} Buffer instance from Data URI
     * @api public
     */
    function dataUriToBuffer(uri) {
        if (!/^data:/i.test(uri)) {
            throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
        }
        // strip newlines
        uri = uri.replace(/\r?\n/g, '');
        // split the URI up into the "metadata" and the "data" portions
        const firstComma = uri.indexOf(',');
        if (firstComma === -1 || firstComma <= 4) {
            throw new TypeError('malformed data: URI');
        }
        // remove the "data:" scheme and parse the metadata
        const meta = uri.substring(5, firstComma).split(';');
        let charset = '';
        let base64 = false;
        const type = meta[0] || 'text/plain';
        let typeFull = type;
        for (let i = 1; i < meta.length; i++) {
            if (meta[i] === 'base64') {
                base64 = true;
            }
            else {
                typeFull += `;${meta[i]}`;
                if (meta[i].indexOf('charset=') === 0) {
                    charset = meta[i].substring(8);
                }
            }
        }
        // defaults to US-ASCII only if type is not provided
        if (!meta[0] && !charset.length) {
            typeFull += ';charset=US-ASCII';
            charset = 'US-ASCII';
        }
        // get the encoded data portion and decode URI-encoded chars
        const encoding = base64 ? 'base64' : 'ascii';
        const data = unescape(uri.substring(firstComma + 1));
        const buffer = Buffer.from(data, encoding);
        // set `.type` and `.typeFull` properties to MIME type
        buffer.type = type;
        buffer.typeFull = typeFull;
        // set the `.charset` property
        buffer.charset = charset;
        return buffer;
    }
    var src = dataUriToBuffer;

    const {Readable} = require$$0__default["default"];

    /**
     * @type {WeakMap<Blob, {type: string, size: number, parts: (Blob | Buffer)[] }>}
     */
    const wm = new WeakMap();

    async function * read(parts) {
    	for (const part of parts) {
    		if ('stream' in part) {
    			yield * part.stream();
    		} else {
    			yield part;
    		}
    	}
    }

    class Blob {
    	/**
    	 * The Blob() constructor returns a new Blob object. The content
    	 * of the blob consists of the concatenation of the values given
    	 * in the parameter array.
    	 *
    	 * @param {(ArrayBufferLike | ArrayBufferView | Blob | Buffer | string)[]} blobParts
    	 * @param {{ type?: string }} [options]
    	 */
    	constructor(blobParts = [], options = {}) {
    		let size = 0;

    		const parts = blobParts.map(element => {
    			let buffer;
    			if (element instanceof Buffer) {
    				buffer = element;
    			} else if (ArrayBuffer.isView(element)) {
    				buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
    			} else if (element instanceof ArrayBuffer) {
    				buffer = Buffer.from(element);
    			} else if (element instanceof Blob) {
    				buffer = element;
    			} else {
    				buffer = Buffer.from(typeof element === 'string' ? element : String(element));
    			}

    			// eslint-disable-next-line unicorn/explicit-length-check
    			size += buffer.length || buffer.size || 0;
    			return buffer;
    		});

    		const type = options.type === undefined ? '' : String(options.type).toLowerCase();

    		wm.set(this, {
    			type: /[^\u0020-\u007E]/.test(type) ? '' : type,
    			size,
    			parts
    		});
    	}

    	/**
    	 * The Blob interface's size property returns the
    	 * size of the Blob in bytes.
    	 */
    	get size() {
    		return wm.get(this).size;
    	}

    	/**
    	 * The type property of a Blob object returns the MIME type of the file.
    	 */
    	get type() {
    		return wm.get(this).type;
    	}

    	/**
    	 * The text() method in the Blob interface returns a Promise
    	 * that resolves with a string containing the contents of
    	 * the blob, interpreted as UTF-8.
    	 *
    	 * @return {Promise<string>}
    	 */
    	async text() {
    		return Buffer.from(await this.arrayBuffer()).toString();
    	}

    	/**
    	 * The arrayBuffer() method in the Blob interface returns a
    	 * Promise that resolves with the contents of the blob as
    	 * binary data contained in an ArrayBuffer.
    	 *
    	 * @return {Promise<ArrayBuffer>}
    	 */
    	async arrayBuffer() {
    		const data = new Uint8Array(this.size);
    		let offset = 0;
    		for await (const chunk of this.stream()) {
    			data.set(chunk, offset);
    			offset += chunk.length;
    		}

    		return data.buffer;
    	}

    	/**
    	 * The Blob interface's stream() method is difference from native
    	 * and uses node streams instead of whatwg streams.
    	 *
    	 * @returns {Readable} Node readable stream
    	 */
    	stream() {
    		return Readable.from(read(wm.get(this).parts));
    	}

    	/**
    	 * The Blob interface's slice() method creates and returns a
    	 * new Blob object which contains data from a subset of the
    	 * blob on which it's called.
    	 *
    	 * @param {number} [start]
    	 * @param {number} [end]
    	 * @param {string} [type]
    	 */
    	slice(start = 0, end = this.size, type = '') {
    		const {size} = this;

    		let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
    		let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);

    		const span = Math.max(relativeEnd - relativeStart, 0);
    		const parts = wm.get(this).parts.values();
    		const blobParts = [];
    		let added = 0;

    		for (const part of parts) {
    			const size = ArrayBuffer.isView(part) ? part.byteLength : part.size;
    			if (relativeStart && size <= relativeStart) {
    				// Skip the beginning and change the relative
    				// start & end position as we skip the unwanted parts
    				relativeStart -= size;
    				relativeEnd -= size;
    			} else {
    				const chunk = part.slice(relativeStart, Math.min(size, relativeEnd));
    				blobParts.push(chunk);
    				added += ArrayBuffer.isView(chunk) ? chunk.byteLength : chunk.size;
    				relativeStart = 0; // All next sequental parts should start at 0

    				// don't add the overflow to new blobParts
    				if (added >= span) {
    					break;
    				}
    			}
    		}

    		const blob = new Blob([], {type: String(type).toLowerCase()});
    		Object.assign(wm.get(blob), {size: span, parts: blobParts});

    		return blob;
    	}

    	get [Symbol.toStringTag]() {
    		return 'Blob';
    	}

    	static [Symbol.hasInstance](object) {
    		return (
    			object &&
    			typeof object === 'object' &&
    			typeof object.stream === 'function' &&
    			object.stream.length === 0 &&
    			typeof object.constructor === 'function' &&
    			/^(Blob|File)$/.test(object[Symbol.toStringTag])
    		);
    	}
    }

    Object.defineProperties(Blob.prototype, {
    	size: {enumerable: true},
    	type: {enumerable: true},
    	slice: {enumerable: true}
    });

    var fetchBlob = Blob;

    (function (module, exports) {

    	exports = module.exports = fetch;

    	const http = require$$0__default$1["default"];
    	const https = require$$1__default["default"];
    	const zlib = require$$2__default["default"];
    	const Stream = require$$0__default["default"];
    	const dataUriToBuffer = src;
    	const util = require$$5__default["default"];
    	const Blob = fetchBlob;
    	const crypto = require$$7__default["default"];
    	const url = require$$8__default["default"];

    	class FetchBaseError extends Error {
    		constructor(message, type) {
    			super(message);
    			// Hide custom error implementation details from end-users
    			Error.captureStackTrace(this, this.constructor);

    			this.type = type;
    		}

    		get name() {
    			return this.constructor.name;
    		}

    		get [Symbol.toStringTag]() {
    			return this.constructor.name;
    		}
    	}

    	/**
    	 * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError
    	*/

    	/**
    	 * FetchError interface for operational errors
    	 */
    	class FetchError extends FetchBaseError {
    		/**
    		 * @param  {string} message -      Error message for human
    		 * @param  {string} [type] -        Error type for machine
    		 * @param  {SystemError} [systemError] - For Node.js system error
    		 */
    		constructor(message, type, systemError) {
    			super(message, type);
    			// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code
    			if (systemError) {
    				// eslint-disable-next-line no-multi-assign
    				this.code = this.errno = systemError.code;
    				this.erroredSysCall = systemError.syscall;
    			}
    		}
    	}

    	/**
    	 * Is.js
    	 *
    	 * Object type checks.
    	 */

    	const NAME = Symbol.toStringTag;

    	/**
    	 * Check if `obj` is a URLSearchParams object
    	 * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143
    	 *
    	 * @param  {*} obj
    	 * @return {boolean}
    	 */
    	const isURLSearchParameters = object => {
    		return (
    			typeof object === 'object' &&
    			typeof object.append === 'function' &&
    			typeof object.delete === 'function' &&
    			typeof object.get === 'function' &&
    			typeof object.getAll === 'function' &&
    			typeof object.has === 'function' &&
    			typeof object.set === 'function' &&
    			typeof object.sort === 'function' &&
    			object[NAME] === 'URLSearchParams'
    		);
    	};

    	/**
    	 * Check if `object` is a W3C `Blob` object (which `File` inherits from)
    	 *
    	 * @param  {*} obj
    	 * @return {boolean}
    	 */
    	const isBlob = object => {
    		return (
    			typeof object === 'object' &&
    			typeof object.arrayBuffer === 'function' &&
    			typeof object.type === 'string' &&
    			typeof object.stream === 'function' &&
    			typeof object.constructor === 'function' &&
    			/^(Blob|File)$/.test(object[NAME])
    		);
    	};

    	/**
    	 * Check if `obj` is a spec-compliant `FormData` object
    	 *
    	 * @param {*} object
    	 * @return {boolean}
    	 */
    	function isFormData(object) {
    		return (
    			typeof object === 'object' &&
    			typeof object.append === 'function' &&
    			typeof object.set === 'function' &&
    			typeof object.get === 'function' &&
    			typeof object.getAll === 'function' &&
    			typeof object.delete === 'function' &&
    			typeof object.keys === 'function' &&
    			typeof object.values === 'function' &&
    			typeof object.entries === 'function' &&
    			typeof object.constructor === 'function' &&
    			object[NAME] === 'FormData'
    		);
    	}

    	/**
    	 * Check if `obj` is an instance of AbortSignal.
    	 *
    	 * @param  {*} obj
    	 * @return {boolean}
    	 */
    	const isAbortSignal = object => {
    		return (
    			typeof object === 'object' &&
    			object[NAME] === 'AbortSignal'
    		);
    	};

    	const carriage = '\r\n';
    	const dashes = '-'.repeat(2);
    	const carriageLength = Buffer.byteLength(carriage);

    	/**
    	 * @param {string} boundary
    	 */
    	const getFooter = boundary => `${dashes}${boundary}${dashes}${carriage.repeat(2)}`;

    	/**
    	 * @param {string} boundary
    	 * @param {string} name
    	 * @param {*} field
    	 *
    	 * @return {string}
    	 */
    	function getHeader(boundary, name, field) {
    		let header = '';

    		header += `${dashes}${boundary}${carriage}`;
    		header += `Content-Disposition: form-data; name="${name}"`;

    		if (isBlob(field)) {
    			header += `; filename="${field.name}"${carriage}`;
    			header += `Content-Type: ${field.type || 'application/octet-stream'}`;
    		}

    		return `${header}${carriage.repeat(2)}`;
    	}

    	/**
    	 * @return {string}
    	 */
    	const getBoundary = () => crypto.randomBytes(8).toString('hex');

    	/**
    	 * @param {FormData} form
    	 * @param {string} boundary
    	 */
    	async function * formDataIterator(form, boundary) {
    		for (const [name, value] of form) {
    			yield getHeader(boundary, name, value);

    			if (isBlob(value)) {
    				yield * value.stream();
    			} else {
    				yield value;
    			}

    			yield carriage;
    		}

    		yield getFooter(boundary);
    	}

    	/**
    	 * @param {FormData} form
    	 * @param {string} boundary
    	 */
    	function getFormDataLength(form, boundary) {
    		let length = 0;

    		for (const [name, value] of form) {
    			length += Buffer.byteLength(getHeader(boundary, name, value));

    			if (isBlob(value)) {
    				length += value.size;
    			} else {
    				length += Buffer.byteLength(String(value));
    			}

    			length += carriageLength;
    		}

    		length += Buffer.byteLength(getFooter(boundary));

    		return length;
    	}

    	const INTERNALS = Symbol('Body internals');

    	/**
    	 * Body mixin
    	 *
    	 * Ref: https://fetch.spec.whatwg.org/#body
    	 *
    	 * @param   Stream  body  Readable stream
    	 * @param   Object  opts  Response options
    	 * @return  Void
    	 */
    	class Body {
    		constructor(body, {
    			size = 0
    		} = {}) {
    			let boundary = null;

    			if (body === null) {
    				// Body is undefined or null
    				body = null;
    			} else if (isURLSearchParameters(body)) {
    			// Body is a URLSearchParams
    				body = Buffer.from(body.toString());
    			} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (util.types.isAnyArrayBuffer(body)) {
    				// Body is ArrayBuffer
    				body = Buffer.from(body);
    			} else if (ArrayBuffer.isView(body)) {
    				// Body is ArrayBufferView
    				body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    			} else if (body instanceof Stream) ; else if (isFormData(body)) {
    				// Body is an instance of formdata-node
    				boundary = `NodeFetchFormDataBoundary${getBoundary()}`;
    				body = Stream.Readable.from(formDataIterator(body, boundary));
    			} else {
    				// None of the above
    				// coerce to string then buffer
    				body = Buffer.from(String(body));
    			}

    			this[INTERNALS] = {
    				body,
    				boundary,
    				disturbed: false,
    				error: null
    			};
    			this.size = size;

    			if (body instanceof Stream) {
    				body.on('error', err => {
    					const error = err instanceof FetchBaseError ?
    						err :
    						new FetchError(`Invalid response body while trying to fetch ${this.url}: ${err.message}`, 'system', err);
    					this[INTERNALS].error = error;
    				});
    			}
    		}

    		get body() {
    			return this[INTERNALS].body;
    		}

    		get bodyUsed() {
    			return this[INTERNALS].disturbed;
    		}

    		/**
    		 * Decode response as ArrayBuffer
    		 *
    		 * @return  Promise
    		 */
    		async arrayBuffer() {
    			const {buffer, byteOffset, byteLength} = await consumeBody(this);
    			return buffer.slice(byteOffset, byteOffset + byteLength);
    		}

    		/**
    		 * Return raw response as Blob
    		 *
    		 * @return Promise
    		 */
    		async blob() {
    			const ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';
    			const buf = await this.buffer();

    			return new Blob([buf], {
    				type: ct
    			});
    		}

    		/**
    		 * Decode response as json
    		 *
    		 * @return  Promise
    		 */
    		async json() {
    			const buffer = await consumeBody(this);
    			return JSON.parse(buffer.toString());
    		}

    		/**
    		 * Decode response as text
    		 *
    		 * @return  Promise
    		 */
    		async text() {
    			const buffer = await consumeBody(this);
    			return buffer.toString();
    		}

    		/**
    		 * Decode response as buffer (non-spec api)
    		 *
    		 * @return  Promise
    		 */
    		buffer() {
    			return consumeBody(this);
    		}
    	}

    	// In browsers, all properties are enumerable.
    	Object.defineProperties(Body.prototype, {
    		body: {enumerable: true},
    		bodyUsed: {enumerable: true},
    		arrayBuffer: {enumerable: true},
    		blob: {enumerable: true},
    		json: {enumerable: true},
    		text: {enumerable: true}
    	});

    	/**
    	 * Consume and convert an entire Body to a Buffer.
    	 *
    	 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
    	 *
    	 * @return Promise
    	 */
    	async function consumeBody(data) {
    		if (data[INTERNALS].disturbed) {
    			throw new TypeError(`body used already for: ${data.url}`);
    		}

    		data[INTERNALS].disturbed = true;

    		if (data[INTERNALS].error) {
    			throw data[INTERNALS].error;
    		}

    		let {body} = data;

    		// Body is null
    		if (body === null) {
    			return Buffer.alloc(0);
    		}

    		// Body is blob
    		if (isBlob(body)) {
    			body = body.stream();
    		}

    		// Body is buffer
    		if (Buffer.isBuffer(body)) {
    			return body;
    		}

    		/* c8 ignore next 3 */
    		if (!(body instanceof Stream)) {
    			return Buffer.alloc(0);
    		}

    		// Body is stream
    		// get ready to actually consume the body
    		const accum = [];
    		let accumBytes = 0;

    		try {
    			for await (const chunk of body) {
    				if (data.size > 0 && accumBytes + chunk.length > data.size) {
    					const err = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');
    					body.destroy(err);
    					throw err;
    				}

    				accumBytes += chunk.length;
    				accum.push(chunk);
    			}
    		} catch (error) {
    			if (error instanceof FetchBaseError) {
    				throw error;
    			} else {
    				// Other errors, such as incorrect content-encoding
    				throw new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);
    			}
    		}

    		if (body.readableEnded === true || body._readableState.ended === true) {
    			try {
    				if (accum.every(c => typeof c === 'string')) {
    					return Buffer.from(accum.join(''));
    				}

    				return Buffer.concat(accum, accumBytes);
    			} catch (error) {
    				throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);
    			}
    		} else {
    			throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
    		}
    	}

    	/**
    	 * Clone body given Res/Req instance
    	 *
    	 * @param   Mixed   instance       Response or Request instance
    	 * @param   String  highWaterMark  highWaterMark for both PassThrough body streams
    	 * @return  Mixed
    	 */
    	const clone = (instance, highWaterMark) => {
    		let p1;
    		let p2;
    		let {body} = instance;

    		// Don't allow cloning a used body
    		if (instance.bodyUsed) {
    			throw new Error('cannot clone body after it is used');
    		}

    		// Check that body is a stream and not form-data object
    		// note: we can't clone the form-data object without having it as a dependency
    		if ((body instanceof Stream) && (typeof body.getBoundary !== 'function')) {
    			// Tee instance body
    			p1 = new Stream.PassThrough({highWaterMark});
    			p2 = new Stream.PassThrough({highWaterMark});
    			body.pipe(p1);
    			body.pipe(p2);
    			// Set instance body to teed body and return the other teed body
    			instance[INTERNALS].body = p1;
    			body = p2;
    		}

    		return body;
    	};

    	/**
    	 * Performs the operation "extract a `Content-Type` value from |object|" as
    	 * specified in the specification:
    	 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
    	 *
    	 * This function assumes that instance.body is present.
    	 *
    	 * @param {any} body Any options.body input
    	 * @returns {string | null}
    	 */
    	const extractContentType = (body, request) => {
    		// Body is null or undefined
    		if (body === null) {
    			return null;
    		}

    		// Body is string
    		if (typeof body === 'string') {
    			return 'text/plain;charset=UTF-8';
    		}

    		// Body is a URLSearchParams
    		if (isURLSearchParameters(body)) {
    			return 'application/x-www-form-urlencoded;charset=UTF-8';
    		}

    		// Body is blob
    		if (isBlob(body)) {
    			return body.type || null;
    		}

    		// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)
    		if (Buffer.isBuffer(body) || util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
    			return null;
    		}

    		// Detect form data input from form-data module
    		if (body && typeof body.getBoundary === 'function') {
    			return `multipart/form-data;boundary=${body.getBoundary()}`;
    		}

    		if (isFormData(body)) {
    			return `multipart/form-data; boundary=${request[INTERNALS].boundary}`;
    		}

    		// Body is stream - can't really do much about this
    		if (body instanceof Stream) {
    			return null;
    		}

    		// Body constructor defaults other things to string
    		return 'text/plain;charset=UTF-8';
    	};

    	/**
    	 * The Fetch Standard treats this as if "total bytes" is a property on the body.
    	 * For us, we have to explicitly get it with a function.
    	 *
    	 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
    	 *
    	 * @param {any} obj.body Body object from the Body instance.
    	 * @returns {number | null}
    	 */
    	const getTotalBytes = request => {
    		const {body} = request;

    		// Body is null or undefined
    		if (body === null) {
    			return 0;
    		}

    		// Body is Blob
    		if (isBlob(body)) {
    			return body.size;
    		}

    		// Body is Buffer
    		if (Buffer.isBuffer(body)) {
    			return body.length;
    		}

    		// Detect form data input from form-data module
    		if (body && typeof body.getLengthSync === 'function') {
    			return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
    		}

    		// Body is a spec-compliant form-data
    		if (isFormData(body)) {
    			return getFormDataLength(request[INTERNALS].boundary);
    		}

    		// Body is stream
    		return null;
    	};

    	/**
    	 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
    	 *
    	 * @param {Stream.Writable} dest The stream to write to.
    	 * @param obj.body Body object from the Body instance.
    	 * @returns {void}
    	 */
    	const writeToStream = (dest, {body}) => {
    		if (body === null) {
    			// Body is null
    			dest.end();
    		} else if (isBlob(body)) {
    			// Body is Blob
    			body.stream().pipe(dest);
    		} else if (Buffer.isBuffer(body)) {
    			// Body is buffer
    			dest.write(body);
    			dest.end();
    		} else {
    			// Body is stream
    			body.pipe(dest);
    		}
    	};

    	/**
    	 * Headers.js
    	 *
    	 * Headers class offers convenient helpers
    	 */

    	const validateHeaderName = typeof http.validateHeaderName === 'function' ?
    		http.validateHeaderName :
    		name => {
    			if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
    				const err = new TypeError(`Header name must be a valid HTTP token [${name}]`);
    				Object.defineProperty(err, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});
    				throw err;
    			}
    		};

    	const validateHeaderValue = typeof http.validateHeaderValue === 'function' ?
    		http.validateHeaderValue :
    		(name, value) => {
    			if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
    				const err = new TypeError(`Invalid character in header content ["${name}"]`);
    				Object.defineProperty(err, 'code', {value: 'ERR_INVALID_CHAR'});
    				throw err;
    			}
    		};

    	/**
    	 * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit
    	 */

    	/**
    	 * This Fetch API interface allows you to perform various actions on HTTP request and response headers.
    	 * These actions include retrieving, setting, adding to, and removing.
    	 * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.
    	 * You can add to this using methods like append() (see Examples.)
    	 * In all methods of this interface, header names are matched by case-insensitive byte sequence.
    	 *
    	 */
    	class Headers extends URLSearchParams {
    		/**
    		 * Headers class
    		 *
    		 * @constructor
    		 * @param {HeadersInit} [init] - Response headers
    		 */
    		constructor(init) {
    			// Validate and normalize init object in [name, value(s)][]
    			/** @type {string[][]} */
    			let result = [];
    			if (init instanceof Headers) {
    				const raw = init.raw();
    				for (const [name, values] of Object.entries(raw)) {
    					result.push(...values.map(value => [name, value]));
    				}
    			} else if (init == null) ; else if (typeof init === 'object' && !util.types.isBoxedPrimitive(init)) {
    				const method = init[Symbol.iterator];
    				// eslint-disable-next-line no-eq-null, eqeqeq
    				if (method == null) {
    					// Record<ByteString, ByteString>
    					result.push(...Object.entries(init));
    				} else {
    					if (typeof method !== 'function') {
    						throw new TypeError('Header pairs must be iterable');
    					}

    					// Sequence<sequence<ByteString>>
    					// Note: per spec we have to first exhaust the lists then process them
    					result = [...init]
    						.map(pair => {
    							if (
    								typeof pair !== 'object' || util.types.isBoxedPrimitive(pair)
    							) {
    								throw new TypeError('Each header pair must be an iterable object');
    							}

    							return [...pair];
    						}).map(pair => {
    							if (pair.length !== 2) {
    								throw new TypeError('Each header pair must be a name/value tuple');
    							}

    							return [...pair];
    						});
    				}
    			} else {
    				throw new TypeError('Failed to construct \'Headers\': The provided value is not of type \'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');
    			}

    			// Validate and lowercase
    			result =
    				result.length > 0 ?
    					result.map(([name, value]) => {
    						validateHeaderName(name);
    						validateHeaderValue(name, String(value));
    						return [String(name).toLowerCase(), String(value)];
    					}) :
    					undefined;

    			super(result);

    			// Returning a Proxy that will lowercase key names, validate parameters and sort keys
    			// eslint-disable-next-line no-constructor-return
    			return new Proxy(this, {
    				get(target, p, receiver) {
    					switch (p) {
    						case 'append':
    						case 'set':
    							return (name, value) => {
    								validateHeaderName(name);
    								validateHeaderValue(name, String(value));
    								return URLSearchParams.prototype[p].call(
    									receiver,
    									String(name).toLowerCase(),
    									String(value)
    								);
    							};

    						case 'delete':
    						case 'has':
    						case 'getAll':
    							return name => {
    								validateHeaderName(name);
    								return URLSearchParams.prototype[p].call(
    									receiver,
    									String(name).toLowerCase()
    								);
    							};

    						case 'keys':
    							return () => {
    								target.sort();
    								return new Set(URLSearchParams.prototype.keys.call(target)).keys();
    							};

    						default:
    							return Reflect.get(target, p, receiver);
    					}
    				}
    				/* c8 ignore next */
    			});
    		}

    		get [Symbol.toStringTag]() {
    			return this.constructor.name;
    		}

    		toString() {
    			return Object.prototype.toString.call(this);
    		}

    		get(name) {
    			const values = this.getAll(name);
    			if (values.length === 0) {
    				return null;
    			}

    			let value = values.join(', ');
    			if (/^content-encoding$/i.test(name)) {
    				value = value.toLowerCase();
    			}

    			return value;
    		}

    		forEach(callback) {
    			for (const name of this.keys()) {
    				callback(this.get(name), name);
    			}
    		}

    		* values() {
    			for (const name of this.keys()) {
    				yield this.get(name);
    			}
    		}

    		/**
    		 * @type {() => IterableIterator<[string, string]>}
    		 */
    		* entries() {
    			for (const name of this.keys()) {
    				yield [name, this.get(name)];
    			}
    		}

    		[Symbol.iterator]() {
    			return this.entries();
    		}

    		/**
    		 * Node-fetch non-spec method
    		 * returning all headers and their values as array
    		 * @returns {Record<string, string[]>}
    		 */
    		raw() {
    			return [...this.keys()].reduce((result, key) => {
    				result[key] = this.getAll(key);
    				return result;
    			}, {});
    		}

    		/**
    		 * For better console.log(headers) and also to convert Headers into Node.js Request compatible format
    		 */
    		[Symbol.for('nodejs.util.inspect.custom')]() {
    			return [...this.keys()].reduce((result, key) => {
    				const values = this.getAll(key);
    				// Http.request() only supports string as Host header.
    				// This hack makes specifying custom Host header possible.
    				if (key === 'host') {
    					result[key] = values[0];
    				} else {
    					result[key] = values.length > 1 ? values : values[0];
    				}

    				return result;
    			}, {});
    		}
    	}

    	/**
    	 * Re-shaping object for Web IDL tests
    	 * Only need to do it for overridden methods
    	 */
    	Object.defineProperties(
    		Headers.prototype,
    		['get', 'entries', 'forEach', 'values'].reduce((result, property) => {
    			result[property] = {enumerable: true};
    			return result;
    		}, {})
    	);

    	/**
    	 * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do
    	 * not conform to HTTP grammar productions.
    	 * @param {import('http').IncomingMessage['rawHeaders']} headers
    	 */
    	function fromRawHeaders(headers = []) {
    		return new Headers(
    			headers
    				// Split into pairs
    				.reduce((result, value, index, array) => {
    					if (index % 2 === 0) {
    						result.push(array.slice(index, index + 2));
    					}

    					return result;
    				}, [])
    				.filter(([name, value]) => {
    					try {
    						validateHeaderName(name);
    						validateHeaderValue(name, String(value));
    						return true;
    					} catch {
    						return false;
    					}
    				})

    		);
    	}

    	const redirectStatus = new Set([301, 302, 303, 307, 308]);

    	/**
    	 * Redirect code matching
    	 *
    	 * @param {number} code - Status code
    	 * @return {boolean}
    	 */
    	const isRedirect = code => {
    		return redirectStatus.has(code);
    	};

    	/**
    	 * Response.js
    	 *
    	 * Response class provides content decoding
    	 */

    	const INTERNALS$1 = Symbol('Response internals');

    	/**
    	 * Response class
    	 *
    	 * @param   Stream  body  Readable stream
    	 * @param   Object  opts  Response options
    	 * @return  Void
    	 */
    	class Response extends Body {
    		constructor(body = null, options = {}) {
    			super(body, options);

    			const status = options.status || 200;
    			const headers = new Headers(options.headers);

    			if (body !== null && !headers.has('Content-Type')) {
    				const contentType = extractContentType(body);
    				if (contentType) {
    					headers.append('Content-Type', contentType);
    				}
    			}

    			this[INTERNALS$1] = {
    				url: options.url,
    				status,
    				statusText: options.statusText || '',
    				headers,
    				counter: options.counter,
    				highWaterMark: options.highWaterMark
    			};
    		}

    		get url() {
    			return this[INTERNALS$1].url || '';
    		}

    		get status() {
    			return this[INTERNALS$1].status;
    		}

    		/**
    		 * Convenience property representing if the request ended normally
    		 */
    		get ok() {
    			return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
    		}

    		get redirected() {
    			return this[INTERNALS$1].counter > 0;
    		}

    		get statusText() {
    			return this[INTERNALS$1].statusText;
    		}

    		get headers() {
    			return this[INTERNALS$1].headers;
    		}

    		get highWaterMark() {
    			return this[INTERNALS$1].highWaterMark;
    		}

    		/**
    		 * Clone this response
    		 *
    		 * @return  Response
    		 */
    		clone() {
    			return new Response(clone(this, this.highWaterMark), {
    				url: this.url,
    				status: this.status,
    				statusText: this.statusText,
    				headers: this.headers,
    				ok: this.ok,
    				redirected: this.redirected,
    				size: this.size
    			});
    		}

    		/**
    		 * @param {string} url    The URL that the new response is to originate from.
    		 * @param {number} status An optional status code for the response (e.g., 302.)
    		 * @returns {Response}    A Response object.
    		 */
    		static redirect(url, status = 302) {
    			if (!isRedirect(status)) {
    				throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
    			}

    			return new Response(null, {
    				headers: {
    					location: new URL(url).toString()
    				},
    				status
    			});
    		}

    		get [Symbol.toStringTag]() {
    			return 'Response';
    		}
    	}

    	Object.defineProperties(Response.prototype, {
    		url: {enumerable: true},
    		status: {enumerable: true},
    		ok: {enumerable: true},
    		redirected: {enumerable: true},
    		statusText: {enumerable: true},
    		headers: {enumerable: true},
    		clone: {enumerable: true}
    	});

    	const getSearch = parsedURL => {
    		if (parsedURL.search) {
    			return parsedURL.search;
    		}

    		const lastOffset = parsedURL.href.length - 1;
    		const hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');
    		return parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';
    	};

    	const INTERNALS$2 = Symbol('Request internals');

    	/**
    	 * Check if `obj` is an instance of Request.
    	 *
    	 * @param  {*} obj
    	 * @return {boolean}
    	 */
    	const isRequest = object => {
    		return (
    			typeof object === 'object' &&
    			typeof object[INTERNALS$2] === 'object'
    		);
    	};

    	/**
    	 * Request class
    	 *
    	 * @param   Mixed   input  Url or Request instance
    	 * @param   Object  init   Custom options
    	 * @return  Void
    	 */
    	class Request extends Body {
    		constructor(input, init = {}) {
    			let parsedURL;

    			// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)
    			if (isRequest(input)) {
    				parsedURL = new URL(input.url);
    			} else {
    				parsedURL = new URL(input);
    				input = {};
    			}

    			let method = init.method || input.method || 'GET';
    			method = method.toUpperCase();

    			// eslint-disable-next-line no-eq-null, eqeqeq
    			if (((init.body != null || isRequest(input)) && input.body !== null) &&
    				(method === 'GET' || method === 'HEAD')) {
    				throw new TypeError('Request with GET/HEAD method cannot have body');
    			}

    			const inputBody = init.body ?
    				init.body :
    				(isRequest(input) && input.body !== null ?
    					clone(input) :
    					null);

    			super(inputBody, {
    				size: init.size || input.size || 0
    			});

    			const headers = new Headers(init.headers || input.headers || {});

    			if (inputBody !== null && !headers.has('Content-Type')) {
    				const contentType = extractContentType(inputBody, this);
    				if (contentType) {
    					headers.append('Content-Type', contentType);
    				}
    			}

    			let signal = isRequest(input) ?
    				input.signal :
    				null;
    			if ('signal' in init) {
    				signal = init.signal;
    			}

    			if (signal !== null && !isAbortSignal(signal)) {
    				throw new TypeError('Expected signal to be an instanceof AbortSignal');
    			}

    			this[INTERNALS$2] = {
    				method,
    				redirect: init.redirect || input.redirect || 'follow',
    				headers,
    				parsedURL,
    				signal
    			};

    			// Node-fetch-only options
    			this.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;
    			this.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;
    			this.counter = init.counter || input.counter || 0;
    			this.agent = init.agent || input.agent;
    			this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;
    			this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;
    		}

    		get method() {
    			return this[INTERNALS$2].method;
    		}

    		get url() {
    			return url.format(this[INTERNALS$2].parsedURL);
    		}

    		get headers() {
    			return this[INTERNALS$2].headers;
    		}

    		get redirect() {
    			return this[INTERNALS$2].redirect;
    		}

    		get signal() {
    			return this[INTERNALS$2].signal;
    		}

    		/**
    		 * Clone this request
    		 *
    		 * @return  Request
    		 */
    		clone() {
    			return new Request(this);
    		}

    		get [Symbol.toStringTag]() {
    			return 'Request';
    		}
    	}

    	Object.defineProperties(Request.prototype, {
    		method: {enumerable: true},
    		url: {enumerable: true},
    		headers: {enumerable: true},
    		redirect: {enumerable: true},
    		clone: {enumerable: true},
    		signal: {enumerable: true}
    	});

    	/**
    	 * Convert a Request to Node.js http request options.
    	 *
    	 * @param   Request  A Request instance
    	 * @return  Object   The options object to be passed to http.request
    	 */
    	const getNodeRequestOptions = request => {
    		const {parsedURL} = request[INTERNALS$2];
    		const headers = new Headers(request[INTERNALS$2].headers);

    		// Fetch step 1.3
    		if (!headers.has('Accept')) {
    			headers.set('Accept', '*/*');
    		}

    		// HTTP-network-or-cache fetch steps 2.4-2.7
    		let contentLengthValue = null;
    		if (request.body === null && /^(post|put)$/i.test(request.method)) {
    			contentLengthValue = '0';
    		}

    		if (request.body !== null) {
    			const totalBytes = getTotalBytes(request);
    			// Set Content-Length if totalBytes is a number (that is not NaN)
    			if (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {
    				contentLengthValue = String(totalBytes);
    			}
    		}

    		if (contentLengthValue) {
    			headers.set('Content-Length', contentLengthValue);
    		}

    		// HTTP-network-or-cache fetch step 2.11
    		if (!headers.has('User-Agent')) {
    			headers.set('User-Agent', 'node-fetch');
    		}

    		// HTTP-network-or-cache fetch step 2.15
    		if (request.compress && !headers.has('Accept-Encoding')) {
    			headers.set('Accept-Encoding', 'gzip,deflate,br');
    		}

    		let {agent} = request;
    		if (typeof agent === 'function') {
    			agent = agent(parsedURL);
    		}

    		if (!headers.has('Connection') && !agent) {
    			headers.set('Connection', 'close');
    		}

    		// HTTP-network fetch step 4.2
    		// chunked encoding is handled by Node.js

    		const search = getSearch(parsedURL);

    		// Manually spread the URL object instead of spread syntax
    		const requestOptions = {
    			path: parsedURL.pathname + search,
    			pathname: parsedURL.pathname,
    			hostname: parsedURL.hostname,
    			protocol: parsedURL.protocol,
    			port: parsedURL.port,
    			hash: parsedURL.hash,
    			search: parsedURL.search,
    			query: parsedURL.query,
    			href: parsedURL.href,
    			method: request.method,
    			headers: headers[Symbol.for('nodejs.util.inspect.custom')](),
    			insecureHTTPParser: request.insecureHTTPParser,
    			agent
    		};

    		return requestOptions;
    	};

    	/**
    	 * AbortError interface for cancelled requests
    	 */
    	class AbortError extends FetchBaseError {
    		constructor(message, type = 'aborted') {
    			super(message, type);
    		}
    	}

    	/**
    	 * Index.js
    	 *
    	 * a request API compatible with window.fetch
    	 *
    	 * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.
    	 */

    	const supportedSchemas = new Set(['data:', 'http:', 'https:']);

    	/**
    	 * Fetch function
    	 *
    	 * @param   {string | URL | import('./request').default} url - Absolute url or Request instance
    	 * @param   {*} [options_] - Fetch options
    	 * @return  {Promise<import('./response').default>}
    	 */
    	async function fetch(url, options_) {
    		return new Promise((resolve, reject) => {
    			// Build request object
    			const request = new Request(url, options_);
    			const options = getNodeRequestOptions(request);
    			if (!supportedSchemas.has(options.protocol)) {
    				throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${options.protocol.replace(/:$/, '')}" is not supported.`);
    			}

    			if (options.protocol === 'data:') {
    				const data = dataUriToBuffer(request.url);
    				const response = new Response(data, {headers: {'Content-Type': data.typeFull}});
    				resolve(response);
    				return;
    			}

    			// Wrap http.request into fetch
    			const send = (options.protocol === 'https:' ? https : http).request;
    			const {signal} = request;
    			let response = null;

    			const abort = () => {
    				const error = new AbortError('The operation was aborted.');
    				reject(error);
    				if (request.body && request.body instanceof Stream.Readable) {
    					request.body.destroy(error);
    				}

    				if (!response || !response.body) {
    					return;
    				}

    				response.body.emit('error', error);
    			};

    			if (signal && signal.aborted) {
    				abort();
    				return;
    			}

    			const abortAndFinalize = () => {
    				abort();
    				finalize();
    			};

    			// Send request
    			const request_ = send(options);

    			if (signal) {
    				signal.addEventListener('abort', abortAndFinalize);
    			}

    			const finalize = () => {
    				request_.abort();
    				if (signal) {
    					signal.removeEventListener('abort', abortAndFinalize);
    				}
    			};

    			request_.on('error', err => {
    				reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
    				finalize();
    			});

    			request_.on('response', response_ => {
    				request_.setTimeout(0);
    				const headers = fromRawHeaders(response_.rawHeaders);

    				// HTTP fetch step 5
    				if (isRedirect(response_.statusCode)) {
    					// HTTP fetch step 5.2
    					const location = headers.get('Location');

    					// HTTP fetch step 5.3
    					const locationURL = location === null ? null : new URL(location, request.url);

    					// HTTP fetch step 5.5
    					switch (request.redirect) {
    						case 'error':
    							reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
    							finalize();
    							return;
    						case 'manual':
    							// Node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
    							if (locationURL !== null) {
    								// Handle corrupted header
    								try {
    									headers.set('Location', locationURL);
    									/* c8 ignore next 3 */
    								} catch (error) {
    									reject(error);
    								}
    							}

    							break;
    						case 'follow': {
    							// HTTP-redirect fetch step 2
    							if (locationURL === null) {
    								break;
    							}

    							// HTTP-redirect fetch step 5
    							if (request.counter >= request.follow) {
    								reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
    								finalize();
    								return;
    							}

    							// HTTP-redirect fetch step 6 (counter increment)
    							// Create a new Request object.
    							const requestOptions = {
    								headers: new Headers(request.headers),
    								follow: request.follow,
    								counter: request.counter + 1,
    								agent: request.agent,
    								compress: request.compress,
    								method: request.method,
    								body: request.body,
    								signal: request.signal,
    								size: request.size
    							};

    							// HTTP-redirect fetch step 9
    							if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {
    								reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
    								finalize();
    								return;
    							}

    							// HTTP-redirect fetch step 11
    							if (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {
    								requestOptions.method = 'GET';
    								requestOptions.body = undefined;
    								requestOptions.headers.delete('content-length');
    							}

    							// HTTP-redirect fetch step 15
    							resolve(fetch(new Request(locationURL, requestOptions)));
    							finalize();
    							return;
    						}
    						// Do nothing
    					}
    				}

    				// Prepare response
    				response_.once('end', () => {
    					if (signal) {
    						signal.removeEventListener('abort', abortAndFinalize);
    					}
    				});

    				let body = Stream.pipeline(response_, new Stream.PassThrough(), error => {
    					reject(error);
    				});
    				// see https://github.com/nodejs/node/pull/29376
    				if (process.version < 'v12.10') {
    					response_.on('aborted', abortAndFinalize);
    				}

    				const responseOptions = {
    					url: request.url,
    					status: response_.statusCode,
    					statusText: response_.statusMessage,
    					headers,
    					size: request.size,
    					counter: request.counter,
    					highWaterMark: request.highWaterMark
    				};

    				// HTTP-network fetch step 12.1.1.3
    				const codings = headers.get('Content-Encoding');

    				// HTTP-network fetch step 12.1.1.4: handle content codings

    				// in following scenarios we ignore compression support
    				// 1. compression support is disabled
    				// 2. HEAD request
    				// 3. no Content-Encoding header
    				// 4. no content response (204)
    				// 5. content not modified response (304)
    				if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
    					response = new Response(body, responseOptions);
    					resolve(response);
    					return;
    				}

    				// For Node v6+
    				// Be less strict when decoding compressed responses, since sometimes
    				// servers send slightly invalid responses that are still accepted
    				// by common browsers.
    				// Always using Z_SYNC_FLUSH is what cURL does.
    				const zlibOptions = {
    					flush: zlib.Z_SYNC_FLUSH,
    					finishFlush: zlib.Z_SYNC_FLUSH
    				};

    				// For gzip
    				if (codings === 'gzip' || codings === 'x-gzip') {
    					body = Stream.pipeline(body, zlib.createGunzip(zlibOptions), error => {
    						reject(error);
    					});
    					response = new Response(body, responseOptions);
    					resolve(response);
    					return;
    				}

    				// For deflate
    				if (codings === 'deflate' || codings === 'x-deflate') {
    					// Handle the infamous raw deflate response from old servers
    					// a hack for old IIS and Apache servers
    					const raw = Stream.pipeline(response_, new Stream.PassThrough(), error => {
    						reject(error);
    					});
    					raw.once('data', chunk => {
    						// See http://stackoverflow.com/questions/37519828
    						if ((chunk[0] & 0x0F) === 0x08) {
    							body = Stream.pipeline(body, zlib.createInflate(), error => {
    								reject(error);
    							});
    						} else {
    							body = Stream.pipeline(body, zlib.createInflateRaw(), error => {
    								reject(error);
    							});
    						}

    						response = new Response(body, responseOptions);
    						resolve(response);
    					});
    					return;
    				}

    				// For br
    				if (codings === 'br') {
    					body = Stream.pipeline(body, zlib.createBrotliDecompress(), error => {
    						reject(error);
    					});
    					response = new Response(body, responseOptions);
    					resolve(response);
    					return;
    				}

    				// Otherwise, use response as-is
    				response = new Response(body, responseOptions);
    				resolve(response);
    			});

    			writeToStream(request_, request);
    		});
    	}

    	exports.AbortError = AbortError;
    	exports.FetchError = FetchError;
    	exports.Headers = Headers;
    	exports.Request = Request;
    	exports.Response = Response;
    	exports.default = fetch;
    	exports.isRedirect = isRedirect;
    	
    } (dist, dist.exports));

    /**
     * @author Toru Nagashima <https://github.com/mysticatea>
     * @copyright 2015 Toru Nagashima. All rights reserved.
     * See LICENSE file in root directory for full license.
     */
    /**
     * @typedef {object} PrivateData
     * @property {EventTarget} eventTarget The event target.
     * @property {{type:string}} event The original event object.
     * @property {number} eventPhase The current event phase.
     * @property {EventTarget|null} currentTarget The current event target.
     * @property {boolean} canceled The flag to prevent default.
     * @property {boolean} stopped The flag to stop propagation.
     * @property {boolean} immediateStopped The flag to stop propagation immediately.
     * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.
     * @property {number} timeStamp The unix time.
     * @private
     */

    /**
     * Private data for event wrappers.
     * @type {WeakMap<Event, PrivateData>}
     * @private
     */
    const privateData = new WeakMap();

    /**
     * Cache for wrapper classes.
     * @type {WeakMap<Object, Function>}
     * @private
     */
    const wrappers = new WeakMap();

    /**
     * Get private data.
     * @param {Event} event The event object to get private data.
     * @returns {PrivateData} The private data of the event.
     * @private
     */
    function pd(event) {
        const retv = privateData.get(event);
        console.assert(
            retv != null,
            "'this' is expected an Event object, but got",
            event
        );
        return retv
    }

    /**
     * https://dom.spec.whatwg.org/#set-the-canceled-flag
     * @param data {PrivateData} private data.
     */
    function setCancelFlag(data) {
        if (data.passiveListener != null) {
            if (
                typeof console !== "undefined" &&
                typeof console.error === "function"
            ) {
                console.error(
                    "Unable to preventDefault inside passive event listener invocation.",
                    data.passiveListener
                );
            }
            return
        }
        if (!data.event.cancelable) {
            return
        }

        data.canceled = true;
        if (typeof data.event.preventDefault === "function") {
            data.event.preventDefault();
        }
    }

    /**
     * @see https://dom.spec.whatwg.org/#interface-event
     * @private
     */
    /**
     * The event wrapper.
     * @constructor
     * @param {EventTarget} eventTarget The event target of this dispatching.
     * @param {Event|{type:string}} event The original event to wrap.
     */
    function Event(eventTarget, event) {
        privateData.set(this, {
            eventTarget,
            event,
            eventPhase: 2,
            currentTarget: eventTarget,
            canceled: false,
            stopped: false,
            immediateStopped: false,
            passiveListener: null,
            timeStamp: event.timeStamp || Date.now(),
        });

        // https://heycam.github.io/webidl/#Unforgeable
        Object.defineProperty(this, "isTrusted", { value: false, enumerable: true });

        // Define accessors
        const keys = Object.keys(event);
        for (let i = 0; i < keys.length; ++i) {
            const key = keys[i];
            if (!(key in this)) {
                Object.defineProperty(this, key, defineRedirectDescriptor(key));
            }
        }
    }

    // Should be enumerable, but class methods are not enumerable.
    Event.prototype = {
        /**
         * The type of this event.
         * @type {string}
         */
        get type() {
            return pd(this).event.type
        },

        /**
         * The target of this event.
         * @type {EventTarget}
         */
        get target() {
            return pd(this).eventTarget
        },

        /**
         * The target of this event.
         * @type {EventTarget}
         */
        get currentTarget() {
            return pd(this).currentTarget
        },

        /**
         * @returns {EventTarget[]} The composed path of this event.
         */
        composedPath() {
            const currentTarget = pd(this).currentTarget;
            if (currentTarget == null) {
                return []
            }
            return [currentTarget]
        },

        /**
         * Constant of NONE.
         * @type {number}
         */
        get NONE() {
            return 0
        },

        /**
         * Constant of CAPTURING_PHASE.
         * @type {number}
         */
        get CAPTURING_PHASE() {
            return 1
        },

        /**
         * Constant of AT_TARGET.
         * @type {number}
         */
        get AT_TARGET() {
            return 2
        },

        /**
         * Constant of BUBBLING_PHASE.
         * @type {number}
         */
        get BUBBLING_PHASE() {
            return 3
        },

        /**
         * The target of this event.
         * @type {number}
         */
        get eventPhase() {
            return pd(this).eventPhase
        },

        /**
         * Stop event bubbling.
         * @returns {void}
         */
        stopPropagation() {
            const data = pd(this);

            data.stopped = true;
            if (typeof data.event.stopPropagation === "function") {
                data.event.stopPropagation();
            }
        },

        /**
         * Stop event bubbling.
         * @returns {void}
         */
        stopImmediatePropagation() {
            const data = pd(this);

            data.stopped = true;
            data.immediateStopped = true;
            if (typeof data.event.stopImmediatePropagation === "function") {
                data.event.stopImmediatePropagation();
            }
        },

        /**
         * The flag to be bubbling.
         * @type {boolean}
         */
        get bubbles() {
            return Boolean(pd(this).event.bubbles)
        },

        /**
         * The flag to be cancelable.
         * @type {boolean}
         */
        get cancelable() {
            return Boolean(pd(this).event.cancelable)
        },

        /**
         * Cancel this event.
         * @returns {void}
         */
        preventDefault() {
            setCancelFlag(pd(this));
        },

        /**
         * The flag to indicate cancellation state.
         * @type {boolean}
         */
        get defaultPrevented() {
            return pd(this).canceled
        },

        /**
         * The flag to be composed.
         * @type {boolean}
         */
        get composed() {
            return Boolean(pd(this).event.composed)
        },

        /**
         * The unix time of this event.
         * @type {number}
         */
        get timeStamp() {
            return pd(this).timeStamp
        },

        /**
         * The target of this event.
         * @type {EventTarget}
         * @deprecated
         */
        get srcElement() {
            return pd(this).eventTarget
        },

        /**
         * The flag to stop event bubbling.
         * @type {boolean}
         * @deprecated
         */
        get cancelBubble() {
            return pd(this).stopped
        },
        set cancelBubble(value) {
            if (!value) {
                return
            }
            const data = pd(this);

            data.stopped = true;
            if (typeof data.event.cancelBubble === "boolean") {
                data.event.cancelBubble = true;
            }
        },

        /**
         * The flag to indicate cancellation state.
         * @type {boolean}
         * @deprecated
         */
        get returnValue() {
            return !pd(this).canceled
        },
        set returnValue(value) {
            if (!value) {
                setCancelFlag(pd(this));
            }
        },

        /**
         * Initialize this event object. But do nothing under event dispatching.
         * @param {string} type The event type.
         * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
         * @param {boolean} [cancelable=false] The flag to be possible to cancel.
         * @deprecated
         */
        initEvent() {
            // Do nothing.
        },
    };

    // `constructor` is not enumerable.
    Object.defineProperty(Event.prototype, "constructor", {
        value: Event,
        configurable: true,
        writable: true,
    });

    // Ensure `event instanceof window.Event` is `true`.
    if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
        Object.setPrototypeOf(Event.prototype, window.Event.prototype);

        // Make association for wrappers.
        wrappers.set(window.Event.prototype, Event);
    }

    /**
     * Get the property descriptor to redirect a given property.
     * @param {string} key Property name to define property descriptor.
     * @returns {PropertyDescriptor} The property descriptor to redirect the property.
     * @private
     */
    function defineRedirectDescriptor(key) {
        return {
            get() {
                return pd(this).event[key]
            },
            set(value) {
                pd(this).event[key] = value;
            },
            configurable: true,
            enumerable: true,
        }
    }

    /**
     * Get the property descriptor to call a given method property.
     * @param {string} key Property name to define property descriptor.
     * @returns {PropertyDescriptor} The property descriptor to call the method property.
     * @private
     */
    function defineCallDescriptor(key) {
        return {
            value() {
                const event = pd(this).event;
                return event[key].apply(event, arguments)
            },
            configurable: true,
            enumerable: true,
        }
    }

    /**
     * Define new wrapper class.
     * @param {Function} BaseEvent The base wrapper class.
     * @param {Object} proto The prototype of the original event.
     * @returns {Function} The defined wrapper class.
     * @private
     */
    function defineWrapper(BaseEvent, proto) {
        const keys = Object.keys(proto);
        if (keys.length === 0) {
            return BaseEvent
        }

        /** CustomEvent */
        function CustomEvent(eventTarget, event) {
            BaseEvent.call(this, eventTarget, event);
        }

        CustomEvent.prototype = Object.create(BaseEvent.prototype, {
            constructor: { value: CustomEvent, configurable: true, writable: true },
        });

        // Define accessors.
        for (let i = 0; i < keys.length; ++i) {
            const key = keys[i];
            if (!(key in BaseEvent.prototype)) {
                const descriptor = Object.getOwnPropertyDescriptor(proto, key);
                const isFunc = typeof descriptor.value === "function";
                Object.defineProperty(
                    CustomEvent.prototype,
                    key,
                    isFunc
                        ? defineCallDescriptor(key)
                        : defineRedirectDescriptor(key)
                );
            }
        }

        return CustomEvent
    }

    /**
     * Get the wrapper class of a given prototype.
     * @param {Object} proto The prototype of the original event to get its wrapper.
     * @returns {Function} The wrapper class.
     * @private
     */
    function getWrapper(proto) {
        if (proto == null || proto === Object.prototype) {
            return Event
        }

        let wrapper = wrappers.get(proto);
        if (wrapper == null) {
            wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
            wrappers.set(proto, wrapper);
        }
        return wrapper
    }

    /**
     * Wrap a given event to management a dispatching.
     * @param {EventTarget} eventTarget The event target of this dispatching.
     * @param {Object} event The event to wrap.
     * @returns {Event} The wrapper instance.
     * @private
     */
    function wrapEvent(eventTarget, event) {
        const Wrapper = getWrapper(Object.getPrototypeOf(event));
        return new Wrapper(eventTarget, event)
    }

    /**
     * Get the immediateStopped flag of a given event.
     * @param {Event} event The event to get.
     * @returns {boolean} The flag to stop propagation immediately.
     * @private
     */
    function isStopped(event) {
        return pd(event).immediateStopped
    }

    /**
     * Set the current event phase of a given event.
     * @param {Event} event The event to set current target.
     * @param {number} eventPhase New event phase.
     * @returns {void}
     * @private
     */
    function setEventPhase(event, eventPhase) {
        pd(event).eventPhase = eventPhase;
    }

    /**
     * Set the current target of a given event.
     * @param {Event} event The event to set current target.
     * @param {EventTarget|null} currentTarget New current target.
     * @returns {void}
     * @private
     */
    function setCurrentTarget(event, currentTarget) {
        pd(event).currentTarget = currentTarget;
    }

    /**
     * Set a passive listener of a given event.
     * @param {Event} event The event to set current target.
     * @param {Function|null} passiveListener New passive listener.
     * @returns {void}
     * @private
     */
    function setPassiveListener(event, passiveListener) {
        pd(event).passiveListener = passiveListener;
    }

    /**
     * @typedef {object} ListenerNode
     * @property {Function} listener
     * @property {1|2|3} listenerType
     * @property {boolean} passive
     * @property {boolean} once
     * @property {ListenerNode|null} next
     * @private
     */

    /**
     * @type {WeakMap<object, Map<string, ListenerNode>>}
     * @private
     */
    const listenersMap = new WeakMap();

    // Listener types
    const CAPTURE = 1;
    const BUBBLE = 2;
    const ATTRIBUTE = 3;

    /**
     * Check whether a given value is an object or not.
     * @param {any} x The value to check.
     * @returns {boolean} `true` if the value is an object.
     */
    function isObject$1(x) {
        return x !== null && typeof x === "object" //eslint-disable-line no-restricted-syntax
    }

    /**
     * Get listeners.
     * @param {EventTarget} eventTarget The event target to get.
     * @returns {Map<string, ListenerNode>} The listeners.
     * @private
     */
    function getListeners(eventTarget) {
        const listeners = listenersMap.get(eventTarget);
        if (listeners == null) {
            throw new TypeError(
                "'this' is expected an EventTarget object, but got another value."
            )
        }
        return listeners
    }

    /**
     * Get the property descriptor for the event attribute of a given event.
     * @param {string} eventName The event name to get property descriptor.
     * @returns {PropertyDescriptor} The property descriptor.
     * @private
     */
    function defineEventAttributeDescriptor(eventName) {
        return {
            get() {
                const listeners = getListeners(this);
                let node = listeners.get(eventName);
                while (node != null) {
                    if (node.listenerType === ATTRIBUTE) {
                        return node.listener
                    }
                    node = node.next;
                }
                return null
            },

            set(listener) {
                if (typeof listener !== "function" && !isObject$1(listener)) {
                    listener = null; // eslint-disable-line no-param-reassign
                }
                const listeners = getListeners(this);

                // Traverse to the tail while removing old value.
                let prev = null;
                let node = listeners.get(eventName);
                while (node != null) {
                    if (node.listenerType === ATTRIBUTE) {
                        // Remove old value.
                        if (prev !== null) {
                            prev.next = node.next;
                        } else if (node.next !== null) {
                            listeners.set(eventName, node.next);
                        } else {
                            listeners.delete(eventName);
                        }
                    } else {
                        prev = node;
                    }

                    node = node.next;
                }

                // Add new value.
                if (listener !== null) {
                    const newNode = {
                        listener,
                        listenerType: ATTRIBUTE,
                        passive: false,
                        once: false,
                        next: null,
                    };
                    if (prev === null) {
                        listeners.set(eventName, newNode);
                    } else {
                        prev.next = newNode;
                    }
                }
            },
            configurable: true,
            enumerable: true,
        }
    }

    /**
     * Define an event attribute (e.g. `eventTarget.onclick`).
     * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.
     * @param {string} eventName The event name to define.
     * @returns {void}
     */
    function defineEventAttribute(eventTargetPrototype, eventName) {
        Object.defineProperty(
            eventTargetPrototype,
            `on${eventName}`,
            defineEventAttributeDescriptor(eventName)
        );
    }

    /**
     * Define a custom EventTarget with event attributes.
     * @param {string[]} eventNames Event names for event attributes.
     * @returns {EventTarget} The custom EventTarget.
     * @private
     */
    function defineCustomEventTarget(eventNames) {
        /** CustomEventTarget */
        function CustomEventTarget() {
            EventTarget.call(this);
        }

        CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
            constructor: {
                value: CustomEventTarget,
                configurable: true,
                writable: true,
            },
        });

        for (let i = 0; i < eventNames.length; ++i) {
            defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
        }

        return CustomEventTarget
    }

    /**
     * EventTarget.
     *
     * - This is constructor if no arguments.
     * - This is a function which returns a CustomEventTarget constructor if there are arguments.
     *
     * For example:
     *
     *     class A extends EventTarget {}
     *     class B extends EventTarget("message") {}
     *     class C extends EventTarget("message", "error") {}
     *     class D extends EventTarget(["message", "error"]) {}
     */
    function EventTarget() {
        /*eslint-disable consistent-return */
        if (this instanceof EventTarget) {
            listenersMap.set(this, new Map());
            return
        }
        if (arguments.length === 1 && Array.isArray(arguments[0])) {
            return defineCustomEventTarget(arguments[0])
        }
        if (arguments.length > 0) {
            const types = new Array(arguments.length);
            for (let i = 0; i < arguments.length; ++i) {
                types[i] = arguments[i];
            }
            return defineCustomEventTarget(types)
        }
        throw new TypeError("Cannot call a class as a function")
        /*eslint-enable consistent-return */
    }

    // Should be enumerable, but class methods are not enumerable.
    EventTarget.prototype = {
        /**
         * Add a given listener to this event target.
         * @param {string} eventName The event name to add.
         * @param {Function} listener The listener to add.
         * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
         * @returns {void}
         */
        addEventListener(eventName, listener, options) {
            if (listener == null) {
                return
            }
            if (typeof listener !== "function" && !isObject$1(listener)) {
                throw new TypeError("'listener' should be a function or an object.")
            }

            const listeners = getListeners(this);
            const optionsIsObj = isObject$1(options);
            const capture = optionsIsObj
                ? Boolean(options.capture)
                : Boolean(options);
            const listenerType = capture ? CAPTURE : BUBBLE;
            const newNode = {
                listener,
                listenerType,
                passive: optionsIsObj && Boolean(options.passive),
                once: optionsIsObj && Boolean(options.once),
                next: null,
            };

            // Set it as the first node if the first node is null.
            let node = listeners.get(eventName);
            if (node === undefined) {
                listeners.set(eventName, newNode);
                return
            }

            // Traverse to the tail while checking duplication..
            let prev = null;
            while (node != null) {
                if (
                    node.listener === listener &&
                    node.listenerType === listenerType
                ) {
                    // Should ignore duplication.
                    return
                }
                prev = node;
                node = node.next;
            }

            // Add it.
            prev.next = newNode;
        },

        /**
         * Remove a given listener from this event target.
         * @param {string} eventName The event name to remove.
         * @param {Function} listener The listener to remove.
         * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
         * @returns {void}
         */
        removeEventListener(eventName, listener, options) {
            if (listener == null) {
                return
            }

            const listeners = getListeners(this);
            const capture = isObject$1(options)
                ? Boolean(options.capture)
                : Boolean(options);
            const listenerType = capture ? CAPTURE : BUBBLE;

            let prev = null;
            let node = listeners.get(eventName);
            while (node != null) {
                if (
                    node.listener === listener &&
                    node.listenerType === listenerType
                ) {
                    if (prev !== null) {
                        prev.next = node.next;
                    } else if (node.next !== null) {
                        listeners.set(eventName, node.next);
                    } else {
                        listeners.delete(eventName);
                    }
                    return
                }

                prev = node;
                node = node.next;
            }
        },

        /**
         * Dispatch a given event.
         * @param {Event|{type:string}} event The event to dispatch.
         * @returns {boolean} `false` if canceled.
         */
        dispatchEvent(event) {
            if (event == null || typeof event.type !== "string") {
                throw new TypeError('"event.type" should be a string.')
            }

            // If listeners aren't registered, terminate.
            const listeners = getListeners(this);
            const eventName = event.type;
            let node = listeners.get(eventName);
            if (node == null) {
                return true
            }

            // Since we cannot rewrite several properties, so wrap object.
            const wrappedEvent = wrapEvent(this, event);

            // This doesn't process capturing phase and bubbling phase.
            // This isn't participating in a tree.
            let prev = null;
            while (node != null) {
                // Remove this listener if it's once
                if (node.once) {
                    if (prev !== null) {
                        prev.next = node.next;
                    } else if (node.next !== null) {
                        listeners.set(eventName, node.next);
                    } else {
                        listeners.delete(eventName);
                    }
                } else {
                    prev = node;
                }

                // Call this listener
                setPassiveListener(
                    wrappedEvent,
                    node.passive ? node.listener : null
                );
                if (typeof node.listener === "function") {
                    try {
                        node.listener.call(this, wrappedEvent);
                    } catch (err) {
                        if (
                            typeof console !== "undefined" &&
                            typeof console.error === "function"
                        ) {
                            console.error(err);
                        }
                    }
                } else if (
                    node.listenerType !== ATTRIBUTE &&
                    typeof node.listener.handleEvent === "function"
                ) {
                    node.listener.handleEvent(wrappedEvent);
                }

                // Break if `event.stopImmediatePropagation` was called.
                if (isStopped(wrappedEvent)) {
                    break
                }

                node = node.next;
            }
            setPassiveListener(wrappedEvent, null);
            setEventPhase(wrappedEvent, 0);
            setCurrentTarget(wrappedEvent, null);

            return !wrappedEvent.defaultPrevented
        },
    };

    // `constructor` is not enumerable.
    Object.defineProperty(EventTarget.prototype, "constructor", {
        value: EventTarget,
        configurable: true,
        writable: true,
    });

    // Ensure `eventTarget instanceof window.EventTarget` is `true`.
    if (
        typeof window !== "undefined" &&
        typeof window.EventTarget !== "undefined"
    ) {
        Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
    }

    /**
     * @author Toru Nagashima <https://github.com/mysticatea>
     * See LICENSE file in root directory for full license.
     */

    /**
     * The signal class.
     * @see https://dom.spec.whatwg.org/#abortsignal
     */
    class AbortSignal extends EventTarget {
        /**
         * AbortSignal cannot be constructed directly.
         */
        constructor() {
            super();
            throw new TypeError("AbortSignal cannot be constructed directly");
        }
        /**
         * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
         */
        get aborted() {
            const aborted = abortedFlags.get(this);
            if (typeof aborted !== "boolean") {
                throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
            }
            return aborted;
        }
    }
    defineEventAttribute(AbortSignal.prototype, "abort");
    /**
     * Create an AbortSignal object.
     */
    function createAbortSignal() {
        const signal = Object.create(AbortSignal.prototype);
        EventTarget.call(signal);
        abortedFlags.set(signal, false);
        return signal;
    }
    /**
     * Abort a given signal.
     */
    function abortSignal(signal) {
        if (abortedFlags.get(signal) !== false) {
            return;
        }
        abortedFlags.set(signal, true);
        signal.dispatchEvent({ type: "abort" });
    }
    /**
     * Aborted flag for each instances.
     */
    const abortedFlags = new WeakMap();
    // Properties should be enumerable.
    Object.defineProperties(AbortSignal.prototype, {
        aborted: { enumerable: true },
    });
    // `toString()` should return `"[object AbortSignal]"`
    if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
            configurable: true,
            value: "AbortSignal",
        });
    }

    /**
     * The AbortController.
     * @see https://dom.spec.whatwg.org/#abortcontroller
     */
    class AbortController$2 {
        /**
         * Initialize this controller.
         */
        constructor() {
            signals.set(this, createAbortSignal());
        }
        /**
         * Returns the `AbortSignal` object associated with this object.
         */
        get signal() {
            return getSignal(this);
        }
        /**
         * Abort and signal to any observers that the associated activity is to be aborted.
         */
        abort() {
            abortSignal(getSignal(this));
        }
    }
    /**
     * Associated signals.
     */
    const signals = new WeakMap();
    /**
     * Get the associated signal of a given controller.
     */
    function getSignal(controller) {
        const signal = signals.get(controller);
        if (signal == null) {
            throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
        }
        return signal;
    }
    // Properties should be enumerable.
    Object.defineProperties(AbortController$2.prototype, {
        signal: { enumerable: true },
        abort: { enumerable: true },
    });
    if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(AbortController$2.prototype, Symbol.toStringTag, {
            configurable: true,
            value: "AbortController",
        });
    }

    var abortController = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': AbortController$2,
        AbortController: AbortController$2,
        AbortSignal: AbortSignal
    });

    var require$$1 = /*@__PURE__*/getAugmentedNamespace(abortController);

    /**
     * web-streams-polyfill v3.2.0
     */
    /// <reference lib="es2015.symbol" />
    const SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?
        Symbol :
        description => `Symbol(${description})`;

    /// <reference lib="dom" />
    function noop() {
        return undefined;
    }
    function getGlobals() {
        if (typeof self !== 'undefined') {
            return self;
        }
        else if (typeof window !== 'undefined') {
            return window;
        }
        else if (typeof global !== 'undefined') {
            return global;
        }
        return undefined;
    }
    const globals = getGlobals();

    function typeIsObject(x) {
        return (typeof x === 'object' && x !== null) || typeof x === 'function';
    }
    const rethrowAssertionErrorRejection = noop;

    const originalPromise = Promise;
    const originalPromiseThen = Promise.prototype.then;
    const originalPromiseResolve = Promise.resolve.bind(originalPromise);
    const originalPromiseReject = Promise.reject.bind(originalPromise);
    function newPromise(executor) {
        return new originalPromise(executor);
    }
    function promiseResolvedWith(value) {
        return originalPromiseResolve(value);
    }
    function promiseRejectedWith(reason) {
        return originalPromiseReject(reason);
    }
    function PerformPromiseThen(promise, onFulfilled, onRejected) {
        // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an
        // approximation.
        return originalPromiseThen.call(promise, onFulfilled, onRejected);
    }
    function uponPromise(promise, onFulfilled, onRejected) {
        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);
    }
    function uponFulfillment(promise, onFulfilled) {
        uponPromise(promise, onFulfilled);
    }
    function uponRejection(promise, onRejected) {
        uponPromise(promise, undefined, onRejected);
    }
    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
    }
    function setPromiseIsHandledToTrue(promise) {
        PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);
    }
    const queueMicrotask = (() => {
        const globalQueueMicrotask = globals && globals.queueMicrotask;
        if (typeof globalQueueMicrotask === 'function') {
            return globalQueueMicrotask;
        }
        const resolvedPromise = promiseResolvedWith(undefined);
        return (fn) => PerformPromiseThen(resolvedPromise, fn);
    })();
    function reflectCall(F, V, args) {
        if (typeof F !== 'function') {
            throw new TypeError('Argument is not a function');
        }
        return Function.prototype.apply.call(F, V, args);
    }
    function promiseCall(F, V, args) {
        try {
            return promiseResolvedWith(reflectCall(F, V, args));
        }
        catch (value) {
            return promiseRejectedWith(value);
        }
    }

    // Original from Chromium
    // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js
    const QUEUE_MAX_ARRAY_SIZE = 16384;
    /**
     * Simple queue structure.
     *
     * Avoids scalability issues with using a packed array directly by using
     * multiple arrays in a linked list and keeping the array size bounded.
     */
    class SimpleQueue {
        constructor() {
            this._cursor = 0;
            this._size = 0;
            // _front and _back are always defined.
            this._front = {
                _elements: [],
                _next: undefined
            };
            this._back = this._front;
            // The cursor is used to avoid calling Array.shift().
            // It contains the index of the front element of the array inside the
            // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).
            this._cursor = 0;
            // When there is only one node, size === elements.length - cursor.
            this._size = 0;
        }
        get length() {
            return this._size;
        }
        // For exception safety, this method is structured in order:
        // 1. Read state
        // 2. Calculate required state mutations
        // 3. Perform state mutations
        push(element) {
            const oldBack = this._back;
            let newBack = oldBack;
            if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
                newBack = {
                    _elements: [],
                    _next: undefined
                };
            }
            // push() is the mutation most likely to throw an exception, so it
            // goes first.
            oldBack._elements.push(element);
            if (newBack !== oldBack) {
                this._back = newBack;
                oldBack._next = newBack;
            }
            ++this._size;
        }
        // Like push(), shift() follows the read -> calculate -> mutate pattern for
        // exception safety.
        shift() { // must not be called on an empty queue
            const oldFront = this._front;
            let newFront = oldFront;
            const oldCursor = this._cursor;
            let newCursor = oldCursor + 1;
            const elements = oldFront._elements;
            const element = elements[oldCursor];
            if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
                newFront = oldFront._next;
                newCursor = 0;
            }
            // No mutations before this point.
            --this._size;
            this._cursor = newCursor;
            if (oldFront !== newFront) {
                this._front = newFront;
            }
            // Permit shifted element to be garbage collected.
            elements[oldCursor] = undefined;
            return element;
        }
        // The tricky thing about forEach() is that it can be called
        // re-entrantly. The queue may be mutated inside the callback. It is easy to
        // see that push() within the callback has no negative effects since the end
        // of the queue is checked for on every iteration. If shift() is called
        // repeatedly within the callback then the next iteration may return an
        // element that has been removed. In this case the callback will be called
        // with undefined values until we either "catch up" with elements that still
        // exist or reach the back of the queue.
        forEach(callback) {
            let i = this._cursor;
            let node = this._front;
            let elements = node._elements;
            while (i !== elements.length || node._next !== undefined) {
                if (i === elements.length) {
                    node = node._next;
                    elements = node._elements;
                    i = 0;
                    if (elements.length === 0) {
                        break;
                    }
                }
                callback(elements[i]);
                ++i;
            }
        }
        // Return the element that would be returned if shift() was called now,
        // without modifying the queue.
        peek() { // must not be called on an empty queue
            const front = this._front;
            const cursor = this._cursor;
            return front._elements[cursor];
        }
    }

    function ReadableStreamReaderGenericInitialize(reader, stream) {
        reader._ownerReadableStream = stream;
        stream._reader = reader;
        if (stream._state === 'readable') {
            defaultReaderClosedPromiseInitialize(reader);
        }
        else if (stream._state === 'closed') {
            defaultReaderClosedPromiseInitializeAsResolved(reader);
        }
        else {
            defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
        }
    }
    // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state
    // check.
    function ReadableStreamReaderGenericCancel(reader, reason) {
        const stream = reader._ownerReadableStream;
        return ReadableStreamCancel(stream, reason);
    }
    function ReadableStreamReaderGenericRelease(reader) {
        if (reader._ownerReadableStream._state === 'readable') {
            defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        }
        else {
            defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        }
        reader._ownerReadableStream._reader = undefined;
        reader._ownerReadableStream = undefined;
    }
    // Helper functions for the readers.
    function readerLockException(name) {
        return new TypeError('Cannot ' + name + ' a stream using a released reader');
    }
    // Helper functions for the ReadableStreamDefaultReader.
    function defaultReaderClosedPromiseInitialize(reader) {
        reader._closedPromise = newPromise((resolve, reject) => {
            reader._closedPromise_resolve = resolve;
            reader._closedPromise_reject = reject;
        });
    }
    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseReject(reader, reason);
    }
    function defaultReaderClosedPromiseInitializeAsResolved(reader) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseResolve(reader);
    }
    function defaultReaderClosedPromiseReject(reader, reason) {
        if (reader._closedPromise_reject === undefined) {
            return;
        }
        setPromiseIsHandledToTrue(reader._closedPromise);
        reader._closedPromise_reject(reason);
        reader._closedPromise_resolve = undefined;
        reader._closedPromise_reject = undefined;
    }
    function defaultReaderClosedPromiseResetToRejected(reader, reason) {
        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
    }
    function defaultReaderClosedPromiseResolve(reader) {
        if (reader._closedPromise_resolve === undefined) {
            return;
        }
        reader._closedPromise_resolve(undefined);
        reader._closedPromise_resolve = undefined;
        reader._closedPromise_reject = undefined;
    }

    const AbortSteps = SymbolPolyfill('[[AbortSteps]]');
    const ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');
    const CancelSteps = SymbolPolyfill('[[CancelSteps]]');
    const PullSteps = SymbolPolyfill('[[PullSteps]]');

    /// <reference lib="es2015.core" />
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill
    const NumberIsFinite = Number.isFinite || function (x) {
        return typeof x === 'number' && isFinite(x);
    };

    /// <reference lib="es2015.core" />
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill
    const MathTrunc = Math.trunc || function (v) {
        return v < 0 ? Math.ceil(v) : Math.floor(v);
    };

    // https://heycam.github.io/webidl/#idl-dictionaries
    function isDictionary(x) {
        return typeof x === 'object' || typeof x === 'function';
    }
    function assertDictionary(obj, context) {
        if (obj !== undefined && !isDictionary(obj)) {
            throw new TypeError(`${context} is not an object.`);
        }
    }
    // https://heycam.github.io/webidl/#idl-callback-functions
    function assertFunction(x, context) {
        if (typeof x !== 'function') {
            throw new TypeError(`${context} is not a function.`);
        }
    }
    // https://heycam.github.io/webidl/#idl-object
    function isObject(x) {
        return (typeof x === 'object' && x !== null) || typeof x === 'function';
    }
    function assertObject(x, context) {
        if (!isObject(x)) {
            throw new TypeError(`${context} is not an object.`);
        }
    }
    function assertRequiredArgument(x, position, context) {
        if (x === undefined) {
            throw new TypeError(`Parameter ${position} is required in '${context}'.`);
        }
    }
    function assertRequiredField(x, field, context) {
        if (x === undefined) {
            throw new TypeError(`${field} is required in '${context}'.`);
        }
    }
    // https://heycam.github.io/webidl/#idl-unrestricted-double
    function convertUnrestrictedDouble(value) {
        return Number(value);
    }
    function censorNegativeZero(x) {
        return x === 0 ? 0 : x;
    }
    function integerPart(x) {
        return censorNegativeZero(MathTrunc(x));
    }
    // https://heycam.github.io/webidl/#idl-unsigned-long-long
    function convertUnsignedLongLongWithEnforceRange(value, context) {
        const lowerBound = 0;
        const upperBound = Number.MAX_SAFE_INTEGER;
        let x = Number(value);
        x = censorNegativeZero(x);
        if (!NumberIsFinite(x)) {
            throw new TypeError(`${context} is not a finite number`);
        }
        x = integerPart(x);
        if (x < lowerBound || x > upperBound) {
            throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);
        }
        if (!NumberIsFinite(x) || x === 0) {
            return 0;
        }
        // TODO Use BigInt if supported?
        // let xBigInt = BigInt(integerPart(x));
        // xBigInt = BigInt.asUintN(64, xBigInt);
        // return Number(xBigInt);
        return x;
    }

    function assertReadableStream(x, context) {
        if (!IsReadableStream(x)) {
            throw new TypeError(`${context} is not a ReadableStream.`);
        }
    }

    // Abstract operations for the ReadableStream.
    function AcquireReadableStreamDefaultReader(stream) {
        return new ReadableStreamDefaultReader(stream);
    }
    // ReadableStream API exposed for controllers.
    function ReadableStreamAddReadRequest(stream, readRequest) {
        stream._reader._readRequests.push(readRequest);
    }
    function ReadableStreamFulfillReadRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readRequest = reader._readRequests.shift();
        if (done) {
            readRequest._closeSteps();
        }
        else {
            readRequest._chunkSteps(chunk);
        }
    }
    function ReadableStreamGetNumReadRequests(stream) {
        return stream._reader._readRequests.length;
    }
    function ReadableStreamHasDefaultReader(stream) {
        const reader = stream._reader;
        if (reader === undefined) {
            return false;
        }
        if (!IsReadableStreamDefaultReader(reader)) {
            return false;
        }
        return true;
    }
    /**
     * A default reader vended by a {@link ReadableStream}.
     *
     * @public
     */
    class ReadableStreamDefaultReader {
        constructor(stream) {
            assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');
            assertReadableStream(stream, 'First parameter');
            if (IsReadableStreamLocked(stream)) {
                throw new TypeError('This stream has already been locked for exclusive reading by another reader');
            }
            ReadableStreamReaderGenericInitialize(this, stream);
            this._readRequests = new SimpleQueue();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed,
         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.
         */
        get closed() {
            if (!IsReadableStreamDefaultReader(this)) {
                return promiseRejectedWith(defaultReaderBrandCheckException('closed'));
            }
            return this._closedPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = undefined) {
            if (!IsReadableStreamDefaultReader(this)) {
                return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));
            }
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('cancel'));
            }
            return ReadableStreamReaderGenericCancel(this, reason);
        }
        /**
         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read() {
            if (!IsReadableStreamDefaultReader(this)) {
                return promiseRejectedWith(defaultReaderBrandCheckException('read'));
            }
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('read from'));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;
            });
            const readRequest = {
                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),
                _closeSteps: () => resolvePromise({ value: undefined, done: true }),
                _errorSteps: e => rejectPromise(e)
            };
            ReadableStreamDefaultReaderRead(this, readRequest);
            return promise;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
            if (!IsReadableStreamDefaultReader(this)) {
                throw defaultReaderBrandCheckException('releaseLock');
            }
            if (this._ownerReadableStream === undefined) {
                return;
            }
            if (this._readRequests.length > 0) {
                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');
            }
            ReadableStreamReaderGenericRelease(this);
        }
    }
    Object.defineProperties(ReadableStreamDefaultReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamDefaultReader',
            configurable: true
        });
    }
    // Abstract operations for the readers.
    function IsReadableStreamDefaultReader(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {
            return false;
        }
        return x instanceof ReadableStreamDefaultReader;
    }
    function ReadableStreamDefaultReaderRead(reader, readRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === 'closed') {
            readRequest._closeSteps();
        }
        else if (stream._state === 'errored') {
            readRequest._errorSteps(stream._storedError);
        }
        else {
            stream._readableStreamController[PullSteps](readRequest);
        }
    }
    // Helper functions for the ReadableStreamDefaultReader.
    function defaultReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);
    }

    /// <reference lib="es2018.asynciterable" />
    /* eslint-disable @typescript-eslint/no-empty-function */
    const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () { }).prototype);

    /// <reference lib="es2018.asynciterable" />
    class ReadableStreamAsyncIteratorImpl {
        constructor(reader, preventCancel) {
            this._ongoingPromise = undefined;
            this._isFinished = false;
            this._reader = reader;
            this._preventCancel = preventCancel;
        }
        next() {
            const nextSteps = () => this._nextSteps();
            this._ongoingPromise = this._ongoingPromise ?
                transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :
                nextSteps();
            return this._ongoingPromise;
        }
        return(value) {
            const returnSteps = () => this._returnSteps(value);
            return this._ongoingPromise ?
                transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :
                returnSteps();
        }
        _nextSteps() {
            if (this._isFinished) {
                return Promise.resolve({ value: undefined, done: true });
            }
            const reader = this._reader;
            if (reader._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('iterate'));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;
            });
            const readRequest = {
                _chunkSteps: chunk => {
                    this._ongoingPromise = undefined;
                    // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.
                    // FIXME Is this a bug in the specification, or in the test?
                    queueMicrotask(() => resolvePromise({ value: chunk, done: false }));
                },
                _closeSteps: () => {
                    this._ongoingPromise = undefined;
                    this._isFinished = true;
                    ReadableStreamReaderGenericRelease(reader);
                    resolvePromise({ value: undefined, done: true });
                },
                _errorSteps: reason => {
                    this._ongoingPromise = undefined;
                    this._isFinished = true;
                    ReadableStreamReaderGenericRelease(reader);
                    rejectPromise(reason);
                }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
            return promise;
        }
        _returnSteps(value) {
            if (this._isFinished) {
                return Promise.resolve({ value, done: true });
            }
            this._isFinished = true;
            const reader = this._reader;
            if (reader._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('finish iterating'));
            }
            if (!this._preventCancel) {
                const result = ReadableStreamReaderGenericCancel(reader, value);
                ReadableStreamReaderGenericRelease(reader);
                return transformPromiseWith(result, () => ({ value, done: true }));
            }
            ReadableStreamReaderGenericRelease(reader);
            return promiseResolvedWith({ value, done: true });
        }
    }
    const ReadableStreamAsyncIteratorPrototype = {
        next() {
            if (!IsReadableStreamAsyncIterator(this)) {
                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));
            }
            return this._asyncIteratorImpl.next();
        },
        return(value) {
            if (!IsReadableStreamAsyncIterator(this)) {
                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));
            }
            return this._asyncIteratorImpl.return(value);
        }
    };
    if (AsyncIteratorPrototype !== undefined) {
        Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
    }
    // Abstract operations for the ReadableStream.
    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
        iterator._asyncIteratorImpl = impl;
        return iterator;
    }
    function IsReadableStreamAsyncIterator(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {
            return false;
        }
        try {
            // noinspection SuspiciousTypeOfGuard
            return x._asyncIteratorImpl instanceof
                ReadableStreamAsyncIteratorImpl;
        }
        catch (_a) {
            return false;
        }
    }
    // Helper functions for the ReadableStream.
    function streamAsyncIteratorBrandCheckException(name) {
        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);
    }

    /// <reference lib="es2015.core" />
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill
    const NumberIsNaN = Number.isNaN || function (x) {
        // eslint-disable-next-line no-self-compare
        return x !== x;
    };

    function CreateArrayFromList(elements) {
        // We use arrays to represent lists, so this is basically a no-op.
        // Do a slice though just in case we happen to depend on the unique-ness.
        return elements.slice();
    }
    function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
    }
    // Not implemented correctly
    function TransferArrayBuffer(O) {
        return O;
    }
    // Not implemented correctly
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function IsDetachedBuffer(O) {
        return false;
    }
    function ArrayBufferSlice(buffer, begin, end) {
        // ArrayBuffer.prototype.slice is not available on IE10
        // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice
        if (buffer.slice) {
            return buffer.slice(begin, end);
        }
        const length = end - begin;
        const slice = new ArrayBuffer(length);
        CopyDataBlockBytes(slice, 0, buffer, begin, length);
        return slice;
    }

    function IsNonNegativeNumber(v) {
        if (typeof v !== 'number') {
            return false;
        }
        if (NumberIsNaN(v)) {
            return false;
        }
        if (v < 0) {
            return false;
        }
        return true;
    }
    function CloneAsUint8Array(O) {
        const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
        return new Uint8Array(buffer);
    }

    function DequeueValue(container) {
        const pair = container._queue.shift();
        container._queueTotalSize -= pair.size;
        if (container._queueTotalSize < 0) {
            container._queueTotalSize = 0;
        }
        return pair.value;
    }
    function EnqueueValueWithSize(container, value, size) {
        if (!IsNonNegativeNumber(size) || size === Infinity) {
            throw new RangeError('Size must be a finite, non-NaN, non-negative number.');
        }
        container._queue.push({ value, size });
        container._queueTotalSize += size;
    }
    function PeekQueueValue(container) {
        const pair = container._queue.peek();
        return pair.value;
    }
    function ResetQueue(container) {
        container._queue = new SimpleQueue();
        container._queueTotalSize = 0;
    }

    /**
     * A pull-into request in a {@link ReadableByteStreamController}.
     *
     * @public
     */
    class ReadableStreamBYOBRequest {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.
         */
        get view() {
            if (!IsReadableStreamBYOBRequest(this)) {
                throw byobRequestBrandCheckException('view');
            }
            return this._view;
        }
        respond(bytesWritten) {
            if (!IsReadableStreamBYOBRequest(this)) {
                throw byobRequestBrandCheckException('respond');
            }
            assertRequiredArgument(bytesWritten, 1, 'respond');
            bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');
            if (this._associatedReadableByteStreamController === undefined) {
                throw new TypeError('This BYOB request has been invalidated');
            }
            if (IsDetachedBuffer(this._view.buffer)) ;
            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
        }
        respondWithNewView(view) {
            if (!IsReadableStreamBYOBRequest(this)) {
                throw byobRequestBrandCheckException('respondWithNewView');
            }
            assertRequiredArgument(view, 1, 'respondWithNewView');
            if (!ArrayBuffer.isView(view)) {
                throw new TypeError('You can only respond with array buffer views');
            }
            if (this._associatedReadableByteStreamController === undefined) {
                throw new TypeError('This BYOB request has been invalidated');
            }
            if (IsDetachedBuffer(view.buffer)) ;
            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
        }
    }
    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
        respond: { enumerable: true },
        respondWithNewView: { enumerable: true },
        view: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamBYOBRequest',
            configurable: true
        });
    }
    /**
     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.
     *
     * @public
     */
    class ReadableByteStreamController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the current BYOB pull request, or `null` if there isn't one.
         */
        get byobRequest() {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('byobRequest');
            }
            return ReadableByteStreamControllerGetBYOBRequest(this);
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('desiredSize');
            }
            return ReadableByteStreamControllerGetDesiredSize(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('close');
            }
            if (this._closeRequested) {
                throw new TypeError('The stream has already been closed; do not close it again!');
            }
            const state = this._controlledReadableByteStream._state;
            if (state !== 'readable') {
                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);
            }
            ReadableByteStreamControllerClose(this);
        }
        enqueue(chunk) {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('enqueue');
            }
            assertRequiredArgument(chunk, 1, 'enqueue');
            if (!ArrayBuffer.isView(chunk)) {
                throw new TypeError('chunk must be an array buffer view');
            }
            if (chunk.byteLength === 0) {
                throw new TypeError('chunk must have non-zero byteLength');
            }
            if (chunk.buffer.byteLength === 0) {
                throw new TypeError(`chunk's buffer must have non-zero byteLength`);
            }
            if (this._closeRequested) {
                throw new TypeError('stream is closed or draining');
            }
            const state = this._controlledReadableByteStream._state;
            if (state !== 'readable') {
                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);
            }
            ReadableByteStreamControllerEnqueue(this, chunk);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e = undefined) {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('error');
            }
            ReadableByteStreamControllerError(this, e);
        }
        /** @internal */
        [CancelSteps](reason) {
            ReadableByteStreamControllerClearPendingPullIntos(this);
            ResetQueue(this);
            const result = this._cancelAlgorithm(reason);
            ReadableByteStreamControllerClearAlgorithms(this);
            return result;
        }
        /** @internal */
        [PullSteps](readRequest) {
            const stream = this._controlledReadableByteStream;
            if (this._queueTotalSize > 0) {
                const entry = this._queue.shift();
                this._queueTotalSize -= entry.byteLength;
                ReadableByteStreamControllerHandleQueueDrain(this);
                const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
                readRequest._chunkSteps(view);
                return;
            }
            const autoAllocateChunkSize = this._autoAllocateChunkSize;
            if (autoAllocateChunkSize !== undefined) {
                let buffer;
                try {
                    buffer = new ArrayBuffer(autoAllocateChunkSize);
                }
                catch (bufferE) {
                    readRequest._errorSteps(bufferE);
                    return;
                }
                const pullIntoDescriptor = {
                    buffer,
                    bufferByteLength: autoAllocateChunkSize,
                    byteOffset: 0,
                    byteLength: autoAllocateChunkSize,
                    bytesFilled: 0,
                    elementSize: 1,
                    viewConstructor: Uint8Array,
                    readerType: 'default'
                };
                this._pendingPullIntos.push(pullIntoDescriptor);
            }
            ReadableStreamAddReadRequest(stream, readRequest);
            ReadableByteStreamControllerCallPullIfNeeded(this);
        }
    }
    Object.defineProperties(ReadableByteStreamController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        byobRequest: { enumerable: true },
        desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableByteStreamController',
            configurable: true
        });
    }
    // Abstract operations for the ReadableByteStreamController.
    function IsReadableByteStreamController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {
            return false;
        }
        return x instanceof ReadableByteStreamController;
    }
    function IsReadableStreamBYOBRequest(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {
            return false;
        }
        return x instanceof ReadableStreamBYOBRequest;
    }
    function ReadableByteStreamControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
        if (!shouldPull) {
            return;
        }
        if (controller._pulling) {
            controller._pullAgain = true;
            return;
        }
        controller._pulling = true;
        // TODO: Test controller argument
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
            controller._pulling = false;
            if (controller._pullAgain) {
                controller._pullAgain = false;
                ReadableByteStreamControllerCallPullIfNeeded(controller);
            }
        }, e => {
            ReadableByteStreamControllerError(controller, e);
        });
    }
    function ReadableByteStreamControllerClearPendingPullIntos(controller) {
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        controller._pendingPullIntos = new SimpleQueue();
    }
    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
        let done = false;
        if (stream._state === 'closed') {
            done = true;
        }
        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
        if (pullIntoDescriptor.readerType === 'default') {
            ReadableStreamFulfillReadRequest(stream, filledView, done);
        }
        else {
            ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
        }
    }
    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
        const bytesFilled = pullIntoDescriptor.bytesFilled;
        const elementSize = pullIntoDescriptor.elementSize;
        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
    }
    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
        controller._queue.push({ buffer, byteOffset, byteLength });
        controller._queueTotalSize += byteLength;
    }
    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
        const elementSize = pullIntoDescriptor.elementSize;
        const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;
        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
        const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;
        let totalBytesToCopyRemaining = maxBytesToCopy;
        let ready = false;
        if (maxAlignedBytes > currentAlignedBytes) {
            totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
            ready = true;
        }
        const queue = controller._queue;
        while (totalBytesToCopyRemaining > 0) {
            const headOfQueue = queue.peek();
            const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
            const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
            CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
            if (headOfQueue.byteLength === bytesToCopy) {
                queue.shift();
            }
            else {
                headOfQueue.byteOffset += bytesToCopy;
                headOfQueue.byteLength -= bytesToCopy;
            }
            controller._queueTotalSize -= bytesToCopy;
            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
            totalBytesToCopyRemaining -= bytesToCopy;
        }
        return ready;
    }
    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
        pullIntoDescriptor.bytesFilled += size;
    }
    function ReadableByteStreamControllerHandleQueueDrain(controller) {
        if (controller._queueTotalSize === 0 && controller._closeRequested) {
            ReadableByteStreamControllerClearAlgorithms(controller);
            ReadableStreamClose(controller._controlledReadableByteStream);
        }
        else {
            ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
    }
    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
        if (controller._byobRequest === null) {
            return;
        }
        controller._byobRequest._associatedReadableByteStreamController = undefined;
        controller._byobRequest._view = null;
        controller._byobRequest = null;
    }
    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
        while (controller._pendingPullIntos.length > 0) {
            if (controller._queueTotalSize === 0) {
                return;
            }
            const pullIntoDescriptor = controller._pendingPullIntos.peek();
            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
                ReadableByteStreamControllerShiftPendingPullInto(controller);
                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
            }
        }
    }
    function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {
        const stream = controller._controlledReadableByteStream;
        let elementSize = 1;
        if (view.constructor !== DataView) {
            elementSize = view.constructor.BYTES_PER_ELEMENT;
        }
        const ctor = view.constructor;
        // try {
        const buffer = TransferArrayBuffer(view.buffer);
        // } catch (e) {
        //   readIntoRequest._errorSteps(e);
        //   return;
        // }
        const pullIntoDescriptor = {
            buffer,
            bufferByteLength: buffer.byteLength,
            byteOffset: view.byteOffset,
            byteLength: view.byteLength,
            bytesFilled: 0,
            elementSize,
            viewConstructor: ctor,
            readerType: 'byob'
        };
        if (controller._pendingPullIntos.length > 0) {
            controller._pendingPullIntos.push(pullIntoDescriptor);
            // No ReadableByteStreamControllerCallPullIfNeeded() call since:
            // - No change happens on desiredSize
            // - The source has already been notified of that there's at least 1 pending read(view)
            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
            return;
        }
        if (stream._state === 'closed') {
            const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
            readIntoRequest._closeSteps(emptyView);
            return;
        }
        if (controller._queueTotalSize > 0) {
            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
                ReadableByteStreamControllerHandleQueueDrain(controller);
                readIntoRequest._chunkSteps(filledView);
                return;
            }
            if (controller._closeRequested) {
                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');
                ReadableByteStreamControllerError(controller, e);
                readIntoRequest._errorSteps(e);
                return;
            }
        }
        controller._pendingPullIntos.push(pullIntoDescriptor);
        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
        ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
        const stream = controller._controlledReadableByteStream;
        if (ReadableStreamHasBYOBReader(stream)) {
            while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
                const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
                ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
            }
        }
    }
    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
            return;
        }
        ReadableByteStreamControllerShiftPendingPullInto(controller);
        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
        if (remainderSize > 0) {
            const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
            const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
        }
        pullIntoDescriptor.bytesFilled -= remainderSize;
        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
    }
    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        const state = controller._controlledReadableByteStream._state;
        if (state === 'closed') {
            ReadableByteStreamControllerRespondInClosedState(controller);
        }
        else {
            ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerShiftPendingPullInto(controller) {
        const descriptor = controller._pendingPullIntos.shift();
        return descriptor;
    }
    function ReadableByteStreamControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== 'readable') {
            return false;
        }
        if (controller._closeRequested) {
            return false;
        }
        if (!controller._started) {
            return false;
        }
        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            return true;
        }
        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
            return true;
        }
        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
            return true;
        }
        return false;
    }
    function ReadableByteStreamControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = undefined;
        controller._cancelAlgorithm = undefined;
    }
    // A client of ReadableByteStreamController may use these functions directly to bypass state check.
    function ReadableByteStreamControllerClose(controller) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== 'readable') {
            return;
        }
        if (controller._queueTotalSize > 0) {
            controller._closeRequested = true;
            return;
        }
        if (controller._pendingPullIntos.length > 0) {
            const firstPendingPullInto = controller._pendingPullIntos.peek();
            if (firstPendingPullInto.bytesFilled > 0) {
                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');
                ReadableByteStreamControllerError(controller, e);
                throw e;
            }
        }
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamClose(stream);
    }
    function ReadableByteStreamControllerEnqueue(controller, chunk) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== 'readable') {
            return;
        }
        const buffer = chunk.buffer;
        const byteOffset = chunk.byteOffset;
        const byteLength = chunk.byteLength;
        const transferredBuffer = TransferArrayBuffer(buffer);
        if (controller._pendingPullIntos.length > 0) {
            const firstPendingPullInto = controller._pendingPullIntos.peek();
            if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;
            firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
        }
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        if (ReadableStreamHasDefaultReader(stream)) {
            if (ReadableStreamGetNumReadRequests(stream) === 0) {
                ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
            }
            else {
                if (controller._pendingPullIntos.length > 0) {
                    ReadableByteStreamControllerShiftPendingPullInto(controller);
                }
                const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
                ReadableStreamFulfillReadRequest(stream, transferredView, false);
            }
        }
        else if (ReadableStreamHasBYOBReader(stream)) {
            // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
        }
        else {
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerError(controller, e) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== 'readable') {
            return;
        }
        ReadableByteStreamControllerClearPendingPullIntos(controller);
        ResetQueue(controller);
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e);
    }
    function ReadableByteStreamControllerGetBYOBRequest(controller) {
        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
            const firstDescriptor = controller._pendingPullIntos.peek();
            const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
            const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
            SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
            controller._byobRequest = byobRequest;
        }
        return controller._byobRequest;
    }
    function ReadableByteStreamControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableByteStream._state;
        if (state === 'errored') {
            return null;
        }
        if (state === 'closed') {
            return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
    }
    function ReadableByteStreamControllerRespond(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === 'closed') {
            if (bytesWritten !== 0) {
                throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');
            }
        }
        else {
            if (bytesWritten === 0) {
                throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');
            }
            if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
                throw new RangeError('bytesWritten out of range');
            }
        }
        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
    }
    function ReadableByteStreamControllerRespondWithNewView(controller, view) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === 'closed') {
            if (view.byteLength !== 0) {
                throw new TypeError('The view\'s length must be 0 when calling respondWithNewView() on a closed stream');
            }
        }
        else {
            if (view.byteLength === 0) {
                throw new TypeError('The view\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');
            }
        }
        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
            throw new RangeError('The region specified by view does not match byobRequest');
        }
        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
            throw new RangeError('The buffer of view has different capacity than byobRequest');
        }
        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
            throw new RangeError('The region specified by view is larger than byobRequest');
        }
        const viewByteLength = view.byteLength;
        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
    }
    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
        controller._controlledReadableByteStream = stream;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._byobRequest = null;
        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.
        controller._queue = controller._queueTotalSize = undefined;
        ResetQueue(controller);
        controller._closeRequested = false;
        controller._started = false;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        controller._autoAllocateChunkSize = autoAllocateChunkSize;
        controller._pendingPullIntos = new SimpleQueue();
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
            controller._started = true;
            ReadableByteStreamControllerCallPullIfNeeded(controller);
        }, r => {
            ReadableByteStreamControllerError(controller, r);
        });
    }
    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
        const controller = Object.create(ReadableByteStreamController.prototype);
        let startAlgorithm = () => undefined;
        let pullAlgorithm = () => promiseResolvedWith(undefined);
        let cancelAlgorithm = () => promiseResolvedWith(undefined);
        if (underlyingByteSource.start !== undefined) {
            startAlgorithm = () => underlyingByteSource.start(controller);
        }
        if (underlyingByteSource.pull !== undefined) {
            pullAlgorithm = () => underlyingByteSource.pull(controller);
        }
        if (underlyingByteSource.cancel !== undefined) {
            cancelAlgorithm = reason => underlyingByteSource.cancel(reason);
        }
        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
        if (autoAllocateChunkSize === 0) {
            throw new TypeError('autoAllocateChunkSize must be greater than 0');
        }
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
    }
    function SetUpReadableStreamBYOBRequest(request, controller, view) {
        request._associatedReadableByteStreamController = controller;
        request._view = view;
    }
    // Helper functions for the ReadableStreamBYOBRequest.
    function byobRequestBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);
    }
    // Helper functions for the ReadableByteStreamController.
    function byteStreamControllerBrandCheckException(name) {
        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);
    }

    // Abstract operations for the ReadableStream.
    function AcquireReadableStreamBYOBReader(stream) {
        return new ReadableStreamBYOBReader(stream);
    }
    // ReadableStream API exposed for controllers.
    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
        stream._reader._readIntoRequests.push(readIntoRequest);
    }
    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readIntoRequest = reader._readIntoRequests.shift();
        if (done) {
            readIntoRequest._closeSteps(chunk);
        }
        else {
            readIntoRequest._chunkSteps(chunk);
        }
    }
    function ReadableStreamGetNumReadIntoRequests(stream) {
        return stream._reader._readIntoRequests.length;
    }
    function ReadableStreamHasBYOBReader(stream) {
        const reader = stream._reader;
        if (reader === undefined) {
            return false;
        }
        if (!IsReadableStreamBYOBReader(reader)) {
            return false;
        }
        return true;
    }
    /**
     * A BYOB reader vended by a {@link ReadableStream}.
     *
     * @public
     */
    class ReadableStreamBYOBReader {
        constructor(stream) {
            assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');
            assertReadableStream(stream, 'First parameter');
            if (IsReadableStreamLocked(stream)) {
                throw new TypeError('This stream has already been locked for exclusive reading by another reader');
            }
            if (!IsReadableByteStreamController(stream._readableStreamController)) {
                throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +
                    'source');
            }
            ReadableStreamReaderGenericInitialize(this, stream);
            this._readIntoRequests = new SimpleQueue();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the reader's lock is released before the stream finishes closing.
         */
        get closed() {
            if (!IsReadableStreamBYOBReader(this)) {
                return promiseRejectedWith(byobReaderBrandCheckException('closed'));
            }
            return this._closedPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = undefined) {
            if (!IsReadableStreamBYOBReader(this)) {
                return promiseRejectedWith(byobReaderBrandCheckException('cancel'));
            }
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('cancel'));
            }
            return ReadableStreamReaderGenericCancel(this, reason);
        }
        /**
         * Attempts to reads bytes into view, and returns a promise resolved with the result.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read(view) {
            if (!IsReadableStreamBYOBReader(this)) {
                return promiseRejectedWith(byobReaderBrandCheckException('read'));
            }
            if (!ArrayBuffer.isView(view)) {
                return promiseRejectedWith(new TypeError('view must be an array buffer view'));
            }
            if (view.byteLength === 0) {
                return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));
            }
            if (view.buffer.byteLength === 0) {
                return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));
            }
            if (IsDetachedBuffer(view.buffer)) ;
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('read from'));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;
            });
            const readIntoRequest = {
                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),
                _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),
                _errorSteps: e => rejectPromise(e)
            };
            ReadableStreamBYOBReaderRead(this, view, readIntoRequest);
            return promise;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
            if (!IsReadableStreamBYOBReader(this)) {
                throw byobReaderBrandCheckException('releaseLock');
            }
            if (this._ownerReadableStream === undefined) {
                return;
            }
            if (this._readIntoRequests.length > 0) {
                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');
            }
            ReadableStreamReaderGenericRelease(this);
        }
    }
    Object.defineProperties(ReadableStreamBYOBReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamBYOBReader',
            configurable: true
        });
    }
    // Abstract operations for the readers.
    function IsReadableStreamBYOBReader(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {
            return false;
        }
        return x instanceof ReadableStreamBYOBReader;
    }
    function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === 'errored') {
            readIntoRequest._errorSteps(stream._storedError);
        }
        else {
            ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);
        }
    }
    // Helper functions for the ReadableStreamBYOBReader.
    function byobReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);
    }

    function ExtractHighWaterMark(strategy, defaultHWM) {
        const { highWaterMark } = strategy;
        if (highWaterMark === undefined) {
            return defaultHWM;
        }
        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
            throw new RangeError('Invalid highWaterMark');
        }
        return highWaterMark;
    }
    function ExtractSizeAlgorithm(strategy) {
        const { size } = strategy;
        if (!size) {
            return () => 1;
        }
        return size;
    }

    function convertQueuingStrategy(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        const size = init === null || init === void 0 ? void 0 : init.size;
        return {
            highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),
            size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)
        };
    }
    function convertQueuingStrategySize(fn, context) {
        assertFunction(fn, context);
        return chunk => convertUnrestrictedDouble(fn(chunk));
    }

    function convertUnderlyingSink(original, context) {
        assertDictionary(original, context);
        const abort = original === null || original === void 0 ? void 0 : original.abort;
        const close = original === null || original === void 0 ? void 0 : original.close;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        const write = original === null || original === void 0 ? void 0 : original.write;
        return {
            abort: abort === undefined ?
                undefined :
                convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),
            close: close === undefined ?
                undefined :
                convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),
            start: start === undefined ?
                undefined :
                convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),
            write: write === undefined ?
                undefined :
                convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),
            type
        };
    }
    function convertUnderlyingSinkAbortCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
    }
    function convertUnderlyingSinkCloseCallback(fn, original, context) {
        assertFunction(fn, context);
        return () => promiseCall(fn, original, []);
    }
    function convertUnderlyingSinkStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertUnderlyingSinkWriteCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
    }

    function assertWritableStream(x, context) {
        if (!IsWritableStream(x)) {
            throw new TypeError(`${context} is not a WritableStream.`);
        }
    }

    function isAbortSignal(value) {
        if (typeof value !== 'object' || value === null) {
            return false;
        }
        try {
            return typeof value.aborted === 'boolean';
        }
        catch (_a) {
            // AbortSignal.prototype.aborted throws if its brand check fails
            return false;
        }
    }
    const supportsAbortController = typeof AbortController === 'function';
    /**
     * Construct a new AbortController, if supported by the platform.
     *
     * @internal
     */
    function createAbortController() {
        if (supportsAbortController) {
            return new AbortController();
        }
        return undefined;
    }

    /**
     * A writable stream represents a destination for data, into which you can write.
     *
     * @public
     */
    class WritableStream {
        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
            if (rawUnderlyingSink === undefined) {
                rawUnderlyingSink = null;
            }
            else {
                assertObject(rawUnderlyingSink, 'First parameter');
            }
            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');
            const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');
            InitializeWritableStream(this);
            const type = underlyingSink.type;
            if (type !== undefined) {
                throw new RangeError('Invalid type is specified');
            }
            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
            const highWaterMark = ExtractHighWaterMark(strategy, 1);
            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
        }
        /**
         * Returns whether or not the writable stream is locked to a writer.
         */
        get locked() {
            if (!IsWritableStream(this)) {
                throw streamBrandCheckException$2('locked');
            }
            return IsWritableStreamLocked(this);
        }
        /**
         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be
         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort
         * mechanism of the underlying sink.
         *
         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled
         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel
         * the stream) if the stream is currently locked.
         */
        abort(reason = undefined) {
            if (!IsWritableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$2('abort'));
            }
            if (IsWritableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));
            }
            return WritableStreamAbort(this, reason);
        }
        /**
         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its
         * close behavior. During this time any further attempts to write will fail (without erroring the stream).
         *
         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream
         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with
         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.
         */
        close() {
            if (!IsWritableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$2('close'));
            }
            if (IsWritableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));
            }
            if (WritableStreamCloseQueuedOrInFlight(this)) {
                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));
            }
            return WritableStreamClose(this);
        }
        /**
         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream
         * is locked, no other writer can be acquired until this one is released.
         *
         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream
         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at
         * the same time, which would cause the resulting written data to be unpredictable and probably useless.
         */
        getWriter() {
            if (!IsWritableStream(this)) {
                throw streamBrandCheckException$2('getWriter');
            }
            return AcquireWritableStreamDefaultWriter(this);
        }
    }
    Object.defineProperties(WritableStream.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        getWriter: { enumerable: true },
        locked: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {
            value: 'WritableStream',
            configurable: true
        });
    }
    // Abstract operations for the WritableStream.
    function AcquireWritableStreamDefaultWriter(stream) {
        return new WritableStreamDefaultWriter(stream);
    }
    // Throws if and only if startAlgorithm throws.
    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(WritableStream.prototype);
        InitializeWritableStream(stream);
        const controller = Object.create(WritableStreamDefaultController.prototype);
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
    }
    function InitializeWritableStream(stream) {
        stream._state = 'writable';
        // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is
        // 'erroring' or 'errored'. May be set to an undefined value.
        stream._storedError = undefined;
        stream._writer = undefined;
        // Initialize to undefined first because the constructor of the controller checks this
        // variable to validate the caller.
        stream._writableStreamController = undefined;
        // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data
        // producer without waiting for the queued writes to finish.
        stream._writeRequests = new SimpleQueue();
        // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents
        // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.
        stream._inFlightWriteRequest = undefined;
        // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer
        // has been detached.
        stream._closeRequest = undefined;
        // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it
        // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.
        stream._inFlightCloseRequest = undefined;
        // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.
        stream._pendingAbortRequest = undefined;
        // The backpressure signal set by the controller.
        stream._backpressure = false;
    }
    function IsWritableStream(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {
            return false;
        }
        return x instanceof WritableStream;
    }
    function IsWritableStreamLocked(stream) {
        if (stream._writer === undefined) {
            return false;
        }
        return true;
    }
    function WritableStreamAbort(stream, reason) {
        var _a;
        if (stream._state === 'closed' || stream._state === 'errored') {
            return promiseResolvedWith(undefined);
        }
        stream._writableStreamController._abortReason = reason;
        (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();
        // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',
        // but it doesn't know that signaling abort runs author code that might have changed the state.
        // Widen the type again by casting to WritableStreamState.
        const state = stream._state;
        if (state === 'closed' || state === 'errored') {
            return promiseResolvedWith(undefined);
        }
        if (stream._pendingAbortRequest !== undefined) {
            return stream._pendingAbortRequest._promise;
        }
        let wasAlreadyErroring = false;
        if (state === 'erroring') {
            wasAlreadyErroring = true;
            // reason will not be used, so don't keep a reference to it.
            reason = undefined;
        }
        const promise = newPromise((resolve, reject) => {
            stream._pendingAbortRequest = {
                _promise: undefined,
                _resolve: resolve,
                _reject: reject,
                _reason: reason,
                _wasAlreadyErroring: wasAlreadyErroring
            };
        });
        stream._pendingAbortRequest._promise = promise;
        if (!wasAlreadyErroring) {
            WritableStreamStartErroring(stream, reason);
        }
        return promise;
    }
    function WritableStreamClose(stream) {
        const state = stream._state;
        if (state === 'closed' || state === 'errored') {
            return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));
        }
        const promise = newPromise((resolve, reject) => {
            const closeRequest = {
                _resolve: resolve,
                _reject: reject
            };
            stream._closeRequest = closeRequest;
        });
        const writer = stream._writer;
        if (writer !== undefined && stream._backpressure && state === 'writable') {
            defaultWriterReadyPromiseResolve(writer);
        }
        WritableStreamDefaultControllerClose(stream._writableStreamController);
        return promise;
    }
    // WritableStream API exposed for controllers.
    function WritableStreamAddWriteRequest(stream) {
        const promise = newPromise((resolve, reject) => {
            const writeRequest = {
                _resolve: resolve,
                _reject: reject
            };
            stream._writeRequests.push(writeRequest);
        });
        return promise;
    }
    function WritableStreamDealWithRejection(stream, error) {
        const state = stream._state;
        if (state === 'writable') {
            WritableStreamStartErroring(stream, error);
            return;
        }
        WritableStreamFinishErroring(stream);
    }
    function WritableStreamStartErroring(stream, reason) {
        const controller = stream._writableStreamController;
        stream._state = 'erroring';
        stream._storedError = reason;
        const writer = stream._writer;
        if (writer !== undefined) {
            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
        }
        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
            WritableStreamFinishErroring(stream);
        }
    }
    function WritableStreamFinishErroring(stream) {
        stream._state = 'errored';
        stream._writableStreamController[ErrorSteps]();
        const storedError = stream._storedError;
        stream._writeRequests.forEach(writeRequest => {
            writeRequest._reject(storedError);
        });
        stream._writeRequests = new SimpleQueue();
        if (stream._pendingAbortRequest === undefined) {
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
            return;
        }
        const abortRequest = stream._pendingAbortRequest;
        stream._pendingAbortRequest = undefined;
        if (abortRequest._wasAlreadyErroring) {
            abortRequest._reject(storedError);
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
            return;
        }
        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
        uponPromise(promise, () => {
            abortRequest._resolve();
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        }, (reason) => {
            abortRequest._reject(reason);
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        });
    }
    function WritableStreamFinishInFlightWrite(stream) {
        stream._inFlightWriteRequest._resolve(undefined);
        stream._inFlightWriteRequest = undefined;
    }
    function WritableStreamFinishInFlightWriteWithError(stream, error) {
        stream._inFlightWriteRequest._reject(error);
        stream._inFlightWriteRequest = undefined;
        WritableStreamDealWithRejection(stream, error);
    }
    function WritableStreamFinishInFlightClose(stream) {
        stream._inFlightCloseRequest._resolve(undefined);
        stream._inFlightCloseRequest = undefined;
        const state = stream._state;
        if (state === 'erroring') {
            // The error was too late to do anything, so it is ignored.
            stream._storedError = undefined;
            if (stream._pendingAbortRequest !== undefined) {
                stream._pendingAbortRequest._resolve();
                stream._pendingAbortRequest = undefined;
            }
        }
        stream._state = 'closed';
        const writer = stream._writer;
        if (writer !== undefined) {
            defaultWriterClosedPromiseResolve(writer);
        }
    }
    function WritableStreamFinishInFlightCloseWithError(stream, error) {
        stream._inFlightCloseRequest._reject(error);
        stream._inFlightCloseRequest = undefined;
        // Never execute sink abort() after sink close().
        if (stream._pendingAbortRequest !== undefined) {
            stream._pendingAbortRequest._reject(error);
            stream._pendingAbortRequest = undefined;
        }
        WritableStreamDealWithRejection(stream, error);
    }
    // TODO(ricea): Fix alphabetical order.
    function WritableStreamCloseQueuedOrInFlight(stream) {
        if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {
            return false;
        }
        return true;
    }
    function WritableStreamHasOperationMarkedInFlight(stream) {
        if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {
            return false;
        }
        return true;
    }
    function WritableStreamMarkCloseRequestInFlight(stream) {
        stream._inFlightCloseRequest = stream._closeRequest;
        stream._closeRequest = undefined;
    }
    function WritableStreamMarkFirstWriteRequestInFlight(stream) {
        stream._inFlightWriteRequest = stream._writeRequests.shift();
    }
    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
        if (stream._closeRequest !== undefined) {
            stream._closeRequest._reject(stream._storedError);
            stream._closeRequest = undefined;
        }
        const writer = stream._writer;
        if (writer !== undefined) {
            defaultWriterClosedPromiseReject(writer, stream._storedError);
        }
    }
    function WritableStreamUpdateBackpressure(stream, backpressure) {
        const writer = stream._writer;
        if (writer !== undefined && backpressure !== stream._backpressure) {
            if (backpressure) {
                defaultWriterReadyPromiseReset(writer);
            }
            else {
                defaultWriterReadyPromiseResolve(writer);
            }
        }
        stream._backpressure = backpressure;
    }
    /**
     * A default writer vended by a {@link WritableStream}.
     *
     * @public
     */
    class WritableStreamDefaultWriter {
        constructor(stream) {
            assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');
            assertWritableStream(stream, 'First parameter');
            if (IsWritableStreamLocked(stream)) {
                throw new TypeError('This stream has already been locked for exclusive writing by another writer');
            }
            this._ownerWritableStream = stream;
            stream._writer = this;
            const state = stream._state;
            if (state === 'writable') {
                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
                    defaultWriterReadyPromiseInitialize(this);
                }
                else {
                    defaultWriterReadyPromiseInitializeAsResolved(this);
                }
                defaultWriterClosedPromiseInitialize(this);
            }
            else if (state === 'erroring') {
                defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
                defaultWriterClosedPromiseInitialize(this);
            }
            else if (state === 'closed') {
                defaultWriterReadyPromiseInitializeAsResolved(this);
                defaultWriterClosedPromiseInitializeAsResolved(this);
            }
            else {
                const storedError = stream._storedError;
                defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
                defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
            }
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the writer’s lock is released before the stream finishes closing.
         */
        get closed() {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('closed'));
            }
            return this._closedPromise;
        }
        /**
         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.
         * A producer can use this information to determine the right amount of data to write.
         *
         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort
         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when
         * the writer’s lock is released.
         */
        get desiredSize() {
            if (!IsWritableStreamDefaultWriter(this)) {
                throw defaultWriterBrandCheckException('desiredSize');
            }
            if (this._ownerWritableStream === undefined) {
                throw defaultWriterLockException('desiredSize');
            }
            return WritableStreamDefaultWriterGetDesiredSize(this);
        }
        /**
         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions
         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips
         * back to zero or below, the getter will return a new promise that stays pending until the next transition.
         *
         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become
         * rejected.
         */
        get ready() {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('ready'));
            }
            return this._readyPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.
         */
        abort(reason = undefined) {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('abort'));
            }
            if (this._ownerWritableStream === undefined) {
                return promiseRejectedWith(defaultWriterLockException('abort'));
            }
            return WritableStreamDefaultWriterAbort(this, reason);
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.
         */
        close() {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('close'));
            }
            const stream = this._ownerWritableStream;
            if (stream === undefined) {
                return promiseRejectedWith(defaultWriterLockException('close'));
            }
            if (WritableStreamCloseQueuedOrInFlight(stream)) {
                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));
            }
            return WritableStreamDefaultWriterClose(this);
        }
        /**
         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.
         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from
         * now on; otherwise, the writer will appear closed.
         *
         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the
         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).
         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents
         * other producers from writing in an interleaved manner.
         */
        releaseLock() {
            if (!IsWritableStreamDefaultWriter(this)) {
                throw defaultWriterBrandCheckException('releaseLock');
            }
            const stream = this._ownerWritableStream;
            if (stream === undefined) {
                return;
            }
            WritableStreamDefaultWriterRelease(this);
        }
        write(chunk = undefined) {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('write'));
            }
            if (this._ownerWritableStream === undefined) {
                return promiseRejectedWith(defaultWriterLockException('write to'));
            }
            return WritableStreamDefaultWriterWrite(this, chunk);
        }
    }
    Object.defineProperties(WritableStreamDefaultWriter.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        releaseLock: { enumerable: true },
        write: { enumerable: true },
        closed: { enumerable: true },
        desiredSize: { enumerable: true },
        ready: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {
            value: 'WritableStreamDefaultWriter',
            configurable: true
        });
    }
    // Abstract operations for the WritableStreamDefaultWriter.
    function IsWritableStreamDefaultWriter(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {
            return false;
        }
        return x instanceof WritableStreamDefaultWriter;
    }
    // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.
    function WritableStreamDefaultWriterAbort(writer, reason) {
        const stream = writer._ownerWritableStream;
        return WritableStreamAbort(stream, reason);
    }
    function WritableStreamDefaultWriterClose(writer) {
        const stream = writer._ownerWritableStream;
        return WritableStreamClose(stream);
    }
    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {
            return promiseResolvedWith(undefined);
        }
        if (state === 'errored') {
            return promiseRejectedWith(stream._storedError);
        }
        return WritableStreamDefaultWriterClose(writer);
    }
    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
        if (writer._closedPromiseState === 'pending') {
            defaultWriterClosedPromiseReject(writer, error);
        }
        else {
            defaultWriterClosedPromiseResetToRejected(writer, error);
        }
    }
    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
        if (writer._readyPromiseState === 'pending') {
            defaultWriterReadyPromiseReject(writer, error);
        }
        else {
            defaultWriterReadyPromiseResetToRejected(writer, error);
        }
    }
    function WritableStreamDefaultWriterGetDesiredSize(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (state === 'errored' || state === 'erroring') {
            return null;
        }
        if (state === 'closed') {
            return 0;
        }
        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
    }
    function WritableStreamDefaultWriterRelease(writer) {
        const stream = writer._ownerWritableStream;
        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);
        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
        // The state transitions to "errored" before the sink abort() method runs, but the writer.closed promise is not
        // rejected until afterwards. This means that simply testing state will not work.
        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
        stream._writer = undefined;
        writer._ownerWritableStream = undefined;
    }
    function WritableStreamDefaultWriterWrite(writer, chunk) {
        const stream = writer._ownerWritableStream;
        const controller = stream._writableStreamController;
        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
        if (stream !== writer._ownerWritableStream) {
            return promiseRejectedWith(defaultWriterLockException('write to'));
        }
        const state = stream._state;
        if (state === 'errored') {
            return promiseRejectedWith(stream._storedError);
        }
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {
            return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));
        }
        if (state === 'erroring') {
            return promiseRejectedWith(stream._storedError);
        }
        const promise = WritableStreamAddWriteRequest(stream);
        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
        return promise;
    }
    const closeSentinel = {};
    /**
     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.
     *
     * @public
     */
    class WritableStreamDefaultController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.
         *
         * @deprecated
         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.
         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.
         */
        get abortReason() {
            if (!IsWritableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$2('abortReason');
            }
            return this._abortReason;
        }
        /**
         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.
         */
        get signal() {
            if (!IsWritableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$2('signal');
            }
            if (this._abortController === undefined) {
                // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.
                // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,
                // so instead we only implement support for `signal` if we find a global `AbortController` constructor.
                throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');
            }
            return this._abortController.signal;
        }
        /**
         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.
         *
         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying
         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the
         * normal lifecycle of interactions with the underlying sink.
         */
        error(e = undefined) {
            if (!IsWritableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$2('error');
            }
            const state = this._controlledWritableStream._state;
            if (state !== 'writable') {
                // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so
                // just treat it as a no-op.
                return;
            }
            WritableStreamDefaultControllerError(this, e);
        }
        /** @internal */
        [AbortSteps](reason) {
            const result = this._abortAlgorithm(reason);
            WritableStreamDefaultControllerClearAlgorithms(this);
            return result;
        }
        /** @internal */
        [ErrorSteps]() {
            ResetQueue(this);
        }
    }
    Object.defineProperties(WritableStreamDefaultController.prototype, {
        abortReason: { enumerable: true },
        signal: { enumerable: true },
        error: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: 'WritableStreamDefaultController',
            configurable: true
        });
    }
    // Abstract operations implementing interface required by the WritableStream.
    function IsWritableStreamDefaultController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {
            return false;
        }
        return x instanceof WritableStreamDefaultController;
    }
    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledWritableStream = stream;
        stream._writableStreamController = controller;
        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.
        controller._queue = undefined;
        controller._queueTotalSize = undefined;
        ResetQueue(controller);
        controller._abortReason = undefined;
        controller._abortController = createAbortController();
        controller._started = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._writeAlgorithm = writeAlgorithm;
        controller._closeAlgorithm = closeAlgorithm;
        controller._abortAlgorithm = abortAlgorithm;
        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
        WritableStreamUpdateBackpressure(stream, backpressure);
        const startResult = startAlgorithm();
        const startPromise = promiseResolvedWith(startResult);
        uponPromise(startPromise, () => {
            controller._started = true;
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
        }, r => {
            controller._started = true;
            WritableStreamDealWithRejection(stream, r);
        });
    }
    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(WritableStreamDefaultController.prototype);
        let startAlgorithm = () => undefined;
        let writeAlgorithm = () => promiseResolvedWith(undefined);
        let closeAlgorithm = () => promiseResolvedWith(undefined);
        let abortAlgorithm = () => promiseResolvedWith(undefined);
        if (underlyingSink.start !== undefined) {
            startAlgorithm = () => underlyingSink.start(controller);
        }
        if (underlyingSink.write !== undefined) {
            writeAlgorithm = chunk => underlyingSink.write(chunk, controller);
        }
        if (underlyingSink.close !== undefined) {
            closeAlgorithm = () => underlyingSink.close();
        }
        if (underlyingSink.abort !== undefined) {
            abortAlgorithm = reason => underlyingSink.abort(reason);
        }
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
    }
    // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.
    function WritableStreamDefaultControllerClearAlgorithms(controller) {
        controller._writeAlgorithm = undefined;
        controller._closeAlgorithm = undefined;
        controller._abortAlgorithm = undefined;
        controller._strategySizeAlgorithm = undefined;
    }
    function WritableStreamDefaultControllerClose(controller) {
        EnqueueValueWithSize(controller, closeSentinel, 0);
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
    }
    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
        try {
            return controller._strategySizeAlgorithm(chunk);
        }
        catch (chunkSizeE) {
            WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
            return 1;
        }
    }
    function WritableStreamDefaultControllerGetDesiredSize(controller) {
        return controller._strategyHWM - controller._queueTotalSize;
    }
    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
        try {
            EnqueueValueWithSize(controller, chunk, chunkSize);
        }
        catch (enqueueE) {
            WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
            return;
        }
        const stream = controller._controlledWritableStream;
        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {
            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
            WritableStreamUpdateBackpressure(stream, backpressure);
        }
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
    }
    // Abstract operations for the WritableStreamDefaultController.
    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
        const stream = controller._controlledWritableStream;
        if (!controller._started) {
            return;
        }
        if (stream._inFlightWriteRequest !== undefined) {
            return;
        }
        const state = stream._state;
        if (state === 'erroring') {
            WritableStreamFinishErroring(stream);
            return;
        }
        if (controller._queue.length === 0) {
            return;
        }
        const value = PeekQueueValue(controller);
        if (value === closeSentinel) {
            WritableStreamDefaultControllerProcessClose(controller);
        }
        else {
            WritableStreamDefaultControllerProcessWrite(controller, value);
        }
    }
    function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
        if (controller._controlledWritableStream._state === 'writable') {
            WritableStreamDefaultControllerError(controller, error);
        }
    }
    function WritableStreamDefaultControllerProcessClose(controller) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkCloseRequestInFlight(stream);
        DequeueValue(controller);
        const sinkClosePromise = controller._closeAlgorithm();
        WritableStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(sinkClosePromise, () => {
            WritableStreamFinishInFlightClose(stream);
        }, reason => {
            WritableStreamFinishInFlightCloseWithError(stream, reason);
        });
    }
    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkFirstWriteRequestInFlight(stream);
        const sinkWritePromise = controller._writeAlgorithm(chunk);
        uponPromise(sinkWritePromise, () => {
            WritableStreamFinishInFlightWrite(stream);
            const state = stream._state;
            DequeueValue(controller);
            if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {
                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                WritableStreamUpdateBackpressure(stream, backpressure);
            }
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
        }, reason => {
            if (stream._state === 'writable') {
                WritableStreamDefaultControllerClearAlgorithms(controller);
            }
            WritableStreamFinishInFlightWriteWithError(stream, reason);
        });
    }
    function WritableStreamDefaultControllerGetBackpressure(controller) {
        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
        return desiredSize <= 0;
    }
    // A client of WritableStreamDefaultController may use these functions directly to bypass state check.
    function WritableStreamDefaultControllerError(controller, error) {
        const stream = controller._controlledWritableStream;
        WritableStreamDefaultControllerClearAlgorithms(controller);
        WritableStreamStartErroring(stream, error);
    }
    // Helper functions for the WritableStream.
    function streamBrandCheckException$2(name) {
        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);
    }
    // Helper functions for the WritableStreamDefaultController.
    function defaultControllerBrandCheckException$2(name) {
        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);
    }
    // Helper functions for the WritableStreamDefaultWriter.
    function defaultWriterBrandCheckException(name) {
        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);
    }
    function defaultWriterLockException(name) {
        return new TypeError('Cannot ' + name + ' a stream using a released writer');
    }
    function defaultWriterClosedPromiseInitialize(writer) {
        writer._closedPromise = newPromise((resolve, reject) => {
            writer._closedPromise_resolve = resolve;
            writer._closedPromise_reject = reject;
            writer._closedPromiseState = 'pending';
        });
    }
    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseReject(writer, reason);
    }
    function defaultWriterClosedPromiseInitializeAsResolved(writer) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseResolve(writer);
    }
    function defaultWriterClosedPromiseReject(writer, reason) {
        if (writer._closedPromise_reject === undefined) {
            return;
        }
        setPromiseIsHandledToTrue(writer._closedPromise);
        writer._closedPromise_reject(reason);
        writer._closedPromise_resolve = undefined;
        writer._closedPromise_reject = undefined;
        writer._closedPromiseState = 'rejected';
    }
    function defaultWriterClosedPromiseResetToRejected(writer, reason) {
        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
    }
    function defaultWriterClosedPromiseResolve(writer) {
        if (writer._closedPromise_resolve === undefined) {
            return;
        }
        writer._closedPromise_resolve(undefined);
        writer._closedPromise_resolve = undefined;
        writer._closedPromise_reject = undefined;
        writer._closedPromiseState = 'resolved';
    }
    function defaultWriterReadyPromiseInitialize(writer) {
        writer._readyPromise = newPromise((resolve, reject) => {
            writer._readyPromise_resolve = resolve;
            writer._readyPromise_reject = reject;
        });
        writer._readyPromiseState = 'pending';
    }
    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseReject(writer, reason);
    }
    function defaultWriterReadyPromiseInitializeAsResolved(writer) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseResolve(writer);
    }
    function defaultWriterReadyPromiseReject(writer, reason) {
        if (writer._readyPromise_reject === undefined) {
            return;
        }
        setPromiseIsHandledToTrue(writer._readyPromise);
        writer._readyPromise_reject(reason);
        writer._readyPromise_resolve = undefined;
        writer._readyPromise_reject = undefined;
        writer._readyPromiseState = 'rejected';
    }
    function defaultWriterReadyPromiseReset(writer) {
        defaultWriterReadyPromiseInitialize(writer);
    }
    function defaultWriterReadyPromiseResetToRejected(writer, reason) {
        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
    }
    function defaultWriterReadyPromiseResolve(writer) {
        if (writer._readyPromise_resolve === undefined) {
            return;
        }
        writer._readyPromise_resolve(undefined);
        writer._readyPromise_resolve = undefined;
        writer._readyPromise_reject = undefined;
        writer._readyPromiseState = 'fulfilled';
    }

    /// <reference lib="dom" />
    const NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined;

    /// <reference types="node" />
    function isDOMExceptionConstructor(ctor) {
        if (!(typeof ctor === 'function' || typeof ctor === 'object')) {
            return false;
        }
        try {
            new ctor();
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    function createDOMExceptionPolyfill() {
        // eslint-disable-next-line no-shadow
        const ctor = function DOMException(message, name) {
            this.message = message || '';
            this.name = name || 'Error';
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor);
            }
        };
        ctor.prototype = Object.create(Error.prototype);
        Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });
        return ctor;
    }
    // eslint-disable-next-line no-redeclare
    const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();

    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
        const reader = AcquireReadableStreamDefaultReader(source);
        const writer = AcquireWritableStreamDefaultWriter(dest);
        source._disturbed = true;
        let shuttingDown = false;
        // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.
        let currentWrite = promiseResolvedWith(undefined);
        return newPromise((resolve, reject) => {
            let abortAlgorithm;
            if (signal !== undefined) {
                abortAlgorithm = () => {
                    const error = new DOMException$1('Aborted', 'AbortError');
                    const actions = [];
                    if (!preventAbort) {
                        actions.push(() => {
                            if (dest._state === 'writable') {
                                return WritableStreamAbort(dest, error);
                            }
                            return promiseResolvedWith(undefined);
                        });
                    }
                    if (!preventCancel) {
                        actions.push(() => {
                            if (source._state === 'readable') {
                                return ReadableStreamCancel(source, error);
                            }
                            return promiseResolvedWith(undefined);
                        });
                    }
                    shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);
                };
                if (signal.aborted) {
                    abortAlgorithm();
                    return;
                }
                signal.addEventListener('abort', abortAlgorithm);
            }
            // Using reader and writer, read all chunks from this and write them to dest
            // - Backpressure must be enforced
            // - Shutdown must stop all activity
            function pipeLoop() {
                return newPromise((resolveLoop, rejectLoop) => {
                    function next(done) {
                        if (done) {
                            resolveLoop();
                        }
                        else {
                            // Use `PerformPromiseThen` instead of `uponPromise` to avoid
                            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers
                            PerformPromiseThen(pipeStep(), next, rejectLoop);
                        }
                    }
                    next(false);
                });
            }
            function pipeStep() {
                if (shuttingDown) {
                    return promiseResolvedWith(true);
                }
                return PerformPromiseThen(writer._readyPromise, () => {
                    return newPromise((resolveRead, rejectRead) => {
                        ReadableStreamDefaultReaderRead(reader, {
                            _chunkSteps: chunk => {
                                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);
                                resolveRead(false);
                            },
                            _closeSteps: () => resolveRead(true),
                            _errorSteps: rejectRead
                        });
                    });
                });
            }
            // Errors must be propagated forward
            isOrBecomesErrored(source, reader._closedPromise, storedError => {
                if (!preventAbort) {
                    shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);
                }
                else {
                    shutdown(true, storedError);
                }
            });
            // Errors must be propagated backward
            isOrBecomesErrored(dest, writer._closedPromise, storedError => {
                if (!preventCancel) {
                    shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);
                }
                else {
                    shutdown(true, storedError);
                }
            });
            // Closing must be propagated forward
            isOrBecomesClosed(source, reader._closedPromise, () => {
                if (!preventClose) {
                    shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));
                }
                else {
                    shutdown();
                }
            });
            // Closing must be propagated backward
            if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {
                const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');
                if (!preventCancel) {
                    shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);
                }
                else {
                    shutdown(true, destClosed);
                }
            }
            setPromiseIsHandledToTrue(pipeLoop());
            function waitForWritesToFinish() {
                // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait
                // for that too.
                const oldCurrentWrite = currentWrite;
                return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);
            }
            function isOrBecomesErrored(stream, promise, action) {
                if (stream._state === 'errored') {
                    action(stream._storedError);
                }
                else {
                    uponRejection(promise, action);
                }
            }
            function isOrBecomesClosed(stream, promise, action) {
                if (stream._state === 'closed') {
                    action();
                }
                else {
                    uponFulfillment(promise, action);
                }
            }
            function shutdownWithAction(action, originalIsError, originalError) {
                if (shuttingDown) {
                    return;
                }
                shuttingDown = true;
                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {
                    uponFulfillment(waitForWritesToFinish(), doTheRest);
                }
                else {
                    doTheRest();
                }
                function doTheRest() {
                    uponPromise(action(), () => finalize(originalIsError, originalError), newError => finalize(true, newError));
                }
            }
            function shutdown(isError, error) {
                if (shuttingDown) {
                    return;
                }
                shuttingDown = true;
                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {
                    uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));
                }
                else {
                    finalize(isError, error);
                }
            }
            function finalize(isError, error) {
                WritableStreamDefaultWriterRelease(writer);
                ReadableStreamReaderGenericRelease(reader);
                if (signal !== undefined) {
                    signal.removeEventListener('abort', abortAlgorithm);
                }
                if (isError) {
                    reject(error);
                }
                else {
                    resolve(undefined);
                }
            }
        });
    }

    /**
     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.
     *
     * @public
     */
    class ReadableStreamDefaultController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('desiredSize');
            }
            return ReadableStreamDefaultControllerGetDesiredSize(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('close');
            }
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                throw new TypeError('The stream is not in a state that permits close');
            }
            ReadableStreamDefaultControllerClose(this);
        }
        enqueue(chunk = undefined) {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('enqueue');
            }
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                throw new TypeError('The stream is not in a state that permits enqueue');
            }
            return ReadableStreamDefaultControllerEnqueue(this, chunk);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e = undefined) {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('error');
            }
            ReadableStreamDefaultControllerError(this, e);
        }
        /** @internal */
        [CancelSteps](reason) {
            ResetQueue(this);
            const result = this._cancelAlgorithm(reason);
            ReadableStreamDefaultControllerClearAlgorithms(this);
            return result;
        }
        /** @internal */
        [PullSteps](readRequest) {
            const stream = this._controlledReadableStream;
            if (this._queue.length > 0) {
                const chunk = DequeueValue(this);
                if (this._closeRequested && this._queue.length === 0) {
                    ReadableStreamDefaultControllerClearAlgorithms(this);
                    ReadableStreamClose(stream);
                }
                else {
                    ReadableStreamDefaultControllerCallPullIfNeeded(this);
                }
                readRequest._chunkSteps(chunk);
            }
            else {
                ReadableStreamAddReadRequest(stream, readRequest);
                ReadableStreamDefaultControllerCallPullIfNeeded(this);
            }
        }
    }
    Object.defineProperties(ReadableStreamDefaultController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamDefaultController',
            configurable: true
        });
    }
    // Abstract operations for the ReadableStreamDefaultController.
    function IsReadableStreamDefaultController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {
            return false;
        }
        return x instanceof ReadableStreamDefaultController;
    }
    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
        if (!shouldPull) {
            return;
        }
        if (controller._pulling) {
            controller._pullAgain = true;
            return;
        }
        controller._pulling = true;
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
            controller._pulling = false;
            if (controller._pullAgain) {
                controller._pullAgain = false;
                ReadableStreamDefaultControllerCallPullIfNeeded(controller);
            }
        }, e => {
            ReadableStreamDefaultControllerError(controller, e);
        });
    }
    function ReadableStreamDefaultControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableStream;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return false;
        }
        if (!controller._started) {
            return false;
        }
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            return true;
        }
        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
            return true;
        }
        return false;
    }
    function ReadableStreamDefaultControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = undefined;
        controller._cancelAlgorithm = undefined;
        controller._strategySizeAlgorithm = undefined;
    }
    // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.
    function ReadableStreamDefaultControllerClose(controller) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return;
        }
        const stream = controller._controlledReadableStream;
        controller._closeRequested = true;
        if (controller._queue.length === 0) {
            ReadableStreamDefaultControllerClearAlgorithms(controller);
            ReadableStreamClose(stream);
        }
    }
    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return;
        }
        const stream = controller._controlledReadableStream;
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            ReadableStreamFulfillReadRequest(stream, chunk, false);
        }
        else {
            let chunkSize;
            try {
                chunkSize = controller._strategySizeAlgorithm(chunk);
            }
            catch (chunkSizeE) {
                ReadableStreamDefaultControllerError(controller, chunkSizeE);
                throw chunkSizeE;
            }
            try {
                EnqueueValueWithSize(controller, chunk, chunkSize);
            }
            catch (enqueueE) {
                ReadableStreamDefaultControllerError(controller, enqueueE);
                throw enqueueE;
            }
        }
        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
    }
    function ReadableStreamDefaultControllerError(controller, e) {
        const stream = controller._controlledReadableStream;
        if (stream._state !== 'readable') {
            return;
        }
        ResetQueue(controller);
        ReadableStreamDefaultControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e);
    }
    function ReadableStreamDefaultControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableStream._state;
        if (state === 'errored') {
            return null;
        }
        if (state === 'closed') {
            return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
    }
    // This is used in the implementation of TransformStream.
    function ReadableStreamDefaultControllerHasBackpressure(controller) {
        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
            return false;
        }
        return true;
    }
    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
        const state = controller._controlledReadableStream._state;
        if (!controller._closeRequested && state === 'readable') {
            return true;
        }
        return false;
    }
    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledReadableStream = stream;
        controller._queue = undefined;
        controller._queueTotalSize = undefined;
        ResetQueue(controller);
        controller._started = false;
        controller._closeRequested = false;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
            controller._started = true;
            ReadableStreamDefaultControllerCallPullIfNeeded(controller);
        }, r => {
            ReadableStreamDefaultControllerError(controller, r);
        });
    }
    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(ReadableStreamDefaultController.prototype);
        let startAlgorithm = () => undefined;
        let pullAlgorithm = () => promiseResolvedWith(undefined);
        let cancelAlgorithm = () => promiseResolvedWith(undefined);
        if (underlyingSource.start !== undefined) {
            startAlgorithm = () => underlyingSource.start(controller);
        }
        if (underlyingSource.pull !== undefined) {
            pullAlgorithm = () => underlyingSource.pull(controller);
        }
        if (underlyingSource.cancel !== undefined) {
            cancelAlgorithm = reason => underlyingSource.cancel(reason);
        }
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
    }
    // Helper functions for the ReadableStreamDefaultController.
    function defaultControllerBrandCheckException$1(name) {
        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);
    }

    function ReadableStreamTee(stream, cloneForBranch2) {
        if (IsReadableByteStreamController(stream._readableStreamController)) {
            return ReadableByteStreamTee(stream);
        }
        return ReadableStreamDefaultTee(stream);
    }
    function ReadableStreamDefaultTee(stream, cloneForBranch2) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgain = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise(resolve => {
            resolveCancelPromise = resolve;
        });
        function pullAlgorithm() {
            if (reading) {
                readAgain = true;
                return promiseResolvedWith(undefined);
            }
            reading = true;
            const readRequest = {
                _chunkSteps: chunk => {
                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
                    // successful synchronously-available reads get ahead of asynchronously-available errors.
                    queueMicrotask(() => {
                        readAgain = false;
                        const chunk1 = chunk;
                        const chunk2 = chunk;
                        // There is no way to access the cloning code right now in the reference implementation.
                        // If we add one then we'll need an implementation for serializable objects.
                        // if (!canceled2 && cloneForBranch2) {
                        //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));
                        // }
                        if (!canceled1) {
                            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
                        }
                        if (!canceled2) {
                            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
                        }
                        reading = false;
                        if (readAgain) {
                            pullAlgorithm();
                        }
                    });
                },
                _closeSteps: () => {
                    reading = false;
                    if (!canceled1) {
                        ReadableStreamDefaultControllerClose(branch1._readableStreamController);
                    }
                    if (!canceled2) {
                        ReadableStreamDefaultControllerClose(branch2._readableStreamController);
                    }
                    if (!canceled1 || !canceled2) {
                        resolveCancelPromise(undefined);
                    }
                },
                _errorSteps: () => {
                    reading = false;
                }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
            return promiseResolvedWith(undefined);
        }
        function cancel1Algorithm(reason) {
            canceled1 = true;
            reason1 = reason;
            if (canceled2) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function cancel2Algorithm(reason) {
            canceled2 = true;
            reason2 = reason;
            if (canceled1) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function startAlgorithm() {
            // do nothing
        }
        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
        uponRejection(reader._closedPromise, (r) => {
            ReadableStreamDefaultControllerError(branch1._readableStreamController, r);
            ReadableStreamDefaultControllerError(branch2._readableStreamController, r);
            if (!canceled1 || !canceled2) {
                resolveCancelPromise(undefined);
            }
        });
        return [branch1, branch2];
    }
    function ReadableByteStreamTee(stream) {
        let reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgainForBranch1 = false;
        let readAgainForBranch2 = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise(resolve => {
            resolveCancelPromise = resolve;
        });
        function forwardReaderError(thisReader) {
            uponRejection(thisReader._closedPromise, r => {
                if (thisReader !== reader) {
                    return;
                }
                ReadableByteStreamControllerError(branch1._readableStreamController, r);
                ReadableByteStreamControllerError(branch2._readableStreamController, r);
                if (!canceled1 || !canceled2) {
                    resolveCancelPromise(undefined);
                }
            });
        }
        function pullWithDefaultReader() {
            if (IsReadableStreamBYOBReader(reader)) {
                ReadableStreamReaderGenericRelease(reader);
                reader = AcquireReadableStreamDefaultReader(stream);
                forwardReaderError(reader);
            }
            const readRequest = {
                _chunkSteps: chunk => {
                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
                    // successful synchronously-available reads get ahead of asynchronously-available errors.
                    queueMicrotask(() => {
                        readAgainForBranch1 = false;
                        readAgainForBranch2 = false;
                        const chunk1 = chunk;
                        let chunk2 = chunk;
                        if (!canceled1 && !canceled2) {
                            try {
                                chunk2 = CloneAsUint8Array(chunk);
                            }
                            catch (cloneE) {
                                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                                return;
                            }
                        }
                        if (!canceled1) {
                            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
                        }
                        if (!canceled2) {
                            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
                        }
                        reading = false;
                        if (readAgainForBranch1) {
                            pull1Algorithm();
                        }
                        else if (readAgainForBranch2) {
                            pull2Algorithm();
                        }
                    });
                },
                _closeSteps: () => {
                    reading = false;
                    if (!canceled1) {
                        ReadableByteStreamControllerClose(branch1._readableStreamController);
                    }
                    if (!canceled2) {
                        ReadableByteStreamControllerClose(branch2._readableStreamController);
                    }
                    if (branch1._readableStreamController._pendingPullIntos.length > 0) {
                        ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
                    }
                    if (branch2._readableStreamController._pendingPullIntos.length > 0) {
                        ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
                    }
                    if (!canceled1 || !canceled2) {
                        resolveCancelPromise(undefined);
                    }
                },
                _errorSteps: () => {
                    reading = false;
                }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
        }
        function pullWithBYOBReader(view, forBranch2) {
            if (IsReadableStreamDefaultReader(reader)) {
                ReadableStreamReaderGenericRelease(reader);
                reader = AcquireReadableStreamBYOBReader(stream);
                forwardReaderError(reader);
            }
            const byobBranch = forBranch2 ? branch2 : branch1;
            const otherBranch = forBranch2 ? branch1 : branch2;
            const readIntoRequest = {
                _chunkSteps: chunk => {
                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
                    // successful synchronously-available reads get ahead of asynchronously-available errors.
                    queueMicrotask(() => {
                        readAgainForBranch1 = false;
                        readAgainForBranch2 = false;
                        const byobCanceled = forBranch2 ? canceled2 : canceled1;
                        const otherCanceled = forBranch2 ? canceled1 : canceled2;
                        if (!otherCanceled) {
                            let clonedChunk;
                            try {
                                clonedChunk = CloneAsUint8Array(chunk);
                            }
                            catch (cloneE) {
                                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                                return;
                            }
                            if (!byobCanceled) {
                                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                            }
                            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
                        }
                        else if (!byobCanceled) {
                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                        }
                        reading = false;
                        if (readAgainForBranch1) {
                            pull1Algorithm();
                        }
                        else if (readAgainForBranch2) {
                            pull2Algorithm();
                        }
                    });
                },
                _closeSteps: chunk => {
                    reading = false;
                    const byobCanceled = forBranch2 ? canceled2 : canceled1;
                    const otherCanceled = forBranch2 ? canceled1 : canceled2;
                    if (!byobCanceled) {
                        ReadableByteStreamControllerClose(byobBranch._readableStreamController);
                    }
                    if (!otherCanceled) {
                        ReadableByteStreamControllerClose(otherBranch._readableStreamController);
                    }
                    if (chunk !== undefined) {
                        if (!byobCanceled) {
                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                        }
                        if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
                        }
                    }
                    if (!byobCanceled || !otherCanceled) {
                        resolveCancelPromise(undefined);
                    }
                },
                _errorSteps: () => {
                    reading = false;
                }
            };
            ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);
        }
        function pull1Algorithm() {
            if (reading) {
                readAgainForBranch1 = true;
                return promiseResolvedWith(undefined);
            }
            reading = true;
            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
            if (byobRequest === null) {
                pullWithDefaultReader();
            }
            else {
                pullWithBYOBReader(byobRequest._view, false);
            }
            return promiseResolvedWith(undefined);
        }
        function pull2Algorithm() {
            if (reading) {
                readAgainForBranch2 = true;
                return promiseResolvedWith(undefined);
            }
            reading = true;
            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
            if (byobRequest === null) {
                pullWithDefaultReader();
            }
            else {
                pullWithBYOBReader(byobRequest._view, true);
            }
            return promiseResolvedWith(undefined);
        }
        function cancel1Algorithm(reason) {
            canceled1 = true;
            reason1 = reason;
            if (canceled2) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function cancel2Algorithm(reason) {
            canceled2 = true;
            reason2 = reason;
            if (canceled1) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function startAlgorithm() {
            return;
        }
        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
        forwardReaderError(reader);
        return [branch1, branch2];
    }

    function convertUnderlyingDefaultOrByteSource(source, context) {
        assertDictionary(source, context);
        const original = source;
        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;
        const cancel = original === null || original === void 0 ? void 0 : original.cancel;
        const pull = original === null || original === void 0 ? void 0 : original.pull;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        return {
            autoAllocateChunkSize: autoAllocateChunkSize === undefined ?
                undefined :
                convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),
            cancel: cancel === undefined ?
                undefined :
                convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),
            pull: pull === undefined ?
                undefined :
                convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),
            start: start === undefined ?
                undefined :
                convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),
            type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)
        };
    }
    function convertUnderlyingSourceCancelCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
    }
    function convertUnderlyingSourcePullCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
    }
    function convertUnderlyingSourceStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertReadableStreamType(type, context) {
        type = `${type}`;
        if (type !== 'bytes') {
            throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);
        }
        return type;
    }

    function convertReaderOptions(options, context) {
        assertDictionary(options, context);
        const mode = options === null || options === void 0 ? void 0 : options.mode;
        return {
            mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)
        };
    }
    function convertReadableStreamReaderMode(mode, context) {
        mode = `${mode}`;
        if (mode !== 'byob') {
            throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);
        }
        return mode;
    }

    function convertIteratorOptions(options, context) {
        assertDictionary(options, context);
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        return { preventCancel: Boolean(preventCancel) };
    }

    function convertPipeOptions(options, context) {
        assertDictionary(options, context);
        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;
        const signal = options === null || options === void 0 ? void 0 : options.signal;
        if (signal !== undefined) {
            assertAbortSignal(signal, `${context} has member 'signal' that`);
        }
        return {
            preventAbort: Boolean(preventAbort),
            preventCancel: Boolean(preventCancel),
            preventClose: Boolean(preventClose),
            signal
        };
    }
    function assertAbortSignal(signal, context) {
        if (!isAbortSignal(signal)) {
            throw new TypeError(`${context} is not an AbortSignal.`);
        }
    }

    function convertReadableWritablePair(pair, context) {
        assertDictionary(pair, context);
        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;
        assertRequiredField(readable, 'readable', 'ReadableWritablePair');
        assertReadableStream(readable, `${context} has member 'readable' that`);
        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;
        assertRequiredField(writable, 'writable', 'ReadableWritablePair');
        assertWritableStream(writable, `${context} has member 'writable' that`);
        return { readable, writable };
    }

    /**
     * A readable stream represents a source of data, from which you can read.
     *
     * @public
     */
    class ReadableStream {
        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
            if (rawUnderlyingSource === undefined) {
                rawUnderlyingSource = null;
            }
            else {
                assertObject(rawUnderlyingSource, 'First parameter');
            }
            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');
            const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');
            InitializeReadableStream(this);
            if (underlyingSource.type === 'bytes') {
                if (strategy.size !== undefined) {
                    throw new RangeError('The strategy for a byte stream cannot have a size function');
                }
                const highWaterMark = ExtractHighWaterMark(strategy, 0);
                SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
            }
            else {
                const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
                const highWaterMark = ExtractHighWaterMark(strategy, 1);
                SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
            }
        }
        /**
         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.
         */
        get locked() {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('locked');
            }
            return IsReadableStreamLocked(this);
        }
        /**
         * Cancels the stream, signaling a loss of interest in the stream by a consumer.
         *
         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}
         * method, which might or might not use it.
         */
        cancel(reason = undefined) {
            if (!IsReadableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$1('cancel'));
            }
            if (IsReadableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));
            }
            return ReadableStreamCancel(this, reason);
        }
        getReader(rawOptions = undefined) {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('getReader');
            }
            const options = convertReaderOptions(rawOptions, 'First parameter');
            if (options.mode === undefined) {
                return AcquireReadableStreamDefaultReader(this);
            }
            return AcquireReadableStreamBYOBReader(this);
        }
        pipeThrough(rawTransform, rawOptions = {}) {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('pipeThrough');
            }
            assertRequiredArgument(rawTransform, 1, 'pipeThrough');
            const transform = convertReadableWritablePair(rawTransform, 'First parameter');
            const options = convertPipeOptions(rawOptions, 'Second parameter');
            if (IsReadableStreamLocked(this)) {
                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');
            }
            if (IsWritableStreamLocked(transform.writable)) {
                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');
            }
            const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
            setPromiseIsHandledToTrue(promise);
            return transform.readable;
        }
        pipeTo(destination, rawOptions = {}) {
            if (!IsReadableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));
            }
            if (destination === undefined) {
                return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);
            }
            if (!IsWritableStream(destination)) {
                return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));
            }
            let options;
            try {
                options = convertPipeOptions(rawOptions, 'Second parameter');
            }
            catch (e) {
                return promiseRejectedWith(e);
            }
            if (IsReadableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));
            }
            if (IsWritableStreamLocked(destination)) {
                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));
            }
            return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
        }
        /**
         * Tees this readable stream, returning a two-element array containing the two resulting branches as
         * new {@link ReadableStream} instances.
         *
         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.
         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be
         * propagated to the stream's underlying source.
         *
         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,
         * this could allow interference between the two branches.
         */
        tee() {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('tee');
            }
            const branches = ReadableStreamTee(this);
            return CreateArrayFromList(branches);
        }
        values(rawOptions = undefined) {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('values');
            }
            const options = convertIteratorOptions(rawOptions, 'First parameter');
            return AcquireReadableStreamAsyncIterator(this, options.preventCancel);
        }
    }
    Object.defineProperties(ReadableStream.prototype, {
        cancel: { enumerable: true },
        getReader: { enumerable: true },
        pipeThrough: { enumerable: true },
        pipeTo: { enumerable: true },
        tee: { enumerable: true },
        values: { enumerable: true },
        locked: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStream',
            configurable: true
        });
    }
    if (typeof SymbolPolyfill.asyncIterator === 'symbol') {
        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {
            value: ReadableStream.prototype.values,
            writable: true,
            configurable: true
        });
    }
    // Abstract operations for the ReadableStream.
    // Throws if and only if startAlgorithm throws.
    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(ReadableStream.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableStreamDefaultController.prototype);
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
    }
    // Throws if and only if startAlgorithm throws.
    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
        const stream = Object.create(ReadableStream.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableByteStreamController.prototype);
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);
        return stream;
    }
    function InitializeReadableStream(stream) {
        stream._state = 'readable';
        stream._reader = undefined;
        stream._storedError = undefined;
        stream._disturbed = false;
    }
    function IsReadableStream(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {
            return false;
        }
        return x instanceof ReadableStream;
    }
    function IsReadableStreamLocked(stream) {
        if (stream._reader === undefined) {
            return false;
        }
        return true;
    }
    // ReadableStream API exposed for controllers.
    function ReadableStreamCancel(stream, reason) {
        stream._disturbed = true;
        if (stream._state === 'closed') {
            return promiseResolvedWith(undefined);
        }
        if (stream._state === 'errored') {
            return promiseRejectedWith(stream._storedError);
        }
        ReadableStreamClose(stream);
        const reader = stream._reader;
        if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {
            reader._readIntoRequests.forEach(readIntoRequest => {
                readIntoRequest._closeSteps(undefined);
            });
            reader._readIntoRequests = new SimpleQueue();
        }
        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
        return transformPromiseWith(sourceCancelPromise, noop);
    }
    function ReadableStreamClose(stream) {
        stream._state = 'closed';
        const reader = stream._reader;
        if (reader === undefined) {
            return;
        }
        defaultReaderClosedPromiseResolve(reader);
        if (IsReadableStreamDefaultReader(reader)) {
            reader._readRequests.forEach(readRequest => {
                readRequest._closeSteps();
            });
            reader._readRequests = new SimpleQueue();
        }
    }
    function ReadableStreamError(stream, e) {
        stream._state = 'errored';
        stream._storedError = e;
        const reader = stream._reader;
        if (reader === undefined) {
            return;
        }
        defaultReaderClosedPromiseReject(reader, e);
        if (IsReadableStreamDefaultReader(reader)) {
            reader._readRequests.forEach(readRequest => {
                readRequest._errorSteps(e);
            });
            reader._readRequests = new SimpleQueue();
        }
        else {
            reader._readIntoRequests.forEach(readIntoRequest => {
                readIntoRequest._errorSteps(e);
            });
            reader._readIntoRequests = new SimpleQueue();
        }
    }
    // Helper functions for the ReadableStream.
    function streamBrandCheckException$1(name) {
        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);
    }

    function convertQueuingStrategyInit(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');
        return {
            highWaterMark: convertUnrestrictedDouble(highWaterMark)
        };
    }

    // The size function must not have a prototype property nor be a constructor
    const byteLengthSizeFunction = (chunk) => {
        return chunk.byteLength;
    };
    Object.defineProperty(byteLengthSizeFunction, 'name', {
        value: 'size',
        configurable: true
    });
    /**
     * A queuing strategy that counts the number of bytes in each chunk.
     *
     * @public
     */
    class ByteLengthQueuingStrategy {
        constructor(options) {
            assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');
            options = convertQueuingStrategyInit(options, 'First parameter');
            this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
            if (!IsByteLengthQueuingStrategy(this)) {
                throw byteLengthBrandCheckException('highWaterMark');
            }
            return this._byteLengthQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by returning the value of its `byteLength` property.
         */
        get size() {
            if (!IsByteLengthQueuingStrategy(this)) {
                throw byteLengthBrandCheckException('size');
            }
            return byteLengthSizeFunction;
        }
    }
    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
            value: 'ByteLengthQueuingStrategy',
            configurable: true
        });
    }
    // Helper functions for the ByteLengthQueuingStrategy.
    function byteLengthBrandCheckException(name) {
        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);
    }
    function IsByteLengthQueuingStrategy(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {
            return false;
        }
        return x instanceof ByteLengthQueuingStrategy;
    }

    // The size function must not have a prototype property nor be a constructor
    const countSizeFunction = () => {
        return 1;
    };
    Object.defineProperty(countSizeFunction, 'name', {
        value: 'size',
        configurable: true
    });
    /**
     * A queuing strategy that counts the number of chunks.
     *
     * @public
     */
    class CountQueuingStrategy {
        constructor(options) {
            assertRequiredArgument(options, 1, 'CountQueuingStrategy');
            options = convertQueuingStrategyInit(options, 'First parameter');
            this._countQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
            if (!IsCountQueuingStrategy(this)) {
                throw countBrandCheckException('highWaterMark');
            }
            return this._countQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by always returning 1.
         * This ensures that the total queue size is a count of the number of chunks in the queue.
         */
        get size() {
            if (!IsCountQueuingStrategy(this)) {
                throw countBrandCheckException('size');
            }
            return countSizeFunction;
        }
    }
    Object.defineProperties(CountQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
            value: 'CountQueuingStrategy',
            configurable: true
        });
    }
    // Helper functions for the CountQueuingStrategy.
    function countBrandCheckException(name) {
        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);
    }
    function IsCountQueuingStrategy(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {
            return false;
        }
        return x instanceof CountQueuingStrategy;
    }

    function convertTransformer(original, context) {
        assertDictionary(original, context);
        const flush = original === null || original === void 0 ? void 0 : original.flush;
        const readableType = original === null || original === void 0 ? void 0 : original.readableType;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const transform = original === null || original === void 0 ? void 0 : original.transform;
        const writableType = original === null || original === void 0 ? void 0 : original.writableType;
        return {
            flush: flush === undefined ?
                undefined :
                convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),
            readableType,
            start: start === undefined ?
                undefined :
                convertTransformerStartCallback(start, original, `${context} has member 'start' that`),
            transform: transform === undefined ?
                undefined :
                convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),
            writableType
        };
    }
    function convertTransformerFlushCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
    }
    function convertTransformerStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertTransformerTransformCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
    }

    // Class TransformStream
    /**
     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},
     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.
     * In a manner specific to the transform stream in question, writes to the writable side result in new data being
     * made available for reading from the readable side.
     *
     * @public
     */
    class TransformStream {
        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {
            if (rawTransformer === undefined) {
                rawTransformer = null;
            }
            const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');
            const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');
            const transformer = convertTransformer(rawTransformer, 'First parameter');
            if (transformer.readableType !== undefined) {
                throw new RangeError('Invalid readableType specified');
            }
            if (transformer.writableType !== undefined) {
                throw new RangeError('Invalid writableType specified');
            }
            const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
            const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
            const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
            const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
            let startPromise_resolve;
            const startPromise = newPromise(resolve => {
                startPromise_resolve = resolve;
            });
            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
            SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
            if (transformer.start !== undefined) {
                startPromise_resolve(transformer.start(this._transformStreamController));
            }
            else {
                startPromise_resolve(undefined);
            }
        }
        /**
         * The readable side of the transform stream.
         */
        get readable() {
            if (!IsTransformStream(this)) {
                throw streamBrandCheckException('readable');
            }
            return this._readable;
        }
        /**
         * The writable side of the transform stream.
         */
        get writable() {
            if (!IsTransformStream(this)) {
                throw streamBrandCheckException('writable');
            }
            return this._writable;
        }
    }
    Object.defineProperties(TransformStream.prototype, {
        readable: { enumerable: true },
        writable: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {
            value: 'TransformStream',
            configurable: true
        });
    }
    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
        function startAlgorithm() {
            return startPromise;
        }
        function writeAlgorithm(chunk) {
            return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
        }
        function abortAlgorithm(reason) {
            return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
        }
        function closeAlgorithm() {
            return TransformStreamDefaultSinkCloseAlgorithm(stream);
        }
        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
        function pullAlgorithm() {
            return TransformStreamDefaultSourcePullAlgorithm(stream);
        }
        function cancelAlgorithm(reason) {
            TransformStreamErrorWritableAndUnblockWrite(stream, reason);
            return promiseResolvedWith(undefined);
        }
        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
        // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.
        stream._backpressure = undefined;
        stream._backpressureChangePromise = undefined;
        stream._backpressureChangePromise_resolve = undefined;
        TransformStreamSetBackpressure(stream, true);
        stream._transformStreamController = undefined;
    }
    function IsTransformStream(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {
            return false;
        }
        return x instanceof TransformStream;
    }
    // This is a no-op if both sides are already errored.
    function TransformStreamError(stream, e) {
        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);
        TransformStreamErrorWritableAndUnblockWrite(stream, e);
    }
    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {
        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);
        if (stream._backpressure) {
            // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()
            // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time
            // _backpressure is set.
            TransformStreamSetBackpressure(stream, false);
        }
    }
    function TransformStreamSetBackpressure(stream, backpressure) {
        // Passes also when called during construction.
        if (stream._backpressureChangePromise !== undefined) {
            stream._backpressureChangePromise_resolve();
        }
        stream._backpressureChangePromise = newPromise(resolve => {
            stream._backpressureChangePromise_resolve = resolve;
        });
        stream._backpressure = backpressure;
    }
    // Class TransformStreamDefaultController
    /**
     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.
     *
     * @public
     */
    class TransformStreamDefaultController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.
         */
        get desiredSize() {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('desiredSize');
            }
            const readableController = this._controlledTransformStream._readable._readableStreamController;
            return ReadableStreamDefaultControllerGetDesiredSize(readableController);
        }
        enqueue(chunk = undefined) {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('enqueue');
            }
            TransformStreamDefaultControllerEnqueue(this, chunk);
        }
        /**
         * Errors both the readable side and the writable side of the controlled transform stream, making all future
         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.
         */
        error(reason = undefined) {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('error');
            }
            TransformStreamDefaultControllerError(this, reason);
        }
        /**
         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the
         * transformer only needs to consume a portion of the chunks written to the writable side.
         */
        terminate() {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('terminate');
            }
            TransformStreamDefaultControllerTerminate(this);
        }
    }
    Object.defineProperties(TransformStreamDefaultController.prototype, {
        enqueue: { enumerable: true },
        error: { enumerable: true },
        terminate: { enumerable: true },
        desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: 'TransformStreamDefaultController',
            configurable: true
        });
    }
    // Transform Stream Default Controller Abstract Operations
    function IsTransformStreamDefaultController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {
            return false;
        }
        return x instanceof TransformStreamDefaultController;
    }
    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {
        controller._controlledTransformStream = stream;
        stream._transformStreamController = controller;
        controller._transformAlgorithm = transformAlgorithm;
        controller._flushAlgorithm = flushAlgorithm;
    }
    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
        const controller = Object.create(TransformStreamDefaultController.prototype);
        let transformAlgorithm = (chunk) => {
            try {
                TransformStreamDefaultControllerEnqueue(controller, chunk);
                return promiseResolvedWith(undefined);
            }
            catch (transformResultE) {
                return promiseRejectedWith(transformResultE);
            }
        };
        let flushAlgorithm = () => promiseResolvedWith(undefined);
        if (transformer.transform !== undefined) {
            transformAlgorithm = chunk => transformer.transform(chunk, controller);
        }
        if (transformer.flush !== undefined) {
            flushAlgorithm = () => transformer.flush(controller);
        }
        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);
    }
    function TransformStreamDefaultControllerClearAlgorithms(controller) {
        controller._transformAlgorithm = undefined;
        controller._flushAlgorithm = undefined;
    }
    function TransformStreamDefaultControllerEnqueue(controller, chunk) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
            throw new TypeError('Readable side is not in a state that permits enqueue');
        }
        // We throttle transform invocations based on the backpressure of the ReadableStream, but we still
        // accept TransformStreamDefaultControllerEnqueue() calls.
        try {
            ReadableStreamDefaultControllerEnqueue(readableController, chunk);
        }
        catch (e) {
            // This happens when readableStrategy.size() throws.
            TransformStreamErrorWritableAndUnblockWrite(stream, e);
            throw stream._readable._storedError;
        }
        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
        if (backpressure !== stream._backpressure) {
            TransformStreamSetBackpressure(stream, true);
        }
    }
    function TransformStreamDefaultControllerError(controller, e) {
        TransformStreamError(controller._controlledTransformStream, e);
    }
    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
        const transformPromise = controller._transformAlgorithm(chunk);
        return transformPromiseWith(transformPromise, undefined, r => {
            TransformStreamError(controller._controlledTransformStream, r);
            throw r;
        });
    }
    function TransformStreamDefaultControllerTerminate(controller) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        ReadableStreamDefaultControllerClose(readableController);
        const error = new TypeError('TransformStream terminated');
        TransformStreamErrorWritableAndUnblockWrite(stream, error);
    }
    // TransformStreamDefaultSink Algorithms
    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
        const controller = stream._transformStreamController;
        if (stream._backpressure) {
            const backpressureChangePromise = stream._backpressureChangePromise;
            return transformPromiseWith(backpressureChangePromise, () => {
                const writable = stream._writable;
                const state = writable._state;
                if (state === 'erroring') {
                    throw writable._storedError;
                }
                return TransformStreamDefaultControllerPerformTransform(controller, chunk);
            });
        }
        return TransformStreamDefaultControllerPerformTransform(controller, chunk);
    }
    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
        // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already
        // errored.
        TransformStreamError(stream, reason);
        return promiseResolvedWith(undefined);
    }
    function TransformStreamDefaultSinkCloseAlgorithm(stream) {
        // stream._readable cannot change after construction, so caching it across a call to user code is safe.
        const readable = stream._readable;
        const controller = stream._transformStreamController;
        const flushPromise = controller._flushAlgorithm();
        TransformStreamDefaultControllerClearAlgorithms(controller);
        // Return a promise that is fulfilled with undefined on success.
        return transformPromiseWith(flushPromise, () => {
            if (readable._state === 'errored') {
                throw readable._storedError;
            }
            ReadableStreamDefaultControllerClose(readable._readableStreamController);
        }, r => {
            TransformStreamError(stream, r);
            throw readable._storedError;
        });
    }
    // TransformStreamDefaultSource Algorithms
    function TransformStreamDefaultSourcePullAlgorithm(stream) {
        // Invariant. Enforced by the promises returned by start() and pull().
        TransformStreamSetBackpressure(stream, false);
        // Prevent the next pull() call until there is backpressure.
        return stream._backpressureChangePromise;
    }
    // Helper functions for the TransformStreamDefaultController.
    function defaultControllerBrandCheckException(name) {
        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);
    }
    // Helper functions for the TransformStream.
    function streamBrandCheckException(name) {
        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);
    }

    var ponyfill_es2018 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ByteLengthQueuingStrategy: ByteLengthQueuingStrategy,
        CountQueuingStrategy: CountQueuingStrategy,
        ReadableByteStreamController: ReadableByteStreamController,
        ReadableStream: ReadableStream,
        ReadableStreamBYOBReader: ReadableStreamBYOBReader,
        ReadableStreamBYOBRequest: ReadableStreamBYOBRequest,
        ReadableStreamDefaultController: ReadableStreamDefaultController,
        ReadableStreamDefaultReader: ReadableStreamDefaultReader,
        TransformStream: TransformStream,
        TransformStreamDefaultController: TransformStreamDefaultController,
        WritableStream: WritableStream,
        WritableStreamDefaultController: WritableStreamDefaultController,
        WritableStreamDefaultWriter: WritableStreamDefaultWriter
    });

    var require$$2 = /*@__PURE__*/getAugmentedNamespace(ponyfill_es2018);

    var umd = {exports: {}};

    (function (module, exports) {
    	(function (global, factory) {
    		module.exports = factory() ;
    	}(commonjsGlobal, (function () {
    		/*! MIT License © Sindre Sorhus */

    		const globals = {};

    		const getGlobal = property => {
    			/* istanbul ignore next */
    			if (typeof self !== 'undefined' && self && property in self) {
    				return self;
    			}

    			/* istanbul ignore next */
    			if (typeof window !== 'undefined' && window && property in window) {
    				return window;
    			}

    			if (typeof commonjsGlobal !== 'undefined' && commonjsGlobal && property in commonjsGlobal) {
    				return commonjsGlobal;
    			}

    			/* istanbul ignore next */
    			if (typeof globalThis !== 'undefined' && globalThis) {
    				return globalThis;
    			}
    		};

    		const globalProperties = [
    			'Headers',
    			'Request',
    			'Response',
    			'ReadableStream',
    			'fetch',
    			'AbortController',
    			'FormData'
    		];

    		for (const property of globalProperties) {
    			Object.defineProperty(globals, property, {
    				get() {
    					const globalObject = getGlobal(property);
    					const value = globalObject && globalObject[property];
    					return typeof value === 'function' ? value.bind(globalObject) : value;
    				}
    			});
    		}

    		const isObject = value => value !== null && typeof value === 'object';
    		const supportsAbortController = typeof globals.AbortController === 'function';
    		const supportsStreams = typeof globals.ReadableStream === 'function';
    		const supportsFormData = typeof globals.FormData === 'function';

    		const mergeHeaders = (source1, source2) => {
    			const result = new globals.Headers(source1 || {});
    			const isHeadersInstance = source2 instanceof globals.Headers;
    			const source = new globals.Headers(source2 || {});

    			for (const [key, value] of source) {
    				if ((isHeadersInstance && value === 'undefined') || value === undefined) {
    					result.delete(key);
    				} else {
    					result.set(key, value);
    				}
    			}

    			return result;
    		};

    		const deepMerge = (...sources) => {
    			let returnValue = {};
    			let headers = {};

    			for (const source of sources) {
    				if (Array.isArray(source)) {
    					if (!(Array.isArray(returnValue))) {
    						returnValue = [];
    					}

    					returnValue = [...returnValue, ...source];
    				} else if (isObject(source)) {
    					for (let [key, value] of Object.entries(source)) {
    						if (isObject(value) && (key in returnValue)) {
    							value = deepMerge(returnValue[key], value);
    						}

    						returnValue = {...returnValue, [key]: value};
    					}

    					if (isObject(source.headers)) {
    						headers = mergeHeaders(headers, source.headers);
    					}
    				}

    				returnValue.headers = headers;
    			}

    			return returnValue;
    		};

    		const requestMethods = [
    			'get',
    			'post',
    			'put',
    			'patch',
    			'head',
    			'delete'
    		];

    		const responseTypes = {
    			json: 'application/json',
    			text: 'text/*',
    			formData: 'multipart/form-data',
    			arrayBuffer: '*/*',
    			blob: '*/*'
    		};

    		const retryMethods = [
    			'get',
    			'put',
    			'head',
    			'delete',
    			'options',
    			'trace'
    		];

    		const retryStatusCodes = [
    			408,
    			413,
    			429,
    			500,
    			502,
    			503,
    			504
    		];

    		const retryAfterStatusCodes = [
    			413,
    			429,
    			503
    		];

    		const stop = Symbol('stop');

    		class HTTPError extends Error {
    			constructor(response) {
    				// Set the message to the status text, such as Unauthorized,
    				// with some fallbacks. This message should never be undefined.
    				super(
    					response.statusText ||
    					String(
    						(response.status === 0 || response.status) ?
    							response.status : 'Unknown response error'
    					)
    				);
    				this.name = 'HTTPError';
    				this.response = response;
    			}
    		}

    		class TimeoutError extends Error {
    			constructor(request) {
    				super('Request timed out');
    				this.name = 'TimeoutError';
    				this.request = request;
    			}
    		}

    		const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

    		// `Promise.race()` workaround (#91)
    		const timeout = (request, abortController, options) =>
    			new Promise((resolve, reject) => {
    				const timeoutID = setTimeout(() => {
    					if (abortController) {
    						abortController.abort();
    					}

    					reject(new TimeoutError(request));
    				}, options.timeout);

    				/* eslint-disable promise/prefer-await-to-then */
    				options.fetch(request)
    					.then(resolve)
    					.catch(reject)
    					.then(() => {
    						clearTimeout(timeoutID);
    					});
    				/* eslint-enable promise/prefer-await-to-then */
    			});

    		const normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;

    		const defaultRetryOptions = {
    			limit: 2,
    			methods: retryMethods,
    			statusCodes: retryStatusCodes,
    			afterStatusCodes: retryAfterStatusCodes
    		};

    		const normalizeRetryOptions = (retry = {}) => {
    			if (typeof retry === 'number') {
    				return {
    					...defaultRetryOptions,
    					limit: retry
    				};
    			}

    			if (retry.methods && !Array.isArray(retry.methods)) {
    				throw new Error('retry.methods must be an array');
    			}

    			if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {
    				throw new Error('retry.statusCodes must be an array');
    			}

    			return {
    				...defaultRetryOptions,
    				...retry,
    				afterStatusCodes: retryAfterStatusCodes
    			};
    		};

    		// The maximum value of a 32bit int (see issue #117)
    		const maxSafeTimeout = 2147483647;

    		class Ky {
    			constructor(input, options = {}) {
    				this._retryCount = 0;
    				this._input = input;
    				this._options = {
    					// TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208
    					credentials: this._input.credentials || 'same-origin',
    					...options,
    					headers: mergeHeaders(this._input.headers, options.headers),
    					hooks: deepMerge({
    						beforeRequest: [],
    						beforeRetry: [],
    						afterResponse: []
    					}, options.hooks),
    					method: normalizeRequestMethod(options.method || this._input.method),
    					prefixUrl: String(options.prefixUrl || ''),
    					retry: normalizeRetryOptions(options.retry),
    					throwHttpErrors: options.throwHttpErrors !== false,
    					timeout: typeof options.timeout === 'undefined' ? 10000 : options.timeout,
    					fetch: options.fetch || globals.fetch
    				};

    				if (typeof this._input !== 'string' && !(this._input instanceof URL || this._input instanceof globals.Request)) {
    					throw new TypeError('`input` must be a string, URL, or Request');
    				}

    				if (this._options.prefixUrl && typeof this._input === 'string') {
    					if (this._input.startsWith('/')) {
    						throw new Error('`input` must not begin with a slash when using `prefixUrl`');
    					}

    					if (!this._options.prefixUrl.endsWith('/')) {
    						this._options.prefixUrl += '/';
    					}

    					this._input = this._options.prefixUrl + this._input;
    				}

    				if (supportsAbortController) {
    					this.abortController = new globals.AbortController();
    					if (this._options.signal) {
    						this._options.signal.addEventListener('abort', () => {
    							this.abortController.abort();
    						});
    					}

    					this._options.signal = this.abortController.signal;
    				}

    				this.request = new globals.Request(this._input, this._options);

    				if (this._options.searchParams) {
    					const searchParams = '?' + new URLSearchParams(this._options.searchParams).toString();
    					const url = this.request.url.replace(/(?:\?.*?)?(?=#|$)/, searchParams);

    					// To provide correct form boundary, Content-Type header should be deleted each time when new Request instantiated from another one
    					if (((supportsFormData && this._options.body instanceof globals.FormData) || this._options.body instanceof URLSearchParams) && !(this._options.headers && this._options.headers['content-type'])) {
    						this.request.headers.delete('content-type');
    					}

    					this.request = new globals.Request(new globals.Request(url, this.request), this._options);
    				}

    				if (this._options.json !== undefined) {
    					this._options.body = JSON.stringify(this._options.json);
    					this.request.headers.set('content-type', 'application/json');
    					this.request = new globals.Request(this.request, {body: this._options.body});
    				}

    				const fn = async () => {
    					if (this._options.timeout > maxSafeTimeout) {
    						throw new RangeError(`The \`timeout\` option cannot be greater than ${maxSafeTimeout}`);
    					}

    					await delay(1);
    					let response = await this._fetch();

    					for (const hook of this._options.hooks.afterResponse) {
    						// eslint-disable-next-line no-await-in-loop
    						const modifiedResponse = await hook(
    							this.request,
    							this._options,
    							this._decorateResponse(response.clone())
    						);

    						if (modifiedResponse instanceof globals.Response) {
    							response = modifiedResponse;
    						}
    					}

    					this._decorateResponse(response);

    					if (!response.ok && this._options.throwHttpErrors) {
    						throw new HTTPError(response);
    					}

    					// If `onDownloadProgress` is passed, it uses the stream API internally
    					/* istanbul ignore next */
    					if (this._options.onDownloadProgress) {
    						if (typeof this._options.onDownloadProgress !== 'function') {
    							throw new TypeError('The `onDownloadProgress` option must be a function');
    						}

    						if (!supportsStreams) {
    							throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');
    						}

    						return this._stream(response.clone(), this._options.onDownloadProgress);
    					}

    					return response;
    				};

    				const isRetriableMethod = this._options.retry.methods.includes(this.request.method.toLowerCase());
    				const result = isRetriableMethod ? this._retry(fn) : fn();

    				for (const [type, mimeType] of Object.entries(responseTypes)) {
    					result[type] = async () => {
    						this.request.headers.set('accept', this.request.headers.get('accept') || mimeType);

    						const response = (await result).clone();

    						if (type === 'json') {
    							if (response.status === 204) {
    								return '';
    							}

    							if (options.parseJson) {
    								return options.parseJson(await response.text());
    							}
    						}

    						return response[type]();
    					};
    				}

    				return result;
    			}

    			_calculateRetryDelay(error) {
    				this._retryCount++;

    				if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {
    					if (error instanceof HTTPError) {
    						if (!this._options.retry.statusCodes.includes(error.response.status)) {
    							return 0;
    						}

    						const retryAfter = error.response.headers.get('Retry-After');
    						if (retryAfter && this._options.retry.afterStatusCodes.includes(error.response.status)) {
    							let after = Number(retryAfter);
    							if (Number.isNaN(after)) {
    								after = Date.parse(retryAfter) - Date.now();
    							} else {
    								after *= 1000;
    							}

    							if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {
    								return 0;
    							}

    							return after;
    						}

    						if (error.response.status === 413) {
    							return 0;
    						}
    					}

    					const BACKOFF_FACTOR = 0.3;
    					return BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;
    				}

    				return 0;
    			}

    			_decorateResponse(response) {
    				if (this._options.parseJson) {
    					response.json = async () => {
    						return this._options.parseJson(await response.text());
    					};
    				}

    				return response;
    			}

    			async _retry(fn) {
    				try {
    					return await fn();
    				} catch (error) {
    					const ms = Math.min(this._calculateRetryDelay(error), maxSafeTimeout);
    					if (ms !== 0 && this._retryCount > 0) {
    						await delay(ms);

    						for (const hook of this._options.hooks.beforeRetry) {
    							// eslint-disable-next-line no-await-in-loop
    							const hookResult = await hook({
    								request: this.request,
    								options: this._options,
    								error,
    								retryCount: this._retryCount
    							});

    							// If `stop` is returned from the hook, the retry process is stopped
    							if (hookResult === stop) {
    								return;
    							}
    						}

    						return this._retry(fn);
    					}

    					if (this._options.throwHttpErrors) {
    						throw error;
    					}
    				}
    			}

    			async _fetch() {
    				for (const hook of this._options.hooks.beforeRequest) {
    					// eslint-disable-next-line no-await-in-loop
    					const result = await hook(this.request, this._options);

    					if (result instanceof Request) {
    						this.request = result;
    						break;
    					}

    					if (result instanceof Response) {
    						return result;
    					}
    				}

    				if (this._options.timeout === false) {
    					return this._options.fetch(this.request.clone());
    				}

    				return timeout(this.request.clone(), this.abortController, this._options);
    			}

    			/* istanbul ignore next */
    			_stream(response, onDownloadProgress) {
    				const totalBytes = Number(response.headers.get('content-length')) || 0;
    				let transferredBytes = 0;

    				return new globals.Response(
    					new globals.ReadableStream({
    						start(controller) {
    							const reader = response.body.getReader();

    							if (onDownloadProgress) {
    								onDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());
    							}

    							async function read() {
    								const {done, value} = await reader.read();
    								if (done) {
    									controller.close();
    									return;
    								}

    								if (onDownloadProgress) {
    									transferredBytes += value.byteLength;
    									const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;
    									onDownloadProgress({percent, transferredBytes, totalBytes}, value);
    								}

    								controller.enqueue(value);
    								read();
    							}

    							read();
    						}
    					})
    				);
    			}
    		}

    		const validateAndMerge = (...sources) => {
    			for (const source of sources) {
    				if ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {
    					throw new TypeError('The `options` argument must be an object');
    				}
    			}

    			return deepMerge({}, ...sources);
    		};

    		const createInstance = defaults => {
    			const ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));

    			for (const method of requestMethods) {
    				ky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {method}));
    			}

    			ky.HTTPError = HTTPError;
    			ky.TimeoutError = TimeoutError;
    			ky.create = newDefaults => createInstance(validateAndMerge(newDefaults));
    			ky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));
    			ky.stop = stop;

    			return ky;
    		};

    		var index = createInstance();

    		return index;

    	})));
    } (umd));

    const fetch = dist.exports;
    const AbortController$1 = require$$1;

    const TEN_MEGABYTES = 1000 * 1000 * 10;

    if (!commonjsGlobal.fetch) {
    	commonjsGlobal.fetch = (url, options) => fetch(url, {highWaterMark: TEN_MEGABYTES, ...options});
    }

    if (!commonjsGlobal.Headers) {
    	commonjsGlobal.Headers = fetch.Headers;
    }

    if (!commonjsGlobal.Request) {
    	commonjsGlobal.Request = fetch.Request;
    }

    if (!commonjsGlobal.Response) {
    	commonjsGlobal.Response = fetch.Response;
    }

    if (!commonjsGlobal.AbortController) {
    	commonjsGlobal.AbortController = AbortController$1;
    }

    if (!commonjsGlobal.ReadableStream) {
    	try {
    		commonjsGlobal.ReadableStream = require$$2;
    	} catch (_) {}
    }

    var kyUniversal = umd.exports;

    function sleep(ms) {
        return new Promise(function (resolve) {
            setTimeout(resolve, ms);
        });
    }
    var httplib = {
        request: function (opts, cb, errcb, maxtries, timeout, sleepms) {
            if (maxtries === void 0) { maxtries = 5; }
            if (sleepms === void 0) { sleepms = 100; }
            return __awaiter(void 0, void 0, void 0, function () {
                var port, protocol, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            port = opts.port || 80;
                            protocol = "http://";
                            return [4 /*yield*/, kyUniversal(protocol + opts.host + ":" + port + opts.path, __assign(__assign(__assign(__assign(__assign({ headers: opts.headers, method: opts.method, body: opts.json }, (opts.port ? { port: opts.port } : {})), (opts.cert ? { cert: opts.cert } : {})), (opts.rejectUnauthorized ? { rejectUnauthorized: opts.rejectUnauthorized } : {})), (opts.ca ? { ca: opts.ca } : {})), { hooks: {
                                        beforeRetry: [
                                            //@ts-ignore
                                            function (_a) {
                                                _a.request; _a.options; var error = _a.error, retryCount = _a.retryCount;
                                                return __awaiter(void 0, void 0, void 0, function () {
                                                    return __generator(this, function (_b) {
                                                        if (retryCount > maxtries) {
                                                            errcb(error);
                                                            return [2 /*return*/, kyUniversal.stop];
                                                        }
                                                        return [2 /*return*/];
                                                    });
                                                });
                                            }
                                        ],
                                        afterResponse: [
                                            function (_request, _options, response) {
                                                cb(response.text());
                                            },
                                            function (request, options, response) { return __awaiter(void 0, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            if (!(response.status !== 200)) return [3 /*break*/, 2];
                                                            return [4 /*yield*/, sleep(sleepms)];
                                                        case 1:
                                                            _a.sent();
                                                            return [2 /*return*/, kyUniversal(request)];
                                                        case 2: return [2 /*return*/];
                                                    }
                                                });
                                            }); }
                                        ]
                                    } }))];
                        case 1:
                            ret = _a.sent();
                            return [2 /*return*/, ret];
                    }
                });
            });
        }
    };
    var httpslib = {
        request: function (opts, cb, errcb, maxtries, timeout, sleepms) {
            if (maxtries === void 0) { maxtries = 5; }
            if (sleepms === void 0) { sleepms = 100; }
            return __awaiter(void 0, void 0, void 0, function () {
                var port, protocol, ret;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            port = opts.port || 443;
                            protocol = "https://";
                            return [4 /*yield*/, kyUniversal(protocol + opts.host + ":" + port + opts.path, __assign(__assign(__assign(__assign(__assign({ headers: opts.headers, method: opts.method, 
                                    //json: opts.json,
                                    body: opts.json }, (opts.port ? { port: opts.port } : {})), (opts.cert ? { cert: opts.cert } : {})), (opts.rejectUnauthorized ? { rejectUnauthorized: opts.rejectUnauthorized } : {})), (opts.ca ? { ca: opts.ca } : {})), { hooks: {
                                        beforeRetry: [
                                            //@ts-ignore
                                            function (_a) {
                                                _a.request; _a.options; var error = _a.error, retryCount = _a.retryCount;
                                                return __awaiter(void 0, void 0, void 0, function () {
                                                    return __generator(this, function (_b) {
                                                        if (retryCount > maxtries) {
                                                            errcb(error);
                                                            return [2 /*return*/, kyUniversal.stop];
                                                        }
                                                        return [2 /*return*/];
                                                    });
                                                });
                                            }
                                        ],
                                        afterResponse: [
                                            function (_request, _options, response) {
                                                cb(response.text());
                                            },
                                            function (request, options, response) { return __awaiter(void 0, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            if (!(response.status !== 200)) return [3 /*break*/, 2];
                                                            return [4 /*yield*/, sleep(sleepms)];
                                                        case 1:
                                                            _a.sent();
                                                            return [2 /*return*/, kyUniversal(request)];
                                                        case 2: return [2 /*return*/];
                                                    }
                                                });
                                            }); }
                                        ]
                                    } }))];
                        case 1:
                            ret = _a.sent();
                            return [2 /*return*/, ret];
                    }
                });
            });
        }
    };
    var validateUrl = function (options) {
        if (options.url.startsWith("http://")) {
            return {
                protocol: "http",
                lib: httplib,
                options: {
                    host: options.url.substr(7).split(":")[0],
                    port: options.url.substr(7).split(":")[1],
                },
            };
        }
        else if (options.url.startsWith("https://")) {
            return {
                protocol: "https",
                lib: httpslib,
                options: {
                    host: options.url.substr(8).split(":")[0],
                    port: options.url.substr(8).split(":")[1],
                    rejectUnauthorized: options.rejectUnauthorized,
                    cert: options.cert,
                    ca: options.ca,
                },
            };
        }
        else {
            throw new Error("URL most be http://ip_or_domain:port or https://ip_or_domain:port");
        }
    };
    var deploy = function (urlOrOptions, options, timeout) {
        if (timeout === void 0) { timeout = undefined; }
        return __awaiter(void 0, void 0, Promise, function () {
            var urlValidated, uv, pd;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof urlOrOptions === "string") {
                            urlValidated = validateUrl({ url: urlOrOptions });
                        }
                        else {
                            urlValidated = validateUrl(urlOrOptions);
                        }
                        uv = urlValidated;
                        pd = undefined;
                        if (!(typeof timeout === "number")) return [3 /*break*/, 2];
                        return [4 /*yield*/, prepareDeploy(urlOrOptions, {
                                deployer: options.deployer,
                                timestamp: options.data.timestamp,
                                nameQty: 1,
                            })];
                    case 1:
                        pd = _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, new Promise(function (resolve, reject) {
                            uv.lib.request(__assign(__assign(__assign(__assign({ headers: {
                                    "Content-Type": "application/json",
                                }, json: options, method: "POST", path: "/api/deploy", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.port } : {})), (uv.options.rejectUnauthorized
                                ? { port: uv.options.rejectUnauthorized }
                                : {})), (uv.options.ca ? { port: uv.options.ca } : {})), function (data) {
                                /*
                                let data = "";
                                res.on("data", (chunk) => {
                                  data += chunk;
                                  res.on("end", () => {
                                */
                                if (typeof timeout === "number") {
                                    var s_1 = new Date().getTime();
                                    var ongoning_1 = false;
                                    var interval_1 = setInterval(function () { return __awaiter(void 0, void 0, void 0, function () {
                                        var dan;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    if (ongoning_1) {
                                                        return [2 /*return*/];
                                                    }
                                                    ongoning_1 = true;
                                                    if (new Date().getTime() - timeout > s_1) {
                                                        clearInterval(interval_1);
                                                        throw new Error("TIMEOUT");
                                                    }
                                                    return [4 /*yield*/, dataAtName(urlOrOptions, {
                                                            name: {
                                                                UnforgPrivate: { data: JSON.parse(pd).names[0] },
                                                            },
                                                            depth: 3,
                                                        })];
                                                case 1:
                                                    dan = _a.sent();
                                                    if (dan &&
                                                        JSON.parse(dan) &&
                                                        JSON.parse(dan).exprs &&
                                                        JSON.parse(dan).exprs.length) {
                                                        resolve(dan);
                                                        clearInterval(interval_1);
                                                    }
                                                    ongoning_1 = false;
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); }, 4000);
                                }
                                else {
                                    resolve(data);
                                }
                                /*   });
                                 });*/
                            }, function (err) {
                                reject(err);
                            });
                            //req.write(JSON.stringify(options));
                            //req.end();
                            //req.on("error", (e) => {
                            //  reject(e);
                            //});
                        })];
                }
            });
        });
    };
    var easyDeploy = function (urlOrOptions, term, privateKey, phloPrice, phloLimit, timeout) {
        if (timeout === void 0) { timeout = undefined; }
        return __awaiter(void 0, void 0, Promise, function () {
            var urlValidated, uv, publicKey, vab, d, options, pd;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof urlOrOptions === "string") {
                            urlValidated = validateUrl({ url: urlOrOptions });
                        }
                        else {
                            urlValidated = validateUrl(urlOrOptions);
                        }
                        uv = urlValidated;
                        publicKey = publicKeyFromPrivateKey(privateKey);
                        return [4 /*yield*/, validAfterBlockNumber(urlOrOptions)];
                    case 1:
                        vab = _a.sent();
                        d = new Date().valueOf();
                        options = getDeployOptions("secp256k1", d, term, privateKey, publicKey, phloPrice, phloLimit, vab);
                        pd = undefined;
                        if (!(typeof timeout === "number")) return [3 /*break*/, 3];
                        return [4 /*yield*/, prepareDeploy(urlOrOptions, {
                                deployer: publicKey,
                                timestamp: d,
                                nameQty: 1,
                            })];
                    case 2:
                        pd = _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, new Promise(function (resolve, reject) {
                            uv.lib.request(__assign(__assign(__assign(__assign({ headers: {
                                    "Content-Type": "application/json",
                                }, json: options, method: "POST", path: "/api/deploy", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.port } : {})), (uv.options.rejectUnauthorized
                                ? { port: uv.options.rejectUnauthorized }
                                : {})), (uv.options.ca ? { port: uv.options.ca } : {})), function (data) {
                                /*
                                let data = "";
                                res.on("data", (chunk) => {
                                  data += chunk;
                                  res.on("end", () => {
                                    */
                                if (typeof timeout === "number") {
                                    var s_2 = new Date().getTime();
                                    var ongoning_2 = false;
                                    var interval_2 = setInterval(function () { return __awaiter(void 0, void 0, void 0, function () {
                                        var dan;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    if (ongoning_2) {
                                                        return [2 /*return*/];
                                                    }
                                                    ongoning_2 = true;
                                                    if (new Date().getTime() - timeout > s_2) {
                                                        clearInterval(interval_2);
                                                        throw new Error("TIMEOUT");
                                                    }
                                                    return [4 /*yield*/, dataAtName(urlOrOptions, {
                                                            name: {
                                                                UnforgPrivate: { data: JSON.parse(pd).names[0] },
                                                            },
                                                            depth: 3,
                                                        })];
                                                case 1:
                                                    dan = _a.sent();
                                                    if (dan &&
                                                        JSON.parse(dan) &&
                                                        JSON.parse(dan).exprs &&
                                                        JSON.parse(dan).exprs.length) {
                                                        resolve(dan);
                                                        clearInterval(interval_2);
                                                    }
                                                    ongoning_2 = false;
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); }, 4000);
                                }
                                else {
                                    resolve(data);
                                }
                                /*   });
                                 });  */
                            }, function (err) {
                                reject(err);
                            });
                            //req.write(JSON.stringify(options));
                            //req.end();
                            //req.on("error", (e) => {
                            //  reject(e);
                            //});
                        })];
                }
            });
        });
    };
    // ==============
    // Valid after block number
    // ==============
    var validAfterBlockNumber = function (urlOrOptions) { return __awaiter(void 0, void 0, Promise, function () {
        var validAfterBlockNumberResponse, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _b = (_a = JSON).parse;
                    return [4 /*yield*/, blocks(urlOrOptions, {
                            position: 1,
                        })];
                case 1:
                    validAfterBlockNumberResponse = _b.apply(_a, [_c.sent()])[0].blockNumber;
                    return [2 /*return*/, validAfterBlockNumberResponse];
            }
        });
    }); };
    var exploreDeploy = function (urlOrOptions, options) {
        var urlValidated;
        if (typeof urlOrOptions === "string") {
            urlValidated = validateUrl({ url: urlOrOptions });
        }
        else {
            urlValidated = validateUrl(urlOrOptions);
        }
        var uv = urlValidated;
        return new Promise(function (resolve, reject) {
            uv.lib.request(__assign(__assign(__assign(__assign({ headers: {
                    "Content-Type": "application/json",
                }, json: options.term, method: "POST", path: "/api/explore-deploy", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.cert } : {})), (uv.options.rejectUnauthorized
                ? { rejectUnauthorized: uv.options.rejectUnauthorized }
                : {})), (uv.options.ca ? { ca: uv.options.ca } : {})), function (data) {
                /*
                let data = "";
                res.on("data", (chunk) => {
                  data += chunk;
                  res.on("end", () => {
                    */
                resolve(data);
                /*     });
                   });*/
            }, function (err) {
                reject(err);
            });
            //req.write(options.term);
            //req.end();
            //req.on("error", (e) => {
            //  reject(e);
            //});
        });
    };
    var blocks = function (urlOrOptions, options) {
        return new Promise(function (resolve, reject) {
            var urlValidated;
            if (typeof urlOrOptions === "string") {
                urlValidated = validateUrl({ url: urlOrOptions });
            }
            else {
                urlValidated = validateUrl(urlOrOptions);
            }
            var uv = urlValidated;
            urlValidated.lib.request(__assign(__assign(__assign(__assign({ headers: {
                    "Content-Type": "application/json",
                }, json: options, method: "GET", path: "/api/blocks/" + options.position, host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.cert } : {})), (uv.options.rejectUnauthorized
                ? { rejectUnauthorized: uv.options.rejectUnauthorized }
                : {})), (uv.options.ca ? { ca: uv.options.ca } : {})), function (data) {
                /*
                let data = "";
                res.on("data", (chunk) => {
                  data += chunk;
                  res.on("end", () => {
                    */
                resolve(data);
                /*     });
                   });  */
            }, function (err) {
                reject(err);
            });
            //req.end();
            //req.on("error", (e) => {
            //  reject(e);
            //});
        });
    };
    var prepareDeploy = function (urlOrOptions, options) {
        var urlValidated;
        if (typeof urlOrOptions === "string") {
            urlValidated = validateUrl({ url: urlOrOptions });
        }
        else {
            urlValidated = validateUrl(urlOrOptions);
        }
        var uv = urlValidated;
        return new Promise(function (resolve, reject) {
            uv.lib.request(__assign(__assign(__assign(__assign({ headers: {
                    "Content-Type": "application/json",
                }, json: options, method: "POST", path: "/api/prepare-deploy", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.cert } : {})), (uv.options.rejectUnauthorized
                ? { rejectUnauthorized: uv.options.rejectUnauthorized }
                : {})), (uv.options.ca ? { ca: uv.options.ca } : {})), function (data) {
                /*
                let data = "";
                res.on("data", (chunk) => {
                  data += chunk;
                  res.on("end", () => {
                    */
                resolve(data);
                /*    });
                  });   */
            }, function (err) {
                reject(err);
            });
            //req.write(JSON.stringify(options));
            //req.end();
            //req.on("error", (e) => {
            //  reject(e);
            //});
        });
    };
    var dataAtName = function (urlOrOptions, options) {
        var urlValidated;
        if (typeof urlOrOptions === "string") {
            urlValidated = validateUrl({ url: urlOrOptions });
        }
        else {
            urlValidated = validateUrl(urlOrOptions);
        }
        var uv = urlValidated;
        return new Promise(function (resolve, reject) {
            uv.lib.request(__assign(__assign(__assign(__assign({ headers: {
                    "Content-Type": "application/json",
                }, json: options, method: "POST", path: "/api/data-at-name", host: uv.options.host }, (uv.options.port ? { port: uv.options.port } : {})), (uv.options.cert ? { cert: uv.options.cert } : {})), (uv.options.rejectUnauthorized
                ? { rejectUnauthorized: uv.options.rejectUnauthorized }
                : {})), (uv.options.ca ? { ca: uv.options.ca } : {})), function (data) {
                /*
                let data = "";
                res.on("data", (chunk) => {
                  data += chunk;
                  res.on("end", () => {
                    */
                resolve(data);
                /*     });
                   }); */
            }, function (err) {
                reject(err);
            });
            //req.write(JSON.stringify(options));
            //req.end();
            //req.on("error", (e) => {
            //  reject(e);
            //});
        });
    };

    var _http = /*#__PURE__*/Object.freeze({
        __proto__: null,
        deploy: deploy,
        easyDeploy: easyDeploy,
        validAfterBlockNumber: validAfterBlockNumber,
        exploreDeploy: exploreDeploy,
        blocks: blocks,
        prepareDeploy: prepareDeploy,
        dataAtName: dataAtName
    });

    /* import * as _grpc from "./grpc"; */
    /* export const grpc = _grpc; */
    var http = _http;
    var utils = _utils;

    exports.http = http;
    exports.utils = utils;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
